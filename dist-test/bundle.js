/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./components/BaseComponent.js":
/*!*************************************!*\
  !*** ./components/BaseComponent.js ***!
  \*************************************/
/*! exports provided: BaseComponent */
/*! exports used: BaseComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseComponent; });
/* harmony import */ var _core_Binder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Binder */ "./core/Binder.js");
/* harmony import */ var _core_ChangeWatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/ChangeWatcher */ "./core/ChangeWatcher.js");
/* harmony import */ var _core_Objects__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/Objects */ "./core/Objects.js");
/* harmony import */ var _core_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/helpers */ "./core/helpers.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var BaseComponent = /*#__PURE__*/function (_ChangeWatcher) {
  _inherits(BaseComponent, _ChangeWatcher);

  var _super = _createSuper(BaseComponent);

  function BaseComponent() {
    var _this;

    _classCallCheck(this, BaseComponent);

    _this = _super.call(this);
    /** @type {Binder} */

    _this.binder = null;
    /** @type {string} */

    _this.template = null;
    _this.events = null;
    /** fragment with children */

    _this.templateFragment = null;
    /** update children*/

    _this.templateUpdate = function () {};

    _core_Objects__WEBPACK_IMPORTED_MODULE_2__[/* Objects */ "a"].bindMethods(_assertThisInitialized(_this));
    /** reference to the parent page */

    _this.parentPage = null;
    /**@type {HTMLElement} */

    _this.container = null;
    _this.attributes = {};
    _this.components = [];
    return _this;
  }

  _createClass(BaseComponent, [{
    key: "_onInit",

    /** 
     *  ***DO NOT OVERRIDE*** 
     * This function is called once after the container is bound to context
     * @param {HTMLElement} container
     */
    value: function _onInit(container) {
      this.container = container;

      _get(_getPrototypeOf(BaseComponent.prototype), "startWatch", this).call(this); //register my self with the basePage components, so it knows what to destroy later


      if (this.parentPage) {
        if (!this.parentPage.components) {
          this.parentPage.components = [];
        }

        this.parentPage.components.push(this);
      }

      this.onInit(this.container);
    }
    /** 
     *  ***Override*** 
     * This functinon is called once after the container is bound to context
     * @param {HTMLElement} container
     */

  }, {
    key: "onInit",
    value: function onInit(container) {}
    /**
     * Overrides ChangeWatcher.update method
     */

  }, {
    key: "update",
    value: function update() {
      if (this.onBeforeUpdate() === false) return;
      if (this.binder) this.binder.updateElements();
      this.onUpdate();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.onDestroy) {
        this.onDestroy();
      }

      if (this.components) {
        for (var i in this.components) {
          var comp = this.components[i];

          if (comp instanceof BaseComponent) {
            Object(_core_helpers__WEBPACK_IMPORTED_MODULE_3__[/* tryCall */ "g"])(comp, comp.destroy);
            delete this.components[i];
          }
        }
      }

      if (this.binder) {
        this.binder.destroy();
      }

      this.stopWatch();
      _core_Objects__WEBPACK_IMPORTED_MODULE_2__[/* Objects */ "a"].strip(this);
    }
    /**
     * ***Override***
     **/

  }, {
    key: "onDestroy",
    value: function onDestroy() {}
    /**
     * ***Override***
     * Called before UI is updated
     * Return false to cancel update
     * @return {void|boolean}
     **/

  }, {
    key: "onBeforeUpdate",
    value: function onBeforeUpdate() {}
    /**
     * ***Override***
     **/

  }, {
    key: "onUpdate",
    value: function onUpdate() {}
  }, {
    key: "ref",
    get: function get() {
      return this;
    }
  }]);

  return BaseComponent;
}(_core_ChangeWatcher__WEBPACK_IMPORTED_MODULE_1__[/* ChangeWatcher */ "a"]);

/***/ }),

/***/ "./components/Forms.js":
/*!*****************************!*\
  !*** ./components/Forms.js ***!
  \*****************************/
/*! exports provided: Forms */
/*! exports used: Forms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Forms; });
/* harmony import */ var _core_Objects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../core/Objects */ "./core/Objects.js");
/* harmony import */ var _core_form_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../core/form_validator */ "./core/form_validator.js");
/* harmony import */ var _core_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../core/text */ "./core/text.js");
/* harmony import */ var _BaseComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BaseComponent */ "./components/BaseComponent.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _core_DateTime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../core/DateTime */ "./core/DateTime.js");
/* harmony import */ var _core_Translate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/Translate */ "./core/Translate.js");
/* harmony import */ var _core_helpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/helpers */ "./core/helpers.js");
/* harmony import */ var _core_simple_confirm__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/simple_confirm */ "./core/simple_confirm.js");
/* harmony import */ var _core_DOM__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../core/DOM */ "./core/DOM.js");
/* harmony import */ var _core_FileAccess__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../core/FileAccess */ "./core/FileAccess.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }












var Forms = /*#__PURE__*/function (_BaseComponent) {
  _inherits(Forms, _BaseComponent);

  var _super = _createSuper(Forms);

  /**
   * Forms Directive. Generate forms from JSON data
   * @param {FieldTemplate[]} formTemplate 
   * @param {*} [data]
   * @param {*} [errors]
   * @param {{nestedData?:boolean, formClass?:string, fieldClass?:string}} [options]
   */
  function Forms(formTemplate, data, errors, options) {
    var _this;

    _classCallCheck(this, Forms);

    _this = _super.call(this);
    _this.formTemplate = formTemplate;
    _this.data = data || {};
    _this.extraData = {};
    _this.errors = errors || {};
    _this.options = {
      nestedData: true,
      formClass: 'formgroup',
      fieldClass: 'fieldgroup'
    };
    Object.assign(_this.options, options);
    _this.attrEvents = {};
    _this.types = {};
    _this.arrays = {};
    _this.elementItems = {};
    _this.events = {
      input: function input(ev) {
        setTimeout(function () {
          _this.onInput(ev);
        }, 0);
      },
      click: function click(ev) {
        //notify in the next render cycle.
        setTimeout(function () {
          _this.onClick(ev);
        }, 0);
      },
      change: function change(ev) {
        //validate element on change
        if (ev.target.name) {
          //validate in the next render cycle.
          setTimeout(function () {
            if (_this.validator) {
              _this.validator.validateField(ev.target.name);

              _this.binder.updateElements();
            }
          }, 0);
        } //notify in the next render cycle.


        setTimeout(function () {
          if (_this.onChange == _this.events.change) {
            console.error(ev);
            throw new Error("Change triggers infinite loop!");
          }

          _this.onChange(ev);
        }, 0);
      },
      focus: function focus(ev) {
        var _name = ev.target.name;

        if (_name) {
          setTimeout(function () {
            _this.fields[_name].attributes.active = true;
          });
        }
      },
      blur: function blur(ev) {
        var _name = ev.target.name;

        if (_name) {
          setTimeout(function () {
            _this.fields[_name].attributes.active = null;
          });
        }
      }
    };
    _this.field_definitions = Forms.field_definitions;
    _this.template = "<div [directive]=\"this.formHTML\"></div>";

    _this.updateTemplate(formTemplate);

    return _this;
  }

  _createClass(Forms, [{
    key: "setDataValuesFromFields",
    value: function setDataValuesFromFields() {
      var _this2 = this;

      _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].forEach(this.fields, function (field, key) {
        try {
          var currentValue = _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].getPropertyByPath(_this2.data, key);

          if (field.value !== undefined && currentValue == undefined) {
            _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(_this2.data, key, field.value);
          }
        } catch (err) {}
      });
    }
  }, {
    key: "updateTemplate",
    value: function updateTemplate(formTemplate) {
      this.formTemplate = formTemplate;
      this.validator = new _core_form_validator__WEBPACK_IMPORTED_MODULE_1__[/* FormValidator */ "a"](this.data, formTemplate, this.errors, this.options);
      this.fields = this.validator.fields;
      this.setDataValuesFromFields();
      this.validator.validateVisibility();
      var html = this.renderArray(this.formTemplate, null);
      this.formHTML = html;
    } ///listen to attempts to overwrite onChange listener 

  }, {
    key: "onChangeChange",
    value: function onChangeChange(value) {
      if (Object(util__WEBPACK_IMPORTED_MODULE_4__["isObject"])(this.events) && value == this.events.change) {
        console.error(value);
        throw new Error("Attempt to override Forms.onChange callback with Forms.events.change will lead to infinite loop!");
      }
    } ///listen to attempts to overwrite onInput listener 

  }, {
    key: "onInputChange",
    value: function onInputChange(value) {
      if (Object(util__WEBPACK_IMPORTED_MODULE_4__["isObject"])(this.events) && value == this.events.input) {
        console.error(value);
        throw new Error("Attempt to override Forms.onInput callback with Forms.events.input will lead to infinite loop!");
      }
    } ///listen to attempts to overwrite onClick listener 

  }, {
    key: "onClickChange",
    value: function onClickChange(value) {
      if (Object(util__WEBPACK_IMPORTED_MODULE_4__["isObject"])(this.events) && value == this.events.click) {
        console.error(value);
        throw new Error("Attempt to override Forms.onClick callback with Forms.events.click will lead to infinite loop!");
      }
    }
    /** 
     * @param {HTMLInputElementChangeEvent} event
     */

  }, {
    key: "onChange",
    value: function onChange(event) {}
    /** 
     * @param {HTMLInputElementChangeEvent} event
     */

  }, {
    key: "onInput",
    value: function onInput(event) {}
    /** 
     * @param {HTMLInputElementChangeEvent} event
     */

  }, {
    key: "onClick",
    value: function onClick(event) {}
    /** 
     * @param {HTMLElementMouseEvent} event
     */

  }, {
    key: "onButtonClick",
    value: function onButtonClick(event) {}
  }, {
    key: "_formatSplitDateField",
    value: function _formatSplitDateField(evt, name, isTime) {
      /** @type {HTMLInputElement} */
      var el = evt.target; //console.log(evt, name, isTime);

      var date = null;
      var time = null;

      if (isTime) {
        date = _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].getPropertyByPath(this.data, name);
        time = _core_DateTime__WEBPACK_IMPORTED_MODULE_5__[/* DateTime */ "a"].fromHumanTime(el.value);
      } else {
        date = _core_DateTime__WEBPACK_IMPORTED_MODULE_5__[/* DateTime */ "a"].fromHumanDate(el.value);
        time = _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].getPropertyByPath(this.data, name);
      }

      var newDate = _core_DateTime__WEBPACK_IMPORTED_MODULE_5__[/* DateTime */ "a"].combineDateTime(date, time);
      _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(this.data, name, newDate); //console.log(newDate);
    }
  }, {
    key: "_formatPhoneNumber",
    value: function _formatPhoneNumber(evt) {
      var el = evt.target;
      var selS = el.selectionStart;
      var selE = el.selectionStart;
      var old = el.value;
      setTimeout(function () {
        el.value = _core_text__WEBPACK_IMPORTED_MODULE_2__[/* Text */ "a"].formatPhone(el.value, {
          3: '-',
          6: '-',
          10: 'x'
        }
        /*{3:'-',6:'-'}/**/
        );
        var dif = el.value.length - old.length;
        el.selectionStart = selS + dif;
        el.selectionEnd = selE + dif;
      }, 1);
    }
    /**
     * 
     * @param {FieldTemplate[]} formTemplate 
     */

  }, {
    key: "renderArray",
    value: function renderArray(formTemplate, parentPath) {
      var html = [];

      for (var i in formTemplate) {
        if (!formTemplate.hasOwnProperty(i)) continue;
        var el = formTemplate[i];

        if (el.type) {
          if (el.type == "form") {
            var ret = this.render_field(el, parentPath);

            if (ret) {
              html.push(ret);
            }
          } else {
            /*if ((el.name == null || el.name==undefined)){
            el.name = i;
            }*/
            //do we support nested data?
            if (!this.options.nestedData) {
              parentPath = null;
            }

            if (parentPath && el.name) {//el._name = parentPath + "." + el.name ;
              //el._parent = Objects.getPropertyByPath(this.formTemplate, el._name);
            } else {} //el._name = el.name;
              //create value in each structure

              /*if (! Objects.getPropertyByPath(this.data, el._name))
              Objects.setPropertyByPath(this.data, el._name, el.value != undefined ? el.value : null);
              if (! Objects.getPropertyByPath(this.errors, el._name))
              Objects.setPropertyByPath(this.errors, el._name, null);
              if (! Objects.getPropertyByPath(this.attributes, el._name))
              Objects.setPropertyByPath(this.attributes, el._name, null);
              */


            var ret = this.render_field(el, parentPath);

            if (ret) {
              html.push(ret);
            }
          }
        }
      }

      return html.join('');
    }
    /**
     * 
     * @param {FieldTemplate} el 
     * @param {string} parentPath 
     */

  }, {
    key: "render_field",
    value: function render_field(el, parentPath) {
      /** @type {string} */
      el.type = el.type ? el.type.toLowerCase() : '';

      if (this.field_definitions[el.type]) {
        if (this.fields[el._name] && el.attributes) {
          Object.assign(this.fields[el._name].attributes, el.attributes);
        }

        if (el.items) {
          this.elementItems[el._name] = el.items;
        }

        return Object(_core_helpers__WEBPACK_IMPORTED_MODULE_7__[/* tryCall */ "g"])(this, this.field_definitions[el.type], this, el, parentPath);
      } else {
        throw Error("Unknown form element type:" + el.type + " in " + JSON.stringify(el, null, '\t'));
      }
    }
  }, {
    key: "assertValidateRuleHas",
    value: function assertValidateRuleHas(el, mustHave) {
      if (!el.validateRule) el.validateRule = mustHave;else if (el.validateRule.indexOf('email') < 0) el.validateRule = el.validateRule + "|" + mustHave;
    }
    /**
     * 
     * @param {FieldTemplate} el 
     * @param {string} [parentPath]
     */

  }, {
    key: "addForm",
    value: function addForm(el, parentPath) {
      //do we support nested data?
      if (!this.options.nestedData) {
        parentPath = null;
      }

      if (parentPath && el.name) {//el._name = parentPath + "." + el.name ;
      } else {//el._name = el.name;
        }

      if (el._name) {
        //if create value in each structure
        if (!_core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].getPropertyByPath(this.data, el._name)) _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(this.data, el._name, {});
        if (!_core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].getPropertyByPath(this.errors, el._name)) _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(this.errors, el._name, {});
      }

      return this.renderFormHTML(el, this.renderArray(el.items, el._name));
    }
    /**
     * 
     * @param {FieldTemplate} el 
     * @param {string} [parentPath]
     */

  }, {
    key: "addArray",
    value: function addArray(el, parentPath) {
      //do we support nested data?
      if (!this.options.nestedData) {
        parentPath = null;
      }

      if (parentPath && el.name) {
        el._name = parentPath + "." + el.name;
      } else {
        el._name = el.name;
      }

      if (el._name) {
        //if create value in each structure
        if (!this.getPropertyByPath(this.data, el._name)) _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(this.data, el._name, {});
        if (!this.getPropertyByPath(this.errors, el._name)) _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(this.errors, el._name, {});
      }

      this.arrays[el.name] = [""];
      return this.renderArrayHTML(el, this.renderArray(el.items, el._name));
    }
  }, {
    key: "getVisibleData",
    value: function getVisibleData() {
      return this.validator.getVisibleData();
    }
    /**
     * 
     * @param {FieldTemplate} el 
     * @param {string} childrenHTML
     */

  }, {
    key: "renderArrayHTML",
    value: function renderArrayHTML(el, childrenHTML) {
      /** @type {FieldTemplate} */
      var buttonEl = {
        name: el.name + "_add_button",
        _name: el.name + "_add_button",
        type: "button",
        value: el.title,
        attributes: {
          click: function click() {
            this.arrays[el.name].push("");
          }
        }
      };
      return "<div>\n" + this.addButton(buttonEl) + "\n<div [foreach]=\"this.arrays['" + el.name + "']\">\n" + childrenHTML + "\n</div>\n</div>\n";
    }
  }, {
    key: "renderFormHTML",
    value: function renderFormHTML(el, childrenHTML) {
      return "\n<div class=\"" + this.options.formClass + " " + el["class"] + "\" [if]=\"this.getIsVisible('" + (el._name ? el._name : '') + "')\">\n" + this.addTitle(el) + "\n" + childrenHTML + "\n</div>\n";
    }
  }, {
    key: "renderFieldGroupHTML",
    value: function renderFieldGroupHTML(el, elHTML, noTitle, noErrorHint) {
      var isRequired = el.validateRule ? el.validateRule.includes('required') : null;
      return "\n<div class=\"" + this.options.fieldClass + " " + (el["class"] ? ' ' + el["class"] : '') + " " + (el.type ? ' ' + el.type : '') + " " + (isRequired ? 'required' : '') + "\" [class]=\"this.getClassName('" + (el._name ? el._name : '') + "')\" [if]=\"this.getIsVisible('" + (el._name ? el._name : '') + "')\">\n" + this.addTitle(el) + "\n" + (Object(util__WEBPACK_IMPORTED_MODULE_4__["isArray"])(elHTML) ? elHTML.join('') : elHTML) + "\n" + (noErrorHint ? '' : this.addErrorHint(el)) + "\n</div>";
    }
  }, {
    key: "renderSelectGroupHTML",
    value: function renderSelectGroupHTML(el, elHTML) {
      return "<div [if]=\"this.getIsVisible('" + (el._name ? el._name : '') + "')\">" + elHTML + "</div>";
    }
  }, {
    key: "getPropertyByPath",
    value: function getPropertyByPath(object, path) {
      try {
        var ret = _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].getPropertyByPath(object, path);
      } catch (ex) {
        return undefined;
      }

      return ret;
    }
  }, {
    key: "getIsVisible",
    value: function getIsVisible(_name) {
      if (empty(_name)) {
        return true;
      }

      return !this.fields[_name].attributes.hidden;
    }
  }, {
    key: "getClassName",
    value: function getClassName(_name) {
      var classnames = [];

      if (empty(_name)) {
        return "";
      }

      var ret = this.getPropertyByPath(this.errors, _name);

      if (ret) {
        classnames.push('error');
      }

      var ret = this.getPropertyByPath(this.data, _name);

      if (ret !== null && ret !== undefined && ret !== "") {
        classnames.push('filled');
      }

      if (this.fields[_name] && this.fields[_name].attributes && this.fields[_name].attributes.active) {
        classnames.push('active');
      }

      return classnames.join(' ');
    }
  }, {
    key: "getError",
    value: function getError(_name) {
      if (empty(_name)) {
        return "";
      }

      var ret = this.getPropertyByPath(this.errors, _name);
      return ret;
    }
    /**
     * 
     * @param {FieldTemplate} el 
     * @param {KeyValuePair} [override]
     */

  }, {
    key: "addInput",
    value: function addInput(el, override) {
      var opt = {
        name: el._name,
        type: "text",
        placeholder: el.placeholder
      };
      Object.assign(opt, override, el.attributes); //${this.generateAttributes(opt)}

      return "\n<div class=\"fieldrow\">\n<input bind=\"" + this.refactorAttrName('this.data.' + el._name) + "\" name=\"" + el._name + "\" [attribute]=\"this.getFieldAttributes('" + el._name + "')\" " + this.generateAttributes(opt) + " />" + (el.unit || el.icon ? "<div class=\"icon\">\n" + (el.unit ? el.unit : '') + "\n" + (el.icon ? "<i class=\"" + el.icon + "\"></i>" : '') + "\n</div>" : '') + "</div>";
    }
    /**
    * 
    * @param {FieldTemplate} el 
    * @param {KeyValuePair} [override]
    */

  }, {
    key: "addFile",
    value: function addFile(el, override) {
      var opt = {
        name: el._name,
        type: "file",
        placeholder: el.placeholder
      };
      Object.assign(opt, override, el.attributes);

      if (!el.icon) {
        el.icon = "fas fa-upload";
      } // bind="${this.refactorAttrName('this.data.' + el._name + '.name')}"


      _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(this.data, this.refactorAttrName(el._name + '.name'), null);
      return "<div class=\"fieldrow\">\n<label class=\"input file\">{{ this.getFileFieldFileName('" + el._name + "') || '" + Object(_core_Translate__WEBPACK_IMPORTED_MODULE_6__[/* Translate */ "a"])(el.placeholder || 'No file chosen') + "' }}\n<input type=\"file\" bind=\"" + this.refactorAttrName('this.data.' + el._name + '.name') + "\" " + this.generateAttributes(opt) + " onchange=\"this.onFileFieldChanged('" + el._name + "', $event)\"/>\n</label>" + (el.unit || el.icon ? "<div class=\"icon\">\n" + (el.unit ? el.unit : '') + "\n" + (el.icon ? "<i class=\"" + el.icon + "\"></i>" : '') + "\n</div>" : '') + "</div>";
    } //{type:'password', autocorrect:"off", autocapitalize:"off"}

    /**
    * 
    * @param {FieldTemplate} el 
    * @param {KeyValuePair} [override]
    */

  }, {
    key: "addPassword",
    value: function addPassword(el, override) {
      var opt = {
        name: el._name,
        autocorrect: "off",
        autocapitalize: "off"
      };
      Object.assign(opt, override, el.attributes);
      this.types[el._name] = "password";
      return "<div class=\"fieldrow\">\n<input bind=\"" + this.refactorAttrName('this.data.' + el._name) + "\" name=\"" + el._name + "\" " + this.generateAttributes(opt) + " [attribute]=\"{type: this.types['" + el._name + "']}\"/>" + (true ? "<div class=\"icon\" onclick=\"this.togglePasswordType('" + el._name + "')\">\n<i class=\"fas fa-eye\" [if]=\"this.types['" + el._name + "']=='password'\"></i>\n<i class=\"fas fa-eye-slash\" [if]=\"this.types['" + el._name + "']=='text'\"></i>\n</div>" : undefined) + '</div>';
    }
    /**
    * 
    * @param {FieldTemplate} el 
    * @param {KeyValuePair} [override]
    */

  }, {
    key: "addTextArea",
    value: function addTextArea(el, override) {
      var opt = {
        name: el._name,
        type: "text"
      };
      Object.assign(opt, override, el.attributes);
      return "<textarea bind=\"" + this.refactorAttrName('this.data.' + el._name) + "\" " + this.generateAttributes(opt) + "></textarea>";
    }
    /**
    * 
    * @param {FieldTemplate} el 
    * @param {KeyValuePair} [override]
    */

  }, {
    key: "addCheck",
    value: function addCheck(el, override) {
      var opt = {
        name: el._name,
        type: "checkbox"
      };
      Object.assign(opt, override, el.attributes);
      return "<label class=\"toggle\"><span class=\"text\">" + el.title + "</span>\n<input bind=\"" + this.refactorAttrName('this.data.' + el._name) + "\" " + this.generateAttributes(opt) + " />\n<span class=\"slider round\"></span>\n</label>\n";
    }
    /**
    * 
    * @param {FieldTemplate} el 
    * @param {KeyValuePair} [override]
    */

  }, {
    key: "addRadio",
    value: function addRadio(el, override) {
      var _this3 = this;

      var opt = {
        name: el._name,
        type: "radio"
      };
      Object.assign(opt, override, el.attributes);
      var elems = "<div class=\"fieldrow\">";
      _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].forEach(el.items, function (item) {
        elems += "<label class=\"toggle\">\n<input bind = \"" + _this3.refactorAttrName('this.data.' + el._name) + "\" format=\"" + (el.dataType ? el.dataType : '') + "\" value = \"" + (item.value !== null ? item.value : '') + "\" " + _this3.generateAttributes(opt) + " />\n<span class=\"radio round\"></span>\n" + item.title + "\n</label>\n";
      });
      elems += "</div>";
      return elems;
    }
    /**
    * 
    * @param {FieldTemplate} el 
    * @param {KeyValuePair} [override]
    */

  }, {
    key: "addSelect",
    value: function addSelect(el, override, parentPath) {
      var _this4 = this;

      var opt = {
        name: el._name,
        type: "select",
        format: el.dataType,
        bind: "" + this.refactorAttrName('this.data.' + el._name),
        placeholder: el.placeholder
      };
      Object.assign(opt, override, el.attributes, {
        onchange: "this._onSelectBoxChanged('" + el._name + "')"
      });
      var elem = "<select " + this.generateAttributes(opt) + ">";
      if (el.placeholder) elem = elem + ("<option>" + el.placeholder + "</option>");
      var items_items = "";
      var hasSubItems = false;
      _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].forEach(el.items, function (option) {
        elem = elem + ("<option value=\"" + (option.value === null ? '' : option.value) + "\" title=\"" + (option.placeholder || '') + "\">" + option.title + "</option>");

        if (option.items) {
          hasSubItems = true;
          items_items += "\n        <div [if]=\"" + _this4.refactorAttrName('this.data.' + el._name) + " == " + (Object(util__WEBPACK_IMPORTED_MODULE_4__["isNumber"])(option.value) || option.value == null ? option.value : "'" + option.value + "'") + "\">\n         " + _this4.renderArray(option.items, parentPath) + "\n        </div>";
          /*if (!this.fields[el._name].component) {
            this.fields[el._name].component = new Forms(option.items, this.data);
          }
            items_items += `
          <div [if]="${this.refactorAttrName('this.data.' + el._name)} == ${(isNumber(option.value) || option.value == null ? option.value : "'" + option.value + "'")}">
            <div [component]="${this.refactorAttrName('this.fields.' + el._name + '.component')}"></div>
          </div>`
          */
        }
      });
      elem = elem + "</select>";

      if (hasSubItems) {//this.fields[el._name].component = new Forms([], this.data);
        //items_items += '<div>Sub items go here</div>';
        //items_items += `<div [directive] = "${this.refactorAttrName('this.fields.' + el._name + '.subitems')}" >Sub items go here</div>`;
      }

      return this.renderFieldGroupHTML(el, elem) + this.renderSelectGroupHTML(el, items_items);
    }
  }, {
    key: "_onSelectBoxChanged",
    value: function _onSelectBoxChanged(_name) {} //if (this.fields[_name].i)

    /**
    * 
    * @param {FieldTemplate} el 
    */

  }, {
    key: "addTitle",
    value: function addTitle(el) {
      if (!el.title && !el.info) return '';
      return "<label>{{ Translate(this.fields['" + el._name + "'].title) }}" + (el.info ? this.addInfo(el) : '') + "</label>";
    }
    /**
    * 
    * @param {FieldTemplate} el 
    */

  }, {
    key: "addInfo",
    value: function addInfo(el) {
      //if (!el.title) return '';
      return "<i class=\"fas fa-question-circle\" onclick=\"this.showInfoText('" + el._name + "')\"></i>";
    }
    /**
    * 
    * @param {FieldTemplate} el 
    */

  }, {
    key: "addErrorHint",
    value: function addErrorHint(el) {
      return "<div class=\"hint\" [class]=\"this.getError('" + el._name + "') ? 'error' : ''\">{{ this.getError('" + el._name + "') || '" + (el.hint ? el.hint : '') + "' }}</div>";
    }
  }, {
    key: "showInfoText",
    value: function showInfoText(name) {
      if (Object(util__WEBPACK_IMPORTED_MODULE_4__["isObject"])(this.fields[name].info)) {
        Object(_core_simple_confirm__WEBPACK_IMPORTED_MODULE_8__[/* Alert */ "a"])(this.fields[name].info.text, this.fields[name].info.callback, this.fields[name].info.title);
      } else if (Object(util__WEBPACK_IMPORTED_MODULE_4__["isString"])(this.fields[name].info)) {
        Object(_core_simple_confirm__WEBPACK_IMPORTED_MODULE_8__[/* Alert */ "a"])(this.fields[name].info);
      } else {
        console.error("Forms.fields['" + name + "'].info value is not supported", this.fields[name].info);
      }
    }
    /**
    * Split form name from property name 
    * @param {string} name 
    */

  }, {
    key: "refactorAttrName",
    value: function refactorAttrName(name) {
      //if name contains .number parts, replace them with array notation
      return name.replace(/\.(\d{1}[^\.]*)/, function (a, b, c, d) {
        //console.log(arguments);
        return "['" + b + "']";
      });
    }
    /**
    * 
    * @param {FieldTemplate} el 
    */

  }, {
    key: "addLabel",
    value: function addLabel(el, override) {
      var opt = {
        onclick: "this.onClick($event);"
      };
      Object.assign(opt, {
        name: el._name
      }, el.attributes, override);
      return "\n<div class=\"label\" " + this.generateAttributes(opt) + " >" + (el.value != null ? el.value : "") + "</div>" + (el.unit || el.icon ? "<div class=\"icon\">\n" + (el.unit ? el.unit : '') + "\n" + (el.icon ? "<i class=\"" + el.icon + "\"></i>" : '') + "\n</div>" : '');
    }
    /**
    * 
    * @param {FieldTemplate} el 
    */

  }, {
    key: "addHtml",
    value: function addHtml(el) {
      var opt = Object.assign({}, {
        name: el._name
      }, {
        onclick: "this.onClick($event);"
      }, el.attributes);
      return "<div class=\"html\" " + this.generateAttributes(opt) + ">" + (el.value != null ? el.value : "") + "</div>";
    }
    /**
    * 
    * @param {FieldTemplate} el 
    */

  }, {
    key: "addLink",
    value: function addLink(el) {
      var opt = Object.assign({}, {
        onclick: "this.onClick($event);"
      }, el.attributes);
      return "<div class=\"link\" " + this.generateAttributes(opt) + " name=\"" + el._name + "\">" + (el.value != null ? el.value : "") + "</div>" + (el.unit || el.icon ? "<div class=\"icon\">\n      " + (el.unit ? el.unit : '') + "\n      " + (el.icon ? "<i class=\"" + el.icon + "\"></i>" : '') + "\n      </div>" : '');
    }
    /**
    * 
    * @param {FieldTemplate} el 
    */

  }, {
    key: "addButton",
    value: function addButton(el) {
      var opt = Object.assign({}, {
        name: el.name
      }, el.attributes);
      return "\n    <button " + this.generateAttributes(opt) + " name=\"" + el._name + "\" onclick=\"this.onButtonClick($event);\">" + (el.icon ? "<i class=\"" + el.icon + "\"></i>" : '') + (el.value || '') + "</button>\n    ";
    }
    /**
    * 
    * @param {FieldTemplate} el 
    */

  }, {
    key: "addButtons",
    value: function addButtons(el) {
      var items = el.items.map(function (btn) {
        return "<button class=\"link\" bind name=\"" + btn.name + "\">" + btn.title + "</button>";
      });
      return "\n<div class=\"buttons\">\n" + items.join('') + "\n</div>\n";
    }
  }, {
    key: "togglePasswordType",
    value: function togglePasswordType(name) {
      if (this.types[name] === "text") this.types[name] = "password";else this.types[name] = "text";
    }
  }, {
    key: "getFieldAttributes",
    value: function getFieldAttributes(_name) {
      if (empty(_name)) return null;
      return this.fields[_name] ? this.fields[_name].attributes : {};
    }
  }, {
    key: "generateAttributes",
    value: function generateAttributes(opt) {
      var _this5 = this;

      var strOpts = "";
      var name = opt.name;
      _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].forEach(opt, function (val, key) {
        if (key !== "input" && key !== "click" && key !== "change") {
          if (val !== null && val !== undefined && key != "hidden") strOpts += key + '="' + val + '" ';
        } else {
          !_this5.attrEvents[name] ? _this5.attrEvents[name] = {} : null;
          _this5.attrEvents[name][key] = val;
          strOpts += 'on' + key + ("=\"this.attrEvents['" + name + "']['" + key + "']()\"");
        }
      });
      return strOpts;
    }
    /**
    * 
    * @param {Event} event  
    */

  }, {
    key: "transferEventToChildInput",
    value: function transferEventToChildInput(event) {
      var el = event.target;
      var input = Object(_core_DOM__WEBPACK_IMPORTED_MODULE_9__[/* DOM */ "a"])(el).find('input')[0];
      input.dispatchEvent(new Event(event.type));
    }
  }, {
    key: "trimDisplayFileName",
    value: function trimDisplayFileName(fileName) {
      if (!fileName || !Object(util__WEBPACK_IMPORTED_MODULE_4__["isString"])(fileName)) {
        return "";
      }

      return fileName.split(/\\|\//).pop();
    }
  }, {
    key: "getFileFieldFileName",
    value: function getFileFieldFileName(name) {
      var v = _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].getPropertyByPath(this.data, name);

      if (v && v.name) {
        return this.trimDisplayFileName(v.name) + " (" + Object(_core_helpers__WEBPACK_IMPORTED_MODULE_7__[/* round */ "f"])(v.size / 1024) + " kB)";
      }

      return "";
    }
  }, {
    key: "onFileFieldChanged",
    value: function onFileFieldChanged(name, event) {
      if (!_core_FileAccess__WEBPACK_IMPORTED_MODULE_10__[/* FileAccess */ "a"].isSupported) {
        console.warn("File upload is not supported!");
        return;
      }
      /** @type {HTMLInputElement} */


      var fileFiled = event.target;
      var file = fileFiled.files[0]; //var name = fileFiled.getAttribute("bind");

      if (!file) {
        _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(this.data, name, {
          name: null
        });
        return;
      }

      _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(this.data, name, {
        name: file.name,
        type: file.type,

        /*dataURL: dataURL,*/
        fileBlob: file,
        size: file.size
      });
      /*FileAccess.ReadFile(fileFiled.files[0]).DataURL().then( dataURL =>{
      Objects.setPropertyByPath(this.data, name, {name: file.name, type:file.type, dataURL: dataURL, fileBlob:file, size:file.size});
      this.events.change(event);
      }).catch(err=>{
      console.warn(err);
      Objects.setPropertyByPath(this.data, name, {name: null});
      this.events.change(event);
      });*/
    }
  }]);

  return Forms;
}(_BaseComponent__WEBPACK_IMPORTED_MODULE_3__[/* BaseComponent */ "a"]);
/** @type {{[key:string]: function(Forms, FieldTemplate, string): string}} */

Forms.field_definitions = {
  form: function form(forms, el, parentPath) {
    return forms.addForm(el, parentPath
    /*? parentPath +'.' +el.name : el.name*/
    );
  },
  array: function array(forms, el, parentPath) {
    return forms.addArray(el, parentPath
    /*? parentPath +'.' +el.name : el.name*/
    );
  },
  email: function email(forms, el, parentPath) {
    forms.assertValidateRuleHas(el, "email");
    return forms.renderFieldGroupHTML(el, [forms.addInput(el, {
      type: 'email'
    })]);
  },
  file: function file(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addFile(el)]);
  },
  text: function text(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addInput(el, null)]);
  },
  date: function date(forms, el, parentPath) {
    el.icon = "far fa-calendar-alt";
    return forms.renderFieldGroupHTML(el, [forms.addInput(el, {
      date: '',
      format: 'date'
    })]);
  },
  datetime: function datetime(forms, el, parentPath) {
    el.icon = "far fa-calendar-alt";
    return forms.renderFieldGroupHTML(el, [forms.addInput(el, {
      dateTime: '',
      format: 'dateTime'
    })]);
  },
  time: function time(forms, el, parentPath) {
    el.icon = "far fa-clock";
    return forms.renderFieldGroupHTML(el, [forms.addInput(el, {
      time: '',
      format: 'time'
    })]);
  },
  split: function split(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, ['<div class="split" style="width:50%">' + forms.addInput(el.items[0], {
      type: el.items[0].type
    }) + '</div>', '<div class="split" style="width:50%">' + forms.addInput(el.items[1], {
      type: el.items[1].type
    }) + '</div>']);
  },
  "date-time": function dateTime(forms, el, parentPath) {
    var dateEl = Object.assign({}, el);
    var timeEl = Object.assign({}, el);
    dateEl._name += "_date";
    dateEl.icon = "far fa-calendar-alt";
    timeEl._name += "_time";
    timeEl.icon = "far fa-clock";
    var dateTime = _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].getPropertyByPath(forms.data, el._name);
    _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(forms.data, dateEl._name, dateTime);
    _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].setPropertyByPath(forms.data, timeEl._name, dateTime);
    return forms.renderFieldGroupHTML(el, [
    /*html*/
    "<div style=\"display:flex;flex-direction:row\">",
    /*html*/
    "<div class=\"split\" style=\"width:60%\">" + forms.addInput(dateEl, {
      date: '',
      format: 'date',
      onchange: "this._formatSplitDateField($event,'" + el._name + "',false)"
    }) + '</div>',
    /*html*/
    "<div class=\"split\" style=\"width:40%\">" + forms.addInput(timeEl, {
      time: '',
      format: 'time',
      onchange: "this._formatSplitDateField($event,'" + el._name + "',true)"
    }) + '</div>',
    /*html*/
    "</div>"]);
  },
  number: function number(forms, el, parentPath) {
    forms.assertValidateRuleHas(el, "numeric");
    var format = el.attributes && el.attributes.format ? undefined : "number:2";
    return forms.renderFieldGroupHTML(el, [forms.addInput(el, {
      type: 'text',
      number: "",
      format: format,
      pattern: "[0-9]*",
      novalidate: true
    })]);
  },
  password: function password(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addPassword(el, null)]);
  },
  phone: function phone(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addInput(el, {
      type: 'tel',
      oninput: "this._formatPhoneNumber($event)"
    })]);
  },
  hidden: function hidden(forms, el, parentPath) {
    return "";
  },
  textarea: function textarea(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addTextArea(el, null)]);
  },
  checkbox: function checkbox(forms, el, parentPath) {
    var el_ch = _core_Objects__WEBPACK_IMPORTED_MODULE_0__[/* Objects */ "a"].copy(el);
    el_ch.title = "";
    return forms.renderFieldGroupHTML(el_ch, [forms.addCheck(el, null)], true);
  },
  radio: function radio(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addRadio(el, null)]);
  },
  select: function select(forms, el, parentPath) {
    return forms.addSelect(el, null, parentPath);
  },
  label: function label(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addLabel(el)], null, true);
  },
  link: function link(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addLink(el)], null, true);
  },
  button: function button(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addButton(el)]);
  },
  buttons: function buttons(forms, el, parentPath) {
    return forms.renderFieldGroupHTML(el, [forms.addButtons(el)]);
  },
  html: function html(forms, el, parentPath) {
    return forms.addHtml(el);
  }
};

/***/ }),

/***/ "./core/Binder.js":
/*!************************!*\
  !*** ./core/Binder.js ***!
  \************************/
/*! exports provided: Binder, removeVDOMElement */
/*! exports used: Binder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Binder; });
/* unused harmony export removeVDOMElement */
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./core/helpers.js");
/* harmony import */ var _components_BaseComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/BaseComponent */ "./components/BaseComponent.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Watcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Watcher */ "./core/Watcher.js");
/* harmony import */ var _DateTime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DateTime */ "./core/DateTime.js");
/* harmony import */ var _Objects__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Objects */ "./core/Objects.js");
/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DOM */ "./core/DOM.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }











var htmlparser = __webpack_require__(/*! htmlparser2 */ "./node_modules/htmlparser2/lib/index.js");
/** 
 * @constructor 
 * @param {*} context
 */


var Binder = function Binder(context) {
  var getterCashe = {};
  /** @type {Binder} */

  var self = this;
  /** @type {vDom} */

  this.vdom = null;
  this.context = context || this;
  /** @type {{[key:string]:any}} */

  this.injectVars = {};
  var EAttrResult = {
    None: undefined,
    NodeChanged: 1,
    SkipChildren: 2,
    NodeChangedSkipChildren: 3
  };
  this.eventCallbacks = {
    change: null,
    focus: null,
    input: null,
    click: null
  };

  function insertBefore(newNode, referenceNode) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode);
  }

  function insertAfter(newNode, referenceNode) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
  }
  /**
   * Insert vDom element and its children after reference Node
   * @param {vDom} vDom 
   * @param {HTMLElement} referenceNode 
   */


  function insertVDomElementAfter(vDom, referenceNode) {
    insertAfter(vDom.elem, referenceNode);

    if (vDom.elem instanceof Comment) {
      insertVDomItemsAfter(vDom.items, vDom.elem);
    }
  }

  function insertVDomItemsAfter(items, referenceNode) {
    if (Object(util__WEBPACK_IMPORTED_MODULE_2__["isArray"])(items)) {
      var frag = document.createDocumentFragment();
      _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(items, function (item) {
        frag.appendChild(item.elem);

        if (item.elem instanceof Comment) {
          insertVDomItemsAfter(item.items, item.elem); //if item is a componenet, re-insert its children too.

          if (item.getters.component) {
            var component = item.getters.component(self, {});
            insertVDomElementAfter(component.binder.vdom, item.elem);
          }
        }
      });
      insertAfter(frag, referenceNode);
    }
  }
  /**
   * 
   * @param {HTMLElement} elem 
   * @param {boolean} [keepEvents] - default false
   */


  function removeElement(elem, keepEvents) {
    if (keepEvents === true) {
      if (elem.parentNode) {
        elem.parentNode.removeChild(elem);
      }
    } else {
      removeDOMElement(elem);
    }
  }

  function removeVDomItems(items, keepEvents) {
    if (Object(util__WEBPACK_IMPORTED_MODULE_2__["isArray"])(items)) {
      _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(items, function (item) {
        removeElement(item.elem, keepEvents); //if item is a comment, remove its items too

        if (item.elem instanceof Comment) {
          removeVDomItems(item.items, keepEvents); //if item is a componenet, remove its vDOM element too.

          if (item.getters.component) {
            var component = item.getters.component(self, {});

            if (component.binder) {
              removeElement(component.binder.vdom.elem, keepEvents);
            }
          }
        }
      });
    }
  }

  function replaceElement(newNode, oldNode) {
    insertBefore(newNode, oldNode);
    removeElement(oldNode);
  }

  this.setContext = function (context) {
    this.context = context;
    return self;
  };
  /**
   * Inject Variables into the scope of the binder
   * @param {{[varName:string]:any}} vars 
   */


  this.setInjectVars = function (vars) {
    self.injectVars = vars;
    return self;
  };
  /**
   * Bind DOM elements that have "bind" attribute with model
   * @eventCallbacks Object, common event handler , {change:function(event){}, focus:function(event){}}
   */


  this.bindElements = function (eventCallbacks, template) {
    //if callbacks is a function then it is change by default
    if (typeof eventCallbacks === "function") self.eventCallbacks.change = eventCallbacks;else if (_typeof(eventCallbacks) === "object") self.eventCallbacks = Object.assign(self.eventCallbacks, eventCallbacks);

    if (!self.context.injectVars) {
      context.injectVars = {};
    }

    var vdom = executeSource(parseElement(template), self.injectVars);
    self.vdom = vdom;
    return self;
  };
  /**
   * Destroy the root DOM and vDOM elements and ALL Hooks
   */


  this.destroy = function () {
    if (self.vdom) {
      removeVDOMElement(self.vdom);
      self.vdom = null;
    }
  }; //escape attribute value


  function escapeAttribute(attrValue) {
    return attrValue.replace(/\n/g, '\\n').replace(/"/g, '\\"');
  }

  function parseElement(template) {
    var handler = new htmlparser.DomHandler(function (error, dom) {
      if (error) {} else {}
    });
    var parser = new htmlparser.Parser(handler, {
      lowerCaseAttributeNames: false,
      decodeEntities: true
    });
    parser.parseComplete(template); //console.log(handler.dom);

    var rootelements = _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].filter(handler.dom, function (el) {
      return el.type == 'tag';
    });

    if (rootelements.length != 1) {
      //throw Error("Error: Template must contain exactly one root element: "+template);
      //wrap elements in fragment			
      return parseAST({
        data: 'div',
        type: 'tag',
        name: 'div',
        attribs: {
          fragment: ""
        },
        children: rootelements
      });
    }

    return parseAST(rootelements[0]);
  }
  /**
   * Turn template HTML into a createDomElement function
   * @param {ASTObject} obj
   * @return {string}
   */


  function parseAST(obj) {
    var thisSorurce = "";
    var wrapDirective = "";

    if (obj.type == 'text') {
      var escaped = escapeAttribute(obj.data); //parse {{moustache}} template within the text node

      var bits = escaped.split(/({{[^{}]*}})/gmi);
      var splitNodes = [];
      _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(bits, function (el) {
        var ret = null;
        el.replace(/{{([^{}]+)}}|(.*)/g, function (a, p1, p2, d) {
          if (p1) {
            splitNodes.push('createElement("#text",{bind:"' + p1 + '"},[], inject)');
          } else if (p2) {
            splitNodes.push('createElement("#text",{},"' + p2 + '", inject)');
          }
        });
      });
      thisSorurce = splitNodes.join(',');
    } else if (obj.type == 'comment') {
      //skip comments
      thisSorurce = null;
    } else {
      thisSorurce = "createElement(";
      var tag = obj.name;
      var componenet = tryGetComponenet(tag); //add '[component]' attribute only if tag name is registered and current context is NOT the instance of that same component class (avoid callstack exception if same tag name is used inside the component.html)

      if (componenet && !(self.context instanceof componenet)) {
        obj.attribs['[component]'] = "Registered('" + tag + "')";
        delete obj.attribs['[directive]'];
      } //var attrText = "{";


      var attributes = {};

      if (obj.attribs) {
        _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(obj.attribs, function (value, key) {
          //value = escapeAttribute(value);
          switch (key) {
            case '[foreach]':
            case '[transition]':
            case '[directive]':
            case '[component]':
            case '[if]':
              wrapDirective = "\"" + key + "\":\"" + value + "\"";
              break;

            default:
              attributes[key] = value;
          }
        });
      } //attrText +="}"


      thisSorurce += "'" + tag + "', " + JSON.stringify(attributes) + "";
      thisSorurce += ",[";

      if (obj.children && obj.children.length > 0) {
        Array.prototype.slice.call(obj.children).forEach(function (child) {
          thisSorurce += parseAST(child);
          thisSorurce += ",";
        });
      }

      thisSorurce += "], inject)";

      if (!Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(wrapDirective)) {
        thisSorurce = "createDirectiveElement('" + tag + "',{" + wrapDirective + "}, function(inject){ return [ " + thisSorurce + "]},inject)";
      }
    }

    return thisSorurce;
  }

  function getHtmlFromRender(tag, attrs) {
    var attrs_str = [""];
    _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(attrs, function (atr, key) {
      attrs_str.push(key + "=\"" + atr + "\"");
    });
    return "<" + tag + attrs_str.join(' ') + "></" + tag + ">";
  }

  this.vdom = null;
  /**
   * @return {vDom}
   */

  function executeSource(parsedSource, inj) {
    //var vdom = [];
    var scope = {
      /** Any kind of element that creates it's own scope AND returns vDOM with fragment and itemBuilder  */
      createDirectiveElement: function createDirectiveElement(tag, attributes, createElements, inject) {
        try {
          //create directive fragment element, into which the deirective contents will be appended
          var directiveFragment = document.createDocumentFragment();
          var attrKeys = Object.keys(attributes);
          var getters = {};
          var attrName = attrKeys[0];
          var bindExpression = attributes[attrName]; //create comment element that will become the anchor for the directive.

          var elem = document.createComment(attrName + "=" + bindExpression + " ");
          directiveFragment.appendChild(elem);
          var rType = getReactivityType(attrName);
          var key = rType.key;

          if (bindExpression) {
            if (key == "foreach") {
              //special handling for foreach. because getter can not be created from foreach attribute [foreach] = "index in this.items as item"
              getters[key] = getForeachAttrParts(bindExpression);
            } else {
              //for all other attributes like [if] = "this.isVisible" create getter for the attribute value
              getters[key] = createGetter(bindExpression, inject);
            }
          } //because directive children are likely to be re-rendered, do not immediately render them. create itemBuilder function


          var itemBuilder = function itemBuilder(inject) {
            var items = createElements(inject);

            if (items[0] && items[0].elem.getAttribute && items[0].elem.getAttribute("fragment") !== null) {
              var frag = document.createDocumentFragment();
              Object(_DOM__WEBPACK_IMPORTED_MODULE_6__[/* DOM */ "a"])(frag).append(items[0].elem.childNodes);
              items[0].elem = frag;
            }

            items[0].INJECT = inject;
            return items[0];
          };

          var vdom = {
            values: {},
            getters: getters,
            setters: {},
            callers: {},
            fragment: directiveFragment,
            elem: elem,
            items: [],
            itemBuilder: itemBuilder
          };
          executeAttribute(key, vdom, inject);
          return vdom;
        } catch (ex) {
          console.error(ex.message + "\n At " + getHtmlFromRender(tag, attributes));
        }
      },

      /**
       * Create element
       * @param {string} tag
       * @param {string[]} attributes
       * @param {string|vDom[]} createElements
       * @param {any} inject
       */
      createElement: function createElement(tag, attributes, createElements, inject) {
        try {
          inject = inject || {};
          var vdomItems = [];
          var elem;
          var attrKeys = Object.keys(attributes);
          var getters = {};
          var setters = {};
          var callers = {};
          var plainAttrs = {};
          var renderImmediately = [];

          if (tag == "#text") {
            if (Object(util__WEBPACK_IMPORTED_MODULE_2__["isString"])(createElements)) {
              elem = document.createTextNode(createElements);
              var vdom = {
                values: {},
                valuesD: {},
                getters: getters,
                setters: setters,
                fragment: null,
                elem: elem,
                items: vdomItems,
                itemBuilder: null,
                context: self.context
              };
            } else {
              elem = document.createTextNode("");
              getters = {
                'bind': createGetter(attributes['bind'], inject)
              };
              var vdom = {
                values: {},
                valuesD: {},
                getters: getters,
                setters: setters,
                fragment: null,
                elem: elem,
                items: vdomItems,
                itemBuilder: null,
                context: self.context
              };
              executeAttribute('bind', vdom, inject);
            }

            return vdom;
          }

          elem = document.createElement(tag);

          for (var i in attrKeys) {
            var bindExpression = null;
            var attrName = attrKeys[i];
            bindExpression = attributes[attrName];
            var rType = getReactivityType(attrName);
            var key = rType.key;

            if (!bindExpression) {
              plainAttrs[key] = null;
              elem.setAttribute(key, attributes[key]);
              continue;
            }

            switch (rType.type) {
              case 'get-set':
                getters[key] = createGetter(bindExpression, inject);
                setters[key] = createSetter(bindExpression, inject); //if element is directly setting, then apply all change and input callbacks

                if (isElementSetting(elem)) {
                  applyCallbacks(elem, self.context, self.eventCallbacks);

                  if (inject.component && inject.component.events) {
                    applyCallbacks(elem, inject.component, inject.component.events);
                  }
                }

                renderImmediately.push(key);
                elem.setAttribute(key, attributes[key]);
                break;

              case 'get':
                getters[key] = createGetter(bindExpression, inject);
                renderImmediately.push(key);
                break;

              case 'call':
                callers[key] = createCaller(bindExpression, inject);
                break;

              default:
                //normal attribute
                //add it to the list of plain string-only attributes - will be used in component
                plainAttrs[key] = bindExpression;
                elem.setAttribute(key, attributes[key]);
                break;
            }
          } //if element has an attribute "fragment" then make the element a fragment so its children can be added directly


          if (plainAttrs['fragment'] !== undefined) {
            elem = document.createDocumentFragment();
          }

          for (var ii = 0; ii < createElements.length; ii++) {
            if (Object(util__WEBPACK_IMPORTED_MODULE_2__["isObject"])(createElements[ii])) {
              if (Object(util__WEBPACK_IMPORTED_MODULE_2__["isArray"])(createElements[ii])) {
                if (createElements[ii].length > 0) createElements[ii].map(function (el) {
                  if (el.vdom) vdomItems.push(el.vdom);
                  elem.appendChild(el.fragment || el.elem);
                });
              } else {
                if (createElements[ii]) vdomItems.push(createElements[ii]);
                elem.appendChild(createElements[ii].fragment || createElements[ii].elem);
              }
            } else if (Object(util__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(createElements[ii])) {
              throw new Error("Item must be an vDom object");
            }
          }

          var vdom = {
            values: {},
            valuesD: {},
            getters: getters,
            setters: setters,
            callers: callers,
            plainAttrs: plainAttrs,
            fragment: null,
            elem: elem,
            items: vdomItems,
            itemBuilder: null,
            context: self.context
          };
          elem['VDOM'] = vdom;

          for (var ii = 0; ii < renderImmediately.length; ii++) {
            executeAttribute(renderImmediately[ii], vdom, inject);
          }

          if (plainAttrs['fragment'] === undefined) {
            bindEventsToContext(elem, inject);
          }

          return vdom;
        } catch (ex) {
          console.error(ex.message + "\n At " + getHtmlFromRender(tag, attributes));
        }
      }
    };
    var exec = new Function('createElement', 'createDirectiveElement', 'context', 'inject', "return (function(createElement,context,inject){return " + parsedSource + "}).call(context,createElement,context, inject);");
    var ret = exec(scope.createElement, scope.createDirectiveElement, self.context, inj);
    return ret;
  }
  /**
   * 
   * @param {string} attrValue 
   */


  function isReactiveGetter(attrValue) {
    var matches = attrValue.match(/^\[(.*)\]$/);

    if (matches) {
      return matches[1];
    }
  }
  /**
   * 
   * @param {string} attrName 
   * @return {{type:'get'|'get-set'|'call'|null,key:string}}
   */


  function getReactivityType(attrName) {
    if (attrName == 'bind') {
      return {
        type: 'get-set',
        key: attrName
      };
    } // [()]


    var matches = attrName.match(/^\[\((.*)\)\]$/);

    if (matches) {
      return {
        type: 'get-set',
        key: matches[1]
      };
    } // ()


    var matches = attrName.match(/^\((.*)\)$/);

    if (matches) {
      return {
        type: 'call',
        key: matches[1]
      };
    } // []


    var matches = attrName.match(/^\[(.*)\]$/);

    if (matches) {
      return {
        type: 'get',
        key: matches[1]
      };
    }

    return {
      type: null,
      key: attrName
    };
  }
  /**
   * 
   * @param {vDom} on 
   */


  function vDomCreateItems(on, inj) {
    var vdom = on.itemBuilder(inj);

    if (vdom.elem instanceof DocumentFragment) {
      on.items = vdom.items;
    } else {
      on.items.push(vdom);
    }

    insertAfter(vdom.elem, on.elem);
  }
  /**
   * Bind element's events to context
   * @param {HTMLElement|Element} elem
   */


  function bindEventsToContext(elem, inject) {
    _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(Array.prototype.slice.call(elem.attributes), function (attr) {
      if (typeof elem[attr.name] == 'function') {
        //var inject = self.injectVars;
        elem[attr.name] = null;
        var s_name = attr.name.substr(2);

        var handler = function handler(evt) {
          updateBoundContextProperty(evt.target);
          var inj = Object.assign({}, self.injectVars, {
            '$event': evt
          }, inject, findElemInject(elem));
          var c = createCaller(attr.value, inj);
          c(inj);
        };

        Object(_DOM__WEBPACK_IMPORTED_MODULE_6__[/* DOM */ "a"])(elem).addEventListener(s_name, handler);
      }
    });
  }
  /**
   * Find closest element with INJECT
   * @param {HTMLElement|Element|Node} elem
   */


  function findElemInject(elem) {
    if (elem.VDOM && elem.VDOM.INJECT) {
      return elem.VDOM.INJECT;
    }

    if (elem.parentNode) {
      return findElemInject(elem.parentNode);
    }

    return null;
  }
  /**
   * Update DOM elements according to bindings
   */


  this.updateElements = function () {
    self.context[_Watcher__WEBPACK_IMPORTED_MODULE_3__[/* isSkipUpdate */ "b"]] = true;
    checkVDomNode(self.vdom, self.injectVars);
    self.context[_Watcher__WEBPACK_IMPORTED_MODULE_3__[/* isSkipUpdate */ "b"]] = false;
    return self;
  };
  /** 
   * @param {vDom} on  
   */


  function checkVDomNode(on, inject) {
    //console.log(on);
    var nodeChanged = EAttrResult.None;

    if (on && on.getters) {
      for (var key in on.getters) {
        if (!on.getters.hasOwnProperty(key)) {
          continue;
        }

        var dirResult = executeAttribute(key, on, inject); //if directives[key](on, inject) returns false, means return right away

        if (dirResult === EAttrResult.SkipChildren) return EAttrResult.SkipChildren;
      }

      for (var i in on.items) {
        if (!on.items.hasOwnProperty(i)) continue;

        if (checkVDomNode(on.items[i], inject) === EAttrResult.NodeChanged) {
          nodeChanged = EAttrResult.NodeChanged;
        }
      }
    } else if (!on) {
      console.log("AAAA");
    }

    return nodeChanged;
  }

  function executeAttribute(attribute, on, inject) {
    var old = on.values[attribute]; //try{
    //if a built-in attribute

    if (attributes[attribute]) {
      var ret = attributes[attribute](on, inject);
    } else {
      //attribute is not in the standard attribute list
      if (on.getters[attribute]) {
        //getter exists
        var value = on.getters[attribute](inject); //-----------Below code used to set the property of the componenet to the value returned by the getter. I dont know why. Maybe remothe the whole thing. and do nothing with custom getters....

        if (self.context instanceof _components_BaseComponent__WEBPACK_IMPORTED_MODULE_1__[/* BaseComponent */ "a"]) {
          self.context[attribute] = value;
        } //set attribute of the HTML element to the value;


        if (on.elem) {
          on.elem[attribute] = value;
        }
      }
    }
    /*}catch(ex){
    console.warn(ex);
    }/**/


    if (old !== on.values[attribute] && ret !== EAttrResult.SkipChildren) {
      ret = EAttrResult.NodeChanged;
    }

    return ret;
  }
  /**
   * Custom attribute handling goes here
   */


  var attributes = {
    'if': function _if(on, inject) {
      var key = "if";
      var getter = on.getters[key];
      var isTrue;

      try {
        isTrue = getter(inject);
      } catch (ex) {
        isTrue = undefined;
      }

      if (on.values[key] !== isTrue) {
        on.values[key] = isTrue;

        if (isTrue) {
          if (on.items.length == 0) {
            //if if directive does not have any children, create them
            vDomCreateItems(on, inject);
          } else {
            //if (on.items[0] instanceof DocumentFragment)
            insertVDomItemsAfter(on.items, on.elem);
          }
        } else {
          if (on.items.length > 0 && on.items[0].elem.parentNode) {
            removeVDomItems(on.items, true);
          }

          return EAttrResult.SkipChildren;
        }
      }

      if (!isTrue) {
        return EAttrResult.SkipChildren;
      }
    },
    'transition': function transition(on, inject) {
      var key = "transition";
      var getter = on.getters[key];
      var options;

      try {
        options = getter(inject);
      } catch (ex) {
        options = {};
      }

      options = Object.assign({
        trigger: null,
        duration: 0,
        enter: 'enter',
        enter_active: 'enter_active',
        enter_to: 'enter_to',
        leave: 'leave',
        leave_active: 'leave_active',
        leave_to: 'leave_to'
      }, options);

      if (on.values[key] !== options.trigger) {
        on.values[key] = options.trigger;

        if (on.items.length == 0) {
          //if if directive does not have any children, create them
          vDomCreateItems(on, inject);
        } else {
          if (options.duration) {
            vDomCreateItems(on, inject);
            on.items[1].elem.classList.add(options.enter_active);
            on.items[0].elem.classList.add(options.leave_active);
            on.items[1].elem.classList.add(options.enter);
            on.items[0].elem.classList.add(options.leave);
            setTimeout(function () {
              on.items[1].elem.classList.remove(options.enter);
              on.items[0].elem.classList.remove(options.leave);
              on.items[1].elem.classList.add(options.enter_to);
              on.items[0].elem.classList.add(options.leave_to);
            }, 0); //discard vDom nodes of the element that will be removed

            on.items[0].items = [];
            setTimeout(function () {
              on.items[1].elem.classList.remove(options.enter_active);
              on.items[0].elem.classList.remove(options.leave_active);
              on.items[1].elem.classList.remove(options.enter_to);
              on.items[0].elem.classList.remove(options.leave_to);
              removeElement(on.items[0].elem);
              on.items.shift();
            }, options.duration);
            return EAttrResult.SkipChildren;
          }

          checkVDomNode(on.items[0], {});
        }
      } else {
        checkVDomNode(on.items[0], {});
      }
    },
    'bind': function bind(on, inject) {
      var key = "bind";
      var getter = on.getters[key];
      var newValue = undefined;

      try {
        newValue = getter(inject);
      } catch (ex) {}

      on.values[key] = newValue;
      updateBoundElement(on.elem, newValue);
    },
    'selected': function selected(on, inject) {
      var key = "selected";
      var getter = on.getters[key];
      var newValue = getter(inject);

      if (newValue) {
        on.elem.setAttribute('selected', "");
      } else {
        on.elem.removeAttribute('selected');
      }
    },
    'style': function style(on, inject) {
      var key = "style";
      var getter = on.getters[key];
      var newValue = getter(inject);

      if (_typeof(newValue) == 'object') {
        _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(newValue, function (prop, i) {
          if (prop !== null) on.elem.style[i] = prop;else on.elem.style[i] = 'auto';
        });
      }
    },
    'attribute': function attribute(on, inject) {
      var key = "attribute";
      var getter = on.getters[key];
      var newValue = getter(inject);

      if (_typeof(newValue) == 'object') {
        _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(newValue, function (prop, i) {
          if (prop !== null) on.elem.setAttribute(i, prop);else on.elem.removeAttribute(i);
        });
      }
    },
    'display': function display(on, inject) {
      var key = "display";
      var getter = on.getters[key];
      var newValue = getter(inject);

      if (on.values[key] !== newValue) {
        on.values[key] = newValue;

        if (!on.valuesD.hasOwnProperty(key)) {
          on.valuesD[key] = on.elem.style.display;
        }

        on.elem.style.display = newValue;
      }
    },
    'show': function show(on, inject) {
      var key = "show";
      var getter = on.getters[key];
      var newValue = getter(inject);

      if (on.values[key] !== newValue) {
        on.values[key] = newValue;

        if (!on.valuesD.hasOwnProperty(key)) {
          on.valuesD[key] = on.elem.style.display;
        }

        if (newValue) {
          on.elem.style.display = on.valuesD[key];
        } else {
          on.elem.style.display = 'none';
        }
      }
    },
    'class': function _class(on, inject) {
      var key = "class";
      var getter = on.getters[key];
      var newValue = getter(inject);

      if (on.values[key] !== newValue) {
        on.values[key] = newValue;

        if (!on.valuesD.hasOwnProperty(key)) {
          on.valuesD[key] = on.elem.className;
        } else {
          on.elem.className = on.valuesD[key];
        }

        if (!Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(newValue) && on.elem.className.indexOf(newValue) < 0) {
          on.elem.className += (on.elem.className ? " " : "") + newValue;
        }
      }
    },
    'innerhtml': function innerhtml(on, inject) {
      var key = "innerhtml";
      var getter = on.getters[key];
      var newValue = getter(inject);

      if (on.values[key] !== newValue) {
        on.values[key] = newValue;
        on.elem.innerHTML = newValue;
      }
    },

    /**
     * 
     * @param {vDom} on 
     * @param {*} inject 
     */
    'foreach': function foreach(on, inject) {
      var key = "foreach";
      var getter = on.getters[key];
      /** @type {{data:string,index:string,item:string}}*/

      var parts = getter;
      var data = createGetter(parts.data, inject)(inject) || [];
      var fo = document.createDocumentFragment();
      var fo1 = document.createDocumentFragment();
      var touchedKeys = {}; //var touchedObjects = [];
      //remove all items temporarely (not right away)

      function moveAllToFragment() {
        for (var index in on.items) {
          if (!on.items.hasOwnProperty(index)) continue;
          fo.appendChild(on.items[index].elem);
        }
      } //create a new fragment for new/updated items


      var hasNew = false;
      var hasDeleted = false;
      var hasChanges = 0;

      for (var index in data) {
        if (!data.hasOwnProperty(index)) continue;
        var item = data[index];
        if (item === undefined) continue;
        touchedKeys[index] = null;
        var inj = {};
        inj[parts.index] = index;
        inj[parts.item] = item;
        inj = Object.assign({}, inject, inj);

        if (on.items[index] && Object(util__WEBPACK_IMPORTED_MODULE_2__["isObject"])(item) && !Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* isObjLiteral */ "d"])(item)) {
          //it is some sort of complex object. Handle it differently
          if (on.items[index].INJECT[parts.item] != item) {
            //element's injected item is not the same as current item (can not hot-swap complex instances!)
            //delete object
            hasDeleted = true;

            if (on.items[index].elem == null || on.items[index].elem instanceof DocumentFragment) {
              removeVDomItems(on.items[index].items);
            }

            removeElement(on.items[index].elem);
            delete on.items[index];
          }
        }

        if (!on.items.hasOwnProperty(index)
        /*||
        on.items[index].INJECT[parts.item] != item*/
        ) {
            //a new item appeared
            if (!hasNew) {
              hasNew = true;
              moveAllToFragment();
            }

            var vdom = on.itemBuilder(inj);
            on.items[index] = vdom;
            fo1.appendChild(on.items[index].fragment || on.items[index].elem);
          } else {
          if (!on.items[index].elem.parentElement) {
            //Items have been removed from DOM
            return EAttrResult.SkipChildren;
          }

          on.items[index].INJECT = inj;
          insertBefore(fo1, on.items[index].elem);

          if (checkVDomNode(on.items[index], inj) === true) {
            hasChanges++;
          }
        }
      } //delete vdom.items that were not in the data object


      for (var index in on.items) {
        //if (!isObject(on.items[index].INJECT)){
        if (!on.items.hasOwnProperty(index)) continue;
        if (touchedKeys.hasOwnProperty(index)) continue;
        hasDeleted = true;

        if (on.items[index].elem == null || on.items[index].elem instanceof DocumentFragment) {
          removeVDomItems(on.items[index].items);
        }

        removeElement(on.items[index].elem);
        delete on.items[index];
      }

      fo.appendChild(fo1);

      if (on.elem.parentNode) {
        //if new or deleted elements, remove the old frag and insert the new one
        if (hasNew) {
          insertAfter(fo, on.elem);
        }
      } else {
        console.warn("[ForEach]: element does not have a parent!", on.elem);
      }

      return EAttrResult.SkipChildren;
    },

    /**
     * @param {vDom} on  
     * @param {*} inject 
     */
    'directive': function directive(on, inject) {
      var key = "directive";
      var getter = on.getters[key];
      var html = getter(inject);

      if (html instanceof _components_BaseComponent__WEBPACK_IMPORTED_MODULE_1__[/* BaseComponent */ "a"]) {
        on.getters["component"] = getter;
        return attributes["component"](on, inject);
      }

      if (on.values[key] !== html) {
        on.values[key] = html; //clear any previous component elements

        removeVDomItems(on.items);
        /** @type {vDom} */

        var c_vDom = null;

        if (html) {
          if (html instanceof DocumentFragment) {
            c_vDom = {
              elem: html,
              fragment: null,
              items: [],
              values: {},
              valuesD: {},
              getters: {},
              setters: {},
              itemBuilder: null,
              inject: {}
            };
          } else {
            c_vDom = executeSource(parseElement(html), inject);
          }
        }

        if (c_vDom) {
          var p_vDom = on.itemBuilder(inject);

          if (!(c_vDom.elem instanceof DocumentFragment)) {
            _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(p_vDom.getters, function (getter, key) {
              c_vDom.getters[key] = getter;
            }); //copy html attributes

            if (c_vDom.elem.attributes) {
              for (var ii = 0; ii < p_vDom.elem.attributes.length; ii++) {
                var attr = p_vDom.elem.attributes[ii]; //only overwrite non-existing clild attrs

                if (!c_vDom.elem.getAttribute(attr.name)) {
                  c_vDom.elem.setAttribute(attr.name, attr.value);
                } else {
                  c_vDom.elem.setAttribute(attr.name, c_vDom.elem.getAttribute(attr.name) + " " + attr.value);
                }
              }
            }

            on.items = [c_vDom];
          } else {
            on.items = c_vDom.items;
          }

          insertVDomElementAfter(c_vDom, on.elem);

          for (var i in on.items) {
            if (!on.items.hasOwnProperty(i)) continue;
            checkVDomNode(on.items[i], inject);
          }
        }
      } else {
        //just update its items
        for (var i in on.items) {
          if (!on.items.hasOwnProperty(i)) continue;
          checkVDomNode(on.items[i], inject);
        }
      }

      return EAttrResult.SkipChildren;
    },

    /**
     * 
     * @param {vDom} on  
     * @param {*} inject 
     */
    'component': function component(on, inject) {
      var key = "component";
      var getter = on.getters[key];
      /** @type {BaseComponent} */

      var component = getter(inject); //if component is actually a class and component value is not yet set, then instantiate the constructor

      if (!on.values[key] && component && component.prototype instanceof _components_BaseComponent__WEBPACK_IMPORTED_MODULE_1__[/* BaseComponent */ "a"]) {
        component = new component();
      } else if (component && component.prototype instanceof _components_BaseComponent__WEBPACK_IMPORTED_MODULE_1__[/* BaseComponent */ "a"]) {
        //if same component type, then do not check exact match.
        component = on.values[key];
      }

      if (on.values[key] !== component) {
        //clear any previous component elements
        removeVDomItems(on.items);

        if (on.values[key] && on.values[key].binder) {
          removeElement(on.values[key].binder.vdom.elem);
          removeVDomItems(on.values[key].binder.vdom.items);
        }

        on.values[key] = component;

        if (!(component instanceof _components_BaseComponent__WEBPACK_IMPORTED_MODULE_1__[/* BaseComponent */ "a"])) {
          return EAttrResult.SkipChildren;
        }

        var inj = Object.assign({}, inject);

        if (component.template) {
          on.values[key] = component; //build parent vDom in the parent scope

          /** @type {vDom} */

          var p_vDom = on.itemBuilder(inject);

          if (p_vDom instanceof DocumentFragment) {
            throw Error("Component container " + JSON.stringify(on.elem) + " can not be a fragment!");
          }

          component.binder = new Binder(component).setInjectVars(inj).bindElements(component.events, component.template);
          var c_vDom = component.binder.vdom; //link componenet properties to getter values

          _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(p_vDom.getters, function (getter, key) {
            c_vDom.getters[key] = getter;
            component[key] = getter(inject);
          });
          var dynamicEvents = []; //Copy over setters into the componenet
          //Copy over 2Way binding callbacks into the componenet

          _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(p_vDom.setters, function (setter, key) {
            c_vDom.setters[key] = setter; //add change listener to the context

            if (Object(util__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(component[key + 'Change_2'])) {
              throw new Error("Component can not have method " + (key + 'Change_2') + " it is used excusively for 2-way data binding with " + key);
            }

            dynamicEvents.push(key + 'Change_2');

            component[key + 'Change_2'] = function (val) {
              return c_vDom.setters[key](inject, val);
            };
          }); //Copy over callers into the componenet

          _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(p_vDom.callers, function (caller, key) {
            if (dynamicEvents.indexOf(key) >= 0) {
              throw new Error("Component " + component.constructor.name + " can not override 2-way event (" + key + ")!");
            }

            c_vDom.callers[key] = component[key] = caller;
          }); //copy html attributes

          if (!(c_vDom.elem instanceof DocumentFragment) && !(c_vDom.elem instanceof Comment)) {
            for (var ii = 0; ii < p_vDom.elem.attributes.length; ii++) {
              var attr = p_vDom.elem.attributes[ii]; //only overwrite non-existing clild attrs

              if (!c_vDom.elem.getAttribute(attr.name)) {
                c_vDom.elem.setAttribute(attr.name, attr.value);
              } else {
                c_vDom.elem.setAttribute(attr.name, c_vDom.elem.getAttribute(attr.name) + " " + attr.value);
              }
            }
          } //set plainAttrs as properties of our component instance


          _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(p_vDom.plainAttrs, function (value, key) {
            //only create property if value is not null: attribute has the value part
            if (value !== null) {
              component[key] = value;
              component.attributes[key] = value;
            }
          });
          var p_frag = document.createDocumentFragment(); //move host children to temp fragment
          // @ts-ignore

          Object(_DOM__WEBPACK_IMPORTED_MODULE_6__[/* DOM */ "a"])(p_frag).append(p_vDom.elem.childNodes);
          component.parentPage = self.context; //let component decide where to put parent's children

          component.templateFragment = p_frag;

          component.templateUpdate = function () {
            checkVDomNode(on, inject);
          };

          on.items = [p_vDom]; //no real need to call _init 
          //tryCall(component,component._init);	
          //insert component vDom with new children after the [component] vDom element

          insertVDomElementAfter(c_vDom, on.elem); //call onInit method in the next frame
          //setTimeout(function(){

          if (!(c_vDom.elem instanceof DocumentFragment)) {
            Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(component, component._onInit, c_vDom.elem);
          }
        } else {
          //component does not have own template. Render host template
          p_vDom = on.itemBuilder(inject);
          on.items[0] = p_vDom; //insert parent vDom with new children after the [component] vDom element

          insertAfter(p_vDom.elem, on.elem); //call onInit method in the next frame
          //setTimeout(function(){

          Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(component, component._onInit, p_vDom.elem); //});
        } //parent vDom items still belong to the directive vDom node

      } else {
        //same component. Just update own parent elem vDom items
        //component items do not get updated by this!
        for (var i in on.items) {
          if (!on.items.hasOwnProperty(i)) continue;
          checkVDomNode(on.items[i], inject);
        }

        if (!component.container) {
          Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(component, component._onInit, on.elem.parentElement);
        }

        if (component && component.binder) {
          Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(component, component.update);
        }
      }

      return EAttrResult.SkipChildren;
    }
  };

  function applyCallBack(elem, context, evName, callback, cancelUIUpdate) {
    Object(_DOM__WEBPACK_IMPORTED_MODULE_6__[/* DOM */ "a"])(elem).addEventListener(evName, function (event) {
      updateBoundContextProperty(event.target, cancelUIUpdate); //skip formatting for input event

      if (callback && Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(context, callback, event) && event.target['parentNode']) repaint(event.target['parentNode']);
    });
  }

  function applyCallbacks(elem, context, callbacks) {
    for (var k in callbacks) {
      //skip if custom callback is empty or input or change
      if (Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(callbacks[k]) || k == 'change' || k == 'input') continue;
      applyCallBack(elem, context, k, callbacks[k]);
    } //change or input are added separately if element is setting


    if (isElementSetting(elem)) {
      if (isElementSettingOnInput(elem)) {
        applyCallBack(elem, context, 'input', callbacks['input'], true);
      }

      applyCallBack(elem, context, 'change', callbacks['change']);
    }
  }

  function createExecuteElemAttrGetter(elem, attrName, attrValue) {
    try {
      var inj = findElemInject(elem);
      if (Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(elem.VDOM.getters[attrName])) elem.VDOM.getters[attrName] = createGetter(attrValue, inj);
      var result = elem.VDOM.getters[attrName](self, inj);
    } catch (ex) {
      var result = null;
    }

    return result;
  }

  function updateBoundElement(elem, v) {
    var format = elem.getAttribute ? elem.getAttribute('format') : null;

    if (format !== null) {
      var formats = format.split(":");

      if (formats.length > 0 && (formats[0] === "number" || formats[0] === "localenumber")) {
        if (v !== "") {
          v = v * 1;
          if (isNaN(v)) v = 0;

          if (formats.length == 2) {
            var ln = !isNaN(formats[1]) ? formats[1] : createExecuteElemAttrGetter(elem, 'format', formats[1]);
            v = round(v, parseInt(ln));
          }

          if (formats[0] === "localenumber" && elem.getAttribute('type') != 'number' && Number(v).toLocaleString) {
            v = Number(v).toLocaleString();
          }
        }
      }

      if (formats.length > 0 && formats[0] === "boolean") {
        if (formats.length === 2) {
          var titles = formats[1].split(",");
          v = titles[v === true ? 0 : 1];
          if (v === undefined) throw Error("Value of bind is not part of format's boolean options");
        }
      } //if (v !== undefined && v !== "null" && v !== null ){


      if (formats.length > 0 && formats[0] === "dateTime") {
        v = _DateTime__WEBPACK_IMPORTED_MODULE_4__[/* DateTime */ "a"].toHumanDateTime(v);
      }

      if (formats.length > 0 && formats[0] === "date") {
        v = _DateTime__WEBPACK_IMPORTED_MODULE_4__[/* DateTime */ "a"].toHumanDate(v);
      }

      if (formats.length > 0 && formats[0] === "time") {
        v = _DateTime__WEBPACK_IMPORTED_MODULE_4__[/* DateTime */ "a"].toHumanTime(v);
      } //}

    }

    switch (elem.tagName) {
      case "SELECT":
        //DOM(elem).find("option").forEach((e)=>{e.selected = false});
        //setTimeout(()=>{

        /** @type {HTMLOptionElement} */
        // @ts-ignore
        var firstOption = Object(_DOM__WEBPACK_IMPORTED_MODULE_6__[/* DOM */ "a"])(elem).find("option")[0];

        if (v === null || v === undefined) {
          /** @type {HTMLOptionElement} */
          // @ts-ignore
          firstOption.selected = true;
          var fVal = firstOption.value;

          if (fVal !== null) {
            elem.value = fVal;
            updateBoundContextProperty(elem);
          }
        } else {
          /** @type {HTMLOptionElement} */
          // @ts-ignore
          var sel = Object(_DOM__WEBPACK_IMPORTED_MODULE_6__[/* DOM */ "a"])(elem).find("option[value='" + v + "']")[0];

          if (sel) {
            sel.selected = true;
            elem.value = v; //this is important
          } else {
            firstOption.selected = true; //opdate data property to keep it in sync with element; 

            updateBoundContextProperty(elem);
          }
        } //});


        break;

      case "OPTION":
      case "INPUT":
        switch (elem.type) {
          case "radio":
            var cv = elem.value;

            if (Object(util__WEBPACK_IMPORTED_MODULE_2__["isBoolean"])(v)) {
              cv = elem.value == "true";
            }

            elem.checked = v == cv || v === null && elem.value == "";
            break;

          case "checkbox":
            elem.checked = v;
            break;

          case "file":
            //file value can not be set programmatically!
            break;

          default:
            elem.value = toInputValue(v);
            break;
        }

        break;

      case "IMG":
        if (elem.src !== v) elem.src = toInputValue(v);
        break;

      case undefined:
        //for text nodes
        if (elem.nodeValue !== v) elem.nodeValue = toInputValue(v);
        break;

      default:
        if (elem.innerText !== v) elem.innerText = toInputValue(v);
        break;
    }
  }

  function toInputValue(val) {
    if (typeof val == 'undefined' || val === null) return "";
    return val;
  }

  function isElementSetting(elem) {
    switch (elem.tagName) {
      case "SELECT":
      case "OPTION":
      case "TEXTAREA":
      case "INPUT":
        return true;

      default:
        return false;
    }
  }

  function isElementSettingOnInput(elem) {
    switch (elem.tagName + ":" + elem.type) {
      case "INPUT:text":
      case "INPUT:password":
      case "INPUT:email":
      case "INPUT:number":
      case "INPUT:search":
      case "INPUT:week":
      case "INPUT:url":
      case "INPUT:time":
      case "INPUT:tel":
      case "INPUT:range":
      case "INPUT:month":
      case "INPUT:datetime":
      case "INPUT:date":
      case "INPUT:color":
      case "INPUT:file":
      case "TEXTAREA":
        return true;

      default:
        return false;
    }
  }

  function formatValueToElem(elem, value) {
    var format = elem.getAttribute('format');
    var v = value;

    if (!Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(format)) {
      var formats = format.split(":");

      if (formats.length > 0 && (formats[0] === "number" || formats[0] === "localenumber")) {
        if (value === "") v = null;else {
          if (formats[0] === "localenumber") {
            v = Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* numberFromLocaleString */ "e"])(value);
          } else {
            v = Number(value);
          } //v = value * 1;


          if (isNaN(v)) v = 0;

          if (formats.length == 2) {
            var ln = !isNaN(formats[1]) ? formats[1] : createExecuteElemAttrGetter(elem, 'format', formats[1]);
            v = round(v, parseInt(ln));
          }
        }
      }

      if (formats.length > 0 && formats[0] === "boolean") {
        if (formats.length === 2) {
          var titles = formats[1].split(",");
          if (titles.length >= 1) v = value === titles[0];else v = parseInt(value) != 0;
        } else {
          if (value == "true") v = true;else if (value == "false") v = false;else v = parseInt(value) != 0;
        }
      }

      if (formats.length > 0 && formats[0] === "dateTime") {
        if (formats.length == 1) {
          v = _DateTime__WEBPACK_IMPORTED_MODULE_4__[/* DateTime */ "a"].fromHumanDateTime(value);
        }
      }

      if (formats.length > 0 && formats[0] == "date") {
        if (formats.length == 1) {
          v = _DateTime__WEBPACK_IMPORTED_MODULE_4__[/* DateTime */ "a"].fromHumanDate(value);
        }
      }

      if (formats.length > 0 && formats[0] == "time") {
        if (formats.length == 1) {
          v = _DateTime__WEBPACK_IMPORTED_MODULE_4__[/* DateTime */ "a"].fromHumanTime(value);
        }
      }
    } else {
      v = value;
    }

    return v;
  }

  function updateBoundContextProperty(elem, skipUpdate) {
    if (!isElementSetting(elem) || Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(elem['VDOM']) || Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(elem['VDOM'].setters) || Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(elem['VDOM'].setters.bind)) return;
    var v;
    var format = elem.getAttribute('format');
    var type = elem.getAttribute('type');

    switch (elem.tagName) {
      case "SELECT":
        var sel = Object(_DOM__WEBPACK_IMPORTED_MODULE_6__[/* DOM */ "a"])(elem).find("option:checked")[0];

        if (sel) {
          v = formatValueToElem(elem, sel.getAttribute('value'));
        }

        break;

      case "OPTION":
      case "INPUT":
        switch (type) {
          case 'checkbox':
            v = elem.checked;
            break;

          case 'file':
            v = elem.value;
            break;

          default:
            v = formatValueToElem(elem, elem.value);
            break;
        }

        break;

      default:
        v = elem.value;
    }

    var inj = Object.assign({}, self.injectVars, findElemInject(elem));
    var domElVal = elem['VDOM'].getters.bind(inj);
    var vDomdomElVal = elem['VDOM'].values.bind;

    if (domElVal !== v || v !== vDomdomElVal) {
      if (skipUpdate && self.context[_Watcher__WEBPACK_IMPORTED_MODULE_3__[/* isSkipUpdate */ "b"]] === false) {
        self.context[_Watcher__WEBPACK_IMPORTED_MODULE_3__[/* isSkipUpdate */ "b"]] = true;
        elem['VDOM'].setters.bind(inj, v);
        self.context[_Watcher__WEBPACK_IMPORTED_MODULE_3__[/* isSkipUpdate */ "b"]] = false;
      } else {
        //because upon change the value is likely to be the same, but we still want to trigger the update, set v to isSkipUpdate (that will not trigger anything) first and then re-set it back
        elem['VDOM'].setters.bind(inj, _Watcher__WEBPACK_IMPORTED_MODULE_3__[/* isSkipUpdate */ "b"]); //then immediately set the proper value

        elem['VDOM'].setters.bind(inj, v);
      }
    }
  }

  function getForeachAttrParts(attrValue) {
    if (Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(attrValue)) return null;
    /** @type {string[]}*/

    var parts = attrValue.split(/ (in|as|where) /g);
    var p = {
      data: null,
      index: 'index',
      item: 'item',
      where: null
    };
    var p_name = 'data';
    _Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].forEach(parts, function (part) {
      switch (part) {
        case 'in':
          p.index = p.data; //first item must have been index

          p_name = 'data'; //set data next

          break;

        case 'as':
          p_name = 'item'; //set item next

          break;

        case 'where':
          p_name = 'where'; //set where next

          break;

        default:
          p[p_name] = part;
      }
    });
    return p;
  }
  /**
   * 
   * @param {string} expression 
   * @return {function(*)} callback
   */


  function createGetter(expression, inject) {
    var inj = createInjectVarText(inject);

    try {
      var cashe = inj + expression;
      if (getterCashe.hasOwnProperty(cashe)) return getterCashe[cashe];
      var getter = new Function('inject', inj + "; return " + expression + ";");
      return getterCashe[cashe] = getter.bind(self.context);
    } catch (ex) {
      return null;
    }
  }
  /**
   * Create a caller that does not return any value. Can execute any number of methods.
   * @param {string} expression 
   * @return {function(*)} callback
   */


  function createCaller(expression, inject) {
    var inj = createInjectVarText(inject);

    try {
      var cashe = inj + expression;
      if (getterCashe.hasOwnProperty(cashe)) return getterCashe[cashe];
      var getter = new Function('inject', inj + "; " + expression + ";");
      return getter.bind(self.context);
    } catch (ex) {
      return null;
    }
  }
  /**
   * 
   * @param {string} expression 
   * @param {object} inject
   * @return {function(*,*)} callback
   */


  function createSetter(expression, inject) {
    var inj = createInjectVarText(inject);

    try {
      // @ts-ignore
      var setter = new Function('inject', 'value', inj + "; return " + expression + " = value;");
      return setter.bind(self.context);
    } catch (ex) {
      return null;
    }
  }

  function createInjectVarText(vars) {
    var inj = "";

    if (!Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* empty */ "b"])(vars)) {
      for (var i in vars) {
        if (!vars.hasOwnProperty(i)) continue;
        inj += "var " + i + "= inject['" + i + "'];\n";
      }
    }

    return inj;
  }

  function repaint(element) {
    // in plain js
    var old = element.style.display;
    element.style.display = 'none';
    element.style.display = old;
  }

  function round(num, decimals) {
    decimals = decimals || 0;
    var scale = Math.pow(10, decimals);
    return Math.round(num * scale) / scale;
  }

  function tryGetComponenet(tagName) {
    return window['LEET_REGISTER'] ? window['LEET_REGISTER'][tagName] : null;
  }
};

function removeDOMElement(elem) {
  if (elem.parentNode) {
    elem.parentNode.removeChild(elem);
  }
}
/**
 * 
 * @param {vDom} en 
 */


function removeVDOMElement(en) {
  if (en.items && en.items.length > 0) {
    for (var i in en.items) {
      if (!en.items.hasOwnProperty(i)) continue;
      removeVDOMElement(en.items[i]);
    }

    delete en.items;
  }

  if (en.elem) {
    delete en.elem.VDOM;
    removeDOMElement(en.elem);
    delete en.elem;
  }

  delete en.fragment;
  delete en.getters;
  delete en.setters;
  delete en.callers;
  delete en.itemBuilder;
  delete en.values;
  delete en.valuesD;
}

/***/ }),

/***/ "./core/ChangeWatcher.js":
/*!*******************************!*\
  !*** ./core/ChangeWatcher.js ***!
  \*******************************/
/*! exports provided: ChangeWatcher */
/*! exports used: ChangeWatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ChangeWatcher; });
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Watcher_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Watcher.js */ "./core/Watcher.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var propChangeHanler = Symbol('propChangeHanler');
var objectChangeHanler = Symbol('objectChangeHanler');
var ChangeWatcher = /*#__PURE__*/function () {
  function ChangeWatcher() {
    var _this = this;

    _classCallCheck(this, ChangeWatcher);

    this[_Watcher_js__WEBPACK_IMPORTED_MODULE_1__[/* Watcher */ "a"].skip] = true; //var updateRequested = false;

    this[propChangeHanler] = function (target, property, value) {
      if (target === _this) {
        if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(_this[property + "Change_2"])) {
          _this[property + "Change_2"](value);
        }

        if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(_this[property + "Change"])) {
          _this[property + "Change"](value);
        }
      }
    };

    this[objectChangeHanler] = function () {
      _this.update();
    };

    var object = _Watcher_js__WEBPACK_IMPORTED_MODULE_1__[/* Watcher */ "a"].on(this, this[propChangeHanler], this[objectChangeHanler], ['injectVars']); //object = Watcher.onObjectChange(object, this[objectChangeHanler], ['injectVars']);

    return object;
  }

  _createClass(ChangeWatcher, [{
    key: "startWatch",
    value: function startWatch() {
      this[_Watcher_js__WEBPACK_IMPORTED_MODULE_1__[/* Watcher */ "a"].skip] = false;
    }
  }, {
    key: "stopWatch",
    value: function stopWatch() {
      _Watcher_js__WEBPACK_IMPORTED_MODULE_1__[/* Watcher */ "a"].off(this, this[propChangeHanler]);
      _Watcher_js__WEBPACK_IMPORTED_MODULE_1__[/* Watcher */ "a"].off(this, this[objectChangeHanler]);
    }
    /**
    * Called when the binder can finally be updated
    * Children must override this method
    * ***Override*** 
    * @abstract
    */

  }, {
    key: "update",
    value: function update() {
      throw new Error("Must Override");
    }
  }]);

  return ChangeWatcher;
}();

/***/ }),

/***/ "./core/DOM.js":
/*!*********************!*\
  !*** ./core/DOM.js ***!
  \*********************/
/*! exports provided: DOM */
/*! exports used: DOM */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DOM; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./core/helpers.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }


var identitySymbol = Symbol('identitySymbol'); //Window|HTMLElement|DocumentFragment|Element|string

/**
 * jQuery replacement
 * @param {any} elemOrQuery 
 */

function DOM(elemOrQuery) {
  /**
  * @param {object} children 
  * @return {object[]}
  */
  function getArray(children) {
    if (Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* isIterable */ "c"])(children) && !(children instanceof HTMLElement)) {
      return Array.prototype.slice.call(children);
    } else {
      return [children];
    }
  }

  function interpolateLine(p1, p2, steps, callback) {
    var N = steps;
    var step = 0;

    var anumateToDest = function anumateToDest() {
      if (step < N) {
        step++;
        var t = step / N;
        window.requestAnimationFrame(anumateToDest);
        var y = lerp(p1.y, p2.y, t);
        var x = lerp(p1.x, p2.x, t);
        callback({
          x: x,
          y: y
        });
      }
    };

    anumateToDest();
  }

  function lerp(start, end, t) {
    return start + t * (end - start);
  }

  var pxRequiredKeys = ['top', 'left', 'height', 'width', 'right', 'bottom'];

  function _remove(elem) {
    //remove children

    /*if (elem.children) {
      for (var i in elem.children) {
        if (!elem.children.hasOwnProperty(i)) continue;
        remove(elem.children[i]);
      }
    }*/
    if (elem.parentNode) {
      elem.parentNode.removeChild(elem); //removeAllEventListeners(elem);
    }
  }

  function _removeAllEventListeners(elem) {
    var handlers = elem["__EVENTS__"];

    if (!handlers) {
      return;
    }

    for (var event in handlers) {
      _removeEventListener(elem, event);
    }

    delete elem["__EVENTS__"];
  }

  function _removeEventListener(elem, events) {
    var removeHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var ar = events.split(' ');

    for (var j in ar) {
      if (!ar.hasOwnProperty(j)) continue;
      var event = ar[j];
      var eventHandlers = elem["__EVENTS__"][event];

      if (!eventHandlers) {
        return;
      }

      for (var i in eventHandlers) {
        var handler = eventHandlers[i];

        if (removeHandler && handler[0] == removeHandler) {
          elem.removeEventListener(event.split(".")[0], handler[0], handler[1]);
        } else if (!removeHandler) {
          elem.removeEventListener(event.split(".")[0], handler[0], handler[1]);
        }
      }

      delete elem["__EVENTS__"][event];
    }

    ;
  }

  function addPx(value, keyName) {
    if (isNaN(value)) return value;

    if (keyName != undefined) {
      if (pxRequiredKeys.indexOf(keyName) >= 0) return ("" + value + "").replace(/px/, "") + "px";else return value;
    }

    return ("" + value + "").replace(/px/, "") + "px";
  }

  var self = {
    identity: identitySymbol,

    /**
     * Iterate ove reach element of the set
     * @param {function(HTMLElement):void} callback 
     */
    each: function each(callback) {
      for (var i in elemArray) {
        if (elemArray.hasOwnProperty(i)) callback(elemArray[i]);
      }
    },
    get: function get(index) {
      return elemArray[index];
    },
    first: function first() {
      return elemArray[0];
    },
    attr: function attr(key) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      if (elemArray[0] == undefined) return null; //remove children

      if (value == undefined) {
        return elemArray[0].getAttribute(key);
      }

      for (var i in elemArray) {
        if (elemArray.hasOwnProperty(i)) elemArray[i].setAttribute(key, value);
      }

      ;
    },
    removeAttr: function removeAttr(key) {
      for (var i in elemArray) {
        if (elemArray.hasOwnProperty(i)) elemArray[i].removeAttribute(key);
      }
    },

    /**
     * Apply CSS rule to all elements
     * @param {{[key:string]:string}|string[]|string} styles - if styles is array, return the specified css properties
     * @param {string} [value]
     */
    css: function css(styles, value) {
      if (elemArray[0] == undefined) return null;

      if (empty(styles)) {
        return getComputedStyle(elemArray[0]);
      }

      if (typeof styles == "string") {
        if (value === undefined) return getComputedStyle(elemArray[0])[styles];
        elemArray[0].style[styles] = addPx(value, styles);
        return;
      }

      if (Array.isArray(styles)) {
        var ret = {};
        var elStyles = getComputedStyle(elemArray[0]);

        for (var i in styles) {
          if (!styles.hasOwnProperty(i)) continue;
          var prop = styles[i];
          ret[prop] = elStyles[prop];
        }

        return ret;
      } else {
        for (var j in elemArray) {
          if (!elemArray.hasOwnProperty(j)) continue;
          var elem = elemArray[j];

          for (var i in styles) {
            if (!styles.hasOwnProperty(i)) continue;
            var prop = styles[i];
            if (prop !== null) elem.style[i] = addPx(prop, i);else elem.style[i] = 'auto';
          }
        }

        ;
      }
    },
    addClass: function addClass(className) {
      for (var i in elemArray) {
        if (elemArray.hasOwnProperty(i)) elemArray[i].classList.add(className);
      }

      ;
    },
    removeClass: function removeClass(className) {
      for (var i in elemArray) {
        if (elemArray.hasOwnProperty(i)) elemArray[i].classList.remove(className);
      }

      ;
    },
    toggleClass: function toggleClass(className) {
      for (var i in elemArray) {
        if (elemArray.hasOwnProperty(i)) elemArray[i].classList.toggle(className);
      }

      ;
    },

    /**
     * Remove element and their children from DOM
     * @param {function(HTMLElement|Element): void} [onRemoveElement] 
     */
    remove: function remove(onRemoveElement) {
      //remove children
      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var elem = elemArray[i];

        _remove(elem);

        if (typeof onRemoveElement == "function") {
          onRemoveElement(elem);
        }
      }

      ;
    },

    /**
     * Append children to element
     * @param {*} childOrChildren 
     */
    append: function append(childOrChildren) {
      var chArray = getArray(childOrChildren);

      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var elem = elemArray[i];

        for (var k in chArray) {
          if (!chArray.hasOwnProperty(k)) continue;
          elem.appendChild(chArray[k]);
        }
      }

      ;
    },

    /**
     * Insert the first element of collection After the reference element
     * @param {HTMLElement} refChild 
     */
    insertAfter: function insertAfter(refChild) {
      if (refChild.nextElementSibling) {
        for (var i in elemArray) {
          if (!elemArray.hasOwnProperty(i)) continue;
          var elem = elemArray[i];
          refChild.parentElement.insertBefore(elem, refChild.nextElementSibling);
        }
      } else {
        for (var i in elemArray) {
          if (!elemArray.hasOwnProperty(i)) continue;
          var elem = elemArray[i];
          refChild.parentElement.appendChild(elem);
        }

        ;
      }
    },

    /**
     * Insert the first element of collection Before the reference element
     * @param {HTMLElement} refChild 
     */
    insertBefore: function insertBefore(refChild) {
      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var elem = elemArray[i];
        refChild.parentElement.insertBefore(elem, refChild);
      }

      ;
    },

    /**
     * Replace first element of collection with new element
     * @param {HTMLElement} newElement 
     */
    replaceWith: function replaceWith(newElement) {
      DOM(newElement).insertAfter(elemArray[0]);
      DOM(elemArray).remove();
    },

    /**
     * Gt Parent of each element in sequence
     */
    parent: function parent() {
      var ret = [];

      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var elem = elemArray[i];
        ret.push(elem.parentElement);
      }

      ;
      return DOM(ret);
    },

    /**
     * Add event listener to element
     * @param {string} events 
     * @param {function(Event)} handler
     * @param {any} [capture]
     */
    addEventListener: function addEventListener(events, handler, capture) {
      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var elem = elemArray[i];
        var ar = events.split(' ');

        for (var ii in ar) {
          if (!ar.hasOwnProperty(ii)) continue;
          var event = ar[ii];

          if (!elem["__EVENTS__"]) {
            elem["__EVENTS__"] = {};
          }

          if (!(event in elem["__EVENTS__"])) {
            // each entry contains another entry for each event type
            elem["__EVENTS__"][event] = [];
          } // capture reference


          elem["__EVENTS__"][event].push([handler, capture]);
          elem.addEventListener(event.split(".")[0], handler, capture);
        }

        ;
      }

      ;
    },

    /**
     * Remove Event Listener
     * @param {string} events 
     * @param {function()} [removeHandler] - specific handler to remove. By default removes all events for specified event name
     */
    removeEventListener: function removeEventListener(events) {
      var removeHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var elem = elemArray[i];

        _removeEventListener(elem, events, removeHandler);
      }

      ;
    },

    /**
     * Remove All Event Listeners
     */
    removeAllEventListeners: function removeAllEventListeners() {
      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var elem = elemArray[i];

        _removeAllEventListeners(elem);
      }

      ;
    },
    on: function on(event, handler, capture) {
      if (typeof handler == "string") {
        return self.onChild(event, handler, capture);
      }

      return self.addEventListener(event, handler, capture);
    },
    off: function off(event, handler) {
      return self.removeEventListener(event, handler);
    },
    onChild: function onChild(event, query, handler) {
      return self.addEventListener(event, function (event) {
        if (event.target instanceof HTMLElement && (event.target.matches ? event.target.matches(query) : event.target.msMatchesSelector(query))) {
          handler(event);
        }
      }, true);
    },

    /**
     * Repaint element
     */
    repaint: function repaint() {
      // in plain js
      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var elem = elemArray[i];
        var old = elem.style.display;
        elem.style.display = 'none';
        elem.style.display = old;
      }

      ;
    },

    /**
     * Find a parent by query
     * @param {string} query 
     * //@vvreturn {HTMLElement[]|HTMLOptionElement[]|Element[]}
     */
    closest: function closest(query) {
      if (elemArray[0] == undefined) return DOM([]);
      var elements = [elemArray[0].closest(query)]; // @ts-ignore

      return DOM(elements);
    },

    /**
     * Find children by query
     * @param {string} query 
     * //@vvreturn {HTMLElement[]|HTMLOptionElement[]|Element[]}
     */
    find: function find(query) {
      if (elemArray[0] == undefined) return DOM([]);
      var elems = Array.from(elemArray[0].querySelectorAll(query)); // @ts-ignore

      return DOM(elems);
    },
    width: function width() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      if (elemArray[0] == undefined) return 0;
      /** @type {HTMLElement} */

      var elem = elemArray[0];
      if (value === undefined) return elem.offsetWidth;
      elem.style.width = addPx(value);
    },
    height: function height() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      if (elemArray[0] == undefined) return 0;
      /** @type {HTMLElement} */

      var elem = elemArray[0];
      if (value === undefined) return elem.offsetHeight;
      elem.style.height = addPx(value);
    },
    position: function position() {
      if (elemArray[0] == undefined) return {
        top: 0,
        left: 0
      };
      return {
        top: elemArray[0].offsetTop,
        left: elemArray[0].offsetLeft
      };
    },
    offset: function offset() {
      return {
        top: self.offsetTop(),
        left: self.offsetLeft()
      };
    },
    innerHeight: function innerHeight() {
      if (elemArray[0] == undefined) return 0; // Return our distance

      return elemArray[0].clientHeight;
    },
    innerWidth: function innerWidth() {
      if (elemArray[0] == undefined) return 0; // Return our distance

      return elemArray[0].clientWidth;
    },
    offsetTop: function offsetTop() {
      if (elemArray[0] == undefined) return 0; // Set our distance placeholder

      var distance = 0;
      var elem = elemArray[0]; // Loop up the DOM

      if (elem.offsetParent) {
        do {
          distance += elem.offsetTop;
          elem = elem.offsetParent;
        } while (elem);
      } // Return our distance


      return distance < 0 ? 0 : distance;
    },
    offsetLeft: function offsetLeft() {
      if (elemArray[0] == undefined) return 0; // Set our distance placeholder

      var distance = 0;
      var elem = elemArray[0]; // Loop up the DOM

      if (elem.offsetParent) {
        do {
          distance += elem.offsetLeft;
          elem = elem.offsetParent;
        } while (elem);
      } // Return our distance


      return distance < 0 ? 0 : distance;
    },

    /**
     * Scroll Element contents
     * @param {{behavior?:'auto'|'smooth', top?: number, left?:number}} options 
     */
    scrollTo: function scrollTo(options) {
      if (elemArray[0] == undefined) return 0;

      if (elemArray[0].scrollTo) {
        elemArray[0].scrollTo(options);
        return;
      }

      var el = elemArray[0];
      interpolateLine({
        x: el.scrollLeft,
        y: el.scrollTop
      }, {
        x: options.left != undefined ? options.left : el.scrollLeft,
        y: options.top != undefined ? options.top : el.scrollTop
      }, options.behavior == "smooth" ? 25 : 1, function (p) {
        el.scrollTop = p.y;
        el.scrollLeft = p.x;
      });
    },

    /**
     * Scroll Element contents
     * @param {number} [offset]
     * @param {'auto'|'smooth'} [behavior] 
     */
    scrollLeft: function scrollLeft(offset, behavior) {
      if (elemArray[0] == undefined) return 0;

      if (offset == undefined) {
        return elemArray[0].scrollLeft;
      } else {
        self.scrollTo({
          left: offset,
          behavior: behavior
        });
      }
    },

    /**
     * Scroll Element contents
     * @param {number} [offset]
     * @param {'auto'|'smooth'} [behavior] 
     */
    scrollTop: function scrollTop(offset, behavior) {
      if (elemArray[0] == undefined) return 0;

      if (offset == undefined) {
        return elemArray[0].scrollTop;
      } else {
        self.scrollTo({
          top: offset,
          behavior: behavior
        });
      }
    },
    val: function val(value) {
      if (elemArray[0] == undefined) return undefined;

      if (value == undefined) {
        return elemArray[0].value;
      } else {
        for (var i in elemArray) {
          if (!elemArray.hasOwnProperty(i)) continue;
          var elem = elemArray[i];
          elem.value = value;
        }

        ;
      }
    },
    show: function show(value) {
      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var el = elemArray[i];
        if (!el._DOM_oldStyle) el._DOM_oldStyle = {};
        if (!el._DOM_oldStyle.display) el._DOM_oldStyle.display = DOM(el).css('display');
        el.style.display = el._DOM_oldStyle.display;
      }

      ;
    },
    hide: function hide(value) {
      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var el = elemArray[i];
        if (!el._DOM_oldStyle) el._DOM_oldStyle = {};
        if (!el._DOM_oldStyle.display) el._DOM_oldStyle.display = DOM(el).css('display');
        el.style.display = 'none';
      }
    },
    focus: function focus() {
      if (elemArray[0] == undefined) return undefined;

      for (var i in elemArray) {
        if (!elemArray.hasOwnProperty(i)) continue;
        var el = elemArray[i];
        el.focus();
      }

      ;
    }
  };

  if (elemOrQuery == null) {
    throw new Error("elemOrQuery can not be empty!");
  }
  /** @type {HTMLElement[]} */


  var elemArray = [];

  if (typeof elemOrQuery == "string" || typeof elemOrQuery == "number") {
    elemArray = Array.from(document.querySelectorAll(elemOrQuery));
  } else if (_typeof(elemOrQuery) == "object") {
    //if passed element is already DOM object, then return it as-is
    if (elemOrQuery.identity == identitySymbol) {
      /** @type {self} */
      var ret = elemOrQuery;
      return ret;
    }

    elemArray = getArray(elemOrQuery);
  } else {
    throw new Error("Not Implemented");
  }
  /** @type {self} */


  var instance = Object.create(self);
  instance.length = elemArray.length;
  return Object.assign(instance, elemArray);
}

/***/ }),

/***/ "./core/DateTime.js":
/*!**************************!*\
  !*** ./core/DateTime.js ***!
  \**************************/
/*! exports provided: DateTime */
/*! exports used: DateTime */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DateTime; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Translate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Translate */ "./core/Translate.js");


var DateTime = {
  /**
  * Return date in progressive string format. Used for display purposes ONLY
  * @param {string|Date} [value] a Date object or parseable string, 
  * @param {boolean} [outputOffset] - specify whether (UTC-xx:xx) timezone offset will be output. Defaults to false
  * @returns {string}
  */
  smartFormat: function smartFormat(value, outputOffset) {
    outputOffset = outputOffset || false;
    if (empty(value)) return null; //moment.locale(this.GUser.settings.language);

    var now = moment__WEBPACK_IMPORTED_MODULE_0__();
    var date = moment__WEBPACK_IMPORTED_MODULE_0__(value);
    var offset = moment__WEBPACK_IMPORTED_MODULE_0__["parseZone"](value).utcOffset();
    var hasZone = typeof date._tzm !== 'undefined';
    var sameZone = !hasZone || hasZone && now.utcOffset() === date.utcOffset();
    var f = ""; //Everything is the same - show time only	

    if (now.year() == date.year() && now.month() == date.month() && now.week() == date.week() && now.day() == date.day()) f = "[" + Object(_Translate__WEBPACK_IMPORTED_MODULE_1__[/* Translate */ "a"])("Today") + "] LT"; //Only Day of week is different	- show day of week and time

    if (now.year() == date.year() && now.month() == date.month() && now.week() == date.week() && now.day() != date.day()) f = "dddd LT"; //week is different - show month and date and time

    if (now.year() == date.year() && now.month() == date.month() && now.week() != date.week()) f = "MMM D LT"; //month is different - show month and date and time

    if (now.year() == date.year() && now.month() != date.month()) f = "MMM D LT"; //year is different - show year and month and date and time

    if (now.year() != date.year()) f = "MMM D, YYYY LT";
    if (outputOffset && hasZone) f += " [(UTC]Z[)]";
    var ret = null;
    if (hasZone && !sameZone) ret = moment__WEBPACK_IMPORTED_MODULE_0__(value).utcOffset(offset).format(f);else ret = moment__WEBPACK_IMPORTED_MODULE_0__(value).format(f);
    return ret;
  },

  /**
  * Return date in local string format: YYYY-MM-DD HH:mm:ss. Used for data transfer.
  * @param {string|Date} __date a Date object or parseable string, 
  * @returns {string}
  */
  formatLocalDate: function formatLocalDate(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date).format('YYYY-MM-DD HH:mm:ss');
  },

  /**
  * Return date in local string format: YYYY-MM-DD HH:mm:ss. Used for data transfer.
  * @param {string|Date} __date a Date object or parseable string, 
  * @returns {string}
  */
  fromLocalDate: function fromLocalDate(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date, 'YYYY-MM-DD HH:mm:ss').toISOString();
  },

  /**
  * Return date in human- readable format.
  * @param {string|Date} __date a Date object or parseable string, 
  * @returns {string}
  */
  toHumanDate: function toHumanDate(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date).format('LL');
  },

  /**
  * convert date from human format to date.
  * @param {string} __date a parseable string, 
  * @returns {Date}
  */
  fromHumanDate: function fromHumanDate(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date, DateTime._humanDate).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date, DateTime._humanDate).toDate();
  },

  /**
  * Return time in human- readable format.
  * @param {string|Date} __date a Date object or parseable string, 
  * @returns {string}
  */
  toHumanTime: function toHumanTime(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date).format(DateTime._humanTime);
  },

  /**
  * Return convert readable format to date
  * @param {string|Date} __date a Date object or parseable string, 
  * @returns {Date}
  */
  fromHumanTime: function fromHumanTime(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date, DateTime._humanTime).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date, DateTime._humanTime).toDate();
  },

  /**
  * convert date from human format to date.
  * @param {string} __date a parseable string, 
  * @returns {Date}
  */
  fromHumanDateTime: function fromHumanDateTime(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date, DateTime._humanDateTime).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date, DateTime._humanDateTime).toDate();
  },

  /**
  * Return date in human- readable format.
  * @param {string|Date} __date a Date object or parseable string, 
  * @returns {string}
  */
  toHumanDateTime: function toHumanDateTime(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date).format(DateTime._humanDateTime);
  },

  /**
  * Return date in specified format
  * @param {string|Date} __date a Date object or parseable string, 
  * @param {string} [format] - defaults to MM/DD/YYYY
  * @returns {string}
  */
  toFormat: function toFormat(__date, format) {
    format = format || DateTime._humanMMDDYYYY;
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date).format(format);
  },
  moment: moment__WEBPACK_IMPORTED_MODULE_0__,
  toJSONDate: function toJSONDate(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date).format(DateTime._JSONDate);
  },
  fromJSONDate: function fromJSONDate(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date).isValid()) return null;
    return moment__WEBPACK_IMPORTED_MODULE_0__(__date, DateTime._JSONDate);
  },

  /**
  * Return Device Date-Time
  */
  fromJSONDeviceDate: function fromJSONDeviceDate(__date) {
    if (__date == undefined || !moment__WEBPACK_IMPORTED_MODULE_0__(__date).isValid()) return null;
    var v = moment__WEBPACK_IMPORTED_MODULE_0__(__date, DateTime._JSONDate).parseZone().format('LLLL');
    var v2 = moment__WEBPACK_IMPORTED_MODULE_0__(v, 'LLLL');
    return v2;
  },

  /**
  * 
  * @param {Date} date 
  * @param {Date} time 
  */
  combineDateTime: function combineDateTime(date, time) {
    var time_m = moment__WEBPACK_IMPORTED_MODULE_0__(time);
    var cH = time_m.hour();
    var cM = time_m.minute();
    var cS = time_m.second();
    var date_m = moment__WEBPACK_IMPORTED_MODULE_0__(date);
    date_m.set('hour', cH);
    date_m.set('minute', cM);
    date_m.set('second', cS);
    return date_m.toDate();
  },
  setLocale: function setLocale(lang) {
    moment__WEBPACK_IMPORTED_MODULE_0__["locale"](lang);
  },
  _humanTime: "LT",
  _humanDateTime: "LLLL",
  _humanDate: "LL",
  _JSONDate: 'YYYY-MM-DD[T]HH:mm:ssZ',
  _humanMMDDYYYY: "MM/DD/YYYY"
};

/***/ }),

/***/ "./core/FileAccess.js":
/*!****************************!*\
  !*** ./core/FileAccess.js ***!
  \****************************/
/*! exports provided: FileAccess */
/*! exports used: FileAccess */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FileAccess; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FileAccess = /*#__PURE__*/function () {
  function FileAccess() {
    _classCallCheck(this, FileAccess);
  }

  _createClass(FileAccess, null, [{
    key: "ReadFile",

    /**
    * Read file blob from fileField.files[0]
    * @param {File} fileBlob 
    */
    value: function ReadFile(fileBlob) {
      /**
      * 
      * @param {function(FileReader):any} readerCallback 
      */
      function getReaderPromise(readerCallback) {
        return new Promise(function (resolve, reject) {
          var reader = new FileReader();

          reader.onloadend = function () {
            // @ts-ignore
            resolve(reader.result);
          };

          reader.onerror = function (err) {
            reject(err);
          };

          readerCallback(reader);
        });
      }

      return {
        /**
        * @returns {Promise<string>}
        */
        DataURL: function DataURL() {
          return getReaderPromise(function (reader) {
            reader.readAsDataURL(fileBlob);
          });
        },

        /**
        * @returns {Promise<ArrayBuffer>}
        */
        ArrayBuffer: function ArrayBuffer() {
          return getReaderPromise(function (reader) {
            reader.readAsArrayBuffer(fileBlob);
          });
        },

        /**
        * @returns {Promise<string>}
        */
        BinaryString: function BinaryString() {
          return getReaderPromise(function (reader) {
            reader.readAsBinaryString(fileBlob);
          });
        },

        /**
        * @returns {Promise<string>}
        */
        Text: function Text() {
          return getReaderPromise(function (reader) {
            reader.readAsText(fileBlob);
          });
        }
      };
    }
  }, {
    key: "isSupported",

    /** Check is file reading is supported */
    get: function get() {
      return !!(window.File && window.FileReader && window.FormData);
    }
  }]);

  return FileAccess;
}();

/***/ }),

/***/ "./core/Injector.js":
/*!**************************!*\
  !*** ./core/Injector.js ***!
  \**************************/
/*! exports provided: Injector */
/*! exports used: Injector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Injector; });
/* harmony import */ var _NavController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NavController */ "./core/NavController.js");
 //poor man's dependency injection
//

/**
 * Import this into the index.js and inject your objects into it
 * var Inject = Injector.implement(InjectTemplate)
	Inject.Config = Config ;
 */

var Injector = {
  implement: function implement(InjectTemplate) {
    return Injector;
  }
};

/***/ }),

/***/ "./core/NavController.js":
/*!*******************************!*\
  !*** ./core/NavController.js ***!
  \*******************************/
/*! exports provided: NavController */
/*! exports used: NavController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NavController; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./core/helpers.js");
/* harmony import */ var _pages_BasePage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pages/BasePage */ "./pages/BasePage.js");
/* harmony import */ var _Watcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Watcher */ "./core/Watcher.js");
/* harmony import */ var _Objects__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Objects */ "./core/Objects.js");
/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DOM */ "./core/DOM.js");
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }






function NavController() {
  /** @type {NavController} */
  var self = this;
  /**
  * @typedef Page
  * @prop name
  */

  /**
  * @typedef PageFrame
  * @prop {string} name
  * @prop {JQuery<Element>} element
  * @prop {object} page
  */

  /** @type {PageFrame[]} */

  var stack = [];
  var windowSize = {
    width: null,
    height: null
  };
  var backTimeout = 300;
  var backTimeoutRunning = false;
  var transitionTime = 400;
  var pageContainer = document.body;
  /**
  * @param {HTMLElement} container
  */

  this.setContainer = function (container) {
    var listenTobBackButton = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    pageContainer = container; //if container is not document, remove the back button handler

    if (pageContainer != document.body && !listenTobBackButton) {
      Object(_DOM__WEBPACK_IMPORTED_MODULE_4__[/* DOM */ "a"])(document).off('backbutton', documentBackButtonHandler);
    }
  };
  /**
  * Remove all pages and load passed page Constructor as Root
  * @param {object} pageConstructor
  * @param {...any} [parameters] 
  * @return {BasePage}
  */


  this.setRoot = function (pageConstructor, parameters) {
    removeAllFrames(); //self.onPageNavigateTo(pageConstructor.name);

    var page = createPage(pageContainer, pageConstructor, Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* argumentsToArray */ "a"])(arguments, 1)); //self.onPageCreated(page);

    return page;
  };
  /**
  * Remove All Pages
  */


  this.removeAll = removeAllFrames;
  /**
  * Push a page on top of stack.
  * @param {object} pageConstructor 
  * @param {...any} [parameters]  
  */

  this.push = function (pageConstructor, parameters) {
    if (currentFrame()) Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(currentFrame().page, currentFrame().page.onLeave); //self.onPageNavigateTo(pageConstructor.name);

    var page = createPage(pageContainer, pageConstructor, Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* argumentsToArray */ "a"])(arguments, 1)); //self.onPageCreated(page);
    //pushState(pageConstructor.name);

    return page;
  };
  /**
  * Push a page on top of stack INTO a specified element
  * @param {HTMLElement} container
  * @param {object} pageConstructor 
  * @param {...any} [parameters]  
  */


  this.pushInto = function (container, pageConstructor, parameters) {
    if (currentFrame()) Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(currentFrame().page, currentFrame().page.onLeave); //self.onPageNavigateTo(pageConstructor.name);

    var page = createPage(container, pageConstructor, Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* argumentsToArray */ "a"])(arguments, 2)); //self.onPageCreated(page);

    return page;
  };
  /**
  * Navigate Back
  * Returns true if success, null if last page and can not go back
  * @return {null|boolean} 
  */


  this.back = function () {
    if (stack.length > 1) {
      if (backTimeoutRunning) return false;
      backTimeoutRunning = true;
      setTimeout(function () {
        backTimeoutRunning = false;
      }, backTimeout);
      removeLastFrame();
      self.onPageNavigateBack(currentFrame().name);
      resetPagesVisibility();
      return true;
    }

    return null;
  };
  /**
  * Remuve page from stack
  * @param {Page} pageObject 
  */


  this.remove = function (pageObject) {
    for (var i = 0; i < stack.length; i++) {
      if (stack[i].page === pageObject) {
        removeFrameN(i);
        break;
      }
    }

    resetPagesVisibility();
  };
  /**
  * Get a list of displayed pages
  * @return {string[]}
  */


  this.getPageNames = function () {
    var ret = [];
    _Objects__WEBPACK_IMPORTED_MODULE_3__[/* Objects */ "a"].forEach(stack, function () {
      ret.push(this.name);
    });
    return ret;
  };
  /**
  * Get Pages Stack
  * @return {PageFrame[]}
  */


  this.getPages = function () {
    var ret = [];
    return stack;
  };
  /**
  * Create page 
  * @param {HTMLElement} container
  * @param {any} pageConstructor 
  * @param {any[]} args - array of arguments to pass to the page constructor
  * @return {BasePage|Promise} 
  */


  function createPage(container, pageConstructor, args) {
    function insertIntoDOM(pageObject) {
      self.onPageNavigateTo(pageObject.name, args);

      if (stack.length == 0) {//history.setRoot(null, pageObject.name, "#" + pageObject.name );
      } else {} //history.push(null, pageObject.name, "#" + pageObject.name );
        //if pbject is vue, mount it first


      if (pageObject._isVue) {
        var newEl = document.createElement('div');
        container.appendChild(newEl);
        pageObject.$args = args;
        pageObject.$mount(newEl);
        var p = pageObject.$el;
      } else {
        Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(pageObject, pageObject._init);
        var p = pageObject.page;
        p.setAttribute('id', pageObject.selector);
        container.appendChild(p);
      }

      pageObject.Nav = self;
      pageObject.style.zIndex = getMaxStackZIndex() + 100;
      var classes = !empty(pageObject.className) ? pageObject.className.split(" ") : [];
      classes.push(className);
      pageObject.className = classes.join(' ');
      self.onPageCreated(pageObject);
      stack.push({
        name: pageObject.name,
        element: p,
        page: pageObject
      });
      resetPagesVisibility();
      Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(pageObject, pageObject.onInit, p);
      setTimeout(function () {
        Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(pageObject, pageObject.onLoaded);
      }, 1);
      return pageObject;
    }

    if (pageConstructor instanceof Promise) {
      //constructor is a promise.
      //Resolve it!
      return pageConstructor.then(function (_pageConstructor) {
        //call it again
        return createPage(container, _pageConstructor, args);
      });
    } else if (typeof pageConstructor == "function") {
      var selector = pageConstructor.selector ? pageConstructor.selector : 'page-' + pageConstructor.name;
      var className = pageConstructor.className ? pageConstructor.className : ""; //create page object in a new scope

      /** @type {BasePage} */

      var pageObject = createPageInstance(pageConstructor, args); //pageObject.visibleParent = pageObject.visibleParent===null ? pageConstructor.visibleParent : pageObject.visibleParent;

      pageObject.name = pageConstructor.name; //empty(pageObject.className) ? pageObject.className = className : null;

      pageObject.selector = selector;
      return insertIntoDOM(pageObject);
    } else {
      //create page object in a new scope

      /** @type {BasePage} */
      var pageObject = pageConstructor;
      pageConstructor = pageObject.constructor;
      var name = (pageConstructor.name + "").replace(/bound /g, ""); //var selector = pageConstructor.selector ? pageConstructor.selector : 'page-' + name;

      var className = pageConstructor.className ? pageConstructor.className : "";
      pageObject.name = name; //empty(pageObject.className) ? pageObject.className = className : null;
      //pageObject.selector = selector;

      return insertIntoDOM(pageObject);
    }
  }

  function getMaxStackZIndex() {
    var maxZ = 0;

    for (var i = 0; i < stack.length; i++) {
      var frame = stack[i];
      maxZ = Math.max(maxZ, frame.page.style.zIndex);
    }

    return maxZ;
  }
  /**
  * 
  * @param {any} pageConstructor 
  * @param {any[]} args 
  */


  function createPageInstance(pageConstructor, args) {
    /*var page = Object.create(pageConstructor.prototype);
    var ret = pageConstructor.apply(page, args);
    return ret ? ret : page;*/
    return _construct(pageConstructor, _toConsumableArray(args));
  }

  function removeFrameN(frameIndex) {
    var frame = stack.splice(frameIndex, 1)[0];
    Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(frame.page, frame.page.onLeave);
    Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(frame.page, frame.page._onDestroy);
    hidePageElement(frame, true); //history.pop();		

    frame = null;
    return true;
  }

  function removeLastFrame() {
    if (stack.length === 0) return null;
    return removeFrameN(stack.length - 1);
  }
  /**
  * Return current page frame
  * @return {PageFrame}
  */


  function currentFrame() {
    if (stack.length === 0) return null;
    return stack[stack.length - 1];
  }

  function removeAllFrames() {
    if (stack.length === 0) return null;
    if (removeLastFrame()) removeAllFrames();
  }
  /**
  * Set Page instance UI state value
  * @param {object} page 
  * @param {'isDeleting'|'isCreating'|'isHiding'|'isShowing'|'isVisible'|'isHidden'} state 
  */


  function setPageState(page, state) {
    if (page[state] == true) {
      return;
    }

    page.isDeleting = null;
    page.isCreating = null;
    page.isHiding = null;
    page.isHidden = null;
    page.isShowing = null;
    page.isVisible = null;
    page[state] = true;
  }
  /**
  * Recalculate pages' visibility
  */


  function resetPagesVisibility() {
    var n = 0;
    var hideAfter = 1;

    for (var i = stack.length - 1; i >= 0; i--) {
      var frame = stack[i];

      if (i == 0) {
        frame.page.isRoot = true;
      } else {
        frame.page.isRoot = null;
      }

      if (!empty(frame.page.visibleParent)) hideAfter++;

      if (hideAfter > n) {
        showPageElement(frame, i < stack.length - 1);
      } else {
        hidePageElement(frame);
      }

      n++;
    }
  }
  /**
  * Show particular page DOM element
  * @param {PageFrame} frame - page to show
  * @param {boolean} [inactive] 
  */


  function showPageElement(frame, inactive) {
    setTimeout(function () {
      if (frame.page.isDeleting) {
        return;
      }

      if (frame.page.isHidden) {
        setPageState(frame.page, 'isShowing');
        setTimeout(function () {
          Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(frame.page, frame.page.onEnter);
        }, 0);
      } else if (!frame.page.isHidden && !frame.page.isHiding && !frame.page.isVisible) {
        //if page is not yet have any attributes
        setPageState(frame.page, 'isCreating'); //Add creating attribute ALMOST immedaitely for smooth appearance

        setTimeout(function () {
          Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(frame.page, frame.page.resize, windowSize);
        }, 0);
        setTimeout(function () {
          Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(frame.page, frame.page.onEnter);
        }, 0);
      }

      if (inactive) {
        frame.page.isInactive = true;
      } else {
        frame.page.isInactive = null;
      } //Set to fully visible after 500ms delay


      setTimeout(function () {
        if (frame.page.isDeleting) {
          return;
        }

        if (!frame.page.isVisible) {
          setPageState(frame.page, 'isVisible');
          Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(frame.page, frame.page._onVisible);
        }
      }, transitionTime);
    });
  }
  /**
  * Hide particular page DOM element
  * @param {PageFrame} frame - page to show
  * @param {boolean} [isDeleting] - true if page is being deleted
  */


  function hidePageElement(frame, isDeleting) {
    var element = frame.element;
    isDeleting = isDeleting || false;
    if (frame.page.isDeleting) return;

    function doHideElem(isDeleting) {
      window.requestAnimationFrame(function () {
        setPageState(frame.page, 'isHidden');

        if (isDeleting) {
          frame.page[_Watcher__WEBPACK_IMPORTED_MODULE_2__[/* isSkipUpdate */ "b"]] = true;
          frame.page.Nav = null;
          frame.page.destroy(true);
        }
      });
    }

    if (!isDeleting && frame.page.isHidden) {
      doHideElem();
    } else {
      if (isDeleting) {
        setPageState(frame.page, 'isDeleting');
      } else {
        setPageState(frame.page, 'isHiding');
      }

      setTimeout(function () {
        doHideElem(isDeleting);
      }, isDeleting ? transitionTime : transitionTime + 100); //hiding takes 100 ms longer than deleting
    }
  } //Set default window size cashe


  windowSize.width = window.innerWidth;
  windowSize.height = window.innerHeight; //add ONE listener that will fire onResize on all pages;

  Object(_DOM__WEBPACK_IMPORTED_MODULE_4__[/* DOM */ "a"])(window).addEventListener('resize', windowResizeHandler);

  function windowResizeHandler(ev) {
    windowSize.width = window.innerWidth;
    windowSize.height = window.innerHeight;

    for (var i = 0; i < stack.length; i++) {
      //recalcContentHeight(stack[i].element);
      Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(stack[i].page, stack[i].page.resize, windowSize);
    }
  }

  Object(_DOM__WEBPACK_IMPORTED_MODULE_4__[/* DOM */ "a"])(document).addEventListener("backbutton", documentBackButtonHandler);

  function documentBackButtonHandler(e) {
    var cf = currentFrame();

    if (cf && Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(cf.page, cf.page.onBackNavigate) !== false && Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(cf.page, cf.page.onBeforeDestroy) !== false && self.back() === null) {
      self.onRootPageBackPressed(cf.name);
    }
  }
  /**
  * Delete Event handlers that were created by the Nav instance
  */


  this.destroy = function () {
    Object(_DOM__WEBPACK_IMPORTED_MODULE_4__[/* DOM */ "a"])(window).removeEventListener('resize'
    /*,windowResizeHandler*/
    );
    Object(_DOM__WEBPACK_IMPORTED_MODULE_4__[/* DOM */ "a"])(document).removeEventListener('backbutton'
    /*,documentBackButtonHandler*/
    );
  };
  /**
  * ***Override***
  * Callback fired when Back button is clicked on LAST page of the app 
  * @param {string} name
  */


  this.onRootPageBackPressed = function (name) {};
  /**
  * ***Override***
  * Callback fired on page forward
  * @param {string} name 
  * @param {any[]} args
  */


  this.onPageNavigateTo = function (name, args) {};
  /**
  * ***Override***
  * Callback fired when page is created
  */


  this.onPageCreated = function (page) {};
  /**
  * Callback fired when page is navigated "back" to
  * @param {string} name 
  */


  this.onPageNavigateBack = function (name) {};
}

function History() {
  var _stack = []; //window.history.replaceState({initialized:true}, "" );
  //window.history.pushState(null, "initial", "#initial");

  function getCurrentState() {
    return window.history.state;
  }

  function push(state, title, url) {
    _stack.push({
      state: state,
      title: title,
      url: url
    });

    window.history.pushState(state, title, url);
  }

  function pop() {
    _stack.pop();

    if (_stack.length > 0) {
      window.history.go(-1);
    }
  }

  function resetHistory() {
    if (_stack.length > 1) {
      window.history.go(-_stack.length);
    }

    _stack = [];
  }

  function setRoot(state, title, url) {
    resetHistory(); //push(state, title, url);

    window.history.replaceState(state, title, url);
  }

  return {
    push: push,
    setRoot: setRoot,
    pop: pop
  };
}

var history = History();

/***/ }),

/***/ "./core/Objects.js":
/*!*************************!*\
  !*** ./core/Objects.js ***!
  \*************************/
/*! exports provided: Objects */
/*! exports used: Objects */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Objects; });
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);


var Objects = {
  filter: function filter(data, callback) {
    var ret;

    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(data) && !Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(data)) {
      ret = {}; //new data.constructor;

      for (var key in data) {
        if (!data.hasOwnProperty(key)) continue; //check if out row using callback

        var elem = data[key];

        if (elem != null && callback(elem, key)) {
          //copy all fields into our array
          ret[key] = elem;
        }
      }
    } else if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(data)) {
      ret = [];

      for (var key in data) {
        if (!data.hasOwnProperty(key)) continue; //check if out row using callback

        var elem = data[key];

        if (elem != null && callback(elem, key)) {
          //copy all fields into our array
          ret.push(elem);
        }
      }
    }

    return ret;
  },
  map: function map(data, callback) {
    var ret;

    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(data) && !Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(data)) {
      ret = {}; //new data.constructor;

      for (var key in data) {
        if (!data.hasOwnProperty(key)) continue; //check if out row using callback

        var elem = data[key];

        if (elem != null) {
          //copy all fields into our array
          ret[key] = callback(elem, key);
        }
      }
    } else if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(data)) {
      ret = [];

      for (var key in data) {
        if (!data.hasOwnProperty(key)) continue; //check if out row using callback

        var elem = data[key];

        if (elem != null) {
          //copy all fields into our array
          ret.push(callback(elem, key));
        }
      }
    }

    return ret;
  },
  find: function find(data, callback) {
    for (var key in data) {
      if (!data.hasOwnProperty(key)) continue; //check if out row using callback

      var elem = data[key];

      if (elem != null && callback(elem, key)) {
        //copy all fields into our array
        return elem;
      }
    }
  },

  /**
  * cycle through objects in an array
  */
  forEach: function forEach(data, callback) {
    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(data)) {
      for (var i = 0; i < data.length; i++) {
        if (callback(data[i], i) === false) return;
      }
    } else {
      for (var key in data) {
        if (!data.hasOwnProperty(key)) continue; //check if out row using callback

        if (callback(data[key], key) === false) return;
      }
    }
  },
  keyBy: function keyBy(array, columnName, columnNames) {
    var ret = {};

    for (var k in array) {
      if (!array.hasOwnProperty(k)) continue;
      if (!columnNames) ret[array[k][columnName]] = array[k];else {
        if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isString"])(columnNames)) {
          ret[array[k][columnName]] = array[k][columnNames];
        } else if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(columnNames)) {
          var r = {};
          Objects.forEach(columnNames, function (cn) {
            r[cn] = array[k][cn];
          });
          ret[array[k][columnName]] = r;
        }
      }
    }

    return ret;
  },

  /**
  * Set Object properties to null. 
  * @param {*} obj 
  */
  clear: function clear(obj) {
    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj)) {
      Objects.forEach(obj, function (el, i) {
        if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(el)) obj[i] = null;else Objects.clear(el);
      });
    } else {
      obj = null;
    }
  },

  /**
  * owerwrite object, preserving reference 
  * @param {*} obj 
  */
  overwrite: function overwrite(obj, src) {
    if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj)) {
      return src;
    }

    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(src)) {
      if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj)) {
        obj = src;
      } else {
        if (obj instanceof Date) {
          obj = src;
        } else {
          if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(src) && Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj)) {
            //if both are arrays: make them the same length
            obj.length = src.length;
          } else {
            //if one or both are not arrays, remove keys from target that are not in source
            var keys = [];

            for (var i in src) {
              keys.push(i);
            }

            for (var i in obj) {
              if (keys.indexOf(i) < 0) {
                delete obj[i]; //console.log("delete key", i);
              }
            }
          }

          for (var i in src) {
            //ONLY assign shallow: that is enough for change detection!
            obj[i] = src[i];
          }
        }
      }
    } else {
      obj = src;
    }

    return obj;
  },

  /**
  * Copy object, breaking reference 
  * @param {*} obj 
  */
  copy: function copy(src) {
    if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(src)) {
      return src;
    }

    var obj;
    if (src instanceof Date) return new Date(src.getTime());else {
      if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(src)) obj = [];else obj = {};

      for (var i in src) {
        obj[i] = Objects.copy(src[i]);
      }
    }
    return obj;
  },

  /**
  * Walk object calling callback on every node
  * @param {object} obj1 
  * @param {object} obj2 
  * @param {function(object,string):boolean} callback - where first parameter is the current node and second is the key in the node. Return False to stop walking the children of the current node
  */
  walk: function walk(obj1, callback) {
    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj1) && callback(obj1, i) !== false) {
      for (var i in obj1) {
        if (obj1.hasOwnProperty(i) && Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj1[i])) {
          Objects.walk(obj1[i], callback);
        }
      }
    }
  },

  /**
  * Walk 2 objects side by side
  * @param {object} obj1 
  * @param {object} obj2 
  * @param {function(object,object,string):any} callback  where first parameter is the current node, second parameter is another objects node and third one is the key in the first node
  */
  walk2: function walk2(obj1, obj2, callback) {
    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj1)) {
      callback(obj1, obj2, i);

      for (var i in obj1) {
        if (obj1.hasOwnProperty(i)) {
          if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj1[i])) {
            Objects.walk2(obj1[i], Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj2) ? obj2[i] : undefined, callback);
          }
        }
      }
    }
  },

  /**
  * Get object property using path
  * @param {*} obj 
  * @param {string[]|string} pathArray 
  * @return {any}
  */
  getPropertyByPath: function getPropertyByPath(obj, pathArray) {
    if (pathArray === "" || pathArray === null || pathArray === undefined) {
      throw new Error("Property path in object " + JSON.stringify(obj) + " can not be empty!");
    }

    if (!Array.isArray(pathArray)) {
      pathArray = ("" + pathArray).replace(/\]./g, '.').replace(/\]/g, '.').replace(/\[/g, '.');
      pathArray = pathArray.split('.');

      if (pathArray[pathArray.length - 1] === '') {
        pathArray.pop();
      }
    }

    if (pathArray.length > 1) {
      var cVal = obj[pathArray.shift()];
      if (cVal == undefined) return cVal;
      return Objects.getPropertyByPath(cVal, pathArray);
    } else return obj[pathArray.shift()];
  },

  /**
  * Get object property using path
  * @param {*} obj 
  * @param {string[]|string} pathArray 
  * @param {any} value
  */
  setPropertyByPath: function setPropertyByPath(obj, pathArray, value) {
    if (pathArray === "" || pathArray === null || pathArray === undefined) {
      throw new Error("Property path in object " + JSON.stringify(obj) + " can not be empty!");
    }

    if (!Array.isArray(pathArray)) {
      pathArray = ("" + pathArray).replace(/\]./g, '.').replace(/\]/g, '.').replace(/\[/g, '.');
      pathArray = pathArray.split('.');

      if (pathArray[pathArray.length - 1] === '') {
        pathArray.pop();
      }
    }

    if (pathArray.length > 1) {
      var shft = pathArray.shift();

      if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj[shft])) {
        obj[shft] = {};
      }

      Objects.setPropertyByPath(obj[shft], pathArray, value);
    } else obj[pathArray.shift()] = value;
  },

  /**
  * Get object property using path
  * @param {*} obj 
  * @param {string[]|string} pathArray 
  * @param {any} value
  */
  deletePropertyByPath: function deletePropertyByPath(obj, pathArray) {
    if (pathArray === "" || pathArray === null || pathArray === undefined) {
      throw new Error("Property path in object " + JSON.stringify(obj) + " can not be empty!");
    }

    if (!Array.isArray(pathArray)) {
      pathArray = ("" + pathArray).split('.');
    }

    if (pathArray.length > 1) Objects.deletePropertyByPath(obj[pathArray.shift()], pathArray);else delete obj[pathArray.shift()];
  },
  getMethods: function getMethods(object) {
    var methods = [];
    var iObj = object;

    do {
      methods = methods.concat(Object.getOwnPropertyNames(iObj));
    } while ((iObj = Object.getPrototypeOf(iObj)) && iObj != Object.prototype);

    methods = Objects.filter(methods, function (key) {
      return typeof object[key] === 'function';
    });
    return methods;
  },
  getProperties: function getProperties(object) {
    var properties = [];
    Object.keys(object).forEach(function (key) {
      properties.push(key);
    });
    return properties;
  },
  bindMethods: function bindMethods(context) {
    var methods = Objects.getMethods(context);
    methods.forEach(function (name) {
      context[name] = context[name].bind(context);
    });
  },
  strip: function strip(object) {
    //destroy all properties and methods, so they can no longer be referenced
    Objects.getMethods(object).forEach(function (i) {
      delete object[i];
    });
    Objects.getProperties(object).forEach(function (i) {
      delete object[i];
    });
  }
};

/***/ }),

/***/ "./core/Translate.js":
/*!***************************!*\
  !*** ./core/Translate.js ***!
  \***************************/
/*! exports provided: ReplaceValues, Translate */
/*! exports used: Translate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ReplaceValues */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Translate; });
/* harmony import */ var _Injector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Injector */ "./core/Injector.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ "./core/helpers.js");



var Inject = _Injector__WEBPACK_IMPORTED_MODULE_0__[/* Injector */ "a"];
/**
 * This function replaces {1},{2},{3}, in LangConstText with corresponding replaceValues
 * @param {string} LangConstText 
 * @param {...string|number} [replaceValues]
 */

var ReplaceValues = function ReplaceValues(LangConstText, replaceValues) {
  var args = arguments;
  if (args.length == 1) return LangConstText;
  return LangConstText.replace(/\{(\d+)\}/g, function (match, contents, offset, input_string) {
    return args[contents];
  });
};
/**
 * 
 * @param {string} keyOrText 
 * @param {...string|number} [replaceValues] text items that replace {1},{2},{3} placeholders in the translated text.
 * @return {string}
 */

function Translate(keyOrText, replaceValues) {
  if (!Inject['LNG']) return keyOrText;
  var ret = Inject['LNG'][keyOrText] ? Inject['LNG'][keyOrText] : keyOrText;

  if (replaceValues && Object(util__WEBPACK_IMPORTED_MODULE_1__["isString"])(ret)) {
    var args = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* argumentsToArray */ "a"])(arguments);
    args[0] = ret;
    return ReplaceValues.apply(null, args);
  }

  return ret;
}

/***/ }),

/***/ "./core/Watcher.js":
/*!*************************!*\
  !*** ./core/Watcher.js ***!
  \*************************/
/*! exports provided: isSkipUpdate, Watcher, onObjectDirtyChange, objectCloneCompare */
/*! exports used: Watcher, isSkipUpdate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isSkipUpdate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Watcher; });
/* unused harmony export onObjectDirtyChange */
/* unused harmony export objectCloneCompare */
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }


var isProxy = Symbol("isProxy");
var isWatched = Symbol("isWatched");
var propertyChangeCallbacks = Symbol("propertyChangeCallbacks");
var objectChangeCallbacks = Symbol("objectChangeCallbacks"); //window['Proxy'] = null; //comment out to test dirty checking on chrome

var isSkipUpdate = Symbol("isSkipUpdate");
/**
 * The watch function creates proxy from any object and watches its changes. Triggers only when own properties change or properties of its simple properties
 * 
 */

var Watcher = {
  skip: isSkipUpdate,
  watched: isWatched,

  /**
   * Watch for object changes. 
  * @param {object} object - object to watch for changes
  * @param {function(object, string, any):void} [onPropertyChangeCallback] - called for each changed property
   * @param {function():void} [onObjectChangeCallback] - timeout 0 de-bounced callback. called on the next frame after all onPropertyChangeCallbacks are executed
   * @param {string[]} [ignoreProperties]
  */
  on: function on(object, onPropertyChangeCallback, onObjectChangeCallback, ignoreProperties) {
    object[isWatched] = true;

    if (!object[propertyChangeCallbacks]) {
      object[propertyChangeCallbacks] = [];
    }

    object[propertyChangeCallbacks].push(onPropertyChangeCallback);

    if (onObjectChangeCallback) {
      if (!object[objectChangeCallbacks]) {
        object[objectChangeCallbacks] = [];
      }

      object[objectChangeCallbacks].push(onObjectChangeCallback);
    }

    function propertyChangeHandler(target, property, value) {
      if ( //value === isSkipUpdate ||
      target[property] === value || Object(util__WEBPACK_IMPORTED_MODULE_0__["isSymbol"])(property) || //property === isSkipUpdate ||
      !object[isWatched]) {
        return;
      }

      var isSkip = object[isSkipUpdate]; //skip any subsequent updates triggered by all onChange Callbacks

      object[isSkipUpdate] = true;
      object[propertyChangeCallbacks].forEach(function (onPropertyChangeCallback) {
        try {
          onPropertyChangeCallback(target, property, value);
        } catch (ex) {
          console.warn(ex);
        }
      });
      object[isSkipUpdate] = isSkip;

      if (target !== object && target[propertyChangeCallbacks] && target[isWatched]) {
        var isSkip2 = target[isSkipUpdate];
        target[isSkipUpdate] = true;
        target[propertyChangeCallbacks].forEach(function (onPropertyChangeCallback) {
          try {
            onPropertyChangeCallback(target, property, value);
          } catch (ex) {
            console.warn(ex);
          }
        });
        target[isSkipUpdate] = isSkip2;
      }

      scheduleTargetCallback(target);
      scheduleCallback();
    }

    function scheduleCallback() {
      if (object[isSkipUpdate] || !object[isWatched]) {
        return;
      }

      object[isSkipUpdate] = true;
      setTimeout(function scheduledUpdate() {
        if (!object[isWatched]) {
          return;
        } //prevent changes in object from calling other updates while onUpdateCallback is executing


        object[isSkipUpdate] = true;
        object[objectChangeCallbacks].forEach(function (onUpdateCallback) {
          try {
            onUpdateCallback();
          } catch (ex) {
            console.warn(ex);
          }
        });
        object[isSkipUpdate] = false;
      }, 0);
    }

    function scheduleTargetCallback(target) {
      if (target == object) {
        return;
      }

      if (target[isSkipUpdate] || !target[isWatched] || !target[objectChangeCallbacks]) {
        return;
      }

      target[isSkipUpdate] = true;
      setTimeout(function scheduledUpdate() {
        if (!target[isWatched]) {
          return;
        } //prevent changes in object from calling other updates while onUpdateCallback is executing


        target[isSkipUpdate] = true;

        if (target[objectChangeCallbacks]) {
          target[objectChangeCallbacks].forEach(function (onUpdateCallback) {
            try {
              onUpdateCallback();
            } catch (ex) {
              console.warn(ex);
            }
          });
        }

        target[isSkipUpdate] = false;
      }, 0);
    }

    return getWatchedObject(object, propertyChangeHandler, ignoreProperties);
  },
  off: function off(object, handler) {
    if (!handler) {
      delete object[isWatched];
      delete object[propertyChangeCallbacks];
      delete object[objectChangeCallbacks];
    } else {
      for (var i in object[propertyChangeCallbacks]) {
        if (object[propertyChangeCallbacks][i]) object[propertyChangeCallbacks].splice(i, 1);
      }

      for (var _i in object[objectChangeCallbacks]) {
        if (object[objectChangeCallbacks][_i]) object[objectChangeCallbacks].splice(_i, 1);
      }
    }
  }
};

function getWatchedObject(object, onPropertyChange, ignoreProperties) {
  ignoreProperties = ignoreProperties || [];

  if (window['Proxy'] && window['Reflect']) {
    var handler = {
      get: function get(target, property, receiver) {
        if (property == isProxy) return true;
        var value = Reflect.get(target, property, receiver); //return as-is if its a primitive	

        if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(value)) return value;
        if (value && Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(value) && value[isProxy]) return value; //return non-modifiable objects as-is

        var desc = Object.getOwnPropertyDescriptor(target, property);
        if (desc && !desc.writable && !desc.configurable) return value; //return objects, instantiated with `new` as-is

        if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(value) && Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(value) && !isObjLiteral(value)) return value;

        try {
          return new Proxy(target[property], handler);
        } catch (error) {
          return value;
        }
      },
      set: function set(target, property, value) {
        if (ignoreProperties.indexOf(property) < 0) onPropertyChange(target, property, value);
        return Reflect.set(target, property, value);
      },
      defineProperty: function defineProperty(target, property, descriptor) {
        if (ignoreProperties.indexOf(property) < 0) onPropertyChange(target, property, descriptor);
        return Reflect.defineProperty(target, property, descriptor);
      },
      deleteProperty: function deleteProperty(target, property) {
        if (ignoreProperties.indexOf(property) < 0) onPropertyChange(target, property, undefined);
        return Reflect.deleteProperty(target, property);
      }
    };
    return new Proxy(object, handler);
  } else {
    onObjectDirtyChange(object, function (target, property, value) {
      //property changed callback
      onPropertyChange(target, property, value);
    }, ignoreProperties);
    return object;
  }
}

function isObjLiteral(_obj) {
  var _test = _obj;
  return _typeof(_obj) !== 'object' || _obj === null ? false : function () {
    while (!false) {
      _test = Object.getPrototypeOf(_test);

      if (_test === null || Object.getPrototypeOf(_test) === null) {
        break;
      }
    }

    return Object.getPrototypeOf(_obj) === _test;
  }();
}
/**
 * Dirty-Listen to object changes 
 * Callback is fired for every changed property
 * @param {object} object 
 * @param {function(object, string, any):void} onPropertyChangeCallback 
 * @param {string[]} [ignoreProperties]
 */


function onObjectDirtyChange(object, onPropertyChangeCallback, ignoreProperties) {
  ignoreProperties = ignoreProperties || [];
  var refObject = {}; //reference cpy of the object we are watching

  var checkHash = function checkHash() {
    //throttle the request animation to 50ms
    setTimeout(function () {
      var checked = objectCloneCompare(refObject, object, onPropertyChangeCallback, ignoreProperties);

      if (object[isWatched]) {
        refObject = checked;
        window.requestAnimationFrame(checkHash);
      }
    }, 50);
  };

  window.requestAnimationFrame(checkHash);
}
/**
 * Compares old object and new object. 
 * Does not clone classes or functions. they are compared by reference only.
 * Callback is fired for every changed property.
 * Returns the cloned copy of the new object for subsequent change checking
 * @param {object} oldObj 
 * @param {object} newObj 
 * @param {function(object, string, any):void} onPropertyChangeCallback 
 * @param {string[]} [ignoreProperties]
 * @return {object}
 */

function objectCloneCompare(oldObj, newObj, onPropertyChangeCallback, ignoreProperties) {
  ignoreProperties = ignoreProperties || [];
  var oldKeys = getObjKeys(oldObj);
  var newKeys = getObjKeys(newObj);
  var newChecked = [];
  var ret = Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(newObj) ? [] : {};

  for (var i in oldKeys) {
    var k = oldKeys[i];

    if (newObj[k] !== undefined) {
      //new object has the old key
      if (ignoreProperties.indexOf(k) < 0) {
        //if key is not in the igniore array
        if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isDate"])(oldObj[k]) && Object(util__WEBPACK_IMPORTED_MODULE_0__["isDate"])(newObj[k])) {
          if (oldObj[k].getTime() !== newObj[k].getTime()) {
            onPropertyChangeCallback(newObj, k, newObj[k]);
            oldObj[k] = new Date(newObj[k]);
          }
        } else if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(oldObj[k]) && Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(newObj[k])) {
          if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(newObj[k]) || isObjLiteral(newObj[k])) {
            if (oldObj[k].length !== newObj[k].length) {
              onPropertyChangeCallback(newObj, k, newObj[k]);
            }

            ret[k] = objectCloneCompare(oldObj[k], newObj[k], onPropertyChangeCallback, ignoreProperties);
          } else {
            //new object is not an array and is a complex object
            if (oldObj[k] !== newObj[k]) {
              //check them by reference
              onPropertyChangeCallback(newObj, k, newObj[k]);
            } //do not scan complex children


            ret[k] = newObj[k];
          }
        } else if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(oldObj[k]) !== Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(newObj[k])) {
          //old isObject is not the same as new isObject
          onPropertyChangeCallback(newObj, k, newObj[k]);
        } else {
          //in the end compare values the normal way
          if (oldObj[k] !== newObj[k]) {
            onPropertyChangeCallback(newObj, k, newObj[k]);
          }

          ret[k] = newObj[k];
        }
      }

      if (ret[k] == undefined) {
        ret[k] = newObj[k];
      } //delete newKey


      newChecked.push(k);
    } else {
      //key does not exist in the new object
      if (oldObj[k] !== undefined) {
        onPropertyChangeCallback(newObj, k, undefined);
      } else {
        //both old and new objects properties are undefined
        newChecked.push(k);
      }
    }
  } //iterate over keys that are NOT in the old object


  for (var _i2 in newKeys) {
    var _k = newKeys[_i2];

    if (newObj[_k] === undefined || newChecked.indexOf(_k) >= 0 || ignoreProperties.indexOf(_k) >= 0) {
      continue;
    }

    onPropertyChangeCallback(newObj, _k, newObj[_k]);
    ret[_k] = {};

    if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(newObj) && !isObjLiteral(newObj)) {
      ret[_k] = newObj[_k];
    } else {
      ret[_k] = objectCloneCompare({}, newObj[_k], onPropertyChangeCallback, ignoreProperties);
    }
  }

  if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(newObj)) {
    return newObj;
  }

  return ret;
}

function getObjKeys(obj) {
  if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj)) {
    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj)) {
      return Array.apply(null, Array(obj.length)).map(function (v, i) {
        return i;
      });
    } else {
      return Object.keys(obj);
    }
  }

  return [];
}

/***/ }),

/***/ "./core/form_validator.js":
/*!********************************!*\
  !*** ./core/form_validator.js ***!
  \********************************/
/*! exports provided: FormValidator, FormWalker */
/*! exports used: FormValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FormValidator; });
/* unused harmony export FormWalker */
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Objects__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Objects */ "./core/Objects.js");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ "./core/helpers.js");
/* harmony import */ var _Translate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Translate */ "./core/Translate.js");
/* harmony import */ var expr_eval__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! expr-eval */ "./node_modules/expr-eval/dist/bundle.js");
/* harmony import */ var expr_eval__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(expr_eval__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./text */ "./core/text.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }








var dynamicIndexSymbol = Symbol("dynamicIndexSymbol");
/**
 * Validate data array according to validating rules, defined in template object, errors will be writtel in errors object and visibuility flags written in attributes object 
 * @param {{[key:string]:any}} [data] 
 * @param {FieldTemplate[]} [template] 
 * @param {{[key:string]:any}} [errors] 
 * @param {{nestedData?:boolean}} [options]
 */

function FormValidator(data, template, errors, options) {
  /** @type {FormValidator} */
  var self = this;

  var _data = data || null;

  var _template = template || null;

  var _errors = errors || {};

  var used = [];
  var touched = [];
  var _messages = FormValidator.messages;

  var _options = Object.assign({}, {
    nestedData: false
  }, options);

  if (Object(_Translate__WEBPACK_IMPORTED_MODULE_3__[/* Translate */ "a"])('form_validator') !== 'form_validator' && Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(Object(_Translate__WEBPACK_IMPORTED_MODULE_3__[/* Translate */ "a"])('form_validator'))) {
    // @ts-ignore
    setMessages(Object(_Translate__WEBPACK_IMPORTED_MODULE_3__[/* Translate */ "a"])('form_validator'));
  }

  var _rules = FormValidator.rules;
  var isValid = null;
  this.isValid = null;

  this.__defineGetter__("isValid", function () {
    isValid = self.validate(false);
    return isValid;
  });

  var fields = this.fields = FormWalker.set_names(_template);
  /*Objects.forEach(fields, (_, key)=> {
    if (Objects.getPropertyByPath(data, key) == undefined)
      Objects.setPropertyByPath(data, key, null);
  });*/

  /**
   * Set _name properties in the template
   * @param {*} obj 
   * @param {string[]} [path]
   */

  this.walkElements = walkElements;

  function walkElements(obj, callback, path) {
    if (!path) {
      path = [];
    }

    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj)) {
      _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].forEach(obj, function (el) {
        if (el.name) {
          var npath = path.slice();
          npath.push(el.name);
        }

        if (walkElements(el, callback, npath) === false) return false;
      });
    }

    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj) && obj.name) {
      if (Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* tryCall */ "g"])(null, callback, obj, path.slice()) === false) return false;
    }

    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj) && obj.type == 'select') {
      path.pop();
    }

    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj) && obj.items) {
      if (walkElements(obj.items, callback, path.slice()) === false) return false;
    }
  }

  this.getVisibleData = getVisibleData;
  /**
   * Get visible data according to displayRile, and hierarchy rules.
   */

  function getVisibleData() {
    var obj = {};
    _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].walk(template, function (el) {
      if (el && el._name) if (!el.attributes || !el.attributes.hidden && el.attributes.data !== false) {
        if (el.name && el.type != "form" && el.type != "label" && el.type != "link" && el.type != "button") _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].setPropertyByPath(obj, el._name, _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].getPropertyByPath(data, el._name));
      } else if (el.attributes && (el.attributes.hidden || el.attributes.data === false)) {
        //This element is hidden. Do not include its possible children!
        return false;
      }
    });
    return obj;
  }
  /**
   * Validate data array according to validating rules, defined in template object, errors will be written in errors object and visibility flags written in attributes object 
   * @param {{[key:string]:any}} data 
   * @param {FieldTemplate[]} template 
   * @param {{[key:string]:any}} errors 
   * @return {FormValidator}
   */


  this.set = function (data, template, errors) {
    _data = data;
    _template = template;
    _errors = errors;
    return self;
  };

  this.setData = function (data) {
    _data = null;
    return self;
  };

  this.setTemplate = function (template) {
    _template = null;
    return self;
  };

  this.setErrors = function (errors) {
    _errors = null;
    return self;
  };
  /**
   * Messages can Use :attribute :other :min :max :date placeholders
   * @param {{[rule:string]:string}} messages
   */


  function setMessages(messages) {
    _messages = Object.assign({}, FormValidator.messages, messages);
    return self;
  }

  this.setMessages = setMessages;
  /**
   *  @param {{[rule:string]:function(any, 'string'|'array'|'numeric'|'select', string[], FormValidator):boolean}} rules
   */

  this.setRules = function (rules) {
    _rules = Object.assign({}, FormValidator.rules, rules);
    return self;
  };
  /**
   * 
   */


  this.getMessages = function () {
    return _messages;
  };
  /**
   * Validate data array according to validating rules, defined in template object, errors will be writtel in errors object and visibuility flags written in attributes object 
   * @return {boolean}
   */


  this.validate = function () {
    var showErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    used = [];
    isValid = true; //Objects.forEach(fields, field => {
    //  if (validate_object(field, showErrors) > 0) {
    //    isValid = false;
    //  }
    //});

    if (validate_object(template, showErrors) > 0) {
      isValid = false;
    }

    return isValid;
  };

  this.clearErrors = function () {
    used = [];
    _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].clear(_errors);
  };
  /**
   * Validate a single field in data array according to validating rules, defined in template object, errors will be writtel in errors object and visibuility flags written in attributes object 
   * @return {boolean}
   */


  this.validateField = function (name) {
    if (touched.indexOf(name) < 0) {
      touched.push(name);
    }

    var r = 0;
    touched.forEach(function (n) {
      r += validate_field(getTemplateValue(n));
    });
    validate_visibility(template);
    execute_field_action(getTemplateValue(name), 'setField');
    isValid = r == 0;
    return isValid;
  };

  function parts(name) {
    var p = name.split('.');

    if (p.length > 1) {
      return {
        form: p[0],
        name: p[1]
      };
    }

    return {
      form: null,
      name: p[0]
    };
  }
  /**
   * Set element visibility according to displayRule
   */


  this.validateVisibility = function () {
    validate_visibility(template);
  };
  /**
   * 
   * @param {FieldTemplate|FieldTemplate[]} obj - FieldTemplate or array to validate
   * @param {string[]} [path]
   */


  function validate_object(obj) {
    var showErrors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var e = 0;

    if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj) && !Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj)) {
      return 0;
    } //object is FieldTemplate


    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj) && !Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj)) {
      if (obj.validateRule) {
        e += validate_field(obj, showErrors);
      } //items of a form


      if (obj.type == "form" && obj.items) {
        var visible = is_field_visible(obj);

        if (visible) {
          e += validate_object(obj.items, showErrors);
        }
      } //items of the select box


      if (obj.type == "select" && obj.items) {
        var v = _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].getPropertyByPath(_data, obj.name);
        _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].forEach(obj.items, function (el) {
          //only validate items of the selected item!
          if (el.value == v) {
            e += validate_object(el.items, showErrors);
          }
        });
      } //items of the selected item


      if (obj.type == undefined && obj.items) {
        e += validate_object(obj.items, showErrors);
      }
    } //Object is an array FieldTemplate[]


    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj)) {
      _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].forEach(obj, function (el) {
        e += validate_object(el, showErrors);
      });
    }

    return e;
  }
  /**
   * Validate data array according to validating rules, defined in template object, errors will be writtel in errors object and visibuility flags written in attributes object 
   * @param {FieldTemplate} t 
   * @return {number}
   */


  function validate_field(t) {
    var showErrors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var e = 0;

    if (!Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(t)) {
      prepField(t._name);
      var visible = is_field_visible(t);

      if (t.validateRule && visible) {
        var err = is_field_invalid(t, 'validateRule');

        if (!Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(err)) {
          if (showErrors) setValue(_errors, t._name, err);
          e++;
        } else {
          setValue(_errors, t._name, null);
        }
      } else {
        if (!t.name.match(/\/.*\//)) {
          setValue(_errors, t._name, null);
        }
      } //if element is visible and it has items "its a select box"


      if (visible && Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(t.items)) {
        var newOnes = [];
        var value = _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].getPropertyByPath(data, t._name);

        if (t.value_old != value) {
          //if value of the select has changed, then delete all properties that it could have produced
          _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].forEach(t.items, function (item) {
            if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(item.items) && item.value == value) {
              _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].forEach(item.items, function (el) {
                newOnes.push(el);
              });
            } else if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(item.items)) {
              _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].forEach(item.items, function (el) {
                try {
                  _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].deletePropertyByPath(data, el._name);
                  _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].deletePropertyByPath(errors, el._name);
                } catch (ex) {}

                touched = touched.filter(function (el2) {
                  return el2 !== el._name;
                });
              });
            }
          }); //initialize newly-shown fields

          newOnes.forEach(function (el) {
            if (el.value && !_Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].getPropertyByPath(data, el._name)) {
              setValue(_data, el._name, el.value);
            }

            if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(el.items) && el.items.length > 0 && !el.placeholder && !_Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].getPropertyByPath(data, el._name)) {
              setValue(data, el._name, el.items[0].value);
            }
          });
        } //remember the old value of the select box


        t.value_old = _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].getPropertyByPath(data, t._name);
      }
    }

    return e;
  }
  /**
   * Execute rule 
   * @param {FieldTemplate} t 
   * @param {string} propname
   */


  function execute_field_action(t, propname) {
    if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(t)) {
      return;
    }

    var wholerule = t[propname];
    if (Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(wholerule) || !Object(util__WEBPACK_IMPORTED_MODULE_0__["isString"])(wholerule)) return;
    var parts = wholerule.split('|');
    var expr;

    try {
      if (parts.length == 1) {
        var action = 'set';
        var fieldName = parts[0];
        expr = getValue(_data, t._name);
      } else if (parts.length == 2) {
        var action = 'set';
        var fieldName = parts[0];
        expr = parts[1];
      } else if (parts.length == 3) {
        var action = parts[0];
        var fieldName = parts[1];
        expr = parts[2];
      } else {
        return;
      }

      switch (action) {
        case 'math':
          var p = new expr_eval__WEBPACK_IMPORTED_MODULE_4__["Parser"]();
          var res = p.evaluate(expr, _data);
          setValue(_data, fieldName, res);
          break;

        default:
          setValue(_data, fieldName, expr);
      }
    } catch (ex) {
      console.log("Error evaluating " + wholerule, ex);
    }
  }
  /**
   * Validate data array according to validating rules, defined in template object, errors will be writtel in errors object and visibuility flags written in attributes object 
   */


  function validate_visibility(obj, path) {
    var e = 0;
    if (!Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj) && !Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj)) return 0;

    if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj)) {
      _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].forEach(obj, function (el) {
        e += validate_visibility(el);
      });
    } else if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj)) {
      var visible = true;

      if (obj.displayRule) {
        //prepField(obj._name);
        visible = is_field_visible(obj);

        if (!visible) {
          //only reset data and error values if field name is not yet hidden
          if (Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(fields[obj._name].attributes.hidden)) {
            setValue(_errors, obj._name, null);
          }

          fields[obj._name].attributes.hidden = true;
        } else {
          delete fields[obj._name].attributes.hidden;
        }
      }

      if (visible && obj.items) {
        e += validate_visibility(obj.items);
      }
    }

    return e;
  }

  function prepField(name) {
    if (name) {
      if (getValue(_data, name) == undefined) setValue(_data, name, null);
      if (!getValue(_errors, name) == undefined) setValue(_data, name, null);
    }
  }
  /**
   * 
   * @param {FieldTemplate} f 
   */


  function is_field_visible(f) {
    if (Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(f.displayRule)) {
      return true;
    }

    var _f$displayRule$split = f.displayRule.split(':'),
        _f$displayRule$split2 = _slicedToArray(_f$displayRule$split, 2),
        rule = _f$displayRule$split2[0],
        parts = _f$displayRule$split2[1];

    var otherfieldCompareValues = parts.split(',');
    var otherFieldName = otherfieldCompareValues.shift();
    var otherFieldValue = self.getDataValue(otherFieldName);

    if (otherFieldValue === undefined || otherFieldValue === null) {
      otherFieldValue = "null";
    }

    otherFieldValue = "" + otherFieldValue;

    if (rule == "true_if") {
      if (fields[otherFieldName].attributes.hidden) {
        return otherfieldCompareValues.indexOf("null") >= 0;
      }

      return otherfieldCompareValues.indexOf(otherFieldValue) >= 0;
    } else if (rule == "true_if_not") {
      if (fields[otherFieldName].attributes.hidden) {
        return otherfieldCompareValues.indexOf("null") < 0;
      }

      return otherfieldCompareValues.indexOf(otherFieldValue) < 0;
    }
  }
  /**
   * 
   * @param {FieldTemplate} f 
   */


  function is_field_invalid(f, propName) {
    //iterate through messages to see if any keys match rule "required|max"
    var rules = f[propName].split("|"); //split rules

    var errmsg = ""; //check if errmsg is an array and then assign a proper errormsg

    var type = "string";

    if (rules.indexOf('array') != -1) {
      type = 'array';
    }

    if (rules.indexOf('number') != -1) {
      type = 'numeric';
    }

    if (rules.indexOf('numeric') != -1) {
      type = 'numeric';
    }

    if (rules.indexOf('integer') != -1) {
      type = 'numeric';
    }

    if (rules.indexOf('string') != -1) {
      type = 'string';
    }

    if (rules.indexOf('digits') != -1) {
      type = 'string';
    }

    if (rules.indexOf('boolean') != -1) {
      type = 'boolean';
    }

    if (type == 'string' && f.type == "select"
    /*|| f.type =="radio"*/
    ) {
      type = 'select';
    }

    if (type == 'string' && f.type == "file") {
      type = 'file';
    } //iterate through rules


    for (var r in rules) {
      var rr = rules[r].split(":");
      var conditions = "";
      errmsg = _messages[rr[0]];

      if (!errmsg) {
        throw new Error("Message for rule " + rr[0] + " is not present in the validation messages!");
      }

      if (rr[1] != undefined) conditions = rr[1]; //errmsg can also be an array with different messages for different data types

      errmsg = errmsg[type] || errmsg; //set default value

      if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(errmsg) || errmsg['string']) {
        errmsg = errmsg['string'];
      }

      var name = f._name;
      var dValue = getValue(_data, name); //only validate fields that are either required, or not empty

      if (!Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(dValue) || rules.indexOf('accepted') >= 0 || rules.indexOf('required') >= 0 || rr[0] === 'required_if' || rr[0] === 'true_if' || rr[0] === 'true_if_not') {
        var title = f.title;

        if (!title || Object(util__WEBPACK_IMPORTED_MODULE_0__["isString"])(title) && title.length > 25) {
          title = "field";
        }

        errmsg = errmsg.replace(':attribute', title); //split conditions by , use \\, to escape the split

        var conditions_arr = conditions.replace(/\\,/g, "~;").split(',').map(function (e) {
          return e.replace(/~;/g, ',');
        });
        if (!conditions_arr) conditions_arr = [""];
        var c_name = conditions_arr[0];
        var c_template = getTemplateValue(tryDefaultForm(c_name, name));

        if (!Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(c_template)) {
          errmsg = errmsg.replace(':other', c_template.title);
          var otherFieldValue = getValue(_data, tryDefaultForm(c_name, name));

          if (c_template.items && c_template.items.length > 0) {
            var otherFieldItem = _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].find(c_template.items, function (t) {
              return t.value == otherFieldValue;
            });
            errmsg = errmsg.replace(':value', otherFieldItem ? otherFieldItem.title : "null");
          } else {
            errmsg = errmsg.replace(':value', otherFieldValue);
            errmsg = errmsg.replace(':max', otherFieldValue);
            errmsg = errmsg.replace(':min', otherFieldValue);
          }
        }

        if (errmsg.indexOf(':max') >= 0 && errmsg.indexOf(':max') >= 0) {
          //min and max both present so split the condition string
          if (conditions_arr.length == 2) {
            errmsg = errmsg.replace(':min', conditions_arr[0]);
            errmsg = errmsg.replace(':max', conditions_arr[1]);
          }
        }

        errmsg = errmsg.replace(':max', c_name);
        errmsg = errmsg.replace(':min', c_name);
        errmsg = errmsg.replace(':digits', c_name);
        errmsg = errmsg.replace(':size', c_name);

        if (errmsg.indexOf(':date') >= 0) {
          var otherFieldValue;

          if (!isNaN(Number(c_name))) {
            otherFieldValue = Number(c_name);
          } else {
            otherFieldValue = getValue(_data, tryDefaultForm(c_name, name));
          }

          errmsg = errmsg.replace(':date', new Date(otherFieldValue).toLocaleString());
        }

        if (errmsg.indexOf(':values') >= 0) {
          errmsg = errmsg.replace(':values', conditions);
        }

        var result = validate_isfail(name, rr[0], type, conditions_arr);

        if (result) {
          var err = result === true ? errmsg : errmsg.replace(':result', result);
          return err;
        }
      }
    }

    return 0;
  } //return true if fail validation

  /**
   * 
   * @param {*} name 
   * @param {*} key 
   * @param {*} type 
   * @param {string[]} conditions 
   */


  function validate_isfail(name, key, type, conditions) {
    var value = getValue(_data, name);
    if (typeof value == 'undefined') value = null;

    if (_rules[key]) {
      var ret = _rules[key](value, type, conditions, self, name);

      if (ret === false || ret === true) {
        return !ret;
      }

      return ret;
    }

    throw new Error("Rule " + key + " is not present in the validation rules!");
    return false;
  }
  /**
   * Get add form name from the name to cName if it does not have it yet
   * @param {string} cName 
   * @param {string} name 
   */


  function tryDefaultForm(cName, name) {
    var p = parts(cName);

    if (!p.form || !_options.nestedData) {
      var f = parts(name).form;
      if (!f) return cName;
      return f + "." + cName;
    }

    return cName;
  }
  /**
   * Get value at name or form.name
   * @param {*} object
   * @param {string} name 
   */


  function getValue(object, name) {
    try {
      return _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].getPropertyByPath(object, name);
    } catch (ex) {
      return undefined;
    }
  }

  this.getDataValue = function (name) {
    var cName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    return getValue(_data, tryDefaultForm(name, cName));
  };
  /**
   * Get value at name or form.name
   * @param {string} name 
   * @return {FieldTemplate}
   */


  function getTemplateValue(name) {
    return fields[name];
  }

  this.setValue = setValue;
  /**
   * Set value at name or form.name
   * @param {*} object
   * @param {string} name 
   * @param {*} value
   */

  function setValue(object, name, value) {
    _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].setPropertyByPath(object, name, value);
  }
} //default english messages. Rules for some of these are not yet implemented.

FormValidator.messages = {
  "accepted": "The :attribute must be accepted.",
  "active_url": "The :attribute is not a valid URL.",
  "after": "The :attribute must be a date after :date.",
  "alpha": "The :attribute may only contain letters.",
  "alpha_dash": "The :attribute may only contain letters, numbers, and dashes.",
  "alpha_num": "The :attribute may only contain letters and numbers.",
  "array": "The :attribute must be an array.",
  "before": "The :attribute must be a date before :date.",
  "between": {
    "number": "The :attribute must be between :min and :max.",
    "numeric": "The :attribute must be between :min and :max.",
    "file": "The :attribute must be between :min and :max kilobytes.",
    "string": "The :attribute must be between :min and :max characters.",
    "array": "The :attribute must have between :min and :max items."
  },
  "boolean": "The :attribute must be true or false.",
  "confirmed": "The :attribute confirmation does not match.",
  "date": "The :attribute is not a valid date.",
  "date_format": "The :attribute does not match the format :format.",
  "different": "The :attribute and :other must be different.",
  "digits": "The :attribute must be :digits digits.",
  "digits_between": "The :attribute must be between :min and :max digits.",
  "distinct": "The :attribute has a duplicate value.",
  "email": "The :attribute must be a valid email address.",
  "exists": "The selected :attribute is invalid.",
  "filled": "The :attribute is required.",
  "image": "The :attribute must be an image.",
  "in": "The selected :attribute is invalid.",
  "in_array": "The :attribute does not exist in :other.",
  "integer": "The :attribute must be an integer.",
  "ip": "The :attribute must be a valid IP address.",
  "json": "The :attribute must be a valid JSON string.",
  "max": {
    "number": "The :attribute may not be greater than :max.",
    "numeric": "The :attribute may not be greater than :max.",
    "file": "The :attribute may not be greater than :max kilobytes.",
    "string": "The :attribute may not be greater than :max characters.",
    "array": "The :attribute may not have more than :max items."
  },
  "mimes": "The :attribute must be a file of type: :values.",
  "min": {
    "number": "The :attribute must be at least :min.",
    "numeric": "The :attribute must be at least :min.",
    "file": "The :attribute must be at least :min kilobytes.",
    "string": "The :attribute must be at least :min characters.",
    "array": "The :attribute must have at least :min items."
  },
  "not_in": "The selected :attribute is invalid.",
  "number": "The :attribute must be a number.",
  "numeric": "The :attribute must be a number.",
  "present": "The :attribute must be present.",
  "regex": "The :attribute is not valid. :result",
  "required": "The :attribute is required.",
  "required_if": "The :attribute is required when :other is :value.",
  "required_unless": "The :attribute is required unless :other is in :values.",
  "required_with": "The :attribute is required when :values is present.",
  "required_with_all": "The :attribute is required when :values is present.",
  "required_without": "The :attribute is required when :values is not present.",
  "required_without_all": "The :attribute is required when none of :values are present.",
  "same": "The :attribute and :other must match.",
  "size": {
    "number": "The :attribute must be :size.",
    "numeric": "The :attribute must be :size.",
    "file": "The :attribute must be :size kilobytes.",
    "string": "The :attribute must be :size characters.",
    "array": "The :attribute must contain :size items."
  },
  "string": "The :attribute must be a string.",
  "timezone": "The :attribute must be a valid zone.",
  "unique": "The :attribute has already been taken.",
  "url": "The :attribute format is invalid.",
  "isValid": "The :attribute is not invalid." //"phone":"The :attribute format is invalid."

};
/** @type {{[key:string]:function(any, 'string'|'array'|'numeric'|'select', string[], FormValidator, string):boolean}} */

FormValidator.rules = {
  unique: function unique(value, type, conditions, validator) {
    return true;
  },
  accepted: function accepted(value, type, conditions, validator) {
    return value !== "" && value != null && value != false;
  },
  required: function required(value, type, conditions, validator, name) {
    if (type == "select") {
      return value !== null;
    }

    if (type == "boolean") {
      return value !== null && value !== undefined;
    }

    if (type == "file") {
      return !Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value) && !Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value.name);
    }

    if (validator.fields[name].attributes.isValid != undefined) {//return validator.fields[name].attributes.isValid
    }

    return value !== "" && value != null && value != false;
  },
  filled: function filled(value, type, conditions, validator) {
    return FormValidator.rules.required(value, type, conditions, validator);
  },
  different: function different(value, type, conditions, validator) {
    if (value == validator.getDataValue(conditions[0])) return false;
    return true;
  },
  same: function same(value, type, conditions, validator) {
    if (value == validator.getDataValue(conditions[0])) {
      return true;
    }

    return false;
  },
  required_if: function required_if(value, type, conditions, validator) {
    var otherValue = validator.getDataValue(conditions[0]);
    conditions = conditions.slice(1);

    if (conditions.length == 0 && otherValue) {
      return FormValidator.rules.required(value, type, conditions, validator);
    }

    if (conditions.length > 0) {
      if (conditions.indexOf(otherValue) >= 0) {
        return FormValidator.rules.required(value, type, conditions, validator);
      }
    }

    return true;
  },
  min: function min(value, type, conditions, validator) {
    var otherValue;

    if (!isNaN(Number(conditions[0]))) {
      otherValue = Number(conditions[0]);
    } else {
      otherValue = validator.getDataValue(conditions[0]);
    }

    switch (type) {
      case 'numeric':
        return Number(value) >= otherValue;

      case 'array':
        return true;

      case 'file':
        return !Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value) && !Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value.size) ? Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* round */ "f"])(Number(value.size) / 1024) >= otherValue : false;

      case 'string':
      default:
        return (value + "").length >= otherValue;
    }
  },
  mimes: function mimes(value, type, conditions, validator) {
    if (Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value) || Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value.name)) {
      return false;
    }

    var chVal = "";

    if (type == "file") {
      chVal = _text__WEBPACK_IMPORTED_MODULE_5__[/* Text */ "a"].fileExtension(value.name);
    } else {
      chVal = value;
    }

    return conditions.indexOf(chVal) >= 0;
  },
  max: function max(value, type, conditions, validator) {
    var otherValue;

    if (!isNaN(Number(conditions[0]))) {
      otherValue = Number(conditions[0]);
    } else {
      otherValue = validator.getDataValue(conditions[0]);
    }

    switch (type) {
      case 'numeric':
        return Number(value) <= otherValue;

      case 'array':
        return true;

      case 'file':
        return !Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value) && !Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value.size) ? Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* round */ "f"])(Number(value.size) / 1024) <= otherValue : false;

      case 'string':
      default:
        return (value + "").length <= otherValue;
    }
  },
  size: function size(value, type, conditions, validator) {
    var otherValue = Number(conditions[0]);

    switch (type) {
      case 'numeric':
        return Number(value) == otherValue;

      case 'array':
        return true;

      case 'file':
        return !Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value) && !Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value.size) ? Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* round */ "f"])(Number(value.size) / 1024) == otherValue : false;

      case 'string':
      default:
        return (value + "").length == otherValue;
    }
  },
  after: function after(value, type, conditions, validator) {
    var otherValue;

    if (!isNaN(Number(conditions[0]))) {
      otherValue = Number(conditions[0]);
    } else {
      otherValue = validator.getDataValue(conditions[0]);
    }

    return Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value) || new Date(value) > new Date(otherValue);
  },
  before: function before(value, type, conditions, validator) {
    var otherValue;

    if (!isNaN(Number(conditions[0]))) {
      otherValue = Number(conditions[0]);
    } else {
      otherValue = validator.getDataValue(conditions[0]);
    }

    return Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value) || new Date(value) < new Date(otherValue);
  },
  date: function date(value, type, conditions, validator) {
    return Object(util__WEBPACK_IMPORTED_MODULE_0__["isDate"])(value);
  },
  digits: function digits(value, type, conditions, validator) {
    var re = new RegExp('^[0-9]{' + conditions[0] + '}$');
    return re.test(value);
  },
  digits_between: function digits_between(value, type, conditions, validator) {
    var re = new RegExp('^[0-9]{' + conditions[0] + ',' + conditions[1] + '}$');
    return re.test(value);
  },
  "in": function _in(value, type, conditions, validator) {
    return conditions.indexOf(value) >= 0;
  },
  string: function string(value, type, conditions, validator) {
    return Object(util__WEBPACK_IMPORTED_MODULE_0__["isString"])(value);
  },
  "boolean": function boolean(value, type, conditions, validator) {
    return Object(util__WEBPACK_IMPORTED_MODULE_0__["isBoolean"])(value);
  },
  numeric: function numeric(value, type, conditions, validator) {
    return !isNaN(parseFloat(value));
  },
  integer: function integer(value, type, conditions, validator) {
    var x = parseFloat(value);
    return !isNaN(value) && (x | 0) === x;
  },
  email: function email(value, type, conditions, validator) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(value);
  },
  isValid: function isValid(value, type, conditions, validator, name) {
    return validator.fields[name].attributes.isValid;
  },

  /*phone(value, type, conditions, validator){
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(value);
  },*/
  regex: function regex(value, type, conditions, validator) {
    if (Object(_helpers__WEBPACK_IMPORTED_MODULE_2__[/* empty */ "b"])(value)) value = "";
    var condition = conditions[0].replace(/^\/|\/$/g, '');
    var re = new RegExp(condition);

    if (re.test(value) == false) {
      return conditions[1] ? conditions[1] : "";
    }

    return true;
  }
};
var FormWalker = {
  /**
   * Walk the fieldTemplate array setting fully-qualified _name properties
   * Returns a flat representation of the template that should be used for binding to the view
   * @param {FieldTemplate[]} obj 
   * @return {{[key:string]:FieldTemplate}}
   */
  set_names: function set_names(obj) {
    var keyed = {};
    var index = 1;

    function set_names_int(obj, path) {
      var hasSet = false;

      if (!path) {
        path = "";
      }

      if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj)) {
        _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].forEach(obj, function (el) {
          if (set_names_int(el, path)) {
            hasSet = true;
          }
        });
      } else if (Object(util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(obj)) {
        if (!obj._name && obj.name) {
          obj._name = (path != "" ? path + "." : "") + obj.name;
        }

        if (obj.type && !obj._name && (obj.displayRule || obj.validateRule || obj.value)) {
          obj._name = "__dynamic__" + index++; // GUID(); //form and arrays do noyt get postable dynamic name!
        }

        if (obj._name) {
          keyed[obj._name] = obj;

          if (!keyed[obj._name].attributes) {
            keyed[obj._name].attributes = {};
          }
        }

        if (obj.items && !obj.type && obj.value) {
          //it is select option with items!
          if (set_names_int(obj.items, obj.value)) {
            hasSet = true;
          }
        }

        if (obj.items && obj.type == "select") {
          if (obj.items.length > 0) {
            _Objects__WEBPACK_IMPORTED_MODULE_1__[/* Objects */ "a"].forEach(obj.items, function (option) {
              if (option.items && option.items.length > 0) {
                //give option a name now
                option._name = "__dynamic__" + index++;
                option.displayRule = "true_if:" + ((path != "" ? path + "." : "") + obj.name) + "," + option.value;
                option.attributes = {};
                keyed[option._name] = option;

                if (set_names_int(option.items)) {
                  hasSet = true;
                }
              }
            });
          }
        }

        if (obj.items && obj.type == "form") {
          if (set_names_int(obj.items, obj.name)) {
            hasSet = true;
          }
        }
      }

      return hasSet;
    }

    index = obj[dynamicIndexSymbol] || 1;
    set_names_int(obj);
    obj[dynamicIndexSymbol] = index;
    return keyed;
  }
};

/***/ }),

/***/ "./core/helpers.js":
/*!*************************!*\
  !*** ./core/helpers.js ***!
  \*************************/
/*! exports provided: empty, round, numberFromLocaleString, tryCall, argumentsToArray, Override, Extend, GUID, isObjLiteral, isIterable */
/*! exports used: argumentsToArray, empty, isIterable, isObjLiteral, numberFromLocaleString, round, tryCall */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return numberFromLocaleString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return tryCall; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return argumentsToArray; });
/* unused harmony export Override */
/* unused harmony export Extend */
/* unused harmony export GUID */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isObjLiteral; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isIterable; });
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }


/**
 * Check if object is empty
 * @param {*} value 
 * @returns {boolean}
 */

function empty(value) {
  return typeof value === "undefined" || value === 0 || value === null || value === "" || value === false; // || (typeof value == 'object' && Object.getOwnPropertyNames(value).length === 0) ;
}
/**
 * Round numeric value to n decimals
 * @param {number} value 
 * @param {number} [n] = 0
 */

function round(value, n) {
  n = n || 0;
  var scale = Math.pow(10, n);
  return Math.round(value * scale) / scale;
}
/**
 * Convert string formatted as locale number to number
 * @param {string} stringValue 
 */

function numberFromLocaleString(stringValue, locale) {
  var parts = Number(1111.11).toLocaleString(locale).replace(/\d+/g, '').split('');
  if (stringValue === null) return null;

  if (parts.length == 1) {
    parts.unshift('');
  }

  return Number(String(stringValue).replace(new RegExp(parts[0].replace(/\s/g, ' '), 'g'), '').replace(parts[1], "."));
}
/**
 * Try calling a function under context.
 * Same as Function.call but with check if callback exists
 * @param {function(*)} callback 
 * @return {any}
 */

function tryCall(context, callback) {
  if (typeof callback !== 'function') return;
  return callback.apply(context, argumentsToArray(arguments, 2));
}
/**
* Push function arguments into array starting from nStart
* @param {*} args - arguments
* @param {number} [nStart] - argument number to start from. 0 by default
* @return {any[]}
*/

function argumentsToArray(args, nStart) {
  nStart = nStart || 0;
  return Array.prototype.slice.call(args).slice(nStart);
}
/**
 * Override Function or a method 
 * @param {any} originalContext - context to call the original function from
 * @param {function} originalFunction - method or function to override
 * @param {function(function, ...any):any} overrideFunction - callback to execute instead of the original function/method
 * @returns function
 */

function Override(originalContext, originalFunction, overrideFunction) {
  return function () {
    var args = arguments;
    var argsWithNext = argumentsToArray(arguments);
    argsWithNext.unshift(function () {
      return originalFunction.apply(originalContext, arguments.length > 0 ? arguments : args);
    });
    return overrideFunction.apply(originalContext, argsWithNext);
  };
}
/**	
 * Extend Child Class With the Parent   	
 * ***usage***:   	
 *  - class ChildClasss extends BaseClass {} ***SAME AS*** var ChildClass = extend( BaseClass, function ChildClass(params){});  	
 *  - super(Page); ***SAME AS*** this.super(Page);  	
 * 	
 * @param {*} parentConstructor 	
 * @param {*} childConstructor 	
 */

function Extend(parentConstructor, childConstructor) {
  childConstructor.prototype = Object.create(parentConstructor.prototype);
  childConstructor.prototype.constructor = childConstructor;

  childConstructor.prototype["super"] = function () {
    return parentConstructor.apply(this, arguments);
  };

  return childConstructor;
}
function GUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
        v = c == 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
}
function isObjLiteral(_obj) {
  var _test = _obj;
  return _typeof(_obj) !== 'object' || _obj === null ? false : function () {
    while (!false) {
      if (Object.getPrototypeOf(_test = Object.getPrototypeOf(_test)) === null) {
        break;
      }
    }

    return Object.getPrototypeOf(_obj) === _test;
  }();
}
function isIterable(obj) {
  // checks for null and undefined
  if (obj == null) {
    return false;
  }

  return typeof obj[Symbol.iterator] === 'function';
}

/***/ }),

/***/ "./core/polyfill.js":
/*!**************************!*\
  !*** ./core/polyfill.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.empty = function (value) {
  return typeof value === "undefined" || value === null || value === "" || value === 0 || value === false;
};

if (!('remove' in Element.prototype)) {
  Element.prototype.remove = function () {
    this.parentNode.removeChild(this);
  };
}

if (!('repaint' in Element.prototype)) {
  Element.prototype.repaint = function () {
    var d = this.style.display;
    this.style.display = 'none';
    this.offsetHeight;
    this.style.display = d; //console.log(this.tagName+"."+this.className + " repaint");
  };
}

if (!Array.prototype.lastIndexOf) {
  Array.prototype.lastIndexOf = function (searchElement
  /*, fromIndex*/
  ) {
    "use strict";

    if (this == null) throw new TypeError();
    var t = Object(this);
    var len = t.length >>> 0;
    if (len === 0) return -1;
    var n = len;

    if (arguments.length > 1) {
      n = Number(arguments[1]);
      if (n != n) n = 0;else if (n != 0 && n != 1 / 0 && n != -(1 / 0)) n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }

    var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);

    for (; k >= 0; k--) {
      if (k in t && t[k] === searchElement) return k;
    }

    return -1;
  };
}

if (!String.prototype.repeat) {
  String.prototype.repeat = function (count) {
    'use strict';

    if (this == null) {
      throw new TypeError('can\'t convert ' + this + ' to object');
    }

    var str = '' + this;
    count = +count;

    if (count != count) {
      count = 0;
    }

    if (count < 0) {
      throw new RangeError('repeat count must be non-negative');
    }

    if (count == Infinity) {
      throw new RangeError('repeat count must be less than infinity');
    }

    count = Math.floor(count);

    if (str.length == 0 || count == 0) {
      return '';
    } // Ensuring count is a 31-bit integer allows us to heavily optimize the
    // main part. But anyway, most current (August 2014) browsers can't handle
    // strings 1 << 28 chars or longer, so:


    if (str.length * count >= 1 << 28) {
      throw new RangeError('repeat count must not overflow maximum string size');
    }

    var rpt = '';

    for (var i = 0; i < count; i++) {
      rpt += str;
    }

    return rpt;
  };
}

if (typeof Object.assign != 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, "assign", {
    value: function assign(target, varArgs) {
      // .length of function is 2
      'use strict';

      if (target == null) {
        // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) {
          // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }

      return to;
    },
    writable: true,
    configurable: true
  });
}

if (!("classList" in document.documentElement) && Object.defineProperty && typeof HTMLElement !== 'undefined') {
  Object.defineProperty(HTMLElement.prototype, 'classList', {
    get: function get() {
      var self = this;

      function update(fn) {
        return function (value) {
          var classes = self.className.split(/\s+/),
              index = classes.indexOf(value);
          fn(classes, index, value);
          self.className = classes.join(" ");
        };
      }

      var ret = {
        add: update(function (classes, index, value) {
          ~index || classes.push(value);
        }),
        remove: update(function (classes, index) {
          ~index && classes.splice(index, 1);
        }),
        toggle: update(function (classes, index, value) {
          ~index ? classes.splice(index, 1) : classes.push(value);
        }),
        contains: function contains(value) {
          return !!~self.className.split(/\s+/).indexOf(value);
        },
        item: function item(i) {
          return self.className.split(/\s+/)[i] || null;
        }
      };
      Object.defineProperty(ret, 'length', {
        get: function get() {
          return self.className.split(/\s+/).length;
        }
      });
      return ret;
    }
  });
}

if (!window['device']) {
  window['device'] = {
    platform: window.platform,
    model: "Unknown"
  };
} // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel
// MIT license


(function () {
  var lastTime = 0;
  var vendors = ['ms', 'moz', 'webkit', 'o'];

  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
  }

  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
    var currTime = new Date().getTime();
    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
    var id = window.setTimeout(function () {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };
  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
    clearTimeout(id);
  };
})();

module.exports = function () {};

/***/ }),

/***/ "./core/simple_confirm.js":
/*!********************************!*\
  !*** ./core/simple_confirm.js ***!
  \********************************/
/*! exports provided: ConfirmButtons, Confirm, ConfirmDanger, Prompt, Alert */
/*! exports used: Alert */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ConfirmButtons */
/* unused harmony export Confirm */
/* unused harmony export ConfirmDanger */
/* unused harmony export Prompt */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Alert; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./core/helpers.js");
/* harmony import */ var _pages_DialogPage_DialogPage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pages/DialogPage/DialogPage */ "./pages/DialogPage/DialogPage.js");
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text */ "./core/text.js");
/* harmony import */ var _Objects__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Objects */ "./core/Objects.js");
//This module wraps some simple notifications




/**
 * Show "Confirm" dialog with custom buttons
 * @param {string} prompt 
 * @param {string} [title] 
 * @param {{[button_name:string]:function():any}} buttons 
 */

var ConfirmButtons = function ConfirmButtons(prompt, title, buttons) {
  var p = Object(_pages_DialogPage_DialogPage__WEBPACK_IMPORTED_MODULE_1__[/* Dialog */ "a"])(title);
  p.addLabel(null, _text__WEBPACK_IMPORTED_MODULE_2__[/* Text */ "a"].escapeHTML(prompt, true));
  _Objects__WEBPACK_IMPORTED_MODULE_3__[/* Objects */ "a"].forEach(buttons, function (button, name) {
    p.addActionButton(name, button);
  });

  p.onBackNavigate = function () {
    return false;
  };
};
/**
 * Show simple Confirm Box 
 * @param {string} prompt 
 * @param {function():void} onConfirm 
 * @param {string} [title] 
 */

var Confirm = function Confirm(prompt, onConfirm, title) {
  var p = Object(_pages_DialogPage_DialogPage__WEBPACK_IMPORTED_MODULE_1__[/* Dialog */ "a"])(title);
  p.addLabel(null, _text__WEBPACK_IMPORTED_MODULE_2__[/* Text */ "a"].escapeHTML(prompt, true));
  p.addActionButton('No', function () {});
  p.addActionButton('Yes', onConfirm);
};
/**
 * Show simple Confirm Box 
 * @param {string} prompt 
 * @param {function():void} onConfirm 
 * @param {string} [title] 
 */

var ConfirmDanger = function ConfirmDanger(prompt, onConfirm, title) {
  var p = Object(_pages_DialogPage_DialogPage__WEBPACK_IMPORTED_MODULE_1__[/* Dialog */ "a"])(title);
  p.addLabel(null, _text__WEBPACK_IMPORTED_MODULE_2__[/* Text */ "a"].escapeHTML(prompt, true));
  p.addActionButton('Yes', onConfirm);
  p.addActionButton('No', function () {});
};
/**
 * Show simple Prompt Box 
 * @param {string} prompt 
 * @param {function(string|number):void} onConfirm 
 * @param {string} [title] - dialog title
 * @param {string} [value] - dialog initial value
 * @param {true|string} [validateRule] - validate rule like 'required|min:10|max:50|number'
 * @param {string} [type] - input type. Default - "text"
 */

var Prompt = function Prompt(prompt, onConfirm, title, value, validateRule, type) {
  type = type || 'text';
  var p = Object(_pages_DialogPage_DialogPage__WEBPACK_IMPORTED_MODULE_1__[/* Dialog */ "a"])(title);
  p.addLabel(null, _text__WEBPACK_IMPORTED_MODULE_2__[/* Text */ "a"].escapeHTML(prompt, true));
  p.addInput('input', '', type, value, validateRule);
  p.addActionButton('Cancel', function () {});
  p.addActionButton('Ok', function () {
    if (p.content.validator.validate()) {
      Object(_helpers__WEBPACK_IMPORTED_MODULE_0__[/* tryCall */ "g"])(null, onConfirm, p.data.input);
    } else {
      return false;
    }
  });
};
/**
 * Show simple Alert box
 * @param {string} prompt 
 * @param {function():boolean|void} [onConfirm]
 * @param {string} [title] 
 */

var Alert = function Alert(prompt, onConfirm, title) {
  var p = Object(_pages_DialogPage_DialogPage__WEBPACK_IMPORTED_MODULE_1__[/* Dialog */ "a"])(title);
  p.addHtml(_text__WEBPACK_IMPORTED_MODULE_2__[/* Text */ "a"].escapeHTML(prompt, true));
  p.addActionButton('Ok', onConfirm); //back navigation also means confirm!

  p.onBackNavigate = onConfirm;
};

/***/ }),

/***/ "./core/text.js":
/*!**********************!*\
  !*** ./core/text.js ***!
  \**********************/
/*! exports provided: Text */
/*! exports used: Text */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Text; });
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);

var Text = {
  escapeHTML: function escapeHTML(unsafe, convertNewlines) {
    unsafe = Object(util__WEBPACK_IMPORTED_MODULE_0__["isString"])(unsafe) ? unsafe : "";
    convertNewlines = convertNewlines || false;
    return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;").replace(/\n/g, convertNewlines ? "<br />" : '');
  },

  /**
  * Format phone number while typing
  * @param {string} text - phone number to format
  * @param {object} [mask] - default: { 0: '(', 3: ') ', 6: ' - ', 10: ' x ' };
  */
  formatPhone: function formatPhone(text, mask) {
    var numbers = text.replace(/\D/g, '');
    mask = mask || {
      0: '(',
      3: ') ',
      6: ' - ',
      10: ' x '
    };
    text = '';

    for (var i = 0; i < numbers.length; i++) {
      text += (mask[i] || '') + numbers[i];
    }

    return text;
  },

  /**
  * Get File Extension (without DOT)
  * @param {string} fName
  * @return {string}
  */
  fileExtension: function fileExtension(fName) {
    fName = fName || "";
    var li = fName.lastIndexOf('.');
    if (li < 0 || li >= fName.length) return "";
    return fName.substr(li + 1);
  },

  /**
  * Get File Name.Extension
  * @param {string} fName
  * @return {string}
  */
  fileFullName: function fileFullName(fileName) {
    fileName = fileName || "";

    if (!fileName || !Object(util__WEBPACK_IMPORTED_MODULE_0__["isString"])(fileName)) {
      return "";
    }

    return fileName.split(/\\|\//).pop();
  },

  /**
  * Get File Name without Extension
  * @param {string} fName
  * @return {string}
  */
  fileName: function fileName(_fileName) {
    _fileName = _fileName || "";

    if (!_fileName || !Object(util__WEBPACK_IMPORTED_MODULE_0__["isString"])(_fileName)) {
      return "";
    }

    return _fileName.split(/\\|\//).pop().split('.').shift();
  },

  /**
  * Join file path bits making sure there is / between them and no duplicates
  * @param {string[]} args
  */
  joinPath: function joinPath() {
    var path = "";

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.forEach(function (el) {
      if (path.split('').pop() == '/' && el.split('').shift() == '/') path = path + el.substr(1);else path = path + el;
    });
    return path;
  },

  /**
  * Capitalize text
  * @param {string} value 
  */
  capitalize: function capitalize(value) {
    if (empty(value)) return "";
    value = value + "";
    return value.toLowerCase().replace(/(?:^|\s)\S/g, function (a) {
      return a.toUpperCase();
    });
  }
};

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");

var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");

var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */

exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function foo() {
        return 42;
      }
    };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/dom-serializer/index.js":
/*!**********************************************!*\
  !*** ./node_modules/dom-serializer/index.js ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/*
  Module dependencies
*/
var ElementType = __webpack_require__(/*! domelementtype */ "./node_modules/domelementtype/index.js");

var entities = __webpack_require__(/*! entities */ "./node_modules/entities/index.js");

var unencodedElements = {
  __proto__: null,
  style: true,
  script: true,
  xmp: true,
  iframe: true,
  noembed: true,
  noframes: true,
  plaintext: true,
  noscript: true
};
/*
  Format attributes
*/

function formatAttrs(attributes, opts) {
  if (!attributes) return;
  var output = '',
      value; // Loop through the attributes

  for (var key in attributes) {
    value = attributes[key];

    if (output) {
      output += ' ';
    }

    output += key;

    if (value !== null && value !== '' || opts.xmlMode) {
      output += '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
    }
  }

  return output;
}
/*
  Self-enclosing tags (stolen from node-htmlparser)
*/


var singleTag = {
  __proto__: null,
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};

var render = module.exports = function (dom, opts) {
  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
  opts = opts || {};
  var output = '';

  for (var i = 0; i < dom.length; i++) {
    var elem = dom[i];
    if (elem.type === 'root') output += render(elem.children, opts);else if (ElementType.isTag(elem)) output += renderTag(elem, opts);else if (elem.type === ElementType.Directive) output += renderDirective(elem);else if (elem.type === ElementType.Comment) output += renderComment(elem);else if (elem.type === ElementType.CDATA) output += renderCdata(elem);else output += renderText(elem, opts);
  }

  return output;
};

function renderTag(elem, opts) {
  // Handle SVG
  if (elem.name === "svg") opts = {
    decodeEntities: opts.decodeEntities,
    xmlMode: true
  };
  var tag = '<' + elem.name,
      attribs = formatAttrs(elem.attribs, opts);

  if (attribs) {
    tag += ' ' + attribs;
  }

  if (opts.xmlMode && (!elem.children || elem.children.length === 0)) {
    tag += '/>';
  } else {
    tag += '>';

    if (elem.children) {
      tag += render(elem.children, opts);
    }

    if (!singleTag[elem.name] || opts.xmlMode) {
      tag += '</' + elem.name + '>';
    }
  }

  return tag;
}

function renderDirective(elem) {
  return '<' + elem.data + '>';
}

function renderText(elem, opts) {
  var data = elem.data || ''; // if entities weren't decoded, no need to encode them back

  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
    data = entities.encodeXML(data);
  }

  return data;
}

function renderCdata(elem) {
  return '<![CDATA[' + elem.children[0].data + ']]>';
}

function renderComment(elem) {
  return '<!--' + elem.data + '-->';
}

/***/ }),

/***/ "./node_modules/domelementtype/index.js":
/*!**********************************************!*\
  !*** ./node_modules/domelementtype/index.js ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

//Types of elements found in the DOM
module.exports = {
  Text: "text",
  //Text
  Directive: "directive",
  //<? ... ?>
  Comment: "comment",
  //<!-- ... -->
  Script: "script",
  //<script> tags
  Style: "style",
  //<style> tags
  Tag: "tag",
  //Any tag
  CDATA: "cdata",
  //<![CDATA[ ... ]]>
  Doctype: "doctype",
  isTag: function isTag(elem) {
    return elem.type === "tag" || elem.type === "script" || elem.type === "style";
  }
};

/***/ }),

/***/ "./node_modules/domhandler/index.js":
/*!******************************************!*\
  !*** ./node_modules/domhandler/index.js ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var ElementType = __webpack_require__(/*! domelementtype */ "./node_modules/domelementtype/index.js");

var re_whitespace = /\s+/g;

var NodePrototype = __webpack_require__(/*! ./lib/node */ "./node_modules/domhandler/lib/node.js");

var ElementPrototype = __webpack_require__(/*! ./lib/element */ "./node_modules/domhandler/lib/element.js");

function DomHandler(callback, options, elementCB) {
  if (_typeof(callback) === "object") {
    elementCB = options;
    options = callback;
    callback = null;
  } else if (typeof options === "function") {
    elementCB = options;
    options = defaultOpts;
  }

  this._callback = callback;
  this._options = options || defaultOpts;
  this._elementCB = elementCB;
  this.dom = [];
  this._done = false;
  this._tagStack = [];
  this._parser = this._parser || null;
} //default options


var defaultOpts = {
  normalizeWhitespace: false,
  //Replace all whitespace with single spaces
  withStartIndices: false,
  //Add startIndex properties to nodes
  withEndIndices: false //Add endIndex properties to nodes

};

DomHandler.prototype.onparserinit = function (parser) {
  this._parser = parser;
}; //Resets the handler back to starting state


DomHandler.prototype.onreset = function () {
  DomHandler.call(this, this._callback, this._options, this._elementCB);
}; //Signals the handler that parsing is done


DomHandler.prototype.onend = function () {
  if (this._done) return;
  this._done = true;
  this._parser = null;

  this._handleCallback(null);
};

DomHandler.prototype._handleCallback = DomHandler.prototype.onerror = function (error) {
  if (typeof this._callback === "function") {
    this._callback(error, this.dom);
  } else {
    if (error) throw error;
  }
};

DomHandler.prototype.onclosetag = function () {
  //if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
  var elem = this._tagStack.pop();

  if (this._options.withEndIndices && elem) {
    elem.endIndex = this._parser.endIndex;
  }

  if (this._elementCB) this._elementCB(elem);
};

DomHandler.prototype._createDomElement = function (properties) {
  if (!this._options.withDomLvl1) return properties;
  var element;

  if (properties.type === "tag") {
    element = Object.create(ElementPrototype);
  } else {
    element = Object.create(NodePrototype);
  }

  for (var key in properties) {
    if (properties.hasOwnProperty(key)) {
      element[key] = properties[key];
    }
  }

  return element;
};

DomHandler.prototype._addDomElement = function (element) {
  var parent = this._tagStack[this._tagStack.length - 1];
  var siblings = parent ? parent.children : this.dom;
  var previousSibling = siblings[siblings.length - 1];
  element.next = null;

  if (this._options.withStartIndices) {
    element.startIndex = this._parser.startIndex;
  }

  if (this._options.withEndIndices) {
    element.endIndex = this._parser.endIndex;
  }

  if (previousSibling) {
    element.prev = previousSibling;
    previousSibling.next = element;
  } else {
    element.prev = null;
  }

  siblings.push(element);
  element.parent = parent || null;
};

DomHandler.prototype.onopentag = function (name, attribs) {
  var properties = {
    type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
    name: name,
    attribs: attribs,
    children: []
  };

  var element = this._createDomElement(properties);

  this._addDomElement(element);

  this._tagStack.push(element);
};

DomHandler.prototype.ontext = function (data) {
  //the ignoreWhitespace is officially dropped, but for now,
  //it's an alias for normalizeWhitespace
  var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;
  var lastTag;

  if (!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length - 1]).type === ElementType.Text) {
    if (normalize) {
      lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
    } else {
      lastTag.data += data;
    }
  } else {
    if (this._tagStack.length && (lastTag = this._tagStack[this._tagStack.length - 1]) && (lastTag = lastTag.children[lastTag.children.length - 1]) && lastTag.type === ElementType.Text) {
      if (normalize) {
        lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
      } else {
        lastTag.data += data;
      }
    } else {
      if (normalize) {
        data = data.replace(re_whitespace, " ");
      }

      var element = this._createDomElement({
        data: data,
        type: ElementType.Text
      });

      this._addDomElement(element);
    }
  }
};

DomHandler.prototype.oncomment = function (data) {
  var lastTag = this._tagStack[this._tagStack.length - 1];

  if (lastTag && lastTag.type === ElementType.Comment) {
    lastTag.data += data;
    return;
  }

  var properties = {
    data: data,
    type: ElementType.Comment
  };

  var element = this._createDomElement(properties);

  this._addDomElement(element);

  this._tagStack.push(element);
};

DomHandler.prototype.oncdatastart = function () {
  var properties = {
    children: [{
      data: "",
      type: ElementType.Text
    }],
    type: ElementType.CDATA
  };

  var element = this._createDomElement(properties);

  this._addDomElement(element);

  this._tagStack.push(element);
};

DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function () {
  this._tagStack.pop();
};

DomHandler.prototype.onprocessinginstruction = function (name, data) {
  var element = this._createDomElement({
    name: name,
    data: data,
    type: ElementType.Directive
  });

  this._addDomElement(element);
};

module.exports = DomHandler;

/***/ }),

/***/ "./node_modules/domhandler/lib/element.js":
/*!************************************************!*\
  !*** ./node_modules/domhandler/lib/element.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// DOM-Level-1-compliant structure
var NodePrototype = __webpack_require__(/*! ./node */ "./node_modules/domhandler/lib/node.js");

var ElementPrototype = module.exports = Object.create(NodePrototype);
var domLvl1 = {
  tagName: "name"
};
Object.keys(domLvl1).forEach(function (key) {
  var shorthand = domLvl1[key];
  Object.defineProperty(ElementPrototype, key, {
    get: function get() {
      return this[shorthand] || null;
    },
    set: function set(val) {
      this[shorthand] = val;
      return val;
    }
  });
});

/***/ }),

/***/ "./node_modules/domhandler/lib/node.js":
/*!*********************************************!*\
  !*** ./node_modules/domhandler/lib/node.js ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
var NodePrototype = module.exports = {
  get firstChild() {
    var children = this.children;
    return children && children[0] || null;
  },

  get lastChild() {
    var children = this.children;
    return children && children[children.length - 1] || null;
  },

  get nodeType() {
    return nodeTypes[this.type] || nodeTypes.element;
  }

};
var domLvl1 = {
  tagName: "name",
  childNodes: "children",
  parentNode: "parent",
  previousSibling: "prev",
  nextSibling: "next",
  nodeValue: "data"
};
var nodeTypes = {
  element: 1,
  text: 3,
  cdata: 4,
  comment: 8
};
Object.keys(domLvl1).forEach(function (key) {
  var shorthand = domLvl1[key];
  Object.defineProperty(NodePrototype, key, {
    get: function get() {
      return this[shorthand] || null;
    },
    set: function set(val) {
      this[shorthand] = val;
      return val;
    }
  });
});

/***/ }),

/***/ "./node_modules/domutils/index.js":
/*!****************************************!*\
  !*** ./node_modules/domutils/index.js ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var DomUtils = module.exports;
[__webpack_require__(/*! ./lib/stringify */ "./node_modules/domutils/lib/stringify.js"), __webpack_require__(/*! ./lib/traversal */ "./node_modules/domutils/lib/traversal.js"), __webpack_require__(/*! ./lib/manipulation */ "./node_modules/domutils/lib/manipulation.js"), __webpack_require__(/*! ./lib/querying */ "./node_modules/domutils/lib/querying.js"), __webpack_require__(/*! ./lib/legacy */ "./node_modules/domutils/lib/legacy.js"), __webpack_require__(/*! ./lib/helpers */ "./node_modules/domutils/lib/helpers.js")].forEach(function (ext) {
  Object.keys(ext).forEach(function (key) {
    DomUtils[key] = ext[key].bind(DomUtils);
  });
});

/***/ }),

/***/ "./node_modules/domutils/lib/helpers.js":
/*!**********************************************!*\
  !*** ./node_modules/domutils/lib/helpers.js ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

// removeSubsets
// Given an array of nodes, remove any member that is contained by another.
exports.removeSubsets = function (nodes) {
  var idx = nodes.length,
      node,
      ancestor,
      replace; // Check if each node (or one of its ancestors) is already contained in the
  // array.

  while (--idx > -1) {
    node = ancestor = nodes[idx]; // Temporarily remove the node under consideration

    nodes[idx] = null;
    replace = true;

    while (ancestor) {
      if (nodes.indexOf(ancestor) > -1) {
        replace = false;
        nodes.splice(idx, 1);
        break;
      }

      ancestor = ancestor.parent;
    } // If the node has been found to be unique, re-insert it.


    if (replace) {
      nodes[idx] = node;
    }
  }

  return nodes;
}; // Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition


var POSITION = {
  DISCONNECTED: 1,
  PRECEDING: 2,
  FOLLOWING: 4,
  CONTAINS: 8,
  CONTAINED_BY: 16
}; // Compare the position of one node against another node in any other document.
// The return value is a bitmask with the following values:
//
// document order:
// > There is an ordering, document order, defined on all the nodes in the
// > document corresponding to the order in which the first character of the
// > XML representation of each node occurs in the XML representation of the
// > document after expansion of general entities. Thus, the document element
// > node will be the first node. Element nodes occur before their children.
// > Thus, document order orders element nodes in order of the occurrence of
// > their start-tag in the XML (after expansion of entities). The attribute
// > nodes of an element occur after the element and before its children. The
// > relative order of attribute nodes is implementation-dependent./
// Source:
// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
//
// @argument {Node} nodaA The first node to use in the comparison
// @argument {Node} nodeB The second node to use in the comparison
//
// @return {Number} A bitmask describing the input nodes' relative position.
//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
//         a description of these values.

var comparePos = exports.compareDocumentPosition = function (nodeA, nodeB) {
  var aParents = [];
  var bParents = [];
  var current, sharedParent, siblings, aSibling, bSibling, idx;

  if (nodeA === nodeB) {
    return 0;
  }

  current = nodeA;

  while (current) {
    aParents.unshift(current);
    current = current.parent;
  }

  current = nodeB;

  while (current) {
    bParents.unshift(current);
    current = current.parent;
  }

  idx = 0;

  while (aParents[idx] === bParents[idx]) {
    idx++;
  }

  if (idx === 0) {
    return POSITION.DISCONNECTED;
  }

  sharedParent = aParents[idx - 1];
  siblings = sharedParent.children;
  aSibling = aParents[idx];
  bSibling = bParents[idx];

  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
    if (sharedParent === nodeB) {
      return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
    }

    return POSITION.FOLLOWING;
  } else {
    if (sharedParent === nodeA) {
      return POSITION.PRECEDING | POSITION.CONTAINS;
    }

    return POSITION.PRECEDING;
  }
}; // Sort an array of nodes based on their relative position in the document and
// remove any duplicate nodes. If the array contains nodes that do not belong
// to the same document, sort order is unspecified.
//
// @argument {Array} nodes Array of DOM nodes
//
// @returns {Array} collection of unique nodes, sorted in document order


exports.uniqueSort = function (nodes) {
  var idx = nodes.length,
      node,
      position;
  nodes = nodes.slice();

  while (--idx > -1) {
    node = nodes[idx];
    position = nodes.indexOf(node);

    if (position > -1 && position < idx) {
      nodes.splice(idx, 1);
    }
  }

  nodes.sort(function (a, b) {
    var relative = comparePos(a, b);

    if (relative & POSITION.PRECEDING) {
      return -1;
    } else if (relative & POSITION.FOLLOWING) {
      return 1;
    }

    return 0;
  });
  return nodes;
};

/***/ }),

/***/ "./node_modules/domutils/lib/legacy.js":
/*!*********************************************!*\
  !*** ./node_modules/domutils/lib/legacy.js ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var ElementType = __webpack_require__(/*! domelementtype */ "./node_modules/domelementtype/index.js");

var isTag = exports.isTag = ElementType.isTag;

exports.testElement = function (options, element) {
  for (var key in options) {
    if (!options.hasOwnProperty(key)) ;else if (key === "tag_name") {
      if (!isTag(element) || !options.tag_name(element.name)) {
        return false;
      }
    } else if (key === "tag_type") {
      if (!options.tag_type(element.type)) return false;
    } else if (key === "tag_contains") {
      if (isTag(element) || !options.tag_contains(element.data)) {
        return false;
      }
    } else if (!element.attribs || !options[key](element.attribs[key])) {
      return false;
    }
  }

  return true;
};

var Checks = {
  tag_name: function tag_name(name) {
    if (typeof name === "function") {
      return function (elem) {
        return isTag(elem) && name(elem.name);
      };
    } else if (name === "*") {
      return isTag;
    } else {
      return function (elem) {
        return isTag(elem) && elem.name === name;
      };
    }
  },
  tag_type: function tag_type(type) {
    if (typeof type === "function") {
      return function (elem) {
        return type(elem.type);
      };
    } else {
      return function (elem) {
        return elem.type === type;
      };
    }
  },
  tag_contains: function tag_contains(data) {
    if (typeof data === "function") {
      return function (elem) {
        return !isTag(elem) && data(elem.data);
      };
    } else {
      return function (elem) {
        return !isTag(elem) && elem.data === data;
      };
    }
  }
};

function getAttribCheck(attrib, value) {
  if (typeof value === "function") {
    return function (elem) {
      return elem.attribs && value(elem.attribs[attrib]);
    };
  } else {
    return function (elem) {
      return elem.attribs && elem.attribs[attrib] === value;
    };
  }
}

function combineFuncs(a, b) {
  return function (elem) {
    return a(elem) || b(elem);
  };
}

exports.getElements = function (options, element, recurse, limit) {
  var funcs = Object.keys(options).map(function (key) {
    var value = options[key];
    return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
  });
  return funcs.length === 0 ? [] : this.filter(funcs.reduce(combineFuncs), element, recurse, limit);
};

exports.getElementById = function (id, element, recurse) {
  if (!Array.isArray(element)) element = [element];
  return this.findOne(getAttribCheck("id", id), element, recurse !== false);
};

exports.getElementsByTagName = function (name, element, recurse, limit) {
  return this.filter(Checks.tag_name(name), element, recurse, limit);
};

exports.getElementsByTagType = function (type, element, recurse, limit) {
  return this.filter(Checks.tag_type(type), element, recurse, limit);
};

/***/ }),

/***/ "./node_modules/domutils/lib/manipulation.js":
/*!***************************************************!*\
  !*** ./node_modules/domutils/lib/manipulation.js ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

exports.removeElement = function (elem) {
  if (elem.prev) elem.prev.next = elem.next;
  if (elem.next) elem.next.prev = elem.prev;

  if (elem.parent) {
    var childs = elem.parent.children;
    childs.splice(childs.lastIndexOf(elem), 1);
  }
};

exports.replaceElement = function (elem, replacement) {
  var prev = replacement.prev = elem.prev;

  if (prev) {
    prev.next = replacement;
  }

  var next = replacement.next = elem.next;

  if (next) {
    next.prev = replacement;
  }

  var parent = replacement.parent = elem.parent;

  if (parent) {
    var childs = parent.children;
    childs[childs.lastIndexOf(elem)] = replacement;
  }
};

exports.appendChild = function (elem, child) {
  child.parent = elem;

  if (elem.children.push(child) !== 1) {
    var sibling = elem.children[elem.children.length - 2];
    sibling.next = child;
    child.prev = sibling;
    child.next = null;
  }
};

exports.append = function (elem, next) {
  var parent = elem.parent,
      currNext = elem.next;
  next.next = currNext;
  next.prev = elem;
  elem.next = next;
  next.parent = parent;

  if (currNext) {
    currNext.prev = next;

    if (parent) {
      var childs = parent.children;
      childs.splice(childs.lastIndexOf(currNext), 0, next);
    }
  } else if (parent) {
    parent.children.push(next);
  }
};

exports.prepend = function (elem, prev) {
  var parent = elem.parent;

  if (parent) {
    var childs = parent.children;
    childs.splice(childs.lastIndexOf(elem), 0, prev);
  }

  if (elem.prev) {
    elem.prev.next = prev;
  }

  prev.parent = parent;
  prev.prev = elem.prev;
  prev.next = elem;
  elem.prev = prev;
};

/***/ }),

/***/ "./node_modules/domutils/lib/querying.js":
/*!***********************************************!*\
  !*** ./node_modules/domutils/lib/querying.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isTag = __webpack_require__(/*! domelementtype */ "./node_modules/domelementtype/index.js").isTag;

module.exports = {
  filter: filter,
  find: find,
  findOneChild: findOneChild,
  findOne: findOne,
  existsOne: existsOne,
  findAll: findAll
};

function filter(test, element, recurse, limit) {
  if (!Array.isArray(element)) element = [element];

  if (typeof limit !== "number" || !isFinite(limit)) {
    limit = Infinity;
  }

  return find(test, element, recurse !== false, limit);
}

function find(test, elems, recurse, limit) {
  var result = [],
      childs;

  for (var i = 0, j = elems.length; i < j; i++) {
    if (test(elems[i])) {
      result.push(elems[i]);
      if (--limit <= 0) break;
    }

    childs = elems[i].children;

    if (recurse && childs && childs.length > 0) {
      childs = find(test, childs, recurse, limit);
      result = result.concat(childs);
      limit -= childs.length;
      if (limit <= 0) break;
    }
  }

  return result;
}

function findOneChild(test, elems) {
  for (var i = 0, l = elems.length; i < l; i++) {
    if (test(elems[i])) return elems[i];
  }

  return null;
}

function findOne(test, elems) {
  var elem = null;

  for (var i = 0, l = elems.length; i < l && !elem; i++) {
    if (!isTag(elems[i])) {
      continue;
    } else if (test(elems[i])) {
      elem = elems[i];
    } else if (elems[i].children.length > 0) {
      elem = findOne(test, elems[i].children);
    }
  }

  return elem;
}

function existsOne(test, elems) {
  for (var i = 0, l = elems.length; i < l; i++) {
    if (isTag(elems[i]) && (test(elems[i]) || elems[i].children.length > 0 && existsOne(test, elems[i].children))) {
      return true;
    }
  }

  return false;
}

function findAll(test, rootElems) {
  var result = [];
  var stack = rootElems.slice();

  while (stack.length) {
    var elem = stack.shift();
    if (!isTag(elem)) continue;

    if (elem.children && elem.children.length > 0) {
      stack.unshift.apply(stack, elem.children);
    }

    if (test(elem)) result.push(elem);
  }

  return result;
}

/***/ }),

/***/ "./node_modules/domutils/lib/stringify.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/stringify.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var ElementType = __webpack_require__(/*! domelementtype */ "./node_modules/domelementtype/index.js"),
    getOuterHTML = __webpack_require__(/*! dom-serializer */ "./node_modules/dom-serializer/index.js"),
    isTag = ElementType.isTag;

module.exports = {
  getInnerHTML: getInnerHTML,
  getOuterHTML: getOuterHTML,
  getText: getText
};

function getInnerHTML(elem, opts) {
  return elem.children ? elem.children.map(function (elem) {
    return getOuterHTML(elem, opts);
  }).join("") : "";
}

function getText(elem) {
  if (Array.isArray(elem)) return elem.map(getText).join("");
  if (isTag(elem)) return elem.name === "br" ? "\n" : getText(elem.children);
  if (elem.type === ElementType.CDATA) return getText(elem.children);
  if (elem.type === ElementType.Text) return elem.data;
  return "";
}

/***/ }),

/***/ "./node_modules/domutils/lib/traversal.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/traversal.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

var getChildren = exports.getChildren = function (elem) {
  return elem.children;
};

var getParent = exports.getParent = function (elem) {
  return elem.parent;
};

exports.getSiblings = function (elem) {
  var parent = getParent(elem);
  return parent ? getChildren(parent) : [elem];
};

exports.getAttributeValue = function (elem, name) {
  return elem.attribs && elem.attribs[name];
};

exports.hasAttrib = function (elem, name) {
  return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
};

exports.getName = function (elem) {
  return elem.name;
};

/***/ }),

/***/ "./node_modules/entities/index.js":
/*!****************************************!*\
  !*** ./node_modules/entities/index.js ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var encode = __webpack_require__(/*! ./lib/encode.js */ "./node_modules/entities/lib/encode.js"),
    decode = __webpack_require__(/*! ./lib/decode.js */ "./node_modules/entities/lib/decode.js");

exports.decode = function (data, level) {
  return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
};

exports.decodeStrict = function (data, level) {
  return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
};

exports.encode = function (data, level) {
  return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
};

exports.encodeXML = encode.XML;
exports.encodeHTML4 = exports.encodeHTML5 = exports.encodeHTML = encode.HTML;
exports.decodeXML = exports.decodeXMLStrict = decode.XML;
exports.decodeHTML4 = exports.decodeHTML5 = exports.decodeHTML = decode.HTML;
exports.decodeHTML4Strict = exports.decodeHTML5Strict = exports.decodeHTMLStrict = decode.HTMLStrict;
exports.escape = encode.escape;

/***/ }),

/***/ "./node_modules/entities/lib/decode.js":
/*!*********************************************!*\
  !*** ./node_modules/entities/lib/decode.js ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var entityMap = __webpack_require__(/*! ../maps/entities.json */ "./node_modules/entities/maps/entities.json"),
    legacyMap = __webpack_require__(/*! ../maps/legacy.json */ "./node_modules/entities/maps/legacy.json"),
    xmlMap = __webpack_require__(/*! ../maps/xml.json */ "./node_modules/entities/maps/xml.json"),
    decodeCodePoint = __webpack_require__(/*! ./decode_codepoint.js */ "./node_modules/entities/lib/decode_codepoint.js");

var decodeXMLStrict = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map) {
  var keys = Object.keys(map).join("|"),
      replace = getReplacer(map);
  keys += "|#[xX][\\da-fA-F]+|#\\d+";
  var re = new RegExp("&(?:" + keys + ");", "g");
  return function (str) {
    return String(str).replace(re, replace);
  };
}

var decodeHTML = function () {
  var legacy = Object.keys(legacyMap).sort(sorter);
  var keys = Object.keys(entityMap).sort(sorter);

  for (var i = 0, j = 0; i < keys.length; i++) {
    if (legacy[j] === keys[i]) {
      keys[i] += ";?";
      j++;
    } else {
      keys[i] += ";";
    }
  }

  var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
      replace = getReplacer(entityMap);

  function replacer(str) {
    if (str.substr(-1) !== ";") str += ";";
    return replace(str);
  } //TODO consider creating a merged map


  return function (str) {
    return String(str).replace(re, replacer);
  };
}();

function sorter(a, b) {
  return a < b ? 1 : -1;
}

function getReplacer(map) {
  return function replace(str) {
    if (str.charAt(1) === "#") {
      if (str.charAt(2) === "X" || str.charAt(2) === "x") {
        return decodeCodePoint(parseInt(str.substr(3), 16));
      }

      return decodeCodePoint(parseInt(str.substr(2), 10));
    }

    return map[str.slice(1, -1)];
  };
}

module.exports = {
  XML: decodeXMLStrict,
  HTML: decodeHTML,
  HTMLStrict: decodeHTMLStrict
};

/***/ }),

/***/ "./node_modules/entities/lib/decode_codepoint.js":
/*!*******************************************************!*\
  !*** ./node_modules/entities/lib/decode_codepoint.js ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var decodeMap = __webpack_require__(/*! ../maps/decode.json */ "./node_modules/entities/maps/decode.json");

module.exports = decodeCodePoint; // modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119

function decodeCodePoint(codePoint) {
  if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {
    return "\uFFFD";
  }

  if (codePoint in decodeMap) {
    codePoint = decodeMap[codePoint];
  }

  var output = "";

  if (codePoint > 0xffff) {
    codePoint -= 0x10000;
    output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
    codePoint = 0xdc00 | codePoint & 0x3ff;
  }

  output += String.fromCharCode(codePoint);
  return output;
}

/***/ }),

/***/ "./node_modules/entities/lib/encode.js":
/*!*********************************************!*\
  !*** ./node_modules/entities/lib/encode.js ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var inverseXML = getInverseObj(__webpack_require__(/*! ../maps/xml.json */ "./node_modules/entities/maps/xml.json")),
    xmlReplacer = getInverseReplacer(inverseXML);
exports.XML = getInverse(inverseXML, xmlReplacer);
var inverseHTML = getInverseObj(__webpack_require__(/*! ../maps/entities.json */ "./node_modules/entities/maps/entities.json")),
    htmlReplacer = getInverseReplacer(inverseHTML);
exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj) {
  return Object.keys(obj).sort().reduce(function (inverse, name) {
    inverse[obj[name]] = "&" + name + ";";
    return inverse;
  }, {});
}

function getInverseReplacer(inverse) {
  var single = [],
      multiple = [];
  Object.keys(inverse).forEach(function (k) {
    if (k.length === 1) {
      single.push("\\" + k);
    } else {
      multiple.push(k);
    }
  }); //TODO add ranges

  multiple.unshift("[" + single.join("") + "]");
  return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c) {
  return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c) {
  // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
  var high = c.charCodeAt(0);
  var low = c.charCodeAt(1);
  var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
  return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re) {
  function func(name) {
    return inverse[name];
  }

  return function (data) {
    return data.replace(re, func).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
  };
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data) {
  return data.replace(re_xmlChars, singleCharReplacer).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;

/***/ }),

/***/ "./node_modules/entities/maps/decode.json":
/*!************************************************!*\
  !*** ./node_modules/entities/maps/decode.json ***!
  \************************************************/
/*! exports provided: 0, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, default */
/*! all exports used */
/***/ (function(module) {

module.exports = JSON.parse("{\"0\":65533,\"128\":8364,\"130\":8218,\"131\":402,\"132\":8222,\"133\":8230,\"134\":8224,\"135\":8225,\"136\":710,\"137\":8240,\"138\":352,\"139\":8249,\"140\":338,\"142\":381,\"145\":8216,\"146\":8217,\"147\":8220,\"148\":8221,\"149\":8226,\"150\":8211,\"151\":8212,\"152\":732,\"153\":8482,\"154\":353,\"155\":8250,\"156\":339,\"158\":382,\"159\":376}");

/***/ }),

/***/ "./node_modules/entities/maps/entities.json":
/*!**************************************************!*\
  !*** ./node_modules/entities/maps/entities.json ***!
  \**************************************************/
/*! exports provided: Aacute, aacute, Abreve, abreve, ac, acd, acE, Acirc, acirc, acute, Acy, acy, AElig, aelig, af, Afr, afr, Agrave, agrave, alefsym, aleph, Alpha, alpha, Amacr, amacr, amalg, amp, AMP, andand, And, and, andd, andslope, andv, ang, ange, angle, angmsdaa, angmsdab, angmsdac, angmsdad, angmsdae, angmsdaf, angmsdag, angmsdah, angmsd, angrt, angrtvb, angrtvbd, angsph, angst, angzarr, Aogon, aogon, Aopf, aopf, apacir, ap, apE, ape, apid, apos, ApplyFunction, approx, approxeq, Aring, aring, Ascr, ascr, Assign, ast, asymp, asympeq, Atilde, atilde, Auml, auml, awconint, awint, backcong, backepsilon, backprime, backsim, backsimeq, Backslash, Barv, barvee, barwed, Barwed, barwedge, bbrk, bbrktbrk, bcong, Bcy, bcy, bdquo, becaus, because, Because, bemptyv, bepsi, bernou, Bernoullis, Beta, beta, beth, between, Bfr, bfr, bigcap, bigcirc, bigcup, bigodot, bigoplus, bigotimes, bigsqcup, bigstar, bigtriangledown, bigtriangleup, biguplus, bigvee, bigwedge, bkarow, blacklozenge, blacksquare, blacktriangle, blacktriangledown, blacktriangleleft, blacktriangleright, blank, blk12, blk14, blk34, block, bne, bnequiv, bNot, bnot, Bopf, bopf, bot, bottom, bowtie, boxbox, boxdl, boxdL, boxDl, boxDL, boxdr, boxdR, boxDr, boxDR, boxh, boxH, boxhd, boxHd, boxhD, boxHD, boxhu, boxHu, boxhU, boxHU, boxminus, boxplus, boxtimes, boxul, boxuL, boxUl, boxUL, boxur, boxuR, boxUr, boxUR, boxv, boxV, boxvh, boxvH, boxVh, boxVH, boxvl, boxvL, boxVl, boxVL, boxvr, boxvR, boxVr, boxVR, bprime, breve, Breve, brvbar, bscr, Bscr, bsemi, bsim, bsime, bsolb, bsol, bsolhsub, bull, bullet, bump, bumpE, bumpe, Bumpeq, bumpeq, Cacute, cacute, capand, capbrcup, capcap, cap, Cap, capcup, capdot, CapitalDifferentialD, caps, caret, caron, Cayleys, ccaps, Ccaron, ccaron, Ccedil, ccedil, Ccirc, ccirc, Cconint, ccups, ccupssm, Cdot, cdot, cedil, Cedilla, cemptyv, cent, centerdot, CenterDot, cfr, Cfr, CHcy, chcy, check, checkmark, Chi, chi, circ, circeq, circlearrowleft, circlearrowright, circledast, circledcirc, circleddash, CircleDot, circledR, circledS, CircleMinus, CirclePlus, CircleTimes, cir, cirE, cire, cirfnint, cirmid, cirscir, ClockwiseContourIntegral, CloseCurlyDoubleQuote, CloseCurlyQuote, clubs, clubsuit, colon, Colon, Colone, colone, coloneq, comma, commat, comp, compfn, complement, complexes, cong, congdot, Congruent, conint, Conint, ContourIntegral, copf, Copf, coprod, Coproduct, copy, COPY, copysr, CounterClockwiseContourIntegral, crarr, cross, Cross, Cscr, cscr, csub, csube, csup, csupe, ctdot, cudarrl, cudarrr, cuepr, cuesc, cularr, cularrp, cupbrcap, cupcap, CupCap, cup, Cup, cupcup, cupdot, cupor, cups, curarr, curarrm, curlyeqprec, curlyeqsucc, curlyvee, curlywedge, curren, curvearrowleft, curvearrowright, cuvee, cuwed, cwconint, cwint, cylcty, dagger, Dagger, daleth, darr, Darr, dArr, dash, Dashv, dashv, dbkarow, dblac, Dcaron, dcaron, Dcy, dcy, ddagger, ddarr, DD, dd, DDotrahd, ddotseq, deg, Del, Delta, delta, demptyv, dfisht, Dfr, dfr, dHar, dharl, dharr, DiacriticalAcute, DiacriticalDot, DiacriticalDoubleAcute, DiacriticalGrave, DiacriticalTilde, diam, diamond, Diamond, diamondsuit, diams, die, DifferentialD, digamma, disin, div, divide, divideontimes, divonx, DJcy, djcy, dlcorn, dlcrop, dollar, Dopf, dopf, Dot, dot, DotDot, doteq, doteqdot, DotEqual, dotminus, dotplus, dotsquare, doublebarwedge, DoubleContourIntegral, DoubleDot, DoubleDownArrow, DoubleLeftArrow, DoubleLeftRightArrow, DoubleLeftTee, DoubleLongLeftArrow, DoubleLongLeftRightArrow, DoubleLongRightArrow, DoubleRightArrow, DoubleRightTee, DoubleUpArrow, DoubleUpDownArrow, DoubleVerticalBar, DownArrowBar, downarrow, DownArrow, Downarrow, DownArrowUpArrow, DownBreve, downdownarrows, downharpoonleft, downharpoonright, DownLeftRightVector, DownLeftTeeVector, DownLeftVectorBar, DownLeftVector, DownRightTeeVector, DownRightVectorBar, DownRightVector, DownTeeArrow, DownTee, drbkarow, drcorn, drcrop, Dscr, dscr, DScy, dscy, dsol, Dstrok, dstrok, dtdot, dtri, dtrif, duarr, duhar, dwangle, DZcy, dzcy, dzigrarr, Eacute, eacute, easter, Ecaron, ecaron, Ecirc, ecirc, ecir, ecolon, Ecy, ecy, eDDot, Edot, edot, eDot, ee, efDot, Efr, efr, eg, Egrave, egrave, egs, egsdot, el, Element, elinters, ell, els, elsdot, Emacr, emacr, empty, emptyset, EmptySmallSquare, emptyv, EmptyVerySmallSquare, emsp13, emsp14, emsp, ENG, eng, ensp, Eogon, eogon, Eopf, eopf, epar, eparsl, eplus, epsi, Epsilon, epsilon, epsiv, eqcirc, eqcolon, eqsim, eqslantgtr, eqslantless, Equal, equals, EqualTilde, equest, Equilibrium, equiv, equivDD, eqvparsl, erarr, erDot, escr, Escr, esdot, Esim, esim, Eta, eta, ETH, eth, Euml, euml, euro, excl, exist, Exists, expectation, exponentiale, ExponentialE, fallingdotseq, Fcy, fcy, female, ffilig, fflig, ffllig, Ffr, ffr, filig, FilledSmallSquare, FilledVerySmallSquare, fjlig, flat, fllig, fltns, fnof, Fopf, fopf, forall, ForAll, fork, forkv, Fouriertrf, fpartint, frac12, frac13, frac14, frac15, frac16, frac18, frac23, frac25, frac34, frac35, frac38, frac45, frac56, frac58, frac78, frasl, frown, fscr, Fscr, gacute, Gamma, gamma, Gammad, gammad, gap, Gbreve, gbreve, Gcedil, Gcirc, gcirc, Gcy, gcy, Gdot, gdot, ge, gE, gEl, gel, geq, geqq, geqslant, gescc, ges, gesdot, gesdoto, gesdotol, gesl, gesles, Gfr, gfr, gg, Gg, ggg, gimel, GJcy, gjcy, gla, gl, glE, glj, gnap, gnapprox, gne, gnE, gneq, gneqq, gnsim, Gopf, gopf, grave, GreaterEqual, GreaterEqualLess, GreaterFullEqual, GreaterGreater, GreaterLess, GreaterSlantEqual, GreaterTilde, Gscr, gscr, gsim, gsime, gsiml, gtcc, gtcir, gt, GT, Gt, gtdot, gtlPar, gtquest, gtrapprox, gtrarr, gtrdot, gtreqless, gtreqqless, gtrless, gtrsim, gvertneqq, gvnE, Hacek, hairsp, half, hamilt, HARDcy, hardcy, harrcir, harr, hArr, harrw, Hat, hbar, Hcirc, hcirc, hearts, heartsuit, hellip, hercon, hfr, Hfr, HilbertSpace, hksearow, hkswarow, hoarr, homtht, hookleftarrow, hookrightarrow, hopf, Hopf, horbar, HorizontalLine, hscr, Hscr, hslash, Hstrok, hstrok, HumpDownHump, HumpEqual, hybull, hyphen, Iacute, iacute, ic, Icirc, icirc, Icy, icy, Idot, IEcy, iecy, iexcl, iff, ifr, Ifr, Igrave, igrave, ii, iiiint, iiint, iinfin, iiota, IJlig, ijlig, Imacr, imacr, image, ImaginaryI, imagline, imagpart, imath, Im, imof, imped, Implies, incare, in, infin, infintie, inodot, intcal, int, Int, integers, Integral, intercal, Intersection, intlarhk, intprod, InvisibleComma, InvisibleTimes, IOcy, iocy, Iogon, iogon, Iopf, iopf, Iota, iota, iprod, iquest, iscr, Iscr, isin, isindot, isinE, isins, isinsv, isinv, it, Itilde, itilde, Iukcy, iukcy, Iuml, iuml, Jcirc, jcirc, Jcy, jcy, Jfr, jfr, jmath, Jopf, jopf, Jscr, jscr, Jsercy, jsercy, Jukcy, jukcy, Kappa, kappa, kappav, Kcedil, kcedil, Kcy, kcy, Kfr, kfr, kgreen, KHcy, khcy, KJcy, kjcy, Kopf, kopf, Kscr, kscr, lAarr, Lacute, lacute, laemptyv, lagran, Lambda, lambda, lang, Lang, langd, langle, lap, Laplacetrf, laquo, larrb, larrbfs, larr, Larr, lArr, larrfs, larrhk, larrlp, larrpl, larrsim, larrtl, latail, lAtail, lat, late, lates, lbarr, lBarr, lbbrk, lbrace, lbrack, lbrke, lbrksld, lbrkslu, Lcaron, lcaron, Lcedil, lcedil, lceil, lcub, Lcy, lcy, ldca, ldquo, ldquor, ldrdhar, ldrushar, ldsh, le, lE, LeftAngleBracket, LeftArrowBar, leftarrow, LeftArrow, Leftarrow, LeftArrowRightArrow, leftarrowtail, LeftCeiling, LeftDoubleBracket, LeftDownTeeVector, LeftDownVectorBar, LeftDownVector, LeftFloor, leftharpoondown, leftharpoonup, leftleftarrows, leftrightarrow, LeftRightArrow, Leftrightarrow, leftrightarrows, leftrightharpoons, leftrightsquigarrow, LeftRightVector, LeftTeeArrow, LeftTee, LeftTeeVector, leftthreetimes, LeftTriangleBar, LeftTriangle, LeftTriangleEqual, LeftUpDownVector, LeftUpTeeVector, LeftUpVectorBar, LeftUpVector, LeftVectorBar, LeftVector, lEg, leg, leq, leqq, leqslant, lescc, les, lesdot, lesdoto, lesdotor, lesg, lesges, lessapprox, lessdot, lesseqgtr, lesseqqgtr, LessEqualGreater, LessFullEqual, LessGreater, lessgtr, LessLess, lesssim, LessSlantEqual, LessTilde, lfisht, lfloor, Lfr, lfr, lg, lgE, lHar, lhard, lharu, lharul, lhblk, LJcy, ljcy, llarr, ll, Ll, llcorner, Lleftarrow, llhard, lltri, Lmidot, lmidot, lmoustache, lmoust, lnap, lnapprox, lne, lnE, lneq, lneqq, lnsim, loang, loarr, lobrk, longleftarrow, LongLeftArrow, Longleftarrow, longleftrightarrow, LongLeftRightArrow, Longleftrightarrow, longmapsto, longrightarrow, LongRightArrow, Longrightarrow, looparrowleft, looparrowright, lopar, Lopf, lopf, loplus, lotimes, lowast, lowbar, LowerLeftArrow, LowerRightArrow, loz, lozenge, lozf, lpar, lparlt, lrarr, lrcorner, lrhar, lrhard, lrm, lrtri, lsaquo, lscr, Lscr, lsh, Lsh, lsim, lsime, lsimg, lsqb, lsquo, lsquor, Lstrok, lstrok, ltcc, ltcir, lt, LT, Lt, ltdot, lthree, ltimes, ltlarr, ltquest, ltri, ltrie, ltrif, ltrPar, lurdshar, luruhar, lvertneqq, lvnE, macr, male, malt, maltese, Map, map, mapsto, mapstodown, mapstoleft, mapstoup, marker, mcomma, Mcy, mcy, mdash, mDDot, measuredangle, MediumSpace, Mellintrf, Mfr, mfr, mho, micro, midast, midcir, mid, middot, minusb, minus, minusd, minusdu, MinusPlus, mlcp, mldr, mnplus, models, Mopf, mopf, mp, mscr, Mscr, mstpos, Mu, mu, multimap, mumap, nabla, Nacute, nacute, nang, nap, napE, napid, napos, napprox, natural, naturals, natur, nbsp, nbump, nbumpe, ncap, Ncaron, ncaron, Ncedil, ncedil, ncong, ncongdot, ncup, Ncy, ncy, ndash, nearhk, nearr, neArr, nearrow, ne, nedot, NegativeMediumSpace, NegativeThickSpace, NegativeThinSpace, NegativeVeryThinSpace, nequiv, nesear, nesim, NestedGreaterGreater, NestedLessLess, NewLine, nexist, nexists, Nfr, nfr, ngE, nge, ngeq, ngeqq, ngeqslant, nges, nGg, ngsim, nGt, ngt, ngtr, nGtv, nharr, nhArr, nhpar, ni, nis, nisd, niv, NJcy, njcy, nlarr, nlArr, nldr, nlE, nle, nleftarrow, nLeftarrow, nleftrightarrow, nLeftrightarrow, nleq, nleqq, nleqslant, nles, nless, nLl, nlsim, nLt, nlt, nltri, nltrie, nLtv, nmid, NoBreak, NonBreakingSpace, nopf, Nopf, Not, not, NotCongruent, NotCupCap, NotDoubleVerticalBar, NotElement, NotEqual, NotEqualTilde, NotExists, NotGreater, NotGreaterEqual, NotGreaterFullEqual, NotGreaterGreater, NotGreaterLess, NotGreaterSlantEqual, NotGreaterTilde, NotHumpDownHump, NotHumpEqual, notin, notindot, notinE, notinva, notinvb, notinvc, NotLeftTriangleBar, NotLeftTriangle, NotLeftTriangleEqual, NotLess, NotLessEqual, NotLessGreater, NotLessLess, NotLessSlantEqual, NotLessTilde, NotNestedGreaterGreater, NotNestedLessLess, notni, notniva, notnivb, notnivc, NotPrecedes, NotPrecedesEqual, NotPrecedesSlantEqual, NotReverseElement, NotRightTriangleBar, NotRightTriangle, NotRightTriangleEqual, NotSquareSubset, NotSquareSubsetEqual, NotSquareSuperset, NotSquareSupersetEqual, NotSubset, NotSubsetEqual, NotSucceeds, NotSucceedsEqual, NotSucceedsSlantEqual, NotSucceedsTilde, NotSuperset, NotSupersetEqual, NotTilde, NotTildeEqual, NotTildeFullEqual, NotTildeTilde, NotVerticalBar, nparallel, npar, nparsl, npart, npolint, npr, nprcue, nprec, npreceq, npre, nrarrc, nrarr, nrArr, nrarrw, nrightarrow, nRightarrow, nrtri, nrtrie, nsc, nsccue, nsce, Nscr, nscr, nshortmid, nshortparallel, nsim, nsime, nsimeq, nsmid, nspar, nsqsube, nsqsupe, nsub, nsubE, nsube, nsubset, nsubseteq, nsubseteqq, nsucc, nsucceq, nsup, nsupE, nsupe, nsupset, nsupseteq, nsupseteqq, ntgl, Ntilde, ntilde, ntlg, ntriangleleft, ntrianglelefteq, ntriangleright, ntrianglerighteq, Nu, nu, num, numero, numsp, nvap, nvdash, nvDash, nVdash, nVDash, nvge, nvgt, nvHarr, nvinfin, nvlArr, nvle, nvlt, nvltrie, nvrArr, nvrtrie, nvsim, nwarhk, nwarr, nwArr, nwarrow, nwnear, Oacute, oacute, oast, Ocirc, ocirc, ocir, Ocy, ocy, odash, Odblac, odblac, odiv, odot, odsold, OElig, oelig, ofcir, Ofr, ofr, ogon, Ograve, ograve, ogt, ohbar, ohm, oint, olarr, olcir, olcross, oline, olt, Omacr, omacr, Omega, omega, Omicron, omicron, omid, ominus, Oopf, oopf, opar, OpenCurlyDoubleQuote, OpenCurlyQuote, operp, oplus, orarr, Or, or, ord, order, orderof, ordf, ordm, origof, oror, orslope, orv, oS, Oscr, oscr, Oslash, oslash, osol, Otilde, otilde, otimesas, Otimes, otimes, Ouml, ouml, ovbar, OverBar, OverBrace, OverBracket, OverParenthesis, para, parallel, par, parsim, parsl, part, PartialD, Pcy, pcy, percnt, period, permil, perp, pertenk, Pfr, pfr, Phi, phi, phiv, phmmat, phone, Pi, pi, pitchfork, piv, planck, planckh, plankv, plusacir, plusb, pluscir, plus, plusdo, plusdu, pluse, PlusMinus, plusmn, plussim, plustwo, pm, Poincareplane, pointint, popf, Popf, pound, prap, Pr, pr, prcue, precapprox, prec, preccurlyeq, Precedes, PrecedesEqual, PrecedesSlantEqual, PrecedesTilde, preceq, precnapprox, precneqq, precnsim, pre, prE, precsim, prime, Prime, primes, prnap, prnE, prnsim, prod, Product, profalar, profline, profsurf, prop, Proportional, Proportion, propto, prsim, prurel, Pscr, pscr, Psi, psi, puncsp, Qfr, qfr, qint, qopf, Qopf, qprime, Qscr, qscr, quaternions, quatint, quest, questeq, quot, QUOT, rAarr, race, Racute, racute, radic, raemptyv, rang, Rang, rangd, range, rangle, raquo, rarrap, rarrb, rarrbfs, rarrc, rarr, Rarr, rArr, rarrfs, rarrhk, rarrlp, rarrpl, rarrsim, Rarrtl, rarrtl, rarrw, ratail, rAtail, ratio, rationals, rbarr, rBarr, RBarr, rbbrk, rbrace, rbrack, rbrke, rbrksld, rbrkslu, Rcaron, rcaron, Rcedil, rcedil, rceil, rcub, Rcy, rcy, rdca, rdldhar, rdquo, rdquor, rdsh, real, realine, realpart, reals, Re, rect, reg, REG, ReverseElement, ReverseEquilibrium, ReverseUpEquilibrium, rfisht, rfloor, rfr, Rfr, rHar, rhard, rharu, rharul, Rho, rho, rhov, RightAngleBracket, RightArrowBar, rightarrow, RightArrow, Rightarrow, RightArrowLeftArrow, rightarrowtail, RightCeiling, RightDoubleBracket, RightDownTeeVector, RightDownVectorBar, RightDownVector, RightFloor, rightharpoondown, rightharpoonup, rightleftarrows, rightleftharpoons, rightrightarrows, rightsquigarrow, RightTeeArrow, RightTee, RightTeeVector, rightthreetimes, RightTriangleBar, RightTriangle, RightTriangleEqual, RightUpDownVector, RightUpTeeVector, RightUpVectorBar, RightUpVector, RightVectorBar, RightVector, ring, risingdotseq, rlarr, rlhar, rlm, rmoustache, rmoust, rnmid, roang, roarr, robrk, ropar, ropf, Ropf, roplus, rotimes, RoundImplies, rpar, rpargt, rppolint, rrarr, Rrightarrow, rsaquo, rscr, Rscr, rsh, Rsh, rsqb, rsquo, rsquor, rthree, rtimes, rtri, rtrie, rtrif, rtriltri, RuleDelayed, ruluhar, rx, Sacute, sacute, sbquo, scap, Scaron, scaron, Sc, sc, sccue, sce, scE, Scedil, scedil, Scirc, scirc, scnap, scnE, scnsim, scpolint, scsim, Scy, scy, sdotb, sdot, sdote, searhk, searr, seArr, searrow, sect, semi, seswar, setminus, setmn, sext, Sfr, sfr, sfrown, sharp, SHCHcy, shchcy, SHcy, shcy, ShortDownArrow, ShortLeftArrow, shortmid, shortparallel, ShortRightArrow, ShortUpArrow, shy, Sigma, sigma, sigmaf, sigmav, sim, simdot, sime, simeq, simg, simgE, siml, simlE, simne, simplus, simrarr, slarr, SmallCircle, smallsetminus, smashp, smeparsl, smid, smile, smt, smte, smtes, SOFTcy, softcy, solbar, solb, sol, Sopf, sopf, spades, spadesuit, spar, sqcap, sqcaps, sqcup, sqcups, Sqrt, sqsub, sqsube, sqsubset, sqsubseteq, sqsup, sqsupe, sqsupset, sqsupseteq, square, Square, SquareIntersection, SquareSubset, SquareSubsetEqual, SquareSuperset, SquareSupersetEqual, SquareUnion, squarf, squ, squf, srarr, Sscr, sscr, ssetmn, ssmile, sstarf, Star, star, starf, straightepsilon, straightphi, strns, sub, Sub, subdot, subE, sube, subedot, submult, subnE, subne, subplus, subrarr, subset, Subset, subseteq, subseteqq, SubsetEqual, subsetneq, subsetneqq, subsim, subsub, subsup, succapprox, succ, succcurlyeq, Succeeds, SucceedsEqual, SucceedsSlantEqual, SucceedsTilde, succeq, succnapprox, succneqq, succnsim, succsim, SuchThat, sum, Sum, sung, sup1, sup2, sup3, sup, Sup, supdot, supdsub, supE, supe, supedot, Superset, SupersetEqual, suphsol, suphsub, suplarr, supmult, supnE, supne, supplus, supset, Supset, supseteq, supseteqq, supsetneq, supsetneqq, supsim, supsub, supsup, swarhk, swarr, swArr, swarrow, swnwar, szlig, Tab, target, Tau, tau, tbrk, Tcaron, tcaron, Tcedil, tcedil, Tcy, tcy, tdot, telrec, Tfr, tfr, there4, therefore, Therefore, Theta, theta, thetasym, thetav, thickapprox, thicksim, ThickSpace, ThinSpace, thinsp, thkap, thksim, THORN, thorn, tilde, Tilde, TildeEqual, TildeFullEqual, TildeTilde, timesbar, timesb, times, timesd, tint, toea, topbot, topcir, top, Topf, topf, topfork, tosa, tprime, trade, TRADE, triangle, triangledown, triangleleft, trianglelefteq, triangleq, triangleright, trianglerighteq, tridot, trie, triminus, TripleDot, triplus, trisb, tritime, trpezium, Tscr, tscr, TScy, tscy, TSHcy, tshcy, Tstrok, tstrok, twixt, twoheadleftarrow, twoheadrightarrow, Uacute, uacute, uarr, Uarr, uArr, Uarrocir, Ubrcy, ubrcy, Ubreve, ubreve, Ucirc, ucirc, Ucy, ucy, udarr, Udblac, udblac, udhar, ufisht, Ufr, ufr, Ugrave, ugrave, uHar, uharl, uharr, uhblk, ulcorn, ulcorner, ulcrop, ultri, Umacr, umacr, uml, UnderBar, UnderBrace, UnderBracket, UnderParenthesis, Union, UnionPlus, Uogon, uogon, Uopf, uopf, UpArrowBar, uparrow, UpArrow, Uparrow, UpArrowDownArrow, updownarrow, UpDownArrow, Updownarrow, UpEquilibrium, upharpoonleft, upharpoonright, uplus, UpperLeftArrow, UpperRightArrow, upsi, Upsi, upsih, Upsilon, upsilon, UpTeeArrow, UpTee, upuparrows, urcorn, urcorner, urcrop, Uring, uring, urtri, Uscr, uscr, utdot, Utilde, utilde, utri, utrif, uuarr, Uuml, uuml, uwangle, vangrt, varepsilon, varkappa, varnothing, varphi, varpi, varpropto, varr, vArr, varrho, varsigma, varsubsetneq, varsubsetneqq, varsupsetneq, varsupsetneqq, vartheta, vartriangleleft, vartriangleright, vBar, Vbar, vBarv, Vcy, vcy, vdash, vDash, Vdash, VDash, Vdashl, veebar, vee, Vee, veeeq, vellip, verbar, Verbar, vert, Vert, VerticalBar, VerticalLine, VerticalSeparator, VerticalTilde, VeryThinSpace, Vfr, vfr, vltri, vnsub, vnsup, Vopf, vopf, vprop, vrtri, Vscr, vscr, vsubnE, vsubne, vsupnE, vsupne, Vvdash, vzigzag, Wcirc, wcirc, wedbar, wedge, Wedge, wedgeq, weierp, Wfr, wfr, Wopf, wopf, wp, wr, wreath, Wscr, wscr, xcap, xcirc, xcup, xdtri, Xfr, xfr, xharr, xhArr, Xi, xi, xlarr, xlArr, xmap, xnis, xodot, Xopf, xopf, xoplus, xotime, xrarr, xrArr, Xscr, xscr, xsqcup, xuplus, xutri, xvee, xwedge, Yacute, yacute, YAcy, yacy, Ycirc, ycirc, Ycy, ycy, yen, Yfr, yfr, YIcy, yicy, Yopf, yopf, Yscr, yscr, YUcy, yucy, yuml, Yuml, Zacute, zacute, Zcaron, zcaron, Zcy, zcy, Zdot, zdot, zeetrf, ZeroWidthSpace, Zeta, zeta, zfr, Zfr, ZHcy, zhcy, zigrarr, zopf, Zopf, Zscr, zscr, zwj, zwnj, default */
/*! all exports used */
/***/ (function(module) {

module.exports = JSON.parse("{\"Aacute\":\"Á\",\"aacute\":\"á\",\"Abreve\":\"Ă\",\"abreve\":\"ă\",\"ac\":\"∾\",\"acd\":\"∿\",\"acE\":\"∾̳\",\"Acirc\":\"Â\",\"acirc\":\"â\",\"acute\":\"´\",\"Acy\":\"А\",\"acy\":\"а\",\"AElig\":\"Æ\",\"aelig\":\"æ\",\"af\":\"⁡\",\"Afr\":\"𝔄\",\"afr\":\"𝔞\",\"Agrave\":\"À\",\"agrave\":\"à\",\"alefsym\":\"ℵ\",\"aleph\":\"ℵ\",\"Alpha\":\"Α\",\"alpha\":\"α\",\"Amacr\":\"Ā\",\"amacr\":\"ā\",\"amalg\":\"⨿\",\"amp\":\"&\",\"AMP\":\"&\",\"andand\":\"⩕\",\"And\":\"⩓\",\"and\":\"∧\",\"andd\":\"⩜\",\"andslope\":\"⩘\",\"andv\":\"⩚\",\"ang\":\"∠\",\"ange\":\"⦤\",\"angle\":\"∠\",\"angmsdaa\":\"⦨\",\"angmsdab\":\"⦩\",\"angmsdac\":\"⦪\",\"angmsdad\":\"⦫\",\"angmsdae\":\"⦬\",\"angmsdaf\":\"⦭\",\"angmsdag\":\"⦮\",\"angmsdah\":\"⦯\",\"angmsd\":\"∡\",\"angrt\":\"∟\",\"angrtvb\":\"⊾\",\"angrtvbd\":\"⦝\",\"angsph\":\"∢\",\"angst\":\"Å\",\"angzarr\":\"⍼\",\"Aogon\":\"Ą\",\"aogon\":\"ą\",\"Aopf\":\"𝔸\",\"aopf\":\"𝕒\",\"apacir\":\"⩯\",\"ap\":\"≈\",\"apE\":\"⩰\",\"ape\":\"≊\",\"apid\":\"≋\",\"apos\":\"'\",\"ApplyFunction\":\"⁡\",\"approx\":\"≈\",\"approxeq\":\"≊\",\"Aring\":\"Å\",\"aring\":\"å\",\"Ascr\":\"𝒜\",\"ascr\":\"𝒶\",\"Assign\":\"≔\",\"ast\":\"*\",\"asymp\":\"≈\",\"asympeq\":\"≍\",\"Atilde\":\"Ã\",\"atilde\":\"ã\",\"Auml\":\"Ä\",\"auml\":\"ä\",\"awconint\":\"∳\",\"awint\":\"⨑\",\"backcong\":\"≌\",\"backepsilon\":\"϶\",\"backprime\":\"‵\",\"backsim\":\"∽\",\"backsimeq\":\"⋍\",\"Backslash\":\"∖\",\"Barv\":\"⫧\",\"barvee\":\"⊽\",\"barwed\":\"⌅\",\"Barwed\":\"⌆\",\"barwedge\":\"⌅\",\"bbrk\":\"⎵\",\"bbrktbrk\":\"⎶\",\"bcong\":\"≌\",\"Bcy\":\"Б\",\"bcy\":\"б\",\"bdquo\":\"„\",\"becaus\":\"∵\",\"because\":\"∵\",\"Because\":\"∵\",\"bemptyv\":\"⦰\",\"bepsi\":\"϶\",\"bernou\":\"ℬ\",\"Bernoullis\":\"ℬ\",\"Beta\":\"Β\",\"beta\":\"β\",\"beth\":\"ℶ\",\"between\":\"≬\",\"Bfr\":\"𝔅\",\"bfr\":\"𝔟\",\"bigcap\":\"⋂\",\"bigcirc\":\"◯\",\"bigcup\":\"⋃\",\"bigodot\":\"⨀\",\"bigoplus\":\"⨁\",\"bigotimes\":\"⨂\",\"bigsqcup\":\"⨆\",\"bigstar\":\"★\",\"bigtriangledown\":\"▽\",\"bigtriangleup\":\"△\",\"biguplus\":\"⨄\",\"bigvee\":\"⋁\",\"bigwedge\":\"⋀\",\"bkarow\":\"⤍\",\"blacklozenge\":\"⧫\",\"blacksquare\":\"▪\",\"blacktriangle\":\"▴\",\"blacktriangledown\":\"▾\",\"blacktriangleleft\":\"◂\",\"blacktriangleright\":\"▸\",\"blank\":\"␣\",\"blk12\":\"▒\",\"blk14\":\"░\",\"blk34\":\"▓\",\"block\":\"█\",\"bne\":\"=⃥\",\"bnequiv\":\"≡⃥\",\"bNot\":\"⫭\",\"bnot\":\"⌐\",\"Bopf\":\"𝔹\",\"bopf\":\"𝕓\",\"bot\":\"⊥\",\"bottom\":\"⊥\",\"bowtie\":\"⋈\",\"boxbox\":\"⧉\",\"boxdl\":\"┐\",\"boxdL\":\"╕\",\"boxDl\":\"╖\",\"boxDL\":\"╗\",\"boxdr\":\"┌\",\"boxdR\":\"╒\",\"boxDr\":\"╓\",\"boxDR\":\"╔\",\"boxh\":\"─\",\"boxH\":\"═\",\"boxhd\":\"┬\",\"boxHd\":\"╤\",\"boxhD\":\"╥\",\"boxHD\":\"╦\",\"boxhu\":\"┴\",\"boxHu\":\"╧\",\"boxhU\":\"╨\",\"boxHU\":\"╩\",\"boxminus\":\"⊟\",\"boxplus\":\"⊞\",\"boxtimes\":\"⊠\",\"boxul\":\"┘\",\"boxuL\":\"╛\",\"boxUl\":\"╜\",\"boxUL\":\"╝\",\"boxur\":\"└\",\"boxuR\":\"╘\",\"boxUr\":\"╙\",\"boxUR\":\"╚\",\"boxv\":\"│\",\"boxV\":\"║\",\"boxvh\":\"┼\",\"boxvH\":\"╪\",\"boxVh\":\"╫\",\"boxVH\":\"╬\",\"boxvl\":\"┤\",\"boxvL\":\"╡\",\"boxVl\":\"╢\",\"boxVL\":\"╣\",\"boxvr\":\"├\",\"boxvR\":\"╞\",\"boxVr\":\"╟\",\"boxVR\":\"╠\",\"bprime\":\"‵\",\"breve\":\"˘\",\"Breve\":\"˘\",\"brvbar\":\"¦\",\"bscr\":\"𝒷\",\"Bscr\":\"ℬ\",\"bsemi\":\"⁏\",\"bsim\":\"∽\",\"bsime\":\"⋍\",\"bsolb\":\"⧅\",\"bsol\":\"\\\\\",\"bsolhsub\":\"⟈\",\"bull\":\"•\",\"bullet\":\"•\",\"bump\":\"≎\",\"bumpE\":\"⪮\",\"bumpe\":\"≏\",\"Bumpeq\":\"≎\",\"bumpeq\":\"≏\",\"Cacute\":\"Ć\",\"cacute\":\"ć\",\"capand\":\"⩄\",\"capbrcup\":\"⩉\",\"capcap\":\"⩋\",\"cap\":\"∩\",\"Cap\":\"⋒\",\"capcup\":\"⩇\",\"capdot\":\"⩀\",\"CapitalDifferentialD\":\"ⅅ\",\"caps\":\"∩︀\",\"caret\":\"⁁\",\"caron\":\"ˇ\",\"Cayleys\":\"ℭ\",\"ccaps\":\"⩍\",\"Ccaron\":\"Č\",\"ccaron\":\"č\",\"Ccedil\":\"Ç\",\"ccedil\":\"ç\",\"Ccirc\":\"Ĉ\",\"ccirc\":\"ĉ\",\"Cconint\":\"∰\",\"ccups\":\"⩌\",\"ccupssm\":\"⩐\",\"Cdot\":\"Ċ\",\"cdot\":\"ċ\",\"cedil\":\"¸\",\"Cedilla\":\"¸\",\"cemptyv\":\"⦲\",\"cent\":\"¢\",\"centerdot\":\"·\",\"CenterDot\":\"·\",\"cfr\":\"𝔠\",\"Cfr\":\"ℭ\",\"CHcy\":\"Ч\",\"chcy\":\"ч\",\"check\":\"✓\",\"checkmark\":\"✓\",\"Chi\":\"Χ\",\"chi\":\"χ\",\"circ\":\"ˆ\",\"circeq\":\"≗\",\"circlearrowleft\":\"↺\",\"circlearrowright\":\"↻\",\"circledast\":\"⊛\",\"circledcirc\":\"⊚\",\"circleddash\":\"⊝\",\"CircleDot\":\"⊙\",\"circledR\":\"®\",\"circledS\":\"Ⓢ\",\"CircleMinus\":\"⊖\",\"CirclePlus\":\"⊕\",\"CircleTimes\":\"⊗\",\"cir\":\"○\",\"cirE\":\"⧃\",\"cire\":\"≗\",\"cirfnint\":\"⨐\",\"cirmid\":\"⫯\",\"cirscir\":\"⧂\",\"ClockwiseContourIntegral\":\"∲\",\"CloseCurlyDoubleQuote\":\"”\",\"CloseCurlyQuote\":\"’\",\"clubs\":\"♣\",\"clubsuit\":\"♣\",\"colon\":\":\",\"Colon\":\"∷\",\"Colone\":\"⩴\",\"colone\":\"≔\",\"coloneq\":\"≔\",\"comma\":\",\",\"commat\":\"@\",\"comp\":\"∁\",\"compfn\":\"∘\",\"complement\":\"∁\",\"complexes\":\"ℂ\",\"cong\":\"≅\",\"congdot\":\"⩭\",\"Congruent\":\"≡\",\"conint\":\"∮\",\"Conint\":\"∯\",\"ContourIntegral\":\"∮\",\"copf\":\"𝕔\",\"Copf\":\"ℂ\",\"coprod\":\"∐\",\"Coproduct\":\"∐\",\"copy\":\"©\",\"COPY\":\"©\",\"copysr\":\"℗\",\"CounterClockwiseContourIntegral\":\"∳\",\"crarr\":\"↵\",\"cross\":\"✗\",\"Cross\":\"⨯\",\"Cscr\":\"𝒞\",\"cscr\":\"𝒸\",\"csub\":\"⫏\",\"csube\":\"⫑\",\"csup\":\"⫐\",\"csupe\":\"⫒\",\"ctdot\":\"⋯\",\"cudarrl\":\"⤸\",\"cudarrr\":\"⤵\",\"cuepr\":\"⋞\",\"cuesc\":\"⋟\",\"cularr\":\"↶\",\"cularrp\":\"⤽\",\"cupbrcap\":\"⩈\",\"cupcap\":\"⩆\",\"CupCap\":\"≍\",\"cup\":\"∪\",\"Cup\":\"⋓\",\"cupcup\":\"⩊\",\"cupdot\":\"⊍\",\"cupor\":\"⩅\",\"cups\":\"∪︀\",\"curarr\":\"↷\",\"curarrm\":\"⤼\",\"curlyeqprec\":\"⋞\",\"curlyeqsucc\":\"⋟\",\"curlyvee\":\"⋎\",\"curlywedge\":\"⋏\",\"curren\":\"¤\",\"curvearrowleft\":\"↶\",\"curvearrowright\":\"↷\",\"cuvee\":\"⋎\",\"cuwed\":\"⋏\",\"cwconint\":\"∲\",\"cwint\":\"∱\",\"cylcty\":\"⌭\",\"dagger\":\"†\",\"Dagger\":\"‡\",\"daleth\":\"ℸ\",\"darr\":\"↓\",\"Darr\":\"↡\",\"dArr\":\"⇓\",\"dash\":\"‐\",\"Dashv\":\"⫤\",\"dashv\":\"⊣\",\"dbkarow\":\"⤏\",\"dblac\":\"˝\",\"Dcaron\":\"Ď\",\"dcaron\":\"ď\",\"Dcy\":\"Д\",\"dcy\":\"д\",\"ddagger\":\"‡\",\"ddarr\":\"⇊\",\"DD\":\"ⅅ\",\"dd\":\"ⅆ\",\"DDotrahd\":\"⤑\",\"ddotseq\":\"⩷\",\"deg\":\"°\",\"Del\":\"∇\",\"Delta\":\"Δ\",\"delta\":\"δ\",\"demptyv\":\"⦱\",\"dfisht\":\"⥿\",\"Dfr\":\"𝔇\",\"dfr\":\"𝔡\",\"dHar\":\"⥥\",\"dharl\":\"⇃\",\"dharr\":\"⇂\",\"DiacriticalAcute\":\"´\",\"DiacriticalDot\":\"˙\",\"DiacriticalDoubleAcute\":\"˝\",\"DiacriticalGrave\":\"`\",\"DiacriticalTilde\":\"˜\",\"diam\":\"⋄\",\"diamond\":\"⋄\",\"Diamond\":\"⋄\",\"diamondsuit\":\"♦\",\"diams\":\"♦\",\"die\":\"¨\",\"DifferentialD\":\"ⅆ\",\"digamma\":\"ϝ\",\"disin\":\"⋲\",\"div\":\"÷\",\"divide\":\"÷\",\"divideontimes\":\"⋇\",\"divonx\":\"⋇\",\"DJcy\":\"Ђ\",\"djcy\":\"ђ\",\"dlcorn\":\"⌞\",\"dlcrop\":\"⌍\",\"dollar\":\"$\",\"Dopf\":\"𝔻\",\"dopf\":\"𝕕\",\"Dot\":\"¨\",\"dot\":\"˙\",\"DotDot\":\"⃜\",\"doteq\":\"≐\",\"doteqdot\":\"≑\",\"DotEqual\":\"≐\",\"dotminus\":\"∸\",\"dotplus\":\"∔\",\"dotsquare\":\"⊡\",\"doublebarwedge\":\"⌆\",\"DoubleContourIntegral\":\"∯\",\"DoubleDot\":\"¨\",\"DoubleDownArrow\":\"⇓\",\"DoubleLeftArrow\":\"⇐\",\"DoubleLeftRightArrow\":\"⇔\",\"DoubleLeftTee\":\"⫤\",\"DoubleLongLeftArrow\":\"⟸\",\"DoubleLongLeftRightArrow\":\"⟺\",\"DoubleLongRightArrow\":\"⟹\",\"DoubleRightArrow\":\"⇒\",\"DoubleRightTee\":\"⊨\",\"DoubleUpArrow\":\"⇑\",\"DoubleUpDownArrow\":\"⇕\",\"DoubleVerticalBar\":\"∥\",\"DownArrowBar\":\"⤓\",\"downarrow\":\"↓\",\"DownArrow\":\"↓\",\"Downarrow\":\"⇓\",\"DownArrowUpArrow\":\"⇵\",\"DownBreve\":\"̑\",\"downdownarrows\":\"⇊\",\"downharpoonleft\":\"⇃\",\"downharpoonright\":\"⇂\",\"DownLeftRightVector\":\"⥐\",\"DownLeftTeeVector\":\"⥞\",\"DownLeftVectorBar\":\"⥖\",\"DownLeftVector\":\"↽\",\"DownRightTeeVector\":\"⥟\",\"DownRightVectorBar\":\"⥗\",\"DownRightVector\":\"⇁\",\"DownTeeArrow\":\"↧\",\"DownTee\":\"⊤\",\"drbkarow\":\"⤐\",\"drcorn\":\"⌟\",\"drcrop\":\"⌌\",\"Dscr\":\"𝒟\",\"dscr\":\"𝒹\",\"DScy\":\"Ѕ\",\"dscy\":\"ѕ\",\"dsol\":\"⧶\",\"Dstrok\":\"Đ\",\"dstrok\":\"đ\",\"dtdot\":\"⋱\",\"dtri\":\"▿\",\"dtrif\":\"▾\",\"duarr\":\"⇵\",\"duhar\":\"⥯\",\"dwangle\":\"⦦\",\"DZcy\":\"Џ\",\"dzcy\":\"џ\",\"dzigrarr\":\"⟿\",\"Eacute\":\"É\",\"eacute\":\"é\",\"easter\":\"⩮\",\"Ecaron\":\"Ě\",\"ecaron\":\"ě\",\"Ecirc\":\"Ê\",\"ecirc\":\"ê\",\"ecir\":\"≖\",\"ecolon\":\"≕\",\"Ecy\":\"Э\",\"ecy\":\"э\",\"eDDot\":\"⩷\",\"Edot\":\"Ė\",\"edot\":\"ė\",\"eDot\":\"≑\",\"ee\":\"ⅇ\",\"efDot\":\"≒\",\"Efr\":\"𝔈\",\"efr\":\"𝔢\",\"eg\":\"⪚\",\"Egrave\":\"È\",\"egrave\":\"è\",\"egs\":\"⪖\",\"egsdot\":\"⪘\",\"el\":\"⪙\",\"Element\":\"∈\",\"elinters\":\"⏧\",\"ell\":\"ℓ\",\"els\":\"⪕\",\"elsdot\":\"⪗\",\"Emacr\":\"Ē\",\"emacr\":\"ē\",\"empty\":\"∅\",\"emptyset\":\"∅\",\"EmptySmallSquare\":\"◻\",\"emptyv\":\"∅\",\"EmptyVerySmallSquare\":\"▫\",\"emsp13\":\" \",\"emsp14\":\" \",\"emsp\":\" \",\"ENG\":\"Ŋ\",\"eng\":\"ŋ\",\"ensp\":\" \",\"Eogon\":\"Ę\",\"eogon\":\"ę\",\"Eopf\":\"𝔼\",\"eopf\":\"𝕖\",\"epar\":\"⋕\",\"eparsl\":\"⧣\",\"eplus\":\"⩱\",\"epsi\":\"ε\",\"Epsilon\":\"Ε\",\"epsilon\":\"ε\",\"epsiv\":\"ϵ\",\"eqcirc\":\"≖\",\"eqcolon\":\"≕\",\"eqsim\":\"≂\",\"eqslantgtr\":\"⪖\",\"eqslantless\":\"⪕\",\"Equal\":\"⩵\",\"equals\":\"=\",\"EqualTilde\":\"≂\",\"equest\":\"≟\",\"Equilibrium\":\"⇌\",\"equiv\":\"≡\",\"equivDD\":\"⩸\",\"eqvparsl\":\"⧥\",\"erarr\":\"⥱\",\"erDot\":\"≓\",\"escr\":\"ℯ\",\"Escr\":\"ℰ\",\"esdot\":\"≐\",\"Esim\":\"⩳\",\"esim\":\"≂\",\"Eta\":\"Η\",\"eta\":\"η\",\"ETH\":\"Ð\",\"eth\":\"ð\",\"Euml\":\"Ë\",\"euml\":\"ë\",\"euro\":\"€\",\"excl\":\"!\",\"exist\":\"∃\",\"Exists\":\"∃\",\"expectation\":\"ℰ\",\"exponentiale\":\"ⅇ\",\"ExponentialE\":\"ⅇ\",\"fallingdotseq\":\"≒\",\"Fcy\":\"Ф\",\"fcy\":\"ф\",\"female\":\"♀\",\"ffilig\":\"ﬃ\",\"fflig\":\"ﬀ\",\"ffllig\":\"ﬄ\",\"Ffr\":\"𝔉\",\"ffr\":\"𝔣\",\"filig\":\"ﬁ\",\"FilledSmallSquare\":\"◼\",\"FilledVerySmallSquare\":\"▪\",\"fjlig\":\"fj\",\"flat\":\"♭\",\"fllig\":\"ﬂ\",\"fltns\":\"▱\",\"fnof\":\"ƒ\",\"Fopf\":\"𝔽\",\"fopf\":\"𝕗\",\"forall\":\"∀\",\"ForAll\":\"∀\",\"fork\":\"⋔\",\"forkv\":\"⫙\",\"Fouriertrf\":\"ℱ\",\"fpartint\":\"⨍\",\"frac12\":\"½\",\"frac13\":\"⅓\",\"frac14\":\"¼\",\"frac15\":\"⅕\",\"frac16\":\"⅙\",\"frac18\":\"⅛\",\"frac23\":\"⅔\",\"frac25\":\"⅖\",\"frac34\":\"¾\",\"frac35\":\"⅗\",\"frac38\":\"⅜\",\"frac45\":\"⅘\",\"frac56\":\"⅚\",\"frac58\":\"⅝\",\"frac78\":\"⅞\",\"frasl\":\"⁄\",\"frown\":\"⌢\",\"fscr\":\"𝒻\",\"Fscr\":\"ℱ\",\"gacute\":\"ǵ\",\"Gamma\":\"Γ\",\"gamma\":\"γ\",\"Gammad\":\"Ϝ\",\"gammad\":\"ϝ\",\"gap\":\"⪆\",\"Gbreve\":\"Ğ\",\"gbreve\":\"ğ\",\"Gcedil\":\"Ģ\",\"Gcirc\":\"Ĝ\",\"gcirc\":\"ĝ\",\"Gcy\":\"Г\",\"gcy\":\"г\",\"Gdot\":\"Ġ\",\"gdot\":\"ġ\",\"ge\":\"≥\",\"gE\":\"≧\",\"gEl\":\"⪌\",\"gel\":\"⋛\",\"geq\":\"≥\",\"geqq\":\"≧\",\"geqslant\":\"⩾\",\"gescc\":\"⪩\",\"ges\":\"⩾\",\"gesdot\":\"⪀\",\"gesdoto\":\"⪂\",\"gesdotol\":\"⪄\",\"gesl\":\"⋛︀\",\"gesles\":\"⪔\",\"Gfr\":\"𝔊\",\"gfr\":\"𝔤\",\"gg\":\"≫\",\"Gg\":\"⋙\",\"ggg\":\"⋙\",\"gimel\":\"ℷ\",\"GJcy\":\"Ѓ\",\"gjcy\":\"ѓ\",\"gla\":\"⪥\",\"gl\":\"≷\",\"glE\":\"⪒\",\"glj\":\"⪤\",\"gnap\":\"⪊\",\"gnapprox\":\"⪊\",\"gne\":\"⪈\",\"gnE\":\"≩\",\"gneq\":\"⪈\",\"gneqq\":\"≩\",\"gnsim\":\"⋧\",\"Gopf\":\"𝔾\",\"gopf\":\"𝕘\",\"grave\":\"`\",\"GreaterEqual\":\"≥\",\"GreaterEqualLess\":\"⋛\",\"GreaterFullEqual\":\"≧\",\"GreaterGreater\":\"⪢\",\"GreaterLess\":\"≷\",\"GreaterSlantEqual\":\"⩾\",\"GreaterTilde\":\"≳\",\"Gscr\":\"𝒢\",\"gscr\":\"ℊ\",\"gsim\":\"≳\",\"gsime\":\"⪎\",\"gsiml\":\"⪐\",\"gtcc\":\"⪧\",\"gtcir\":\"⩺\",\"gt\":\">\",\"GT\":\">\",\"Gt\":\"≫\",\"gtdot\":\"⋗\",\"gtlPar\":\"⦕\",\"gtquest\":\"⩼\",\"gtrapprox\":\"⪆\",\"gtrarr\":\"⥸\",\"gtrdot\":\"⋗\",\"gtreqless\":\"⋛\",\"gtreqqless\":\"⪌\",\"gtrless\":\"≷\",\"gtrsim\":\"≳\",\"gvertneqq\":\"≩︀\",\"gvnE\":\"≩︀\",\"Hacek\":\"ˇ\",\"hairsp\":\" \",\"half\":\"½\",\"hamilt\":\"ℋ\",\"HARDcy\":\"Ъ\",\"hardcy\":\"ъ\",\"harrcir\":\"⥈\",\"harr\":\"↔\",\"hArr\":\"⇔\",\"harrw\":\"↭\",\"Hat\":\"^\",\"hbar\":\"ℏ\",\"Hcirc\":\"Ĥ\",\"hcirc\":\"ĥ\",\"hearts\":\"♥\",\"heartsuit\":\"♥\",\"hellip\":\"…\",\"hercon\":\"⊹\",\"hfr\":\"𝔥\",\"Hfr\":\"ℌ\",\"HilbertSpace\":\"ℋ\",\"hksearow\":\"⤥\",\"hkswarow\":\"⤦\",\"hoarr\":\"⇿\",\"homtht\":\"∻\",\"hookleftarrow\":\"↩\",\"hookrightarrow\":\"↪\",\"hopf\":\"𝕙\",\"Hopf\":\"ℍ\",\"horbar\":\"―\",\"HorizontalLine\":\"─\",\"hscr\":\"𝒽\",\"Hscr\":\"ℋ\",\"hslash\":\"ℏ\",\"Hstrok\":\"Ħ\",\"hstrok\":\"ħ\",\"HumpDownHump\":\"≎\",\"HumpEqual\":\"≏\",\"hybull\":\"⁃\",\"hyphen\":\"‐\",\"Iacute\":\"Í\",\"iacute\":\"í\",\"ic\":\"⁣\",\"Icirc\":\"Î\",\"icirc\":\"î\",\"Icy\":\"И\",\"icy\":\"и\",\"Idot\":\"İ\",\"IEcy\":\"Е\",\"iecy\":\"е\",\"iexcl\":\"¡\",\"iff\":\"⇔\",\"ifr\":\"𝔦\",\"Ifr\":\"ℑ\",\"Igrave\":\"Ì\",\"igrave\":\"ì\",\"ii\":\"ⅈ\",\"iiiint\":\"⨌\",\"iiint\":\"∭\",\"iinfin\":\"⧜\",\"iiota\":\"℩\",\"IJlig\":\"Ĳ\",\"ijlig\":\"ĳ\",\"Imacr\":\"Ī\",\"imacr\":\"ī\",\"image\":\"ℑ\",\"ImaginaryI\":\"ⅈ\",\"imagline\":\"ℐ\",\"imagpart\":\"ℑ\",\"imath\":\"ı\",\"Im\":\"ℑ\",\"imof\":\"⊷\",\"imped\":\"Ƶ\",\"Implies\":\"⇒\",\"incare\":\"℅\",\"in\":\"∈\",\"infin\":\"∞\",\"infintie\":\"⧝\",\"inodot\":\"ı\",\"intcal\":\"⊺\",\"int\":\"∫\",\"Int\":\"∬\",\"integers\":\"ℤ\",\"Integral\":\"∫\",\"intercal\":\"⊺\",\"Intersection\":\"⋂\",\"intlarhk\":\"⨗\",\"intprod\":\"⨼\",\"InvisibleComma\":\"⁣\",\"InvisibleTimes\":\"⁢\",\"IOcy\":\"Ё\",\"iocy\":\"ё\",\"Iogon\":\"Į\",\"iogon\":\"į\",\"Iopf\":\"𝕀\",\"iopf\":\"𝕚\",\"Iota\":\"Ι\",\"iota\":\"ι\",\"iprod\":\"⨼\",\"iquest\":\"¿\",\"iscr\":\"𝒾\",\"Iscr\":\"ℐ\",\"isin\":\"∈\",\"isindot\":\"⋵\",\"isinE\":\"⋹\",\"isins\":\"⋴\",\"isinsv\":\"⋳\",\"isinv\":\"∈\",\"it\":\"⁢\",\"Itilde\":\"Ĩ\",\"itilde\":\"ĩ\",\"Iukcy\":\"І\",\"iukcy\":\"і\",\"Iuml\":\"Ï\",\"iuml\":\"ï\",\"Jcirc\":\"Ĵ\",\"jcirc\":\"ĵ\",\"Jcy\":\"Й\",\"jcy\":\"й\",\"Jfr\":\"𝔍\",\"jfr\":\"𝔧\",\"jmath\":\"ȷ\",\"Jopf\":\"𝕁\",\"jopf\":\"𝕛\",\"Jscr\":\"𝒥\",\"jscr\":\"𝒿\",\"Jsercy\":\"Ј\",\"jsercy\":\"ј\",\"Jukcy\":\"Є\",\"jukcy\":\"є\",\"Kappa\":\"Κ\",\"kappa\":\"κ\",\"kappav\":\"ϰ\",\"Kcedil\":\"Ķ\",\"kcedil\":\"ķ\",\"Kcy\":\"К\",\"kcy\":\"к\",\"Kfr\":\"𝔎\",\"kfr\":\"𝔨\",\"kgreen\":\"ĸ\",\"KHcy\":\"Х\",\"khcy\":\"х\",\"KJcy\":\"Ќ\",\"kjcy\":\"ќ\",\"Kopf\":\"𝕂\",\"kopf\":\"𝕜\",\"Kscr\":\"𝒦\",\"kscr\":\"𝓀\",\"lAarr\":\"⇚\",\"Lacute\":\"Ĺ\",\"lacute\":\"ĺ\",\"laemptyv\":\"⦴\",\"lagran\":\"ℒ\",\"Lambda\":\"Λ\",\"lambda\":\"λ\",\"lang\":\"⟨\",\"Lang\":\"⟪\",\"langd\":\"⦑\",\"langle\":\"⟨\",\"lap\":\"⪅\",\"Laplacetrf\":\"ℒ\",\"laquo\":\"«\",\"larrb\":\"⇤\",\"larrbfs\":\"⤟\",\"larr\":\"←\",\"Larr\":\"↞\",\"lArr\":\"⇐\",\"larrfs\":\"⤝\",\"larrhk\":\"↩\",\"larrlp\":\"↫\",\"larrpl\":\"⤹\",\"larrsim\":\"⥳\",\"larrtl\":\"↢\",\"latail\":\"⤙\",\"lAtail\":\"⤛\",\"lat\":\"⪫\",\"late\":\"⪭\",\"lates\":\"⪭︀\",\"lbarr\":\"⤌\",\"lBarr\":\"⤎\",\"lbbrk\":\"❲\",\"lbrace\":\"{\",\"lbrack\":\"[\",\"lbrke\":\"⦋\",\"lbrksld\":\"⦏\",\"lbrkslu\":\"⦍\",\"Lcaron\":\"Ľ\",\"lcaron\":\"ľ\",\"Lcedil\":\"Ļ\",\"lcedil\":\"ļ\",\"lceil\":\"⌈\",\"lcub\":\"{\",\"Lcy\":\"Л\",\"lcy\":\"л\",\"ldca\":\"⤶\",\"ldquo\":\"“\",\"ldquor\":\"„\",\"ldrdhar\":\"⥧\",\"ldrushar\":\"⥋\",\"ldsh\":\"↲\",\"le\":\"≤\",\"lE\":\"≦\",\"LeftAngleBracket\":\"⟨\",\"LeftArrowBar\":\"⇤\",\"leftarrow\":\"←\",\"LeftArrow\":\"←\",\"Leftarrow\":\"⇐\",\"LeftArrowRightArrow\":\"⇆\",\"leftarrowtail\":\"↢\",\"LeftCeiling\":\"⌈\",\"LeftDoubleBracket\":\"⟦\",\"LeftDownTeeVector\":\"⥡\",\"LeftDownVectorBar\":\"⥙\",\"LeftDownVector\":\"⇃\",\"LeftFloor\":\"⌊\",\"leftharpoondown\":\"↽\",\"leftharpoonup\":\"↼\",\"leftleftarrows\":\"⇇\",\"leftrightarrow\":\"↔\",\"LeftRightArrow\":\"↔\",\"Leftrightarrow\":\"⇔\",\"leftrightarrows\":\"⇆\",\"leftrightharpoons\":\"⇋\",\"leftrightsquigarrow\":\"↭\",\"LeftRightVector\":\"⥎\",\"LeftTeeArrow\":\"↤\",\"LeftTee\":\"⊣\",\"LeftTeeVector\":\"⥚\",\"leftthreetimes\":\"⋋\",\"LeftTriangleBar\":\"⧏\",\"LeftTriangle\":\"⊲\",\"LeftTriangleEqual\":\"⊴\",\"LeftUpDownVector\":\"⥑\",\"LeftUpTeeVector\":\"⥠\",\"LeftUpVectorBar\":\"⥘\",\"LeftUpVector\":\"↿\",\"LeftVectorBar\":\"⥒\",\"LeftVector\":\"↼\",\"lEg\":\"⪋\",\"leg\":\"⋚\",\"leq\":\"≤\",\"leqq\":\"≦\",\"leqslant\":\"⩽\",\"lescc\":\"⪨\",\"les\":\"⩽\",\"lesdot\":\"⩿\",\"lesdoto\":\"⪁\",\"lesdotor\":\"⪃\",\"lesg\":\"⋚︀\",\"lesges\":\"⪓\",\"lessapprox\":\"⪅\",\"lessdot\":\"⋖\",\"lesseqgtr\":\"⋚\",\"lesseqqgtr\":\"⪋\",\"LessEqualGreater\":\"⋚\",\"LessFullEqual\":\"≦\",\"LessGreater\":\"≶\",\"lessgtr\":\"≶\",\"LessLess\":\"⪡\",\"lesssim\":\"≲\",\"LessSlantEqual\":\"⩽\",\"LessTilde\":\"≲\",\"lfisht\":\"⥼\",\"lfloor\":\"⌊\",\"Lfr\":\"𝔏\",\"lfr\":\"𝔩\",\"lg\":\"≶\",\"lgE\":\"⪑\",\"lHar\":\"⥢\",\"lhard\":\"↽\",\"lharu\":\"↼\",\"lharul\":\"⥪\",\"lhblk\":\"▄\",\"LJcy\":\"Љ\",\"ljcy\":\"љ\",\"llarr\":\"⇇\",\"ll\":\"≪\",\"Ll\":\"⋘\",\"llcorner\":\"⌞\",\"Lleftarrow\":\"⇚\",\"llhard\":\"⥫\",\"lltri\":\"◺\",\"Lmidot\":\"Ŀ\",\"lmidot\":\"ŀ\",\"lmoustache\":\"⎰\",\"lmoust\":\"⎰\",\"lnap\":\"⪉\",\"lnapprox\":\"⪉\",\"lne\":\"⪇\",\"lnE\":\"≨\",\"lneq\":\"⪇\",\"lneqq\":\"≨\",\"lnsim\":\"⋦\",\"loang\":\"⟬\",\"loarr\":\"⇽\",\"lobrk\":\"⟦\",\"longleftarrow\":\"⟵\",\"LongLeftArrow\":\"⟵\",\"Longleftarrow\":\"⟸\",\"longleftrightarrow\":\"⟷\",\"LongLeftRightArrow\":\"⟷\",\"Longleftrightarrow\":\"⟺\",\"longmapsto\":\"⟼\",\"longrightarrow\":\"⟶\",\"LongRightArrow\":\"⟶\",\"Longrightarrow\":\"⟹\",\"looparrowleft\":\"↫\",\"looparrowright\":\"↬\",\"lopar\":\"⦅\",\"Lopf\":\"𝕃\",\"lopf\":\"𝕝\",\"loplus\":\"⨭\",\"lotimes\":\"⨴\",\"lowast\":\"∗\",\"lowbar\":\"_\",\"LowerLeftArrow\":\"↙\",\"LowerRightArrow\":\"↘\",\"loz\":\"◊\",\"lozenge\":\"◊\",\"lozf\":\"⧫\",\"lpar\":\"(\",\"lparlt\":\"⦓\",\"lrarr\":\"⇆\",\"lrcorner\":\"⌟\",\"lrhar\":\"⇋\",\"lrhard\":\"⥭\",\"lrm\":\"‎\",\"lrtri\":\"⊿\",\"lsaquo\":\"‹\",\"lscr\":\"𝓁\",\"Lscr\":\"ℒ\",\"lsh\":\"↰\",\"Lsh\":\"↰\",\"lsim\":\"≲\",\"lsime\":\"⪍\",\"lsimg\":\"⪏\",\"lsqb\":\"[\",\"lsquo\":\"‘\",\"lsquor\":\"‚\",\"Lstrok\":\"Ł\",\"lstrok\":\"ł\",\"ltcc\":\"⪦\",\"ltcir\":\"⩹\",\"lt\":\"<\",\"LT\":\"<\",\"Lt\":\"≪\",\"ltdot\":\"⋖\",\"lthree\":\"⋋\",\"ltimes\":\"⋉\",\"ltlarr\":\"⥶\",\"ltquest\":\"⩻\",\"ltri\":\"◃\",\"ltrie\":\"⊴\",\"ltrif\":\"◂\",\"ltrPar\":\"⦖\",\"lurdshar\":\"⥊\",\"luruhar\":\"⥦\",\"lvertneqq\":\"≨︀\",\"lvnE\":\"≨︀\",\"macr\":\"¯\",\"male\":\"♂\",\"malt\":\"✠\",\"maltese\":\"✠\",\"Map\":\"⤅\",\"map\":\"↦\",\"mapsto\":\"↦\",\"mapstodown\":\"↧\",\"mapstoleft\":\"↤\",\"mapstoup\":\"↥\",\"marker\":\"▮\",\"mcomma\":\"⨩\",\"Mcy\":\"М\",\"mcy\":\"м\",\"mdash\":\"—\",\"mDDot\":\"∺\",\"measuredangle\":\"∡\",\"MediumSpace\":\" \",\"Mellintrf\":\"ℳ\",\"Mfr\":\"𝔐\",\"mfr\":\"𝔪\",\"mho\":\"℧\",\"micro\":\"µ\",\"midast\":\"*\",\"midcir\":\"⫰\",\"mid\":\"∣\",\"middot\":\"·\",\"minusb\":\"⊟\",\"minus\":\"−\",\"minusd\":\"∸\",\"minusdu\":\"⨪\",\"MinusPlus\":\"∓\",\"mlcp\":\"⫛\",\"mldr\":\"…\",\"mnplus\":\"∓\",\"models\":\"⊧\",\"Mopf\":\"𝕄\",\"mopf\":\"𝕞\",\"mp\":\"∓\",\"mscr\":\"𝓂\",\"Mscr\":\"ℳ\",\"mstpos\":\"∾\",\"Mu\":\"Μ\",\"mu\":\"μ\",\"multimap\":\"⊸\",\"mumap\":\"⊸\",\"nabla\":\"∇\",\"Nacute\":\"Ń\",\"nacute\":\"ń\",\"nang\":\"∠⃒\",\"nap\":\"≉\",\"napE\":\"⩰̸\",\"napid\":\"≋̸\",\"napos\":\"ŉ\",\"napprox\":\"≉\",\"natural\":\"♮\",\"naturals\":\"ℕ\",\"natur\":\"♮\",\"nbsp\":\" \",\"nbump\":\"≎̸\",\"nbumpe\":\"≏̸\",\"ncap\":\"⩃\",\"Ncaron\":\"Ň\",\"ncaron\":\"ň\",\"Ncedil\":\"Ņ\",\"ncedil\":\"ņ\",\"ncong\":\"≇\",\"ncongdot\":\"⩭̸\",\"ncup\":\"⩂\",\"Ncy\":\"Н\",\"ncy\":\"н\",\"ndash\":\"–\",\"nearhk\":\"⤤\",\"nearr\":\"↗\",\"neArr\":\"⇗\",\"nearrow\":\"↗\",\"ne\":\"≠\",\"nedot\":\"≐̸\",\"NegativeMediumSpace\":\"​\",\"NegativeThickSpace\":\"​\",\"NegativeThinSpace\":\"​\",\"NegativeVeryThinSpace\":\"​\",\"nequiv\":\"≢\",\"nesear\":\"⤨\",\"nesim\":\"≂̸\",\"NestedGreaterGreater\":\"≫\",\"NestedLessLess\":\"≪\",\"NewLine\":\"\\n\",\"nexist\":\"∄\",\"nexists\":\"∄\",\"Nfr\":\"𝔑\",\"nfr\":\"𝔫\",\"ngE\":\"≧̸\",\"nge\":\"≱\",\"ngeq\":\"≱\",\"ngeqq\":\"≧̸\",\"ngeqslant\":\"⩾̸\",\"nges\":\"⩾̸\",\"nGg\":\"⋙̸\",\"ngsim\":\"≵\",\"nGt\":\"≫⃒\",\"ngt\":\"≯\",\"ngtr\":\"≯\",\"nGtv\":\"≫̸\",\"nharr\":\"↮\",\"nhArr\":\"⇎\",\"nhpar\":\"⫲\",\"ni\":\"∋\",\"nis\":\"⋼\",\"nisd\":\"⋺\",\"niv\":\"∋\",\"NJcy\":\"Њ\",\"njcy\":\"њ\",\"nlarr\":\"↚\",\"nlArr\":\"⇍\",\"nldr\":\"‥\",\"nlE\":\"≦̸\",\"nle\":\"≰\",\"nleftarrow\":\"↚\",\"nLeftarrow\":\"⇍\",\"nleftrightarrow\":\"↮\",\"nLeftrightarrow\":\"⇎\",\"nleq\":\"≰\",\"nleqq\":\"≦̸\",\"nleqslant\":\"⩽̸\",\"nles\":\"⩽̸\",\"nless\":\"≮\",\"nLl\":\"⋘̸\",\"nlsim\":\"≴\",\"nLt\":\"≪⃒\",\"nlt\":\"≮\",\"nltri\":\"⋪\",\"nltrie\":\"⋬\",\"nLtv\":\"≪̸\",\"nmid\":\"∤\",\"NoBreak\":\"⁠\",\"NonBreakingSpace\":\" \",\"nopf\":\"𝕟\",\"Nopf\":\"ℕ\",\"Not\":\"⫬\",\"not\":\"¬\",\"NotCongruent\":\"≢\",\"NotCupCap\":\"≭\",\"NotDoubleVerticalBar\":\"∦\",\"NotElement\":\"∉\",\"NotEqual\":\"≠\",\"NotEqualTilde\":\"≂̸\",\"NotExists\":\"∄\",\"NotGreater\":\"≯\",\"NotGreaterEqual\":\"≱\",\"NotGreaterFullEqual\":\"≧̸\",\"NotGreaterGreater\":\"≫̸\",\"NotGreaterLess\":\"≹\",\"NotGreaterSlantEqual\":\"⩾̸\",\"NotGreaterTilde\":\"≵\",\"NotHumpDownHump\":\"≎̸\",\"NotHumpEqual\":\"≏̸\",\"notin\":\"∉\",\"notindot\":\"⋵̸\",\"notinE\":\"⋹̸\",\"notinva\":\"∉\",\"notinvb\":\"⋷\",\"notinvc\":\"⋶\",\"NotLeftTriangleBar\":\"⧏̸\",\"NotLeftTriangle\":\"⋪\",\"NotLeftTriangleEqual\":\"⋬\",\"NotLess\":\"≮\",\"NotLessEqual\":\"≰\",\"NotLessGreater\":\"≸\",\"NotLessLess\":\"≪̸\",\"NotLessSlantEqual\":\"⩽̸\",\"NotLessTilde\":\"≴\",\"NotNestedGreaterGreater\":\"⪢̸\",\"NotNestedLessLess\":\"⪡̸\",\"notni\":\"∌\",\"notniva\":\"∌\",\"notnivb\":\"⋾\",\"notnivc\":\"⋽\",\"NotPrecedes\":\"⊀\",\"NotPrecedesEqual\":\"⪯̸\",\"NotPrecedesSlantEqual\":\"⋠\",\"NotReverseElement\":\"∌\",\"NotRightTriangleBar\":\"⧐̸\",\"NotRightTriangle\":\"⋫\",\"NotRightTriangleEqual\":\"⋭\",\"NotSquareSubset\":\"⊏̸\",\"NotSquareSubsetEqual\":\"⋢\",\"NotSquareSuperset\":\"⊐̸\",\"NotSquareSupersetEqual\":\"⋣\",\"NotSubset\":\"⊂⃒\",\"NotSubsetEqual\":\"⊈\",\"NotSucceeds\":\"⊁\",\"NotSucceedsEqual\":\"⪰̸\",\"NotSucceedsSlantEqual\":\"⋡\",\"NotSucceedsTilde\":\"≿̸\",\"NotSuperset\":\"⊃⃒\",\"NotSupersetEqual\":\"⊉\",\"NotTilde\":\"≁\",\"NotTildeEqual\":\"≄\",\"NotTildeFullEqual\":\"≇\",\"NotTildeTilde\":\"≉\",\"NotVerticalBar\":\"∤\",\"nparallel\":\"∦\",\"npar\":\"∦\",\"nparsl\":\"⫽⃥\",\"npart\":\"∂̸\",\"npolint\":\"⨔\",\"npr\":\"⊀\",\"nprcue\":\"⋠\",\"nprec\":\"⊀\",\"npreceq\":\"⪯̸\",\"npre\":\"⪯̸\",\"nrarrc\":\"⤳̸\",\"nrarr\":\"↛\",\"nrArr\":\"⇏\",\"nrarrw\":\"↝̸\",\"nrightarrow\":\"↛\",\"nRightarrow\":\"⇏\",\"nrtri\":\"⋫\",\"nrtrie\":\"⋭\",\"nsc\":\"⊁\",\"nsccue\":\"⋡\",\"nsce\":\"⪰̸\",\"Nscr\":\"𝒩\",\"nscr\":\"𝓃\",\"nshortmid\":\"∤\",\"nshortparallel\":\"∦\",\"nsim\":\"≁\",\"nsime\":\"≄\",\"nsimeq\":\"≄\",\"nsmid\":\"∤\",\"nspar\":\"∦\",\"nsqsube\":\"⋢\",\"nsqsupe\":\"⋣\",\"nsub\":\"⊄\",\"nsubE\":\"⫅̸\",\"nsube\":\"⊈\",\"nsubset\":\"⊂⃒\",\"nsubseteq\":\"⊈\",\"nsubseteqq\":\"⫅̸\",\"nsucc\":\"⊁\",\"nsucceq\":\"⪰̸\",\"nsup\":\"⊅\",\"nsupE\":\"⫆̸\",\"nsupe\":\"⊉\",\"nsupset\":\"⊃⃒\",\"nsupseteq\":\"⊉\",\"nsupseteqq\":\"⫆̸\",\"ntgl\":\"≹\",\"Ntilde\":\"Ñ\",\"ntilde\":\"ñ\",\"ntlg\":\"≸\",\"ntriangleleft\":\"⋪\",\"ntrianglelefteq\":\"⋬\",\"ntriangleright\":\"⋫\",\"ntrianglerighteq\":\"⋭\",\"Nu\":\"Ν\",\"nu\":\"ν\",\"num\":\"#\",\"numero\":\"№\",\"numsp\":\" \",\"nvap\":\"≍⃒\",\"nvdash\":\"⊬\",\"nvDash\":\"⊭\",\"nVdash\":\"⊮\",\"nVDash\":\"⊯\",\"nvge\":\"≥⃒\",\"nvgt\":\">⃒\",\"nvHarr\":\"⤄\",\"nvinfin\":\"⧞\",\"nvlArr\":\"⤂\",\"nvle\":\"≤⃒\",\"nvlt\":\"<⃒\",\"nvltrie\":\"⊴⃒\",\"nvrArr\":\"⤃\",\"nvrtrie\":\"⊵⃒\",\"nvsim\":\"∼⃒\",\"nwarhk\":\"⤣\",\"nwarr\":\"↖\",\"nwArr\":\"⇖\",\"nwarrow\":\"↖\",\"nwnear\":\"⤧\",\"Oacute\":\"Ó\",\"oacute\":\"ó\",\"oast\":\"⊛\",\"Ocirc\":\"Ô\",\"ocirc\":\"ô\",\"ocir\":\"⊚\",\"Ocy\":\"О\",\"ocy\":\"о\",\"odash\":\"⊝\",\"Odblac\":\"Ő\",\"odblac\":\"ő\",\"odiv\":\"⨸\",\"odot\":\"⊙\",\"odsold\":\"⦼\",\"OElig\":\"Œ\",\"oelig\":\"œ\",\"ofcir\":\"⦿\",\"Ofr\":\"𝔒\",\"ofr\":\"𝔬\",\"ogon\":\"˛\",\"Ograve\":\"Ò\",\"ograve\":\"ò\",\"ogt\":\"⧁\",\"ohbar\":\"⦵\",\"ohm\":\"Ω\",\"oint\":\"∮\",\"olarr\":\"↺\",\"olcir\":\"⦾\",\"olcross\":\"⦻\",\"oline\":\"‾\",\"olt\":\"⧀\",\"Omacr\":\"Ō\",\"omacr\":\"ō\",\"Omega\":\"Ω\",\"omega\":\"ω\",\"Omicron\":\"Ο\",\"omicron\":\"ο\",\"omid\":\"⦶\",\"ominus\":\"⊖\",\"Oopf\":\"𝕆\",\"oopf\":\"𝕠\",\"opar\":\"⦷\",\"OpenCurlyDoubleQuote\":\"“\",\"OpenCurlyQuote\":\"‘\",\"operp\":\"⦹\",\"oplus\":\"⊕\",\"orarr\":\"↻\",\"Or\":\"⩔\",\"or\":\"∨\",\"ord\":\"⩝\",\"order\":\"ℴ\",\"orderof\":\"ℴ\",\"ordf\":\"ª\",\"ordm\":\"º\",\"origof\":\"⊶\",\"oror\":\"⩖\",\"orslope\":\"⩗\",\"orv\":\"⩛\",\"oS\":\"Ⓢ\",\"Oscr\":\"𝒪\",\"oscr\":\"ℴ\",\"Oslash\":\"Ø\",\"oslash\":\"ø\",\"osol\":\"⊘\",\"Otilde\":\"Õ\",\"otilde\":\"õ\",\"otimesas\":\"⨶\",\"Otimes\":\"⨷\",\"otimes\":\"⊗\",\"Ouml\":\"Ö\",\"ouml\":\"ö\",\"ovbar\":\"⌽\",\"OverBar\":\"‾\",\"OverBrace\":\"⏞\",\"OverBracket\":\"⎴\",\"OverParenthesis\":\"⏜\",\"para\":\"¶\",\"parallel\":\"∥\",\"par\":\"∥\",\"parsim\":\"⫳\",\"parsl\":\"⫽\",\"part\":\"∂\",\"PartialD\":\"∂\",\"Pcy\":\"П\",\"pcy\":\"п\",\"percnt\":\"%\",\"period\":\".\",\"permil\":\"‰\",\"perp\":\"⊥\",\"pertenk\":\"‱\",\"Pfr\":\"𝔓\",\"pfr\":\"𝔭\",\"Phi\":\"Φ\",\"phi\":\"φ\",\"phiv\":\"ϕ\",\"phmmat\":\"ℳ\",\"phone\":\"☎\",\"Pi\":\"Π\",\"pi\":\"π\",\"pitchfork\":\"⋔\",\"piv\":\"ϖ\",\"planck\":\"ℏ\",\"planckh\":\"ℎ\",\"plankv\":\"ℏ\",\"plusacir\":\"⨣\",\"plusb\":\"⊞\",\"pluscir\":\"⨢\",\"plus\":\"+\",\"plusdo\":\"∔\",\"plusdu\":\"⨥\",\"pluse\":\"⩲\",\"PlusMinus\":\"±\",\"plusmn\":\"±\",\"plussim\":\"⨦\",\"plustwo\":\"⨧\",\"pm\":\"±\",\"Poincareplane\":\"ℌ\",\"pointint\":\"⨕\",\"popf\":\"𝕡\",\"Popf\":\"ℙ\",\"pound\":\"£\",\"prap\":\"⪷\",\"Pr\":\"⪻\",\"pr\":\"≺\",\"prcue\":\"≼\",\"precapprox\":\"⪷\",\"prec\":\"≺\",\"preccurlyeq\":\"≼\",\"Precedes\":\"≺\",\"PrecedesEqual\":\"⪯\",\"PrecedesSlantEqual\":\"≼\",\"PrecedesTilde\":\"≾\",\"preceq\":\"⪯\",\"precnapprox\":\"⪹\",\"precneqq\":\"⪵\",\"precnsim\":\"⋨\",\"pre\":\"⪯\",\"prE\":\"⪳\",\"precsim\":\"≾\",\"prime\":\"′\",\"Prime\":\"″\",\"primes\":\"ℙ\",\"prnap\":\"⪹\",\"prnE\":\"⪵\",\"prnsim\":\"⋨\",\"prod\":\"∏\",\"Product\":\"∏\",\"profalar\":\"⌮\",\"profline\":\"⌒\",\"profsurf\":\"⌓\",\"prop\":\"∝\",\"Proportional\":\"∝\",\"Proportion\":\"∷\",\"propto\":\"∝\",\"prsim\":\"≾\",\"prurel\":\"⊰\",\"Pscr\":\"𝒫\",\"pscr\":\"𝓅\",\"Psi\":\"Ψ\",\"psi\":\"ψ\",\"puncsp\":\" \",\"Qfr\":\"𝔔\",\"qfr\":\"𝔮\",\"qint\":\"⨌\",\"qopf\":\"𝕢\",\"Qopf\":\"ℚ\",\"qprime\":\"⁗\",\"Qscr\":\"𝒬\",\"qscr\":\"𝓆\",\"quaternions\":\"ℍ\",\"quatint\":\"⨖\",\"quest\":\"?\",\"questeq\":\"≟\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"rAarr\":\"⇛\",\"race\":\"∽̱\",\"Racute\":\"Ŕ\",\"racute\":\"ŕ\",\"radic\":\"√\",\"raemptyv\":\"⦳\",\"rang\":\"⟩\",\"Rang\":\"⟫\",\"rangd\":\"⦒\",\"range\":\"⦥\",\"rangle\":\"⟩\",\"raquo\":\"»\",\"rarrap\":\"⥵\",\"rarrb\":\"⇥\",\"rarrbfs\":\"⤠\",\"rarrc\":\"⤳\",\"rarr\":\"→\",\"Rarr\":\"↠\",\"rArr\":\"⇒\",\"rarrfs\":\"⤞\",\"rarrhk\":\"↪\",\"rarrlp\":\"↬\",\"rarrpl\":\"⥅\",\"rarrsim\":\"⥴\",\"Rarrtl\":\"⤖\",\"rarrtl\":\"↣\",\"rarrw\":\"↝\",\"ratail\":\"⤚\",\"rAtail\":\"⤜\",\"ratio\":\"∶\",\"rationals\":\"ℚ\",\"rbarr\":\"⤍\",\"rBarr\":\"⤏\",\"RBarr\":\"⤐\",\"rbbrk\":\"❳\",\"rbrace\":\"}\",\"rbrack\":\"]\",\"rbrke\":\"⦌\",\"rbrksld\":\"⦎\",\"rbrkslu\":\"⦐\",\"Rcaron\":\"Ř\",\"rcaron\":\"ř\",\"Rcedil\":\"Ŗ\",\"rcedil\":\"ŗ\",\"rceil\":\"⌉\",\"rcub\":\"}\",\"Rcy\":\"Р\",\"rcy\":\"р\",\"rdca\":\"⤷\",\"rdldhar\":\"⥩\",\"rdquo\":\"”\",\"rdquor\":\"”\",\"rdsh\":\"↳\",\"real\":\"ℜ\",\"realine\":\"ℛ\",\"realpart\":\"ℜ\",\"reals\":\"ℝ\",\"Re\":\"ℜ\",\"rect\":\"▭\",\"reg\":\"®\",\"REG\":\"®\",\"ReverseElement\":\"∋\",\"ReverseEquilibrium\":\"⇋\",\"ReverseUpEquilibrium\":\"⥯\",\"rfisht\":\"⥽\",\"rfloor\":\"⌋\",\"rfr\":\"𝔯\",\"Rfr\":\"ℜ\",\"rHar\":\"⥤\",\"rhard\":\"⇁\",\"rharu\":\"⇀\",\"rharul\":\"⥬\",\"Rho\":\"Ρ\",\"rho\":\"ρ\",\"rhov\":\"ϱ\",\"RightAngleBracket\":\"⟩\",\"RightArrowBar\":\"⇥\",\"rightarrow\":\"→\",\"RightArrow\":\"→\",\"Rightarrow\":\"⇒\",\"RightArrowLeftArrow\":\"⇄\",\"rightarrowtail\":\"↣\",\"RightCeiling\":\"⌉\",\"RightDoubleBracket\":\"⟧\",\"RightDownTeeVector\":\"⥝\",\"RightDownVectorBar\":\"⥕\",\"RightDownVector\":\"⇂\",\"RightFloor\":\"⌋\",\"rightharpoondown\":\"⇁\",\"rightharpoonup\":\"⇀\",\"rightleftarrows\":\"⇄\",\"rightleftharpoons\":\"⇌\",\"rightrightarrows\":\"⇉\",\"rightsquigarrow\":\"↝\",\"RightTeeArrow\":\"↦\",\"RightTee\":\"⊢\",\"RightTeeVector\":\"⥛\",\"rightthreetimes\":\"⋌\",\"RightTriangleBar\":\"⧐\",\"RightTriangle\":\"⊳\",\"RightTriangleEqual\":\"⊵\",\"RightUpDownVector\":\"⥏\",\"RightUpTeeVector\":\"⥜\",\"RightUpVectorBar\":\"⥔\",\"RightUpVector\":\"↾\",\"RightVectorBar\":\"⥓\",\"RightVector\":\"⇀\",\"ring\":\"˚\",\"risingdotseq\":\"≓\",\"rlarr\":\"⇄\",\"rlhar\":\"⇌\",\"rlm\":\"‏\",\"rmoustache\":\"⎱\",\"rmoust\":\"⎱\",\"rnmid\":\"⫮\",\"roang\":\"⟭\",\"roarr\":\"⇾\",\"robrk\":\"⟧\",\"ropar\":\"⦆\",\"ropf\":\"𝕣\",\"Ropf\":\"ℝ\",\"roplus\":\"⨮\",\"rotimes\":\"⨵\",\"RoundImplies\":\"⥰\",\"rpar\":\")\",\"rpargt\":\"⦔\",\"rppolint\":\"⨒\",\"rrarr\":\"⇉\",\"Rrightarrow\":\"⇛\",\"rsaquo\":\"›\",\"rscr\":\"𝓇\",\"Rscr\":\"ℛ\",\"rsh\":\"↱\",\"Rsh\":\"↱\",\"rsqb\":\"]\",\"rsquo\":\"’\",\"rsquor\":\"’\",\"rthree\":\"⋌\",\"rtimes\":\"⋊\",\"rtri\":\"▹\",\"rtrie\":\"⊵\",\"rtrif\":\"▸\",\"rtriltri\":\"⧎\",\"RuleDelayed\":\"⧴\",\"ruluhar\":\"⥨\",\"rx\":\"℞\",\"Sacute\":\"Ś\",\"sacute\":\"ś\",\"sbquo\":\"‚\",\"scap\":\"⪸\",\"Scaron\":\"Š\",\"scaron\":\"š\",\"Sc\":\"⪼\",\"sc\":\"≻\",\"sccue\":\"≽\",\"sce\":\"⪰\",\"scE\":\"⪴\",\"Scedil\":\"Ş\",\"scedil\":\"ş\",\"Scirc\":\"Ŝ\",\"scirc\":\"ŝ\",\"scnap\":\"⪺\",\"scnE\":\"⪶\",\"scnsim\":\"⋩\",\"scpolint\":\"⨓\",\"scsim\":\"≿\",\"Scy\":\"С\",\"scy\":\"с\",\"sdotb\":\"⊡\",\"sdot\":\"⋅\",\"sdote\":\"⩦\",\"searhk\":\"⤥\",\"searr\":\"↘\",\"seArr\":\"⇘\",\"searrow\":\"↘\",\"sect\":\"§\",\"semi\":\";\",\"seswar\":\"⤩\",\"setminus\":\"∖\",\"setmn\":\"∖\",\"sext\":\"✶\",\"Sfr\":\"𝔖\",\"sfr\":\"𝔰\",\"sfrown\":\"⌢\",\"sharp\":\"♯\",\"SHCHcy\":\"Щ\",\"shchcy\":\"щ\",\"SHcy\":\"Ш\",\"shcy\":\"ш\",\"ShortDownArrow\":\"↓\",\"ShortLeftArrow\":\"←\",\"shortmid\":\"∣\",\"shortparallel\":\"∥\",\"ShortRightArrow\":\"→\",\"ShortUpArrow\":\"↑\",\"shy\":\"­\",\"Sigma\":\"Σ\",\"sigma\":\"σ\",\"sigmaf\":\"ς\",\"sigmav\":\"ς\",\"sim\":\"∼\",\"simdot\":\"⩪\",\"sime\":\"≃\",\"simeq\":\"≃\",\"simg\":\"⪞\",\"simgE\":\"⪠\",\"siml\":\"⪝\",\"simlE\":\"⪟\",\"simne\":\"≆\",\"simplus\":\"⨤\",\"simrarr\":\"⥲\",\"slarr\":\"←\",\"SmallCircle\":\"∘\",\"smallsetminus\":\"∖\",\"smashp\":\"⨳\",\"smeparsl\":\"⧤\",\"smid\":\"∣\",\"smile\":\"⌣\",\"smt\":\"⪪\",\"smte\":\"⪬\",\"smtes\":\"⪬︀\",\"SOFTcy\":\"Ь\",\"softcy\":\"ь\",\"solbar\":\"⌿\",\"solb\":\"⧄\",\"sol\":\"/\",\"Sopf\":\"𝕊\",\"sopf\":\"𝕤\",\"spades\":\"♠\",\"spadesuit\":\"♠\",\"spar\":\"∥\",\"sqcap\":\"⊓\",\"sqcaps\":\"⊓︀\",\"sqcup\":\"⊔\",\"sqcups\":\"⊔︀\",\"Sqrt\":\"√\",\"sqsub\":\"⊏\",\"sqsube\":\"⊑\",\"sqsubset\":\"⊏\",\"sqsubseteq\":\"⊑\",\"sqsup\":\"⊐\",\"sqsupe\":\"⊒\",\"sqsupset\":\"⊐\",\"sqsupseteq\":\"⊒\",\"square\":\"□\",\"Square\":\"□\",\"SquareIntersection\":\"⊓\",\"SquareSubset\":\"⊏\",\"SquareSubsetEqual\":\"⊑\",\"SquareSuperset\":\"⊐\",\"SquareSupersetEqual\":\"⊒\",\"SquareUnion\":\"⊔\",\"squarf\":\"▪\",\"squ\":\"□\",\"squf\":\"▪\",\"srarr\":\"→\",\"Sscr\":\"𝒮\",\"sscr\":\"𝓈\",\"ssetmn\":\"∖\",\"ssmile\":\"⌣\",\"sstarf\":\"⋆\",\"Star\":\"⋆\",\"star\":\"☆\",\"starf\":\"★\",\"straightepsilon\":\"ϵ\",\"straightphi\":\"ϕ\",\"strns\":\"¯\",\"sub\":\"⊂\",\"Sub\":\"⋐\",\"subdot\":\"⪽\",\"subE\":\"⫅\",\"sube\":\"⊆\",\"subedot\":\"⫃\",\"submult\":\"⫁\",\"subnE\":\"⫋\",\"subne\":\"⊊\",\"subplus\":\"⪿\",\"subrarr\":\"⥹\",\"subset\":\"⊂\",\"Subset\":\"⋐\",\"subseteq\":\"⊆\",\"subseteqq\":\"⫅\",\"SubsetEqual\":\"⊆\",\"subsetneq\":\"⊊\",\"subsetneqq\":\"⫋\",\"subsim\":\"⫇\",\"subsub\":\"⫕\",\"subsup\":\"⫓\",\"succapprox\":\"⪸\",\"succ\":\"≻\",\"succcurlyeq\":\"≽\",\"Succeeds\":\"≻\",\"SucceedsEqual\":\"⪰\",\"SucceedsSlantEqual\":\"≽\",\"SucceedsTilde\":\"≿\",\"succeq\":\"⪰\",\"succnapprox\":\"⪺\",\"succneqq\":\"⪶\",\"succnsim\":\"⋩\",\"succsim\":\"≿\",\"SuchThat\":\"∋\",\"sum\":\"∑\",\"Sum\":\"∑\",\"sung\":\"♪\",\"sup1\":\"¹\",\"sup2\":\"²\",\"sup3\":\"³\",\"sup\":\"⊃\",\"Sup\":\"⋑\",\"supdot\":\"⪾\",\"supdsub\":\"⫘\",\"supE\":\"⫆\",\"supe\":\"⊇\",\"supedot\":\"⫄\",\"Superset\":\"⊃\",\"SupersetEqual\":\"⊇\",\"suphsol\":\"⟉\",\"suphsub\":\"⫗\",\"suplarr\":\"⥻\",\"supmult\":\"⫂\",\"supnE\":\"⫌\",\"supne\":\"⊋\",\"supplus\":\"⫀\",\"supset\":\"⊃\",\"Supset\":\"⋑\",\"supseteq\":\"⊇\",\"supseteqq\":\"⫆\",\"supsetneq\":\"⊋\",\"supsetneqq\":\"⫌\",\"supsim\":\"⫈\",\"supsub\":\"⫔\",\"supsup\":\"⫖\",\"swarhk\":\"⤦\",\"swarr\":\"↙\",\"swArr\":\"⇙\",\"swarrow\":\"↙\",\"swnwar\":\"⤪\",\"szlig\":\"ß\",\"Tab\":\"\\t\",\"target\":\"⌖\",\"Tau\":\"Τ\",\"tau\":\"τ\",\"tbrk\":\"⎴\",\"Tcaron\":\"Ť\",\"tcaron\":\"ť\",\"Tcedil\":\"Ţ\",\"tcedil\":\"ţ\",\"Tcy\":\"Т\",\"tcy\":\"т\",\"tdot\":\"⃛\",\"telrec\":\"⌕\",\"Tfr\":\"𝔗\",\"tfr\":\"𝔱\",\"there4\":\"∴\",\"therefore\":\"∴\",\"Therefore\":\"∴\",\"Theta\":\"Θ\",\"theta\":\"θ\",\"thetasym\":\"ϑ\",\"thetav\":\"ϑ\",\"thickapprox\":\"≈\",\"thicksim\":\"∼\",\"ThickSpace\":\"  \",\"ThinSpace\":\" \",\"thinsp\":\" \",\"thkap\":\"≈\",\"thksim\":\"∼\",\"THORN\":\"Þ\",\"thorn\":\"þ\",\"tilde\":\"˜\",\"Tilde\":\"∼\",\"TildeEqual\":\"≃\",\"TildeFullEqual\":\"≅\",\"TildeTilde\":\"≈\",\"timesbar\":\"⨱\",\"timesb\":\"⊠\",\"times\":\"×\",\"timesd\":\"⨰\",\"tint\":\"∭\",\"toea\":\"⤨\",\"topbot\":\"⌶\",\"topcir\":\"⫱\",\"top\":\"⊤\",\"Topf\":\"𝕋\",\"topf\":\"𝕥\",\"topfork\":\"⫚\",\"tosa\":\"⤩\",\"tprime\":\"‴\",\"trade\":\"™\",\"TRADE\":\"™\",\"triangle\":\"▵\",\"triangledown\":\"▿\",\"triangleleft\":\"◃\",\"trianglelefteq\":\"⊴\",\"triangleq\":\"≜\",\"triangleright\":\"▹\",\"trianglerighteq\":\"⊵\",\"tridot\":\"◬\",\"trie\":\"≜\",\"triminus\":\"⨺\",\"TripleDot\":\"⃛\",\"triplus\":\"⨹\",\"trisb\":\"⧍\",\"tritime\":\"⨻\",\"trpezium\":\"⏢\",\"Tscr\":\"𝒯\",\"tscr\":\"𝓉\",\"TScy\":\"Ц\",\"tscy\":\"ц\",\"TSHcy\":\"Ћ\",\"tshcy\":\"ћ\",\"Tstrok\":\"Ŧ\",\"tstrok\":\"ŧ\",\"twixt\":\"≬\",\"twoheadleftarrow\":\"↞\",\"twoheadrightarrow\":\"↠\",\"Uacute\":\"Ú\",\"uacute\":\"ú\",\"uarr\":\"↑\",\"Uarr\":\"↟\",\"uArr\":\"⇑\",\"Uarrocir\":\"⥉\",\"Ubrcy\":\"Ў\",\"ubrcy\":\"ў\",\"Ubreve\":\"Ŭ\",\"ubreve\":\"ŭ\",\"Ucirc\":\"Û\",\"ucirc\":\"û\",\"Ucy\":\"У\",\"ucy\":\"у\",\"udarr\":\"⇅\",\"Udblac\":\"Ű\",\"udblac\":\"ű\",\"udhar\":\"⥮\",\"ufisht\":\"⥾\",\"Ufr\":\"𝔘\",\"ufr\":\"𝔲\",\"Ugrave\":\"Ù\",\"ugrave\":\"ù\",\"uHar\":\"⥣\",\"uharl\":\"↿\",\"uharr\":\"↾\",\"uhblk\":\"▀\",\"ulcorn\":\"⌜\",\"ulcorner\":\"⌜\",\"ulcrop\":\"⌏\",\"ultri\":\"◸\",\"Umacr\":\"Ū\",\"umacr\":\"ū\",\"uml\":\"¨\",\"UnderBar\":\"_\",\"UnderBrace\":\"⏟\",\"UnderBracket\":\"⎵\",\"UnderParenthesis\":\"⏝\",\"Union\":\"⋃\",\"UnionPlus\":\"⊎\",\"Uogon\":\"Ų\",\"uogon\":\"ų\",\"Uopf\":\"𝕌\",\"uopf\":\"𝕦\",\"UpArrowBar\":\"⤒\",\"uparrow\":\"↑\",\"UpArrow\":\"↑\",\"Uparrow\":\"⇑\",\"UpArrowDownArrow\":\"⇅\",\"updownarrow\":\"↕\",\"UpDownArrow\":\"↕\",\"Updownarrow\":\"⇕\",\"UpEquilibrium\":\"⥮\",\"upharpoonleft\":\"↿\",\"upharpoonright\":\"↾\",\"uplus\":\"⊎\",\"UpperLeftArrow\":\"↖\",\"UpperRightArrow\":\"↗\",\"upsi\":\"υ\",\"Upsi\":\"ϒ\",\"upsih\":\"ϒ\",\"Upsilon\":\"Υ\",\"upsilon\":\"υ\",\"UpTeeArrow\":\"↥\",\"UpTee\":\"⊥\",\"upuparrows\":\"⇈\",\"urcorn\":\"⌝\",\"urcorner\":\"⌝\",\"urcrop\":\"⌎\",\"Uring\":\"Ů\",\"uring\":\"ů\",\"urtri\":\"◹\",\"Uscr\":\"𝒰\",\"uscr\":\"𝓊\",\"utdot\":\"⋰\",\"Utilde\":\"Ũ\",\"utilde\":\"ũ\",\"utri\":\"▵\",\"utrif\":\"▴\",\"uuarr\":\"⇈\",\"Uuml\":\"Ü\",\"uuml\":\"ü\",\"uwangle\":\"⦧\",\"vangrt\":\"⦜\",\"varepsilon\":\"ϵ\",\"varkappa\":\"ϰ\",\"varnothing\":\"∅\",\"varphi\":\"ϕ\",\"varpi\":\"ϖ\",\"varpropto\":\"∝\",\"varr\":\"↕\",\"vArr\":\"⇕\",\"varrho\":\"ϱ\",\"varsigma\":\"ς\",\"varsubsetneq\":\"⊊︀\",\"varsubsetneqq\":\"⫋︀\",\"varsupsetneq\":\"⊋︀\",\"varsupsetneqq\":\"⫌︀\",\"vartheta\":\"ϑ\",\"vartriangleleft\":\"⊲\",\"vartriangleright\":\"⊳\",\"vBar\":\"⫨\",\"Vbar\":\"⫫\",\"vBarv\":\"⫩\",\"Vcy\":\"В\",\"vcy\":\"в\",\"vdash\":\"⊢\",\"vDash\":\"⊨\",\"Vdash\":\"⊩\",\"VDash\":\"⊫\",\"Vdashl\":\"⫦\",\"veebar\":\"⊻\",\"vee\":\"∨\",\"Vee\":\"⋁\",\"veeeq\":\"≚\",\"vellip\":\"⋮\",\"verbar\":\"|\",\"Verbar\":\"‖\",\"vert\":\"|\",\"Vert\":\"‖\",\"VerticalBar\":\"∣\",\"VerticalLine\":\"|\",\"VerticalSeparator\":\"❘\",\"VerticalTilde\":\"≀\",\"VeryThinSpace\":\" \",\"Vfr\":\"𝔙\",\"vfr\":\"𝔳\",\"vltri\":\"⊲\",\"vnsub\":\"⊂⃒\",\"vnsup\":\"⊃⃒\",\"Vopf\":\"𝕍\",\"vopf\":\"𝕧\",\"vprop\":\"∝\",\"vrtri\":\"⊳\",\"Vscr\":\"𝒱\",\"vscr\":\"𝓋\",\"vsubnE\":\"⫋︀\",\"vsubne\":\"⊊︀\",\"vsupnE\":\"⫌︀\",\"vsupne\":\"⊋︀\",\"Vvdash\":\"⊪\",\"vzigzag\":\"⦚\",\"Wcirc\":\"Ŵ\",\"wcirc\":\"ŵ\",\"wedbar\":\"⩟\",\"wedge\":\"∧\",\"Wedge\":\"⋀\",\"wedgeq\":\"≙\",\"weierp\":\"℘\",\"Wfr\":\"𝔚\",\"wfr\":\"𝔴\",\"Wopf\":\"𝕎\",\"wopf\":\"𝕨\",\"wp\":\"℘\",\"wr\":\"≀\",\"wreath\":\"≀\",\"Wscr\":\"𝒲\",\"wscr\":\"𝓌\",\"xcap\":\"⋂\",\"xcirc\":\"◯\",\"xcup\":\"⋃\",\"xdtri\":\"▽\",\"Xfr\":\"𝔛\",\"xfr\":\"𝔵\",\"xharr\":\"⟷\",\"xhArr\":\"⟺\",\"Xi\":\"Ξ\",\"xi\":\"ξ\",\"xlarr\":\"⟵\",\"xlArr\":\"⟸\",\"xmap\":\"⟼\",\"xnis\":\"⋻\",\"xodot\":\"⨀\",\"Xopf\":\"𝕏\",\"xopf\":\"𝕩\",\"xoplus\":\"⨁\",\"xotime\":\"⨂\",\"xrarr\":\"⟶\",\"xrArr\":\"⟹\",\"Xscr\":\"𝒳\",\"xscr\":\"𝓍\",\"xsqcup\":\"⨆\",\"xuplus\":\"⨄\",\"xutri\":\"△\",\"xvee\":\"⋁\",\"xwedge\":\"⋀\",\"Yacute\":\"Ý\",\"yacute\":\"ý\",\"YAcy\":\"Я\",\"yacy\":\"я\",\"Ycirc\":\"Ŷ\",\"ycirc\":\"ŷ\",\"Ycy\":\"Ы\",\"ycy\":\"ы\",\"yen\":\"¥\",\"Yfr\":\"𝔜\",\"yfr\":\"𝔶\",\"YIcy\":\"Ї\",\"yicy\":\"ї\",\"Yopf\":\"𝕐\",\"yopf\":\"𝕪\",\"Yscr\":\"𝒴\",\"yscr\":\"𝓎\",\"YUcy\":\"Ю\",\"yucy\":\"ю\",\"yuml\":\"ÿ\",\"Yuml\":\"Ÿ\",\"Zacute\":\"Ź\",\"zacute\":\"ź\",\"Zcaron\":\"Ž\",\"zcaron\":\"ž\",\"Zcy\":\"З\",\"zcy\":\"з\",\"Zdot\":\"Ż\",\"zdot\":\"ż\",\"zeetrf\":\"ℨ\",\"ZeroWidthSpace\":\"​\",\"Zeta\":\"Ζ\",\"zeta\":\"ζ\",\"zfr\":\"𝔷\",\"Zfr\":\"ℨ\",\"ZHcy\":\"Ж\",\"zhcy\":\"ж\",\"zigrarr\":\"⇝\",\"zopf\":\"𝕫\",\"Zopf\":\"ℤ\",\"Zscr\":\"𝒵\",\"zscr\":\"𝓏\",\"zwj\":\"‍\",\"zwnj\":\"‌\"}");

/***/ }),

/***/ "./node_modules/entities/maps/legacy.json":
/*!************************************************!*\
  !*** ./node_modules/entities/maps/legacy.json ***!
  \************************************************/
/*! exports provided: Aacute, aacute, Acirc, acirc, acute, AElig, aelig, Agrave, agrave, amp, AMP, Aring, aring, Atilde, atilde, Auml, auml, brvbar, Ccedil, ccedil, cedil, cent, copy, COPY, curren, deg, divide, Eacute, eacute, Ecirc, ecirc, Egrave, egrave, ETH, eth, Euml, euml, frac12, frac14, frac34, gt, GT, Iacute, iacute, Icirc, icirc, iexcl, Igrave, igrave, iquest, Iuml, iuml, laquo, lt, LT, macr, micro, middot, nbsp, not, Ntilde, ntilde, Oacute, oacute, Ocirc, ocirc, Ograve, ograve, ordf, ordm, Oslash, oslash, Otilde, otilde, Ouml, ouml, para, plusmn, pound, quot, QUOT, raquo, reg, REG, sect, shy, sup1, sup2, sup3, szlig, THORN, thorn, times, Uacute, uacute, Ucirc, ucirc, Ugrave, ugrave, uml, Uuml, uuml, Yacute, yacute, yen, yuml, default */
/*! all exports used */
/***/ (function(module) {

module.exports = JSON.parse("{\"Aacute\":\"Á\",\"aacute\":\"á\",\"Acirc\":\"Â\",\"acirc\":\"â\",\"acute\":\"´\",\"AElig\":\"Æ\",\"aelig\":\"æ\",\"Agrave\":\"À\",\"agrave\":\"à\",\"amp\":\"&\",\"AMP\":\"&\",\"Aring\":\"Å\",\"aring\":\"å\",\"Atilde\":\"Ã\",\"atilde\":\"ã\",\"Auml\":\"Ä\",\"auml\":\"ä\",\"brvbar\":\"¦\",\"Ccedil\":\"Ç\",\"ccedil\":\"ç\",\"cedil\":\"¸\",\"cent\":\"¢\",\"copy\":\"©\",\"COPY\":\"©\",\"curren\":\"¤\",\"deg\":\"°\",\"divide\":\"÷\",\"Eacute\":\"É\",\"eacute\":\"é\",\"Ecirc\":\"Ê\",\"ecirc\":\"ê\",\"Egrave\":\"È\",\"egrave\":\"è\",\"ETH\":\"Ð\",\"eth\":\"ð\",\"Euml\":\"Ë\",\"euml\":\"ë\",\"frac12\":\"½\",\"frac14\":\"¼\",\"frac34\":\"¾\",\"gt\":\">\",\"GT\":\">\",\"Iacute\":\"Í\",\"iacute\":\"í\",\"Icirc\":\"Î\",\"icirc\":\"î\",\"iexcl\":\"¡\",\"Igrave\":\"Ì\",\"igrave\":\"ì\",\"iquest\":\"¿\",\"Iuml\":\"Ï\",\"iuml\":\"ï\",\"laquo\":\"«\",\"lt\":\"<\",\"LT\":\"<\",\"macr\":\"¯\",\"micro\":\"µ\",\"middot\":\"·\",\"nbsp\":\" \",\"not\":\"¬\",\"Ntilde\":\"Ñ\",\"ntilde\":\"ñ\",\"Oacute\":\"Ó\",\"oacute\":\"ó\",\"Ocirc\":\"Ô\",\"ocirc\":\"ô\",\"Ograve\":\"Ò\",\"ograve\":\"ò\",\"ordf\":\"ª\",\"ordm\":\"º\",\"Oslash\":\"Ø\",\"oslash\":\"ø\",\"Otilde\":\"Õ\",\"otilde\":\"õ\",\"Ouml\":\"Ö\",\"ouml\":\"ö\",\"para\":\"¶\",\"plusmn\":\"±\",\"pound\":\"£\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"raquo\":\"»\",\"reg\":\"®\",\"REG\":\"®\",\"sect\":\"§\",\"shy\":\"­\",\"sup1\":\"¹\",\"sup2\":\"²\",\"sup3\":\"³\",\"szlig\":\"ß\",\"THORN\":\"Þ\",\"thorn\":\"þ\",\"times\":\"×\",\"Uacute\":\"Ú\",\"uacute\":\"ú\",\"Ucirc\":\"Û\",\"ucirc\":\"û\",\"Ugrave\":\"Ù\",\"ugrave\":\"ù\",\"uml\":\"¨\",\"Uuml\":\"Ü\",\"uuml\":\"ü\",\"Yacute\":\"Ý\",\"yacute\":\"ý\",\"yen\":\"¥\",\"yuml\":\"ÿ\"}");

/***/ }),

/***/ "./node_modules/entities/maps/xml.json":
/*!*********************************************!*\
  !*** ./node_modules/entities/maps/xml.json ***!
  \*********************************************/
/*! exports provided: amp, apos, gt, lt, quot, default */
/*! all exports used */
/***/ (function(module) {

module.exports = JSON.parse("{\"amp\":\"&\",\"apos\":\"'\",\"gt\":\">\",\"lt\":\"<\",\"quot\":\"\\\"\"}");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var R = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function get() {
    return defaultMaxListeners;
  },
  set: function set(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) {
    args.push(arguments[i]);
  }

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      ReflectApply(listeners[i], this, args);
    }
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) {
    copy[i] = arr[i];
  }

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) {
    list[index] = list[index + 1];
  }

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

/***/ }),

/***/ "./node_modules/expr-eval/dist/bundle.js":
/*!***********************************************!*\
  !*** ./node_modules/expr-eval/dist/bundle.js ***!
  \***********************************************/
/*! no static exports found */
/*! exports used: Parser */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function () {
  'use strict';

  var INUMBER = 'INUMBER';
  var IOP1 = 'IOP1';
  var IOP2 = 'IOP2';
  var IOP3 = 'IOP3';
  var IVAR = 'IVAR';
  var IFUNCALL = 'IFUNCALL';
  var IEXPR = 'IEXPR';
  var IMEMBER = 'IMEMBER';

  function Instruction(type, value) {
    this.type = type;
    this.value = value !== undefined && value !== null ? value : 0;
  }

  Instruction.prototype.toString = function () {
    switch (this.type) {
      case INUMBER:
      case IOP1:
      case IOP2:
      case IOP3:
      case IVAR:
        return this.value;

      case IFUNCALL:
        return 'CALL ' + this.value;

      case IMEMBER:
        return '.' + this.value;

      default:
        return 'Invalid Instruction';
    }
  };

  function unaryInstruction(value) {
    return new Instruction(IOP1, value);
  }

  function binaryInstruction(value) {
    return new Instruction(IOP2, value);
  }

  function ternaryInstruction(value) {
    return new Instruction(IOP3, value);
  }

  function simplify(tokens, unaryOps, binaryOps, ternaryOps, values) {
    var nstack = [];
    var newexpression = [];
    var n1, n2, n3;
    var f;

    for (var i = 0; i < tokens.length; i++) {
      var item = tokens[i];
      var type = item.type;

      if (type === INUMBER) {
        nstack.push(item);
      } else if (type === IVAR && values.hasOwnProperty(item.value)) {
        item = new Instruction(INUMBER, values[item.value]);
        nstack.push(item);
      } else if (type === IOP2 && nstack.length > 1) {
        n2 = nstack.pop();
        n1 = nstack.pop();
        f = binaryOps[item.value];
        item = new Instruction(INUMBER, f(n1.value, n2.value));
        nstack.push(item);
      } else if (type === IOP3 && nstack.length > 2) {
        n3 = nstack.pop();
        n2 = nstack.pop();
        n1 = nstack.pop();

        if (item.value === '?') {
          nstack.push(n1.value ? n2.value : n3.value);
        } else {
          f = ternaryOps[item.value];
          item = new Instruction(INUMBER, f(n1.value, n2.value, n3.value));
          nstack.push(item);
        }
      } else if (type === IOP1 && nstack.length > 0) {
        n1 = nstack.pop();
        f = unaryOps[item.value];
        item = new Instruction(INUMBER, f(n1.value));
        nstack.push(item);
      } else if (type === IEXPR) {
        while (nstack.length > 0) {
          newexpression.push(nstack.shift());
        }

        newexpression.push(new Instruction(IEXPR, simplify(item.value, unaryOps, binaryOps, ternaryOps, values)));
      } else if (type === IMEMBER && nstack.length > 0) {
        n1 = nstack.pop();
        nstack.push(new Instruction(INUMBER, n1.value[item.value]));
      } else {
        while (nstack.length > 0) {
          newexpression.push(nstack.shift());
        }

        newexpression.push(item);
      }
    }

    while (nstack.length > 0) {
      newexpression.push(nstack.shift());
    }

    return newexpression;
  }

  function substitute(tokens, variable, expr) {
    var newexpression = [];

    for (var i = 0; i < tokens.length; i++) {
      var item = tokens[i];
      var type = item.type;

      if (type === IVAR && item.value === variable) {
        for (var j = 0; j < expr.tokens.length; j++) {
          var expritem = expr.tokens[j];
          var replitem;

          if (expritem.type === IOP1) {
            replitem = unaryInstruction(expritem.value);
          } else if (expritem.type === IOP2) {
            replitem = binaryInstruction(expritem.value);
          } else if (expritem.type === IOP3) {
            replitem = ternaryInstruction(expritem.value);
          } else {
            replitem = new Instruction(expritem.type, expritem.value);
          }

          newexpression.push(replitem);
        }
      } else if (type === IEXPR) {
        newexpression.push(new Instruction(IEXPR, substitute(item.value, variable, expr)));
      } else {
        newexpression.push(item);
      }
    }

    return newexpression;
  }

  function evaluate(tokens, expr, values) {
    var nstack = [];
    var n1, n2, n3;
    var f;

    for (var i = 0; i < tokens.length; i++) {
      var item = tokens[i];
      var type = item.type;

      if (type === INUMBER) {
        nstack.push(item.value);
      } else if (type === IOP2) {
        n2 = nstack.pop();
        n1 = nstack.pop();

        if (item.value === 'and') {
          nstack.push(n1 ? !!evaluate(n2, expr, values) : false);
        } else if (item.value === 'or') {
          nstack.push(n1 ? true : !!evaluate(n2, expr, values));
        } else {
          f = expr.binaryOps[item.value];
          nstack.push(f(n1, n2));
        }
      } else if (type === IOP3) {
        n3 = nstack.pop();
        n2 = nstack.pop();
        n1 = nstack.pop();

        if (item.value === '?') {
          nstack.push(evaluate(n1 ? n2 : n3, expr, values));
        } else {
          f = expr.ternaryOps[item.value];
          nstack.push(f(n1, n2, n3));
        }
      } else if (type === IVAR) {
        if (item.value in expr.functions) {
          nstack.push(expr.functions[item.value]);
        } else {
          var v = values[item.value];

          if (v !== undefined) {
            nstack.push(v);
          } else {
            throw new Error('undefined variable: ' + item.value);
          }
        }
      } else if (type === IOP1) {
        n1 = nstack.pop();
        f = expr.unaryOps[item.value];
        nstack.push(f(n1));
      } else if (type === IFUNCALL) {
        var argCount = item.value;
        var args = [];

        while (argCount-- > 0) {
          args.unshift(nstack.pop());
        }

        f = nstack.pop();

        if (f.apply && f.call) {
          nstack.push(f.apply(undefined, args));
        } else {
          throw new Error(f + ' is not a function');
        }
      } else if (type === IEXPR) {
        nstack.push(item.value);
      } else if (type === IMEMBER) {
        n1 = nstack.pop();
        nstack.push(n1[item.value]);
      } else {
        throw new Error('invalid Expression');
      }
    }

    if (nstack.length > 1) {
      throw new Error('invalid Expression (parity)');
    }

    return nstack[0];
  }

  function expressionToString(tokens, toJS) {
    var nstack = [];
    var n1, n2, n3;
    var f;

    for (var i = 0; i < tokens.length; i++) {
      var item = tokens[i];
      var type = item.type;

      if (type === INUMBER) {
        if (typeof item.value === 'number' && item.value < 0) {
          nstack.push('(' + item.value + ')');
        } else {
          nstack.push(escapeValue(item.value));
        }
      } else if (type === IOP2) {
        n2 = nstack.pop();
        n1 = nstack.pop();
        f = item.value;

        if (toJS) {
          if (f === '^') {
            nstack.push('Math.pow(' + n1 + ', ' + n2 + ')');
          } else if (f === 'and') {
            nstack.push('(!!' + n1 + ' && !!' + n2 + ')');
          } else if (f === 'or') {
            nstack.push('(!!' + n1 + ' || !!' + n2 + ')');
          } else if (f === '||') {
            nstack.push('(String(' + n1 + ') + String(' + n2 + '))');
          } else if (f === '==') {
            nstack.push('(' + n1 + ' === ' + n2 + ')');
          } else if (f === '!=') {
            nstack.push('(' + n1 + ' !== ' + n2 + ')');
          } else {
            nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');
          }
        } else {
          nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');
        }
      } else if (type === IOP3) {
        n3 = nstack.pop();
        n2 = nstack.pop();
        n1 = nstack.pop();
        f = item.value;

        if (f === '?') {
          nstack.push('(' + n1 + ' ? ' + n2 + ' : ' + n3 + ')');
        } else {
          throw new Error('invalid Expression');
        }
      } else if (type === IVAR) {
        nstack.push(item.value);
      } else if (type === IOP1) {
        n1 = nstack.pop();
        f = item.value;

        if (f === '-' || f === '+') {
          nstack.push('(' + f + n1 + ')');
        } else if (toJS) {
          if (f === 'not') {
            nstack.push('(' + '!' + n1 + ')');
          } else if (f === '!') {
            nstack.push('fac(' + n1 + ')');
          } else {
            nstack.push(f + '(' + n1 + ')');
          }
        } else if (f === '!') {
          nstack.push('(' + n1 + '!)');
        } else {
          nstack.push('(' + f + ' ' + n1 + ')');
        }
      } else if (type === IFUNCALL) {
        var argCount = item.value;
        var args = [];

        while (argCount-- > 0) {
          args.unshift(nstack.pop());
        }

        f = nstack.pop();
        nstack.push(f + '(' + args.join(', ') + ')');
      } else if (type === IMEMBER) {
        n1 = nstack.pop();
        nstack.push(n1 + '.' + item.value);
      } else if (type === IEXPR) {
        nstack.push('(' + expressionToString(item.value, toJS) + ')');
      } else {
        throw new Error('invalid Expression');
      }
    }

    if (nstack.length > 1) {
      throw new Error('invalid Expression (parity)');
    }

    return String(nstack[0]);
  }

  function escapeValue(v) {
    if (typeof v === 'string') {
      return JSON.stringify(v).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    }

    return v;
  }

  function contains(array, obj) {
    for (var i = 0; i < array.length; i++) {
      if (array[i] === obj) {
        return true;
      }
    }

    return false;
  }

  function getSymbols(tokens, symbols, options) {
    options = options || {};
    var withMembers = !!options.withMembers;
    var prevVar = null;

    for (var i = 0; i < tokens.length; i++) {
      var item = tokens[i];

      if (item.type === IVAR && !contains(symbols, item.value)) {
        if (!withMembers) {
          symbols.push(item.value);
        } else if (prevVar !== null) {
          if (!contains(symbols, prevVar)) {
            symbols.push(prevVar);
          }

          prevVar = item.value;
        } else {
          prevVar = item.value;
        }
      } else if (item.type === IMEMBER && withMembers && prevVar !== null) {
        prevVar += '.' + item.value;
      } else if (item.type === IEXPR) {
        getSymbols(item.value, symbols, options);
      } else if (prevVar !== null) {
        if (!contains(symbols, prevVar)) {
          symbols.push(prevVar);
        }

        prevVar = null;
      }
    }

    if (prevVar !== null && !contains(symbols, prevVar)) {
      symbols.push(prevVar);
    }
  }

  function Expression(tokens, parser) {
    this.tokens = tokens;
    this.parser = parser;
    this.unaryOps = parser.unaryOps;
    this.binaryOps = parser.binaryOps;
    this.ternaryOps = parser.ternaryOps;
    this.functions = parser.functions;
  }

  Expression.prototype.simplify = function (values) {
    values = values || {};
    return new Expression(simplify(this.tokens, this.unaryOps, this.binaryOps, this.ternaryOps, values), this.parser);
  };

  Expression.prototype.substitute = function (variable, expr) {
    if (!(expr instanceof Expression)) {
      expr = this.parser.parse(String(expr));
    }

    return new Expression(substitute(this.tokens, variable, expr), this.parser);
  };

  Expression.prototype.evaluate = function (values) {
    values = values || {};
    return evaluate(this.tokens, this, values);
  };

  Expression.prototype.toString = function () {
    return expressionToString(this.tokens, false);
  };

  Expression.prototype.symbols = function (options) {
    options = options || {};
    var vars = [];
    getSymbols(this.tokens, vars, options);
    return vars;
  };

  Expression.prototype.variables = function (options) {
    options = options || {};
    var vars = [];
    getSymbols(this.tokens, vars, options);
    var functions = this.functions;
    return vars.filter(function (name) {
      return !(name in functions);
    });
  };

  Expression.prototype.toJSFunction = function (param, variables) {
    var expr = this;
    var f = new Function(param, 'with(this.functions) with (this.ternaryOps) with (this.binaryOps) with (this.unaryOps) { return ' + expressionToString(this.simplify(variables).tokens, true) + '; }'); // eslint-disable-line no-new-func

    return function () {
      return f.apply(expr, arguments);
    };
  };

  var TEOF = 'TEOF';
  var TOP = 'TOP';
  var TNUMBER = 'TNUMBER';
  var TSTRING = 'TSTRING';
  var TPAREN = 'TPAREN';
  var TCOMMA = 'TCOMMA';
  var TNAME = 'TNAME';

  function Token(type, value, index) {
    this.type = type;
    this.value = value;
    this.index = index;
  }

  Token.prototype.toString = function () {
    return this.type + ': ' + this.value;
  };

  function TokenStream(parser, expression) {
    this.pos = 0;
    this.current = null;
    this.unaryOps = parser.unaryOps;
    this.binaryOps = parser.binaryOps;
    this.ternaryOps = parser.ternaryOps;
    this.consts = parser.consts;
    this.expression = expression;
    this.savedPosition = 0;
    this.savedCurrent = null;
    this.options = parser.options;
  }

  TokenStream.prototype.newToken = function (type, value, pos) {
    return new Token(type, value, pos != null ? pos : this.pos);
  };

  TokenStream.prototype.save = function () {
    this.savedPosition = this.pos;
    this.savedCurrent = this.current;
  };

  TokenStream.prototype.restore = function () {
    this.pos = this.savedPosition;
    this.current = this.savedCurrent;
  };

  TokenStream.prototype.next = function () {
    if (this.pos >= this.expression.length) {
      return this.newToken(TEOF, 'EOF');
    }

    if (this.isWhitespace() || this.isComment()) {
      return this.next();
    } else if (this.isRadixInteger() || this.isNumber() || this.isOperator() || this.isString() || this.isParen() || this.isComma() || this.isNamedOp() || this.isConst() || this.isName()) {
      return this.current;
    } else {
      this.parseError('Unknown character "' + this.expression.charAt(this.pos) + '"');
    }
  };

  TokenStream.prototype.isString = function () {
    var r = false;
    var startPos = this.pos;
    var quote = this.expression.charAt(startPos);

    if (quote === '\'' || quote === '"') {
      var index = this.expression.indexOf(quote, startPos + 1);

      while (index >= 0 && this.pos < this.expression.length) {
        this.pos = index + 1;

        if (this.expression.charAt(index - 1) !== '\\') {
          var rawString = this.expression.substring(startPos + 1, index);
          this.current = this.newToken(TSTRING, this.unescape(rawString), startPos);
          r = true;
          break;
        }

        index = this.expression.indexOf(quote, index + 1);
      }
    }

    return r;
  };

  TokenStream.prototype.isParen = function () {
    var c = this.expression.charAt(this.pos);

    if (c === '(' || c === ')') {
      this.current = this.newToken(TPAREN, c);
      this.pos++;
      return true;
    }

    return false;
  };

  TokenStream.prototype.isComma = function () {
    var c = this.expression.charAt(this.pos);

    if (c === ',') {
      this.current = this.newToken(TCOMMA, ',');
      this.pos++;
      return true;
    }

    return false;
  };

  TokenStream.prototype.isConst = function () {
    var startPos = this.pos;
    var i = startPos;

    for (; i < this.expression.length; i++) {
      var c = this.expression.charAt(i);

      if (c.toUpperCase() === c.toLowerCase()) {
        if (i === this.pos || c !== '_' && c !== '.' && (c < '0' || c > '9')) {
          break;
        }
      }
    }

    if (i > startPos) {
      var str = this.expression.substring(startPos, i);

      if (str in this.consts) {
        this.current = this.newToken(TNUMBER, this.consts[str]);
        this.pos += str.length;
        return true;
      }
    }

    return false;
  };

  TokenStream.prototype.isNamedOp = function () {
    var startPos = this.pos;
    var i = startPos;

    for (; i < this.expression.length; i++) {
      var c = this.expression.charAt(i);

      if (c.toUpperCase() === c.toLowerCase()) {
        if (i === this.pos || c !== '_' && (c < '0' || c > '9')) {
          break;
        }
      }
    }

    if (i > startPos) {
      var str = this.expression.substring(startPos, i);

      if (this.isOperatorEnabled(str) && (str in this.binaryOps || str in this.unaryOps || str in this.ternaryOps)) {
        this.current = this.newToken(TOP, str);
        this.pos += str.length;
        return true;
      }
    }

    return false;
  };

  TokenStream.prototype.isName = function () {
    var startPos = this.pos;
    var i = startPos;
    var hasLetter = false;

    for (; i < this.expression.length; i++) {
      var c = this.expression.charAt(i);

      if (c.toUpperCase() === c.toLowerCase()) {
        if (i === this.pos && (c === '$' || c === '_')) {
          if (c === '_') {
            hasLetter = true;
          }

          continue;
        } else if (i === this.pos || !hasLetter || c !== '_' && (c < '0' || c > '9')) {
          break;
        }
      } else {
        hasLetter = true;
      }
    }

    if (hasLetter) {
      var str = this.expression.substring(startPos, i);
      this.current = this.newToken(TNAME, str);
      this.pos += str.length;
      return true;
    }

    return false;
  };

  TokenStream.prototype.isWhitespace = function () {
    var r = false;
    var c = this.expression.charAt(this.pos);

    while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
      r = true;
      this.pos++;

      if (this.pos >= this.expression.length) {
        break;
      }

      c = this.expression.charAt(this.pos);
    }

    return r;
  };

  var codePointPattern = /^[0-9a-f]{4}$/i;

  TokenStream.prototype.unescape = function (v) {
    var index = v.indexOf('\\');

    if (index < 0) {
      return v;
    }

    var buffer = v.substring(0, index);

    while (index >= 0) {
      var c = v.charAt(++index);

      switch (c) {
        case '\'':
          buffer += '\'';
          break;

        case '"':
          buffer += '"';
          break;

        case '\\':
          buffer += '\\';
          break;

        case '/':
          buffer += '/';
          break;

        case 'b':
          buffer += '\b';
          break;

        case 'f':
          buffer += '\f';
          break;

        case 'n':
          buffer += '\n';
          break;

        case 'r':
          buffer += '\r';
          break;

        case 't':
          buffer += '\t';
          break;

        case 'u':
          // interpret the following 4 characters as the hex of the unicode code point
          var codePoint = v.substring(index + 1, index + 5);

          if (!codePointPattern.test(codePoint)) {
            this.parseError("Illegal escape sequence: \\u" + codePoint);
          }

          buffer += String.fromCharCode(parseInt(codePoint, 16));
          index += 4;
          break;

        default:
          throw this.parseError('Illegal escape sequence: "\\' + c + '"');
      }

      ++index;
      var backslash = v.indexOf('\\', index);
      buffer += v.substring(index, backslash < 0 ? v.length : backslash);
      index = backslash;
    }

    return buffer;
  };

  TokenStream.prototype.isComment = function () {
    var c = this.expression.charAt(this.pos);

    if (c === '/' && this.expression.charAt(this.pos + 1) === '*') {
      this.pos = this.expression.indexOf('*/', this.pos) + 2;

      if (this.pos === 1) {
        this.pos = this.expression.length;
      }

      return true;
    }

    return false;
  };

  TokenStream.prototype.isRadixInteger = function () {
    var pos = this.pos;

    if (pos >= this.expression.length - 2 || this.expression.charAt(pos) !== '0') {
      return false;
    }

    ++pos;
    var radix;
    var validDigit;

    if (this.expression.charAt(pos) === 'x') {
      radix = 16;
      validDigit = /^[0-9a-f]$/i;
      ++pos;
    } else if (this.expression.charAt(pos) === 'b') {
      radix = 2;
      validDigit = /^[01]$/i;
      ++pos;
    } else {
      return false;
    }

    var valid = false;
    var startPos = pos;

    while (pos < this.expression.length) {
      var c = this.expression.charAt(pos);

      if (validDigit.test(c)) {
        pos++;
        valid = true;
      } else {
        break;
      }
    }

    if (valid) {
      this.current = this.newToken(TNUMBER, parseInt(this.expression.substring(startPos, pos), radix));
      this.pos = pos;
    }

    return valid;
  };

  TokenStream.prototype.isNumber = function () {
    var valid = false;
    var pos = this.pos;
    var startPos = pos;
    var resetPos = pos;
    var foundDot = false;
    var foundDigits = false;
    var c;

    while (pos < this.expression.length) {
      c = this.expression.charAt(pos);

      if (c >= '0' && c <= '9' || !foundDot && c === '.') {
        if (c === '.') {
          foundDot = true;
        } else {
          foundDigits = true;
        }

        pos++;
        valid = foundDigits;
      } else {
        break;
      }
    }

    if (valid) {
      resetPos = pos;
    }

    if (c === 'e' || c === 'E') {
      pos++;
      var acceptSign = true;
      var validExponent = false;

      while (pos < this.expression.length) {
        c = this.expression.charAt(pos);

        if (acceptSign && (c === '+' || c === '-')) {
          acceptSign = false;
        } else if (c >= '0' && c <= '9') {
          validExponent = true;
          acceptSign = false;
        } else {
          break;
        }

        pos++;
      }

      if (!validExponent) {
        pos = resetPos;
      }
    }

    if (valid) {
      this.current = this.newToken(TNUMBER, parseFloat(this.expression.substring(startPos, pos)));
      this.pos = pos;
    } else {
      this.pos = resetPos;
    }

    return valid;
  };

  TokenStream.prototype.isOperator = function () {
    var startPos = this.pos;
    var c = this.expression.charAt(this.pos);

    if (c === '+' || c === '-' || c === '*' || c === '/' || c === '%' || c === '^' || c === '?' || c === ':' || c === '.') {
      this.current = this.newToken(TOP, c);
    } else if (c === '∙' || c === '•') {
      this.current = this.newToken(TOP, '*');
    } else if (c === '>') {
      if (this.expression.charAt(this.pos + 1) === '=') {
        this.current = this.newToken(TOP, '>=');
        this.pos++;
      } else {
        this.current = this.newToken(TOP, '>');
      }
    } else if (c === '<') {
      if (this.expression.charAt(this.pos + 1) === '=') {
        this.current = this.newToken(TOP, '<=');
        this.pos++;
      } else {
        this.current = this.newToken(TOP, '<');
      }
    } else if (c === '|') {
      if (this.expression.charAt(this.pos + 1) === '|') {
        this.current = this.newToken(TOP, '||');
        this.pos++;
      } else {
        return false;
      }
    } else if (c === '=') {
      if (this.expression.charAt(this.pos + 1) === '=') {
        this.current = this.newToken(TOP, '==');
        this.pos++;
      } else {
        return false;
      }
    } else if (c === '!') {
      if (this.expression.charAt(this.pos + 1) === '=') {
        this.current = this.newToken(TOP, '!=');
        this.pos++;
      } else {
        this.current = this.newToken(TOP, c);
      }
    } else {
      return false;
    }

    this.pos++;

    if (this.isOperatorEnabled(this.current.value)) {
      return true;
    } else {
      this.pos = startPos;
      return false;
    }
  };

  var optionNameMap = {
    '+': 'add',
    '-': 'subtract',
    '*': 'multiply',
    '/': 'divide',
    '%': 'remainder',
    '^': 'power',
    '!': 'factorial',
    '<': 'comparison',
    '>': 'comparison',
    '<=': 'comparison',
    '>=': 'comparison',
    '==': 'comparison',
    '!=': 'comparison',
    '||': 'concatenate',
    'and': 'logical',
    'or': 'logical',
    'not': 'logical',
    '?': 'conditional',
    ':': 'conditional'
  };

  function getOptionName(op) {
    return optionNameMap.hasOwnProperty(op) ? optionNameMap[op] : op;
  }

  TokenStream.prototype.isOperatorEnabled = function (op) {
    var optionName = getOptionName(op);
    var operators = this.options.operators || {}; // in is a special case for now because it's disabled by default

    if (optionName === 'in') {
      return !!operators['in'];
    }

    return !(optionName in operators) || !!operators[optionName];
  };

  TokenStream.prototype.getCoordinates = function () {
    var line = 0;
    var column;
    var newline = -1;

    do {
      line++;
      column = this.pos - newline;
      newline = this.expression.indexOf('\n', newline + 1);
    } while (newline >= 0 && newline < this.pos);

    return {
      line: line,
      column: column
    };
  };

  TokenStream.prototype.parseError = function (msg) {
    var coords = this.getCoordinates();
    throw new Error('parse error [' + coords.line + ':' + coords.column + ']: ' + msg);
  };

  function ParserState(parser, tokenStream, options) {
    this.parser = parser;
    this.tokens = tokenStream;
    this.current = null;
    this.nextToken = null;
    this.next();
    this.savedCurrent = null;
    this.savedNextToken = null;
    this.allowMemberAccess = options.allowMemberAccess !== false;
  }

  ParserState.prototype.next = function () {
    this.current = this.nextToken;
    return this.nextToken = this.tokens.next();
  };

  ParserState.prototype.tokenMatches = function (token, value) {
    if (typeof value === 'undefined') {
      return true;
    } else if (Array.isArray(value)) {
      return contains(value, token.value);
    } else if (typeof value === 'function') {
      return value(token);
    } else {
      return token.value === value;
    }
  };

  ParserState.prototype.save = function () {
    this.savedCurrent = this.current;
    this.savedNextToken = this.nextToken;
    this.tokens.save();
  };

  ParserState.prototype.restore = function () {
    this.tokens.restore();
    this.current = this.savedCurrent;
    this.nextToken = this.savedNextToken;
  };

  ParserState.prototype.accept = function (type, value) {
    if (this.nextToken.type === type && this.tokenMatches(this.nextToken, value)) {
      this.next();
      return true;
    }

    return false;
  };

  ParserState.prototype.expect = function (type, value) {
    if (!this.accept(type, value)) {
      var coords = this.tokens.getCoordinates();
      throw new Error('parse error [' + coords.line + ':' + coords.column + ']: Expected ' + (value || type));
    }
  };

  ParserState.prototype.parseAtom = function (instr) {
    if (this.accept(TNAME)) {
      instr.push(new Instruction(IVAR, this.current.value));
    } else if (this.accept(TNUMBER)) {
      instr.push(new Instruction(INUMBER, this.current.value));
    } else if (this.accept(TSTRING)) {
      instr.push(new Instruction(INUMBER, this.current.value));
    } else if (this.accept(TPAREN, '(')) {
      this.parseExpression(instr);
      this.expect(TPAREN, ')');
    } else {
      throw new Error('unexpected ' + this.nextToken);
    }
  };

  ParserState.prototype.parseExpression = function (instr) {
    this.parseConditionalExpression(instr);
  };

  ParserState.prototype.parseConditionalExpression = function (instr) {
    this.parseOrExpression(instr);

    while (this.accept(TOP, '?')) {
      var trueBranch = [];
      var falseBranch = [];
      this.parseConditionalExpression(trueBranch);
      this.expect(TOP, ':');
      this.parseConditionalExpression(falseBranch);
      instr.push(new Instruction(IEXPR, trueBranch));
      instr.push(new Instruction(IEXPR, falseBranch));
      instr.push(ternaryInstruction('?'));
    }
  };

  ParserState.prototype.parseOrExpression = function (instr) {
    this.parseAndExpression(instr);

    while (this.accept(TOP, 'or')) {
      var falseBranch = [];
      this.parseAndExpression(falseBranch);
      instr.push(new Instruction(IEXPR, falseBranch));
      instr.push(binaryInstruction('or'));
    }
  };

  ParserState.prototype.parseAndExpression = function (instr) {
    this.parseComparison(instr);

    while (this.accept(TOP, 'and')) {
      var trueBranch = [];
      this.parseComparison(trueBranch);
      instr.push(new Instruction(IEXPR, trueBranch));
      instr.push(binaryInstruction('and'));
    }
  };

  var COMPARISON_OPERATORS = ['==', '!=', '<', '<=', '>=', '>', 'in'];

  ParserState.prototype.parseComparison = function (instr) {
    this.parseAddSub(instr);

    while (this.accept(TOP, COMPARISON_OPERATORS)) {
      var op = this.current;
      this.parseAddSub(instr);
      instr.push(binaryInstruction(op.value));
    }
  };

  var ADD_SUB_OPERATORS = ['+', '-', '||'];

  ParserState.prototype.parseAddSub = function (instr) {
    this.parseTerm(instr);

    while (this.accept(TOP, ADD_SUB_OPERATORS)) {
      var op = this.current;
      this.parseTerm(instr);
      instr.push(binaryInstruction(op.value));
    }
  };

  var TERM_OPERATORS = ['*', '/', '%'];

  ParserState.prototype.parseTerm = function (instr) {
    this.parseFactor(instr);

    while (this.accept(TOP, TERM_OPERATORS)) {
      var op = this.current;
      this.parseFactor(instr);
      instr.push(binaryInstruction(op.value));
    }
  };

  ParserState.prototype.parseFactor = function (instr) {
    var unaryOps = this.tokens.unaryOps;

    function isPrefixOperator(token) {
      return token.value in unaryOps;
    }

    this.save();

    if (this.accept(TOP, isPrefixOperator)) {
      if (this.current.value !== '-' && this.current.value !== '+' && this.nextToken.type === TPAREN && this.nextToken.value === '(') {
        this.restore();
        this.parseExponential(instr);
      } else {
        var op = this.current;
        this.parseFactor(instr);
        instr.push(unaryInstruction(op.value));
      }
    } else {
      this.parseExponential(instr);
    }
  };

  ParserState.prototype.parseExponential = function (instr) {
    this.parsePostfixExpression(instr);

    while (this.accept(TOP, '^')) {
      this.parseFactor(instr);
      instr.push(binaryInstruction('^'));
    }
  };

  ParserState.prototype.parsePostfixExpression = function (instr) {
    this.parseFunctionCall(instr);

    while (this.accept(TOP, '!')) {
      instr.push(unaryInstruction('!'));
    }
  };

  ParserState.prototype.parseFunctionCall = function (instr) {
    var unaryOps = this.tokens.unaryOps;

    function isPrefixOperator(token) {
      return token.value in unaryOps;
    }

    if (this.accept(TOP, isPrefixOperator)) {
      var op = this.current;
      this.parseAtom(instr);
      instr.push(unaryInstruction(op.value));
    } else {
      this.parseMemberExpression(instr);

      while (this.accept(TPAREN, '(')) {
        if (this.accept(TPAREN, ')')) {
          instr.push(new Instruction(IFUNCALL, 0));
        } else {
          var argCount = this.parseArgumentList(instr);
          instr.push(new Instruction(IFUNCALL, argCount));
        }
      }
    }
  };

  ParserState.prototype.parseArgumentList = function (instr) {
    var argCount = 0;

    while (!this.accept(TPAREN, ')')) {
      this.parseExpression(instr);
      ++argCount;

      while (this.accept(TCOMMA)) {
        this.parseExpression(instr);
        ++argCount;
      }
    }

    return argCount;
  };

  ParserState.prototype.parseMemberExpression = function (instr) {
    this.parseAtom(instr);

    while (this.accept(TOP, '.')) {
      if (!this.allowMemberAccess) {
        throw new Error('unexpected ".", member access is not permitted');
      }

      this.expect(TNAME);
      instr.push(new Instruction(IMEMBER, this.current.value));
    }
  };

  function add(a, b) {
    return Number(a) + Number(b);
  }

  function sub(a, b) {
    return a - b;
  }

  function mul(a, b) {
    return a * b;
  }

  function div(a, b) {
    return a / b;
  }

  function mod(a, b) {
    return a % b;
  }

  function concat(a, b) {
    return '' + a + b;
  }

  function equal(a, b) {
    return a === b;
  }

  function notEqual(a, b) {
    return a !== b;
  }

  function greaterThan(a, b) {
    return a > b;
  }

  function lessThan(a, b) {
    return a < b;
  }

  function greaterThanEqual(a, b) {
    return a >= b;
  }

  function lessThanEqual(a, b) {
    return a <= b;
  }

  function andOperator(a, b) {
    return Boolean(a && b);
  }

  function orOperator(a, b) {
    return Boolean(a || b);
  }

  function inOperator(a, b) {
    return contains(b, a);
  }

  function sinh(a) {
    return (Math.exp(a) - Math.exp(-a)) / 2;
  }

  function cosh(a) {
    return (Math.exp(a) + Math.exp(-a)) / 2;
  }

  function tanh(a) {
    if (a === Infinity) return 1;
    if (a === -Infinity) return -1;
    return (Math.exp(a) - Math.exp(-a)) / (Math.exp(a) + Math.exp(-a));
  }

  function asinh(a) {
    if (a === -Infinity) return a;
    return Math.log(a + Math.sqrt(a * a + 1));
  }

  function acosh(a) {
    return Math.log(a + Math.sqrt(a * a - 1));
  }

  function atanh(a) {
    return Math.log((1 + a) / (1 - a)) / 2;
  }

  function log10(a) {
    return Math.log(a) * Math.LOG10E;
  }

  function neg(a) {
    return -a;
  }

  function not(a) {
    return !a;
  }

  function trunc(a) {
    return a < 0 ? Math.ceil(a) : Math.floor(a);
  }

  function random(a) {
    return Math.random() * (a || 1);
  }

  function factorial(a) {
    // a!
    return gamma(a + 1);
  }

  function isInteger(value) {
    return isFinite(value) && value === Math.round(value);
  }

  var GAMMA_G = 4.7421875;
  var GAMMA_P = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5]; // Gamma function from math.js

  function gamma(n) {
    var t, x;

    if (isInteger(n)) {
      if (n <= 0) {
        return isFinite(n) ? Infinity : NaN;
      }

      if (n > 171) {
        return Infinity; // Will overflow
      }

      var value = n - 2;
      var res = n - 1;

      while (value > 1) {
        res *= value;
        value--;
      }

      if (res === 0) {
        res = 1; // 0! is per definition 1
      }

      return res;
    }

    if (n < 0.5) {
      return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
    }

    if (n >= 171.35) {
      return Infinity; // will overflow
    }

    if (n > 85.0) {
      // Extended Stirling Approx
      var twoN = n * n;
      var threeN = twoN * n;
      var fourN = threeN * n;
      var fiveN = fourN * n;
      return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
    }

    --n;
    x = GAMMA_P[0];

    for (var i = 1; i < GAMMA_P.length; ++i) {
      x += GAMMA_P[i] / (n + i);
    }

    t = n + GAMMA_G + 0.5;
    return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
  }

  function stringLength(s) {
    return String(s).length;
  }

  function hypot() {
    var sum = 0;
    var larg = 0;

    for (var i = 0; i < arguments.length; i++) {
      var arg = Math.abs(arguments[i]);
      var div;

      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else {
        sum += arg;
      }
    }

    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }

  function condition(cond, yep, nope) {
    return cond ? yep : nope;
  }
  /**
  * Decimal adjustment of a number.
  * From @escopecz.
  *
  * @param {Number} value The number.
  * @param {Integer} exp  The exponent (the 10 logarithm of the adjustment base).
  * @return {Number} The adjusted value.
  */


  function roundTo(value, exp) {
    // If the exp is undefined or zero...
    if (typeof exp === 'undefined' || +exp === 0) {
      return Math.round(value);
    }

    value = +value;
    exp = -+exp; // If the value is not a number or the exp is not an integer...

    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
      return NaN;
    } // Shift


    value = value.toString().split('e');
    value = Math.round(+(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp))); // Shift back

    value = value.toString().split('e');
    return +(value[0] + 'e' + (value[1] ? +value[1] + exp : exp));
  }

  function Parser(options) {
    this.options = options || {};
    this.unaryOps = {
      sin: Math.sin,
      cos: Math.cos,
      tan: Math.tan,
      asin: Math.asin,
      acos: Math.acos,
      atan: Math.atan,
      sinh: Math.sinh || sinh,
      cosh: Math.cosh || cosh,
      tanh: Math.tanh || tanh,
      asinh: Math.asinh || asinh,
      acosh: Math.acosh || acosh,
      atanh: Math.atanh || atanh,
      sqrt: Math.sqrt,
      log: Math.log,
      ln: Math.log,
      lg: Math.log10 || log10,
      log10: Math.log10 || log10,
      abs: Math.abs,
      ceil: Math.ceil,
      floor: Math.floor,
      round: Math.round,
      trunc: Math.trunc || trunc,
      '-': neg,
      '+': Number,
      exp: Math.exp,
      not: not,
      length: stringLength,
      '!': factorial
    };
    this.binaryOps = {
      '+': add,
      '-': sub,
      '*': mul,
      '/': div,
      '%': mod,
      '^': Math.pow,
      '||': concat,
      '==': equal,
      '!=': notEqual,
      '>': greaterThan,
      '<': lessThan,
      '>=': greaterThanEqual,
      '<=': lessThanEqual,
      and: andOperator,
      or: orOperator,
      'in': inOperator
    };
    this.ternaryOps = {
      '?': condition
    };
    this.functions = {
      random: random,
      fac: factorial,
      min: Math.min,
      max: Math.max,
      hypot: Math.hypot || hypot,
      pyt: Math.hypot || hypot,
      // backward compat
      pow: Math.pow,
      atan2: Math.atan2,
      'if': condition,
      gamma: gamma,
      roundTo: roundTo
    };
    this.consts = {
      E: Math.E,
      PI: Math.PI,
      'true': true,
      'false': false
    };
  }

  Parser.prototype.parse = function (expr) {
    var instr = [];
    var parserState = new ParserState(this, new TokenStream(this, expr), {
      allowMemberAccess: this.options.allowMemberAccess
    });
    parserState.parseExpression(instr);
    parserState.expect(TEOF, 'EOF');
    return new Expression(instr, this);
  };

  Parser.prototype.evaluate = function (expr, variables) {
    return this.parse(expr).evaluate(variables);
  };

  var sharedParser = new Parser();

  Parser.parse = function (expr) {
    return sharedParser.parse(expr);
  };

  Parser.evaluate = function (expr, variables) {
    return sharedParser.parse(expr).evaluate(variables);
  };
  /*!
   Based on ndef.parser, by Raphael Graf(r@undefined.ch)
   http://www.undefined.ch/mparser/index.html
    Ported to JavaScript and modified by Matthew Crumley (email@matthewcrumley.com, http://silentmatt.com/)
    You are free to use and modify this code in anyway you find useful. Please leave this comment in the code
   to acknowledge its original source. If you feel like it, I enjoy hearing about projects that use my code,
   but don't feel like you have to let me know or ask permission.
  */


  var index = {
    Parser: Parser,
    Expression: Expression
  };
  return index;
});

/***/ }),

/***/ "./node_modules/htmlparser2/lib/CollectingHandler.js":
/*!***********************************************************!*\
  !*** ./node_modules/htmlparser2/lib/CollectingHandler.js ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = CollectingHandler;

function CollectingHandler(cbs) {
  this._cbs = cbs || {};
  this.events = [];
}

var EVENTS = __webpack_require__(/*! ./ */ "./node_modules/htmlparser2/lib/index.js").EVENTS;

Object.keys(EVENTS).forEach(function (name) {
  if (EVENTS[name] === 0) {
    name = "on" + name;

    CollectingHandler.prototype[name] = function () {
      this.events.push([name]);
      if (this._cbs[name]) this._cbs[name]();
    };
  } else if (EVENTS[name] === 1) {
    name = "on" + name;

    CollectingHandler.prototype[name] = function (a) {
      this.events.push([name, a]);
      if (this._cbs[name]) this._cbs[name](a);
    };
  } else if (EVENTS[name] === 2) {
    name = "on" + name;

    CollectingHandler.prototype[name] = function (a, b) {
      this.events.push([name, a, b]);
      if (this._cbs[name]) this._cbs[name](a, b);
    };
  } else {
    throw Error("wrong number of arguments");
  }
});

CollectingHandler.prototype.onreset = function () {
  this.events = [];
  if (this._cbs.onreset) this._cbs.onreset();
};

CollectingHandler.prototype.restart = function () {
  if (this._cbs.onreset) this._cbs.onreset();

  for (var i = 0, len = this.events.length; i < len; i++) {
    if (this._cbs[this.events[i][0]]) {
      var num = this.events[i].length;

      if (num === 1) {
        this._cbs[this.events[i][0]]();
      } else if (num === 2) {
        this._cbs[this.events[i][0]](this.events[i][1]);
      } else {
        this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
      }
    }
  }
};

/***/ }),

/***/ "./node_modules/htmlparser2/lib/FeedHandler.js":
/*!*****************************************************!*\
  !*** ./node_modules/htmlparser2/lib/FeedHandler.js ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var DomHandler = __webpack_require__(/*! domhandler */ "./node_modules/domhandler/index.js");

var DomUtils = __webpack_require__(/*! domutils */ "./node_modules/domutils/index.js"); //TODO: make this a streamable handler


function FeedHandler(callback, options) {
  this.init(callback, options);
}

__webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")(FeedHandler, DomHandler);

FeedHandler.prototype.init = DomHandler;

function getElements(what, where) {
  return DomUtils.getElementsByTagName(what, where, true);
}

function getOneElement(what, where) {
  return DomUtils.getElementsByTagName(what, where, true, 1)[0];
}

function fetch(what, where, recurse) {
  return DomUtils.getText(DomUtils.getElementsByTagName(what, where, recurse, 1)).trim();
}

function addConditionally(obj, prop, what, where, recurse) {
  var tmp = fetch(what, where, recurse);
  if (tmp) obj[prop] = tmp;
}

var isValidFeed = function isValidFeed(value) {
  return value === "rss" || value === "feed" || value === "rdf:RDF";
};

FeedHandler.prototype.onend = function () {
  var feed = {},
      feedRoot = getOneElement(isValidFeed, this.dom),
      tmp,
      childs;

  if (feedRoot) {
    if (feedRoot.name === "feed") {
      childs = feedRoot.children;
      feed.type = "atom";
      addConditionally(feed, "id", "id", childs);
      addConditionally(feed, "title", "title", childs);
      if ((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
      addConditionally(feed, "description", "subtitle", childs);
      if (tmp = fetch("updated", childs)) feed.updated = new Date(tmp);
      addConditionally(feed, "author", "email", childs, true);
      feed.items = getElements("entry", childs).map(function (item) {
        var entry = {},
            tmp;
        item = item.children;
        addConditionally(entry, "id", "id", item);
        addConditionally(entry, "title", "title", item);
        if ((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
        if (tmp = fetch("summary", item) || fetch("content", item)) entry.description = tmp;
        if (tmp = fetch("updated", item)) entry.pubDate = new Date(tmp);
        return entry;
      });
    } else {
      childs = getOneElement("channel", feedRoot.children).children;
      feed.type = feedRoot.name.substr(0, 3);
      feed.id = "";
      addConditionally(feed, "title", "title", childs);
      addConditionally(feed, "link", "link", childs);
      addConditionally(feed, "description", "description", childs);
      if (tmp = fetch("lastBuildDate", childs)) feed.updated = new Date(tmp);
      addConditionally(feed, "author", "managingEditor", childs, true);
      feed.items = getElements("item", feedRoot.children).map(function (item) {
        var entry = {},
            tmp;
        item = item.children;
        addConditionally(entry, "id", "guid", item);
        addConditionally(entry, "title", "title", item);
        addConditionally(entry, "link", "link", item);
        addConditionally(entry, "description", "description", item);
        if (tmp = fetch("pubDate", item)) entry.pubDate = new Date(tmp);
        return entry;
      });
    }
  }

  this.dom = feed;

  DomHandler.prototype._handleCallback.call(this, feedRoot ? null : Error("couldn't find root of feed"));
};

module.exports = FeedHandler;

/***/ }),

/***/ "./node_modules/htmlparser2/lib/Parser.js":
/*!************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Parser.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var Tokenizer = __webpack_require__(/*! ./Tokenizer.js */ "./node_modules/htmlparser2/lib/Tokenizer.js");
/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/


var formTags = {
  input: true,
  option: true,
  optgroup: true,
  select: true,
  button: true,
  datalist: true,
  textarea: true
};
var openImpliesClose = {
  tr: {
    tr: true,
    th: true,
    td: true
  },
  th: {
    th: true
  },
  td: {
    thead: true,
    th: true,
    td: true
  },
  body: {
    head: true,
    link: true,
    script: true
  },
  li: {
    li: true
  },
  p: {
    p: true
  },
  h1: {
    p: true
  },
  h2: {
    p: true
  },
  h3: {
    p: true
  },
  h4: {
    p: true
  },
  h5: {
    p: true
  },
  h6: {
    p: true
  },
  select: formTags,
  input: formTags,
  output: formTags,
  button: formTags,
  datalist: formTags,
  textarea: formTags,
  option: {
    option: true
  },
  optgroup: {
    optgroup: true
  }
};
var voidElements = {
  __proto__: null,
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};
var foreignContextElements = {
  __proto__: null,
  math: true,
  svg: true
};
var htmlIntegrationElements = {
  __proto__: null,
  mi: true,
  mo: true,
  mn: true,
  ms: true,
  mtext: true,
  "annotation-xml": true,
  foreignObject: true,
  desc: true,
  title: true
};
var re_nameEnd = /\s|\//;

function Parser(cbs, options) {
  this._options = options || {};
  this._cbs = cbs || {};
  this._tagname = "";
  this._attribname = "";
  this._attribvalue = "";
  this._attribs = null;
  this._stack = [];
  this._foreignContext = [];
  this.startIndex = 0;
  this.endIndex = null;
  this._lowerCaseTagNames = "lowerCaseTags" in this._options ? !!this._options.lowerCaseTags : !this._options.xmlMode;
  this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ? !!this._options.lowerCaseAttributeNames : !this._options.xmlMode;

  if (this._options.Tokenizer) {
    Tokenizer = this._options.Tokenizer;
  }

  this._tokenizer = new Tokenizer(this._options, this);
  if (this._cbs.onparserinit) this._cbs.onparserinit(this);
}

__webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")(Parser, __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter);

Parser.prototype._updatePosition = function (initialOffset) {
  if (this.endIndex === null) {
    if (this._tokenizer._sectionStart <= initialOffset) {
      this.startIndex = 0;
    } else {
      this.startIndex = this._tokenizer._sectionStart - initialOffset;
    }
  } else this.startIndex = this.endIndex + 1;

  this.endIndex = this._tokenizer.getAbsoluteIndex();
}; //Tokenizer event handlers


Parser.prototype.ontext = function (data) {
  this._updatePosition(1);

  this.endIndex--;
  if (this._cbs.ontext) this._cbs.ontext(data);
};

Parser.prototype.onopentagname = function (name) {
  if (this._lowerCaseTagNames) {
    name = name.toLowerCase();
  }

  this._tagname = name;

  if (!this._options.xmlMode && name in openImpliesClose) {
    for (var el; ((el = this._stack[this._stack.length - 1]) in openImpliesClose[name]); this.onclosetag(el)) {
      ;
    }
  }

  if (this._options.xmlMode || !(name in voidElements)) {
    this._stack.push(name);

    if (name in foreignContextElements) this._foreignContext.push(true);else if (name in htmlIntegrationElements) this._foreignContext.push(false);
  }

  if (this._cbs.onopentagname) this._cbs.onopentagname(name);
  if (this._cbs.onopentag) this._attribs = {};
};

Parser.prototype.onopentagend = function () {
  this._updatePosition(1);

  if (this._attribs) {
    if (this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
    this._attribs = null;
  }

  if (!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements) {
    this._cbs.onclosetag(this._tagname);
  }

  this._tagname = "";
};

Parser.prototype.onclosetag = function (name) {
  this._updatePosition(1);

  if (this._lowerCaseTagNames) {
    name = name.toLowerCase();
  }

  if (name in foreignContextElements || name in htmlIntegrationElements) {
    this._foreignContext.pop();
  }

  if (this._stack.length && (!(name in voidElements) || this._options.xmlMode)) {
    var pos = this._stack.lastIndexOf(name);

    if (pos !== -1) {
      if (this._cbs.onclosetag) {
        pos = this._stack.length - pos;

        while (pos--) {
          this._cbs.onclosetag(this._stack.pop());
        }
      } else this._stack.length = pos;
    } else if (name === "p" && !this._options.xmlMode) {
      this.onopentagname(name);

      this._closeCurrentTag();
    }
  } else if (!this._options.xmlMode && (name === "br" || name === "p")) {
    this.onopentagname(name);

    this._closeCurrentTag();
  }
};

Parser.prototype.onselfclosingtag = function () {
  if (this._options.xmlMode || this._options.recognizeSelfClosing || this._foreignContext[this._foreignContext.length - 1]) {
    this._closeCurrentTag();
  } else {
    this.onopentagend();
  }
};

Parser.prototype._closeCurrentTag = function () {
  var name = this._tagname;
  this.onopentagend(); //self-closing tags will be on the top of the stack
  //(cheaper check than in onclosetag)

  if (this._stack[this._stack.length - 1] === name) {
    if (this._cbs.onclosetag) {
      this._cbs.onclosetag(name);
    }

    this._stack.pop();
  }
};

Parser.prototype.onattribname = function (name) {
  if (this._lowerCaseAttributeNames) {
    name = name.toLowerCase();
  }

  this._attribname = name;
};

Parser.prototype.onattribdata = function (value) {
  this._attribvalue += value;
};

Parser.prototype.onattribend = function () {
  if (this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);

  if (this._attribs && !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)) {
    this._attribs[this._attribname] = this._attribvalue;
  }

  this._attribname = "";
  this._attribvalue = "";
};

Parser.prototype._getInstructionName = function (value) {
  var idx = value.search(re_nameEnd),
      name = idx < 0 ? value : value.substr(0, idx);

  if (this._lowerCaseTagNames) {
    name = name.toLowerCase();
  }

  return name;
};

Parser.prototype.ondeclaration = function (value) {
  if (this._cbs.onprocessinginstruction) {
    var name = this._getInstructionName(value);

    this._cbs.onprocessinginstruction("!" + name, "!" + value);
  }
};

Parser.prototype.onprocessinginstruction = function (value) {
  if (this._cbs.onprocessinginstruction) {
    var name = this._getInstructionName(value);

    this._cbs.onprocessinginstruction("?" + name, "?" + value);
  }
};

Parser.prototype.oncomment = function (value) {
  this._updatePosition(4);

  if (this._cbs.oncomment) this._cbs.oncomment(value);
  if (this._cbs.oncommentend) this._cbs.oncommentend();
};

Parser.prototype.oncdata = function (value) {
  this._updatePosition(1);

  if (this._options.xmlMode || this._options.recognizeCDATA) {
    if (this._cbs.oncdatastart) this._cbs.oncdatastart();
    if (this._cbs.ontext) this._cbs.ontext(value);
    if (this._cbs.oncdataend) this._cbs.oncdataend();
  } else {
    this.oncomment("[CDATA[" + value + "]]");
  }
};

Parser.prototype.onerror = function (err) {
  if (this._cbs.onerror) this._cbs.onerror(err);
};

Parser.prototype.onend = function () {
  if (this._cbs.onclosetag) {
    for (var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i])) {
      ;
    }
  }

  if (this._cbs.onend) this._cbs.onend();
}; //Resets the parser to a blank state, ready to parse a new HTML document


Parser.prototype.reset = function () {
  if (this._cbs.onreset) this._cbs.onreset();

  this._tokenizer.reset();

  this._tagname = "";
  this._attribname = "";
  this._attribs = null;
  this._stack = [];
  if (this._cbs.onparserinit) this._cbs.onparserinit(this);
}; //Parses a complete HTML document and pushes it to the handler


Parser.prototype.parseComplete = function (data) {
  this.reset();
  this.end(data);
};

Parser.prototype.write = function (chunk) {
  this._tokenizer.write(chunk);
};

Parser.prototype.end = function (chunk) {
  this._tokenizer.end(chunk);
};

Parser.prototype.pause = function () {
  this._tokenizer.pause();
};

Parser.prototype.resume = function () {
  this._tokenizer.resume();
}; //alias for backwards compat


Parser.prototype.parseChunk = Parser.prototype.write;
Parser.prototype.done = Parser.prototype.end;
module.exports = Parser;

/***/ }),

/***/ "./node_modules/htmlparser2/lib/ProxyHandler.js":
/*!******************************************************!*\
  !*** ./node_modules/htmlparser2/lib/ProxyHandler.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = ProxyHandler;

function ProxyHandler(cbs) {
  this._cbs = cbs || {};
}

var EVENTS = __webpack_require__(/*! ./ */ "./node_modules/htmlparser2/lib/index.js").EVENTS;

Object.keys(EVENTS).forEach(function (name) {
  if (EVENTS[name] === 0) {
    name = "on" + name;

    ProxyHandler.prototype[name] = function () {
      if (this._cbs[name]) this._cbs[name]();
    };
  } else if (EVENTS[name] === 1) {
    name = "on" + name;

    ProxyHandler.prototype[name] = function (a) {
      if (this._cbs[name]) this._cbs[name](a);
    };
  } else if (EVENTS[name] === 2) {
    name = "on" + name;

    ProxyHandler.prototype[name] = function (a, b) {
      if (this._cbs[name]) this._cbs[name](a, b);
    };
  } else {
    throw Error("wrong number of arguments");
  }
});

/***/ }),

/***/ "./node_modules/htmlparser2/lib/Stream.js":
/*!************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Stream.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = Stream;

var Parser = __webpack_require__(/*! ./WritableStream.js */ "./node_modules/htmlparser2/lib/WritableStream.js");

function Stream(options) {
  Parser.call(this, new Cbs(this), options);
}

__webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")(Stream, Parser);

Stream.prototype.readable = true;

function Cbs(scope) {
  this.scope = scope;
}

var EVENTS = __webpack_require__(/*! ../ */ "./node_modules/htmlparser2/lib/index.js").EVENTS;

Object.keys(EVENTS).forEach(function (name) {
  if (EVENTS[name] === 0) {
    Cbs.prototype["on" + name] = function () {
      this.scope.emit(name);
    };
  } else if (EVENTS[name] === 1) {
    Cbs.prototype["on" + name] = function (a) {
      this.scope.emit(name, a);
    };
  } else if (EVENTS[name] === 2) {
    Cbs.prototype["on" + name] = function (a, b) {
      this.scope.emit(name, a, b);
    };
  } else {
    throw Error("wrong number of arguments!");
  }
});

/***/ }),

/***/ "./node_modules/htmlparser2/lib/Tokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Tokenizer.js ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = Tokenizer;

var decodeCodePoint = __webpack_require__(/*! entities/lib/decode_codepoint.js */ "./node_modules/entities/lib/decode_codepoint.js");

var entityMap = __webpack_require__(/*! entities/maps/entities.json */ "./node_modules/entities/maps/entities.json");

var legacyMap = __webpack_require__(/*! entities/maps/legacy.json */ "./node_modules/entities/maps/legacy.json");

var xmlMap = __webpack_require__(/*! entities/maps/xml.json */ "./node_modules/entities/maps/xml.json");

var i = 0;
var TEXT = i++;
var BEFORE_TAG_NAME = i++; //after <

var IN_TAG_NAME = i++;
var IN_SELF_CLOSING_TAG = i++;
var BEFORE_CLOSING_TAG_NAME = i++;
var IN_CLOSING_TAG_NAME = i++;
var AFTER_CLOSING_TAG_NAME = i++; //attributes

var BEFORE_ATTRIBUTE_NAME = i++;
var IN_ATTRIBUTE_NAME = i++;
var AFTER_ATTRIBUTE_NAME = i++;
var BEFORE_ATTRIBUTE_VALUE = i++;
var IN_ATTRIBUTE_VALUE_DQ = i++; // "

var IN_ATTRIBUTE_VALUE_SQ = i++; // '

var IN_ATTRIBUTE_VALUE_NQ = i++; //declarations

var BEFORE_DECLARATION = i++; // !

var IN_DECLARATION = i++; //processing instructions

var IN_PROCESSING_INSTRUCTION = i++; // ?
//comments

var BEFORE_COMMENT = i++;
var IN_COMMENT = i++;
var AFTER_COMMENT_1 = i++;
var AFTER_COMMENT_2 = i++; //cdata

var BEFORE_CDATA_1 = i++; // [

var BEFORE_CDATA_2 = i++; // C

var BEFORE_CDATA_3 = i++; // D

var BEFORE_CDATA_4 = i++; // A

var BEFORE_CDATA_5 = i++; // T

var BEFORE_CDATA_6 = i++; // A

var IN_CDATA = i++; // [

var AFTER_CDATA_1 = i++; // ]

var AFTER_CDATA_2 = i++; // ]
//special tags

var BEFORE_SPECIAL = i++; //S

var BEFORE_SPECIAL_END = i++; //S

var BEFORE_SCRIPT_1 = i++; //C

var BEFORE_SCRIPT_2 = i++; //R

var BEFORE_SCRIPT_3 = i++; //I

var BEFORE_SCRIPT_4 = i++; //P

var BEFORE_SCRIPT_5 = i++; //T

var AFTER_SCRIPT_1 = i++; //C

var AFTER_SCRIPT_2 = i++; //R

var AFTER_SCRIPT_3 = i++; //I

var AFTER_SCRIPT_4 = i++; //P

var AFTER_SCRIPT_5 = i++; //T

var BEFORE_STYLE_1 = i++; //T

var BEFORE_STYLE_2 = i++; //Y

var BEFORE_STYLE_3 = i++; //L

var BEFORE_STYLE_4 = i++; //E

var AFTER_STYLE_1 = i++; //T

var AFTER_STYLE_2 = i++; //Y

var AFTER_STYLE_3 = i++; //L

var AFTER_STYLE_4 = i++; //E

var BEFORE_ENTITY = i++; //&

var BEFORE_NUMERIC_ENTITY = i++; //#

var IN_NAMED_ENTITY = i++;
var IN_NUMERIC_ENTITY = i++;
var IN_HEX_ENTITY = i++; //X

var j = 0;
var SPECIAL_NONE = j++;
var SPECIAL_SCRIPT = j++;
var SPECIAL_STYLE = j++;

function whitespace(c) {
  return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function ifElseState(upper, SUCCESS, FAILURE) {
  var lower = upper.toLowerCase();

  if (upper === lower) {
    return function (c) {
      if (c === lower) {
        this._state = SUCCESS;
      } else {
        this._state = FAILURE;
        this._index--;
      }
    };
  } else {
    return function (c) {
      if (c === lower || c === upper) {
        this._state = SUCCESS;
      } else {
        this._state = FAILURE;
        this._index--;
      }
    };
  }
}

function consumeSpecialNameChar(upper, NEXT_STATE) {
  var lower = upper.toLowerCase();
  return function (c) {
    if (c === lower || c === upper) {
      this._state = NEXT_STATE;
    } else {
      this._state = IN_TAG_NAME;
      this._index--; //consume the token again
    }
  };
}

function Tokenizer(options, cbs) {
  this._state = TEXT;
  this._buffer = "";
  this._sectionStart = 0;
  this._index = 0;
  this._bufferOffset = 0; //chars removed from _buffer

  this._baseState = TEXT;
  this._special = SPECIAL_NONE;
  this._cbs = cbs;
  this._running = true;
  this._ended = false;
  this._xmlMode = !!(options && options.xmlMode);
  this._decodeEntities = !!(options && options.decodeEntities);
}

Tokenizer.prototype._stateText = function (c) {
  if (c === "<") {
    if (this._index > this._sectionStart) {
      this._cbs.ontext(this._getSection());
    }

    this._state = BEFORE_TAG_NAME;
    this._sectionStart = this._index;
  } else if (this._decodeEntities && this._special === SPECIAL_NONE && c === "&") {
    if (this._index > this._sectionStart) {
      this._cbs.ontext(this._getSection());
    }

    this._baseState = TEXT;
    this._state = BEFORE_ENTITY;
    this._sectionStart = this._index;
  }
};

Tokenizer.prototype._stateBeforeTagName = function (c) {
  if (c === "/") {
    this._state = BEFORE_CLOSING_TAG_NAME;
  } else if (c === "<") {
    this._cbs.ontext(this._getSection());

    this._sectionStart = this._index;
  } else if (c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
    this._state = TEXT;
  } else if (c === "!") {
    this._state = BEFORE_DECLARATION;
    this._sectionStart = this._index + 1;
  } else if (c === "?") {
    this._state = IN_PROCESSING_INSTRUCTION;
    this._sectionStart = this._index + 1;
  } else {
    this._state = !this._xmlMode && (c === "s" || c === "S") ? BEFORE_SPECIAL : IN_TAG_NAME;
    this._sectionStart = this._index;
  }
};

Tokenizer.prototype._stateInTagName = function (c) {
  if (c === "/" || c === ">" || whitespace(c)) {
    this._emitToken("onopentagname");

    this._state = BEFORE_ATTRIBUTE_NAME;
    this._index--;
  }
};

Tokenizer.prototype._stateBeforeCloseingTagName = function (c) {
  if (whitespace(c)) ;else if (c === ">") {
    this._state = TEXT;
  } else if (this._special !== SPECIAL_NONE) {
    if (c === "s" || c === "S") {
      this._state = BEFORE_SPECIAL_END;
    } else {
      this._state = TEXT;
      this._index--;
    }
  } else {
    this._state = IN_CLOSING_TAG_NAME;
    this._sectionStart = this._index;
  }
};

Tokenizer.prototype._stateInCloseingTagName = function (c) {
  if (c === ">" || whitespace(c)) {
    this._emitToken("onclosetag");

    this._state = AFTER_CLOSING_TAG_NAME;
    this._index--;
  }
};

Tokenizer.prototype._stateAfterCloseingTagName = function (c) {
  //skip everything until ">"
  if (c === ">") {
    this._state = TEXT;
    this._sectionStart = this._index + 1;
  }
};

Tokenizer.prototype._stateBeforeAttributeName = function (c) {
  if (c === ">") {
    this._cbs.onopentagend();

    this._state = TEXT;
    this._sectionStart = this._index + 1;
  } else if (c === "/") {
    this._state = IN_SELF_CLOSING_TAG;
  } else if (!whitespace(c)) {
    this._state = IN_ATTRIBUTE_NAME;
    this._sectionStart = this._index;
  }
};

Tokenizer.prototype._stateInSelfClosingTag = function (c) {
  if (c === ">") {
    this._cbs.onselfclosingtag();

    this._state = TEXT;
    this._sectionStart = this._index + 1;
  } else if (!whitespace(c)) {
    this._state = BEFORE_ATTRIBUTE_NAME;
    this._index--;
  }
};

Tokenizer.prototype._stateInAttributeName = function (c) {
  if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
    this._cbs.onattribname(this._getSection());

    this._sectionStart = -1;
    this._state = AFTER_ATTRIBUTE_NAME;
    this._index--;
  }
};

Tokenizer.prototype._stateAfterAttributeName = function (c) {
  if (c === "=") {
    this._state = BEFORE_ATTRIBUTE_VALUE;
  } else if (c === "/" || c === ">") {
    this._cbs.onattribend();

    this._state = BEFORE_ATTRIBUTE_NAME;
    this._index--;
  } else if (!whitespace(c)) {
    this._cbs.onattribend();

    this._state = IN_ATTRIBUTE_NAME;
    this._sectionStart = this._index;
  }
};

Tokenizer.prototype._stateBeforeAttributeValue = function (c) {
  if (c === '"') {
    this._state = IN_ATTRIBUTE_VALUE_DQ;
    this._sectionStart = this._index + 1;
  } else if (c === "'") {
    this._state = IN_ATTRIBUTE_VALUE_SQ;
    this._sectionStart = this._index + 1;
  } else if (!whitespace(c)) {
    this._state = IN_ATTRIBUTE_VALUE_NQ;
    this._sectionStart = this._index;
    this._index--; //reconsume token
  }
};

Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function (c) {
  if (c === '"') {
    this._emitToken("onattribdata");

    this._cbs.onattribend();

    this._state = BEFORE_ATTRIBUTE_NAME;
  } else if (this._decodeEntities && c === "&") {
    this._emitToken("onattribdata");

    this._baseState = this._state;
    this._state = BEFORE_ENTITY;
    this._sectionStart = this._index;
  }
};

Tokenizer.prototype._stateInAttributeValueSingleQuotes = function (c) {
  if (c === "'") {
    this._emitToken("onattribdata");

    this._cbs.onattribend();

    this._state = BEFORE_ATTRIBUTE_NAME;
  } else if (this._decodeEntities && c === "&") {
    this._emitToken("onattribdata");

    this._baseState = this._state;
    this._state = BEFORE_ENTITY;
    this._sectionStart = this._index;
  }
};

Tokenizer.prototype._stateInAttributeValueNoQuotes = function (c) {
  if (whitespace(c) || c === ">") {
    this._emitToken("onattribdata");

    this._cbs.onattribend();

    this._state = BEFORE_ATTRIBUTE_NAME;
    this._index--;
  } else if (this._decodeEntities && c === "&") {
    this._emitToken("onattribdata");

    this._baseState = this._state;
    this._state = BEFORE_ENTITY;
    this._sectionStart = this._index;
  }
};

Tokenizer.prototype._stateBeforeDeclaration = function (c) {
  this._state = c === "[" ? BEFORE_CDATA_1 : c === "-" ? BEFORE_COMMENT : IN_DECLARATION;
};

Tokenizer.prototype._stateInDeclaration = function (c) {
  if (c === ">") {
    this._cbs.ondeclaration(this._getSection());

    this._state = TEXT;
    this._sectionStart = this._index + 1;
  }
};

Tokenizer.prototype._stateInProcessingInstruction = function (c) {
  if (c === ">") {
    this._cbs.onprocessinginstruction(this._getSection());

    this._state = TEXT;
    this._sectionStart = this._index + 1;
  }
};

Tokenizer.prototype._stateBeforeComment = function (c) {
  if (c === "-") {
    this._state = IN_COMMENT;
    this._sectionStart = this._index + 1;
  } else {
    this._state = IN_DECLARATION;
  }
};

Tokenizer.prototype._stateInComment = function (c) {
  if (c === "-") this._state = AFTER_COMMENT_1;
};

Tokenizer.prototype._stateAfterComment1 = function (c) {
  if (c === "-") {
    this._state = AFTER_COMMENT_2;
  } else {
    this._state = IN_COMMENT;
  }
};

Tokenizer.prototype._stateAfterComment2 = function (c) {
  if (c === ">") {
    //remove 2 trailing chars
    this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));

    this._state = TEXT;
    this._sectionStart = this._index + 1;
  } else if (c !== "-") {
    this._state = IN_COMMENT;
  } // else: stay in AFTER_COMMENT_2 (`--->`)

};

Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

Tokenizer.prototype._stateBeforeCdata6 = function (c) {
  if (c === "[") {
    this._state = IN_CDATA;
    this._sectionStart = this._index + 1;
  } else {
    this._state = IN_DECLARATION;
    this._index--;
  }
};

Tokenizer.prototype._stateInCdata = function (c) {
  if (c === "]") this._state = AFTER_CDATA_1;
};

Tokenizer.prototype._stateAfterCdata1 = function (c) {
  if (c === "]") this._state = AFTER_CDATA_2;else this._state = IN_CDATA;
};

Tokenizer.prototype._stateAfterCdata2 = function (c) {
  if (c === ">") {
    //remove 2 trailing chars
    this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));

    this._state = TEXT;
    this._sectionStart = this._index + 1;
  } else if (c !== "]") {
    this._state = IN_CDATA;
  } //else: stay in AFTER_CDATA_2 (`]]]>`)

};

Tokenizer.prototype._stateBeforeSpecial = function (c) {
  if (c === "c" || c === "C") {
    this._state = BEFORE_SCRIPT_1;
  } else if (c === "t" || c === "T") {
    this._state = BEFORE_STYLE_1;
  } else {
    this._state = IN_TAG_NAME;
    this._index--; //consume the token again
  }
};

Tokenizer.prototype._stateBeforeSpecialEnd = function (c) {
  if (this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")) {
    this._state = AFTER_SCRIPT_1;
  } else if (this._special === SPECIAL_STYLE && (c === "t" || c === "T")) {
    this._state = AFTER_STYLE_1;
  } else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

Tokenizer.prototype._stateBeforeScript5 = function (c) {
  if (c === "/" || c === ">" || whitespace(c)) {
    this._special = SPECIAL_SCRIPT;
  }

  this._state = IN_TAG_NAME;
  this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

Tokenizer.prototype._stateAfterScript5 = function (c) {
  if (c === ">" || whitespace(c)) {
    this._special = SPECIAL_NONE;
    this._state = IN_CLOSING_TAG_NAME;
    this._sectionStart = this._index - 6;
    this._index--; //reconsume the token
  } else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

Tokenizer.prototype._stateBeforeStyle4 = function (c) {
  if (c === "/" || c === ">" || whitespace(c)) {
    this._special = SPECIAL_STYLE;
  }

  this._state = IN_TAG_NAME;
  this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

Tokenizer.prototype._stateAfterStyle4 = function (c) {
  if (c === ">" || whitespace(c)) {
    this._special = SPECIAL_NONE;
    this._state = IN_CLOSING_TAG_NAME;
    this._sectionStart = this._index - 5;
    this._index--; //reconsume the token
  } else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY); //for entities terminated with a semicolon

Tokenizer.prototype._parseNamedEntityStrict = function () {
  //offset = 1
  if (this._sectionStart + 1 < this._index) {
    var entity = this._buffer.substring(this._sectionStart + 1, this._index),
        map = this._xmlMode ? xmlMap : entityMap;

    if (map.hasOwnProperty(entity)) {
      this._emitPartial(map[entity]);

      this._sectionStart = this._index + 1;
    }
  }
}; //parses legacy entities (without trailing semicolon)


Tokenizer.prototype._parseLegacyEntity = function () {
  var start = this._sectionStart + 1,
      limit = this._index - start;
  if (limit > 6) limit = 6; //the max length of legacy entities is 6

  while (limit >= 2) {
    //the min length of legacy entities is 2
    var entity = this._buffer.substr(start, limit);

    if (legacyMap.hasOwnProperty(entity)) {
      this._emitPartial(legacyMap[entity]);

      this._sectionStart += limit + 1;
      return;
    } else {
      limit--;
    }
  }
};

Tokenizer.prototype._stateInNamedEntity = function (c) {
  if (c === ";") {
    this._parseNamedEntityStrict();

    if (this._sectionStart + 1 < this._index && !this._xmlMode) {
      this._parseLegacyEntity();
    }

    this._state = this._baseState;
  } else if ((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")) {
    if (this._xmlMode) ;else if (this._sectionStart + 1 === this._index) ;else if (this._baseState !== TEXT) {
      if (c !== "=") {
        this._parseNamedEntityStrict();
      }
    } else {
      this._parseLegacyEntity();
    }
    this._state = this._baseState;
    this._index--;
  }
};

Tokenizer.prototype._decodeNumericEntity = function (offset, base) {
  var sectionStart = this._sectionStart + offset;

  if (sectionStart !== this._index) {
    //parse entity
    var entity = this._buffer.substring(sectionStart, this._index);

    var parsed = parseInt(entity, base);

    this._emitPartial(decodeCodePoint(parsed));

    this._sectionStart = this._index;
  } else {
    this._sectionStart--;
  }

  this._state = this._baseState;
};

Tokenizer.prototype._stateInNumericEntity = function (c) {
  if (c === ";") {
    this._decodeNumericEntity(2, 10);

    this._sectionStart++;
  } else if (c < "0" || c > "9") {
    if (!this._xmlMode) {
      this._decodeNumericEntity(2, 10);
    } else {
      this._state = this._baseState;
    }

    this._index--;
  }
};

Tokenizer.prototype._stateInHexEntity = function (c) {
  if (c === ";") {
    this._decodeNumericEntity(3, 16);

    this._sectionStart++;
  } else if ((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")) {
    if (!this._xmlMode) {
      this._decodeNumericEntity(3, 16);
    } else {
      this._state = this._baseState;
    }

    this._index--;
  }
};

Tokenizer.prototype._cleanup = function () {
  if (this._sectionStart < 0) {
    this._buffer = "";
    this._bufferOffset += this._index;
    this._index = 0;
  } else if (this._running) {
    if (this._state === TEXT) {
      if (this._sectionStart !== this._index) {
        this._cbs.ontext(this._buffer.substr(this._sectionStart));
      }

      this._buffer = "";
      this._bufferOffset += this._index;
      this._index = 0;
    } else if (this._sectionStart === this._index) {
      //the section just started
      this._buffer = "";
      this._bufferOffset += this._index;
      this._index = 0;
    } else {
      //remove everything unnecessary
      this._buffer = this._buffer.substr(this._sectionStart);
      this._index -= this._sectionStart;
      this._bufferOffset += this._sectionStart;
    }

    this._sectionStart = 0;
  }
}; //TODO make events conditional


Tokenizer.prototype.write = function (chunk) {
  if (this._ended) this._cbs.onerror(Error(".write() after done!"));
  this._buffer += chunk;

  this._parse();
};

Tokenizer.prototype._parse = function () {
  while (this._index < this._buffer.length && this._running) {
    var c = this._buffer.charAt(this._index);

    if (this._state === TEXT) {
      this._stateText(c);
    } else if (this._state === BEFORE_TAG_NAME) {
      this._stateBeforeTagName(c);
    } else if (this._state === IN_TAG_NAME) {
      this._stateInTagName(c);
    } else if (this._state === BEFORE_CLOSING_TAG_NAME) {
      this._stateBeforeCloseingTagName(c);
    } else if (this._state === IN_CLOSING_TAG_NAME) {
      this._stateInCloseingTagName(c);
    } else if (this._state === AFTER_CLOSING_TAG_NAME) {
      this._stateAfterCloseingTagName(c);
    } else if (this._state === IN_SELF_CLOSING_TAG) {
      this._stateInSelfClosingTag(c);
    } else if (this._state === BEFORE_ATTRIBUTE_NAME) {
      /*
      *	attributes
      */
      this._stateBeforeAttributeName(c);
    } else if (this._state === IN_ATTRIBUTE_NAME) {
      this._stateInAttributeName(c);
    } else if (this._state === AFTER_ATTRIBUTE_NAME) {
      this._stateAfterAttributeName(c);
    } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {
      this._stateBeforeAttributeValue(c);
    } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {
      this._stateInAttributeValueDoubleQuotes(c);
    } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {
      this._stateInAttributeValueSingleQuotes(c);
    } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {
      this._stateInAttributeValueNoQuotes(c);
    } else if (this._state === BEFORE_DECLARATION) {
      /*
      *	declarations
      */
      this._stateBeforeDeclaration(c);
    } else if (this._state === IN_DECLARATION) {
      this._stateInDeclaration(c);
    } else if (this._state === IN_PROCESSING_INSTRUCTION) {
      /*
      *	processing instructions
      */
      this._stateInProcessingInstruction(c);
    } else if (this._state === BEFORE_COMMENT) {
      /*
      *	comments
      */
      this._stateBeforeComment(c);
    } else if (this._state === IN_COMMENT) {
      this._stateInComment(c);
    } else if (this._state === AFTER_COMMENT_1) {
      this._stateAfterComment1(c);
    } else if (this._state === AFTER_COMMENT_2) {
      this._stateAfterComment2(c);
    } else if (this._state === BEFORE_CDATA_1) {
      /*
      *	cdata
      */
      this._stateBeforeCdata1(c);
    } else if (this._state === BEFORE_CDATA_2) {
      this._stateBeforeCdata2(c);
    } else if (this._state === BEFORE_CDATA_3) {
      this._stateBeforeCdata3(c);
    } else if (this._state === BEFORE_CDATA_4) {
      this._stateBeforeCdata4(c);
    } else if (this._state === BEFORE_CDATA_5) {
      this._stateBeforeCdata5(c);
    } else if (this._state === BEFORE_CDATA_6) {
      this._stateBeforeCdata6(c);
    } else if (this._state === IN_CDATA) {
      this._stateInCdata(c);
    } else if (this._state === AFTER_CDATA_1) {
      this._stateAfterCdata1(c);
    } else if (this._state === AFTER_CDATA_2) {
      this._stateAfterCdata2(c);
    } else if (this._state === BEFORE_SPECIAL) {
      /*
      * special tags
      */
      this._stateBeforeSpecial(c);
    } else if (this._state === BEFORE_SPECIAL_END) {
      this._stateBeforeSpecialEnd(c);
    } else if (this._state === BEFORE_SCRIPT_1) {
      /*
      * script
      */
      this._stateBeforeScript1(c);
    } else if (this._state === BEFORE_SCRIPT_2) {
      this._stateBeforeScript2(c);
    } else if (this._state === BEFORE_SCRIPT_3) {
      this._stateBeforeScript3(c);
    } else if (this._state === BEFORE_SCRIPT_4) {
      this._stateBeforeScript4(c);
    } else if (this._state === BEFORE_SCRIPT_5) {
      this._stateBeforeScript5(c);
    } else if (this._state === AFTER_SCRIPT_1) {
      this._stateAfterScript1(c);
    } else if (this._state === AFTER_SCRIPT_2) {
      this._stateAfterScript2(c);
    } else if (this._state === AFTER_SCRIPT_3) {
      this._stateAfterScript3(c);
    } else if (this._state === AFTER_SCRIPT_4) {
      this._stateAfterScript4(c);
    } else if (this._state === AFTER_SCRIPT_5) {
      this._stateAfterScript5(c);
    } else if (this._state === BEFORE_STYLE_1) {
      /*
      * style
      */
      this._stateBeforeStyle1(c);
    } else if (this._state === BEFORE_STYLE_2) {
      this._stateBeforeStyle2(c);
    } else if (this._state === BEFORE_STYLE_3) {
      this._stateBeforeStyle3(c);
    } else if (this._state === BEFORE_STYLE_4) {
      this._stateBeforeStyle4(c);
    } else if (this._state === AFTER_STYLE_1) {
      this._stateAfterStyle1(c);
    } else if (this._state === AFTER_STYLE_2) {
      this._stateAfterStyle2(c);
    } else if (this._state === AFTER_STYLE_3) {
      this._stateAfterStyle3(c);
    } else if (this._state === AFTER_STYLE_4) {
      this._stateAfterStyle4(c);
    } else if (this._state === BEFORE_ENTITY) {
      /*
      * entities
      */
      this._stateBeforeEntity(c);
    } else if (this._state === BEFORE_NUMERIC_ENTITY) {
      this._stateBeforeNumericEntity(c);
    } else if (this._state === IN_NAMED_ENTITY) {
      this._stateInNamedEntity(c);
    } else if (this._state === IN_NUMERIC_ENTITY) {
      this._stateInNumericEntity(c);
    } else if (this._state === IN_HEX_ENTITY) {
      this._stateInHexEntity(c);
    } else {
      this._cbs.onerror(Error("unknown _state"), this._state);
    }

    this._index++;
  }

  this._cleanup();
};

Tokenizer.prototype.pause = function () {
  this._running = false;
};

Tokenizer.prototype.resume = function () {
  this._running = true;

  if (this._index < this._buffer.length) {
    this._parse();
  }

  if (this._ended) {
    this._finish();
  }
};

Tokenizer.prototype.end = function (chunk) {
  if (this._ended) this._cbs.onerror(Error(".end() after done!"));
  if (chunk) this.write(chunk);
  this._ended = true;
  if (this._running) this._finish();
};

Tokenizer.prototype._finish = function () {
  //if there is remaining data, emit it in a reasonable way
  if (this._sectionStart < this._index) {
    this._handleTrailingData();
  }

  this._cbs.onend();
};

Tokenizer.prototype._handleTrailingData = function () {
  var data = this._buffer.substr(this._sectionStart);

  if (this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2) {
    this._cbs.oncdata(data);
  } else if (this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2) {
    this._cbs.oncomment(data);
  } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {
    this._parseLegacyEntity();

    if (this._sectionStart < this._index) {
      this._state = this._baseState;

      this._handleTrailingData();
    }
  } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {
    this._decodeNumericEntity(2, 10);

    if (this._sectionStart < this._index) {
      this._state = this._baseState;

      this._handleTrailingData();
    }
  } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {
    this._decodeNumericEntity(3, 16);

    if (this._sectionStart < this._index) {
      this._state = this._baseState;

      this._handleTrailingData();
    }
  } else if (this._state !== IN_TAG_NAME && this._state !== BEFORE_ATTRIBUTE_NAME && this._state !== BEFORE_ATTRIBUTE_VALUE && this._state !== AFTER_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_VALUE_SQ && this._state !== IN_ATTRIBUTE_VALUE_DQ && this._state !== IN_ATTRIBUTE_VALUE_NQ && this._state !== IN_CLOSING_TAG_NAME) {
    this._cbs.ontext(data);
  } //else, ignore remaining data
  //TODO add a way to remove current tag

};

Tokenizer.prototype.reset = function () {
  Tokenizer.call(this, {
    xmlMode: this._xmlMode,
    decodeEntities: this._decodeEntities
  }, this._cbs);
};

Tokenizer.prototype.getAbsoluteIndex = function () {
  return this._bufferOffset + this._index;
};

Tokenizer.prototype._getSection = function () {
  return this._buffer.substring(this._sectionStart, this._index);
};

Tokenizer.prototype._emitToken = function (name) {
  this._cbs[name](this._getSection());

  this._sectionStart = -1;
};

Tokenizer.prototype._emitPartial = function (value) {
  if (this._baseState !== TEXT) {
    this._cbs.onattribdata(value); //TODO implement the new event

  } else {
    this._cbs.ontext(value);
  }
};

/***/ }),

/***/ "./node_modules/htmlparser2/lib/WritableStream.js":
/*!********************************************************!*\
  !*** ./node_modules/htmlparser2/lib/WritableStream.js ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = Stream;

var Parser = __webpack_require__(/*! ./Parser.js */ "./node_modules/htmlparser2/lib/Parser.js");

var WritableStream = __webpack_require__(/*! readable-stream */ 1).Writable;

var StringDecoder = __webpack_require__(/*! string_decoder */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;

var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

function Stream(cbs, options) {
  var parser = this._parser = new Parser(cbs, options);
  var decoder = this._decoder = new StringDecoder();
  WritableStream.call(this, {
    decodeStrings: false
  });
  this.once("finish", function () {
    parser.end(decoder.end());
  });
}

__webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")(Stream, WritableStream);

Stream.prototype._write = function (chunk, encoding, cb) {
  if (chunk instanceof Buffer) chunk = this._decoder.write(chunk);

  this._parser.write(chunk);

  cb();
};

/***/ }),

/***/ "./node_modules/htmlparser2/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/htmlparser2/lib/index.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var Parser = __webpack_require__(/*! ./Parser.js */ "./node_modules/htmlparser2/lib/Parser.js");

var DomHandler = __webpack_require__(/*! domhandler */ "./node_modules/domhandler/index.js");

function defineProp(name, value) {
  delete module.exports[name];
  module.exports[name] = value;
  return value;
}

module.exports = {
  Parser: Parser,
  Tokenizer: __webpack_require__(/*! ./Tokenizer.js */ "./node_modules/htmlparser2/lib/Tokenizer.js"),
  ElementType: __webpack_require__(/*! domelementtype */ "./node_modules/domelementtype/index.js"),
  DomHandler: DomHandler,

  get FeedHandler() {
    return defineProp("FeedHandler", __webpack_require__(/*! ./FeedHandler.js */ "./node_modules/htmlparser2/lib/FeedHandler.js"));
  },

  get Stream() {
    return defineProp("Stream", __webpack_require__(/*! ./Stream.js */ "./node_modules/htmlparser2/lib/Stream.js"));
  },

  get WritableStream() {
    return defineProp("WritableStream", __webpack_require__(/*! ./WritableStream.js */ "./node_modules/htmlparser2/lib/WritableStream.js"));
  },

  get ProxyHandler() {
    return defineProp("ProxyHandler", __webpack_require__(/*! ./ProxyHandler.js */ "./node_modules/htmlparser2/lib/ProxyHandler.js"));
  },

  get DomUtils() {
    return defineProp("DomUtils", __webpack_require__(/*! domutils */ "./node_modules/domutils/index.js"));
  },

  get CollectingHandler() {
    return defineProp("CollectingHandler", __webpack_require__(/*! ./CollectingHandler.js */ "./node_modules/htmlparser2/lib/CollectingHandler.js"));
  },

  // For legacy support
  DefaultHandler: DomHandler,

  get RssHandler() {
    return defineProp("RssHandler", this.FeedHandler);
  },

  //helper methods
  parseDOM: function parseDOM(data, options) {
    var handler = new DomHandler(options);
    new Parser(handler, options).end(data);
    return handler.dom;
  },
  parseFeed: function parseFeed(feed, options) {
    var handler = new module.exports.FeedHandler(options);
    new Parser(handler, options).end(feed);
    return handler.dom;
  },
  createDomStream: function createDomStream(cb, options, elementCb) {
    var handler = new DomHandler(cb, options, elementCb);
    return new Parser(handler, options);
  },
  // List of all events that the parser emits
  EVENTS: {
    /* Format: eventname: number of arguments */
    attribute: 2,
    cdatastart: 0,
    cdataend: 0,
    text: 1,
    processinginstruction: 2,
    comment: 1,
    commentend: 0,
    closetag: 1,
    opentag: 2,
    opentagname: 1,
    error: 1,
    end: 0
  }
};

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function TempCtor() {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//! moment.js
;

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function () {
  'use strict';

  var hookCallback;

  function hooks() {
    return hookCallback.apply(null, arguments);
  } // This is done to register the method called with moment()
  // without creating circular dependencies.


  function setHookCallback(callback) {
    hookCallback = callback;
  }

  function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
  }

  function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
  }

  function isObjectEmpty(obj) {
    if (Object.getOwnPropertyNames) {
      return Object.getOwnPropertyNames(obj).length === 0;
    } else {
      var k;

      for (k in obj) {
        if (obj.hasOwnProperty(k)) {
          return false;
        }
      }

      return true;
    }
  }

  function isUndefined(input) {
    return input === void 0;
  }

  function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
  }

  function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
  }

  function map(arr, fn) {
    var res = [],
        i;

    for (i = 0; i < arr.length; ++i) {
      res.push(fn(arr[i], i));
    }

    return res;
  }

  function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }

  function extend(a, b) {
    for (var i in b) {
      if (hasOwnProp(b, i)) {
        a[i] = b[i];
      }
    }

    if (hasOwnProp(b, 'toString')) {
      a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
      a.valueOf = b.valueOf;
    }

    return a;
  }

  function createUTC(input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
  }

  function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
      empty: false,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: false,
      invalidMonth: null,
      invalidFormat: false,
      userInvalidated: false,
      iso: false,
      parsedDateParts: [],
      meridiem: null,
      rfc2822: false,
      weekdayMismatch: false
    };
  }

  function getParsingFlags(m) {
    if (m._pf == null) {
      m._pf = defaultParsingFlags();
    }

    return m._pf;
  }

  var some;

  if (Array.prototype.some) {
    some = Array.prototype.some;
  } else {
    some = function some(fun) {
      var t = Object(this);
      var len = t.length >>> 0;

      for (var i = 0; i < len; i++) {
        if (i in t && fun.call(this, t[i], i, t)) {
          return true;
        }
      }

      return false;
    };
  }

  function isValid(m) {
    if (m._isValid == null) {
      var flags = getParsingFlags(m);
      var parsedParts = some.call(flags.parsedDateParts, function (i) {
        return i != null;
      });
      var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

      if (m._strict) {
        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
      }

      if (Object.isFrozen == null || !Object.isFrozen(m)) {
        m._isValid = isNowValid;
      } else {
        return isNowValid;
      }
    }

    return m._isValid;
  }

  function createInvalid(flags) {
    var m = createUTC(NaN);

    if (flags != null) {
      extend(getParsingFlags(m), flags);
    } else {
      getParsingFlags(m).userInvalidated = true;
    }

    return m;
  } // Plugins that add properties should also add the key here (null value),
  // so we can properly clone ourselves.


  var momentProperties = hooks.momentProperties = [];

  function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
      to._isAMomentObject = from._isAMomentObject;
    }

    if (!isUndefined(from._i)) {
      to._i = from._i;
    }

    if (!isUndefined(from._f)) {
      to._f = from._f;
    }

    if (!isUndefined(from._l)) {
      to._l = from._l;
    }

    if (!isUndefined(from._strict)) {
      to._strict = from._strict;
    }

    if (!isUndefined(from._tzm)) {
      to._tzm = from._tzm;
    }

    if (!isUndefined(from._isUTC)) {
      to._isUTC = from._isUTC;
    }

    if (!isUndefined(from._offset)) {
      to._offset = from._offset;
    }

    if (!isUndefined(from._pf)) {
      to._pf = getParsingFlags(from);
    }

    if (!isUndefined(from._locale)) {
      to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
      for (i = 0; i < momentProperties.length; i++) {
        prop = momentProperties[i];
        val = from[prop];

        if (!isUndefined(val)) {
          to[prop] = val;
        }
      }
    }

    return to;
  }

  var updateInProgress = false; // Moment prototype object

  function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);

    if (!this.isValid()) {
      this._d = new Date(NaN);
    } // Prevent infinite loop in case updateOffset creates new moment
    // objects.


    if (updateInProgress === false) {
      updateInProgress = true;
      hooks.updateOffset(this);
      updateInProgress = false;
    }
  }

  function isMoment(obj) {
    return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
  }

  function absFloor(number) {
    if (number < 0) {
      // -0 -> 0
      return Math.ceil(number) || 0;
    } else {
      return Math.floor(number);
    }
  }

  function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
      value = absFloor(coercedNumber);
    }

    return value;
  } // compare two arrays, return the number of differences


  function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;

    for (i = 0; i < len; i++) {
      if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
        diffs++;
      }
    }

    return diffs + lengthDiff;
  }

  function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
      console.warn('Deprecation warning: ' + msg);
    }
  }

  function deprecate(msg, fn) {
    var firstTime = true;
    return extend(function () {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(null, msg);
      }

      if (firstTime) {
        var args = [];
        var arg;

        for (var i = 0; i < arguments.length; i++) {
          arg = '';

          if (_typeof(arguments[i]) === 'object') {
            arg += '\n[' + i + '] ';

            for (var key in arguments[0]) {
              arg += key + ': ' + arguments[0][key] + ', ';
            }

            arg = arg.slice(0, -2); // Remove trailing comma and space
          } else {
            arg = arguments[i];
          }

          args.push(arg);
        }

        warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
        firstTime = false;
      }

      return fn.apply(this, arguments);
    }, fn);
  }

  var deprecations = {};

  function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(name, msg);
    }

    if (!deprecations[name]) {
      warn(msg);
      deprecations[name] = true;
    }
  }

  hooks.suppressDeprecationWarnings = false;
  hooks.deprecationHandler = null;

  function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
  }

  function set(config) {
    var prop, i;

    for (i in config) {
      prop = config[i];

      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this['_' + i] = prop;
      }
    }

    this._config = config; // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.

    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
  }

  function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig),
        prop;

    for (prop in childConfig) {
      if (hasOwnProp(childConfig, prop)) {
        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
          res[prop] = {};
          extend(res[prop], parentConfig[prop]);
          extend(res[prop], childConfig[prop]);
        } else if (childConfig[prop] != null) {
          res[prop] = childConfig[prop];
        } else {
          delete res[prop];
        }
      }
    }

    for (prop in parentConfig) {
      if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
        // make sure changes to properties don't modify parent config
        res[prop] = extend({}, res[prop]);
      }
    }

    return res;
  }

  function Locale(config) {
    if (config != null) {
      this.set(config);
    }
  }

  var keys;

  if (Object.keys) {
    keys = Object.keys;
  } else {
    keys = function keys(obj) {
      var i,
          res = [];

      for (i in obj) {
        if (hasOwnProp(obj, i)) {
          res.push(i);
        }
      }

      return res;
    };
  }

  var defaultCalendar = {
    sameDay: '[Today at] LT',
    nextDay: '[Tomorrow at] LT',
    nextWeek: 'dddd [at] LT',
    lastDay: '[Yesterday at] LT',
    lastWeek: '[Last] dddd [at] LT',
    sameElse: 'L'
  };

  function calendar(key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
  }

  var defaultLongDateFormat = {
    LTS: 'h:mm:ss A',
    LT: 'h:mm A',
    L: 'MM/DD/YYYY',
    LL: 'MMMM D, YYYY',
    LLL: 'MMMM D, YYYY h:mm A',
    LLLL: 'dddd, MMMM D, YYYY h:mm A'
  };

  function longDateFormat(key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
      return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
      return val.slice(1);
    });
    return this._longDateFormat[key];
  }

  var defaultInvalidDate = 'Invalid date';

  function invalidDate() {
    return this._invalidDate;
  }

  var defaultOrdinal = '%d';
  var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

  function ordinal(number) {
    return this._ordinal.replace('%d', number);
  }

  var defaultRelativeTime = {
    future: 'in %s',
    past: '%s ago',
    s: 'a few seconds',
    ss: '%d seconds',
    m: 'a minute',
    mm: '%d minutes',
    h: 'an hour',
    hh: '%d hours',
    d: 'a day',
    dd: '%d days',
    M: 'a month',
    MM: '%d months',
    y: 'a year',
    yy: '%d years'
  };

  function relativeTime(number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
  }

  function pastFuture(diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
  }

  var aliases = {};

  function addUnitAlias(unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
  }

  function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
  }

  function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
      if (hasOwnProp(inputObject, prop)) {
        normalizedProp = normalizeUnits(prop);

        if (normalizedProp) {
          normalizedInput[normalizedProp] = inputObject[prop];
        }
      }
    }

    return normalizedInput;
  }

  var priorities = {};

  function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
  }

  function getPrioritizedUnits(unitsObj) {
    var units = [];

    for (var u in unitsObj) {
      units.push({
        unit: u,
        priority: priorities[u]
      });
    }

    units.sort(function (a, b) {
      return a.priority - b.priority;
    });
    return units;
  }

  function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
  }

  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
  var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
  var formatFunctions = {};
  var formatTokenFunctions = {}; // token:    'M'
  // padded:   ['MM', 2]
  // ordinal:  'Mo'
  // callback: function () { this.month() + 1 }

  function addFormatToken(token, padded, ordinal, callback) {
    var func = callback;

    if (typeof callback === 'string') {
      func = function func() {
        return this[callback]();
      };
    }

    if (token) {
      formatTokenFunctions[token] = func;
    }

    if (padded) {
      formatTokenFunctions[padded[0]] = function () {
        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
      };
    }

    if (ordinal) {
      formatTokenFunctions[ordinal] = function () {
        return this.localeData().ordinal(func.apply(this, arguments), token);
      };
    }
  }

  function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
      return input.replace(/^\[|\]$/g, '');
    }

    return input.replace(/\\/g, '');
  }

  function makeFormatFunction(format) {
    var array = format.match(formattingTokens),
        i,
        length;

    for (i = 0, length = array.length; i < length; i++) {
      if (formatTokenFunctions[array[i]]) {
        array[i] = formatTokenFunctions[array[i]];
      } else {
        array[i] = removeFormattingTokens(array[i]);
      }
    }

    return function (mom) {
      var output = '',
          i;

      for (i = 0; i < length; i++) {
        output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
      }

      return output;
    };
  } // format date using native date object


  function formatMoment(m, format) {
    if (!m.isValid()) {
      return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
    return formatFunctions[format](m);
  }

  function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
      return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;

    while (i >= 0 && localFormattingTokens.test(format)) {
      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
      localFormattingTokens.lastIndex = 0;
      i -= 1;
    }

    return format;
  }

  var match1 = /\d/; //       0 - 9

  var match2 = /\d\d/; //      00 - 99

  var match3 = /\d{3}/; //     000 - 999

  var match4 = /\d{4}/; //    0000 - 9999

  var match6 = /[+-]?\d{6}/; // -999999 - 999999

  var match1to2 = /\d\d?/; //       0 - 99

  var match3to4 = /\d\d\d\d?/; //     999 - 9999

  var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999

  var match1to3 = /\d{1,3}/; //       0 - 999

  var match1to4 = /\d{1,4}/; //       0 - 9999

  var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

  var matchUnsigned = /\d+/; //       0 - inf

  var matchSigned = /[+-]?\d+/; //    -inf - inf

  var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

  var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

  var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
  // any word (or two) characters or numbers including two/three word month in arabic.
  // includes scottish gaelic two word and hyphenated months

  var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
  var regexes = {};

  function addRegexToken(token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
      return isStrict && strictRegex ? strictRegex : regex;
    };
  }

  function getParseRegexForToken(token, config) {
    if (!hasOwnProp(regexes, token)) {
      return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
  } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript


  function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
      return p1 || p2 || p3 || p4;
    }));
  }

  function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  var tokens = {};

  function addParseToken(token, callback) {
    var i,
        func = callback;

    if (typeof token === 'string') {
      token = [token];
    }

    if (isNumber(callback)) {
      func = function func(input, array) {
        array[callback] = toInt(input);
      };
    }

    for (i = 0; i < token.length; i++) {
      tokens[token[i]] = func;
    }
  }

  function addWeekParseToken(token, callback) {
    addParseToken(token, function (input, array, config, token) {
      config._w = config._w || {};
      callback(input, config._w, config, token);
    });
  }

  function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
      tokens[token](input, config._a, config, token);
    }
  }

  var YEAR = 0;
  var MONTH = 1;
  var DATE = 2;
  var HOUR = 3;
  var MINUTE = 4;
  var SECOND = 5;
  var MILLISECOND = 6;
  var WEEK = 7;
  var WEEKDAY = 8; // FORMATTING

  addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
  });
  addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
  });
  addFormatToken(0, ['YYYY', 4], 0, 'year');
  addFormatToken(0, ['YYYYY', 5], 0, 'year');
  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES

  addUnitAlias('year', 'y'); // PRIORITIES

  addUnitPriority('year', 1); // PARSING

  addRegexToken('Y', matchSigned);
  addRegexToken('YY', match1to2, match2);
  addRegexToken('YYYY', match1to4, match4);
  addRegexToken('YYYYY', match1to6, match6);
  addRegexToken('YYYYYY', match1to6, match6);
  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
  addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
  });
  addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
  });
  addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
  }); // HELPERS

  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }

  function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  } // HOOKS


  hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
  }; // MOMENTS


  var getSetYear = makeGetSet('FullYear', true);

  function getIsLeapYear() {
    return isLeapYear(this.year());
  }

  function makeGetSet(unit, keepTime) {
    return function (value) {
      if (value != null) {
        set$1(this, unit, value);
        hooks.updateOffset(this, keepTime);
        return this;
      } else {
        return get(this, unit);
      }
    };
  }

  function get(mom, unit) {
    return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
  }

  function set$1(mom, unit, value) {
    if (mom.isValid() && !isNaN(value)) {
      if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
      } else {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
      }
    }
  } // MOMENTS


  function stringGet(units) {
    units = normalizeUnits(units);

    if (isFunction(this[units])) {
      return this[units]();
    }

    return this;
  }

  function stringSet(units, value) {
    if (_typeof(units) === 'object') {
      units = normalizeObjectUnits(units);
      var prioritized = getPrioritizedUnits(units);

      for (var i = 0; i < prioritized.length; i++) {
        this[prioritized[i].unit](units[prioritized[i].unit]);
      }
    } else {
      units = normalizeUnits(units);

      if (isFunction(this[units])) {
        return this[units](value);
      }
    }

    return this;
  }

  function mod(n, x) {
    return (n % x + x) % x;
  }

  var indexOf;

  if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
  } else {
    indexOf = function indexOf(o) {
      // I know
      var i;

      for (i = 0; i < this.length; ++i) {
        if (this[i] === o) {
          return i;
        }
      }

      return -1;
    };
  }

  function daysInMonth(year, month) {
    if (isNaN(year) || isNaN(month)) {
      return NaN;
    }

    var modMonth = mod(month, 12);
    year += (month - modMonth) / 12;
    return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
  } // FORMATTING


  addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
  });
  addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
  });
  addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
  }); // ALIASES

  addUnitAlias('month', 'M'); // PRIORITY

  addUnitPriority('month', 8); // PARSING

  addRegexToken('M', match1to2);
  addRegexToken('MM', match1to2, match2);
  addRegexToken('MMM', function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
  });
  addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
  });
  addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
  });
  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.


    if (month != null) {
      array[MONTH] = month;
    } else {
      getParsingFlags(config).invalidMonth = input;
    }
  }); // LOCALES

  var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

  function localeMonths(m, format) {
    if (!m) {
      return isArray(this._months) ? this._months : this._months['standalone'];
    }

    return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
  }

  var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

  function localeMonthsShort(m, format) {
    if (!m) {
      return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
    }

    return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
  }

  function handleStrictParse(monthName, format, strict) {
    var i,
        ii,
        mom,
        llc = monthName.toLocaleLowerCase();

    if (!this._monthsParse) {
      // this is not used
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];

      for (i = 0; i < 12; ++i) {
        mom = createUTC([2000, i]);
        this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
      }
    }

    if (strict) {
      if (format === 'MMM') {
        ii = indexOf.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    } else {
      if (format === 'MMM') {
        ii = indexOf.call(this._shortMonthsParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._longMonthsParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    }
  }

  function localeMonthsParse(monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
      return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];
    } // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse


    for (i = 0; i < 12; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, i]);

      if (strict && !this._longMonthsParse[i]) {
        this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
        this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
      }

      if (!strict && !this._monthsParse[i]) {
        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
      } // test the regex


      if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
        return i;
      } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
        return i;
      } else if (!strict && this._monthsParse[i].test(monthName)) {
        return i;
      }
    }
  } // MOMENTS


  function setMonth(mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
      // No op
      return mom;
    }

    if (typeof value === 'string') {
      if (/^\d+$/.test(value)) {
        value = toInt(value);
      } else {
        value = mom.localeData().monthsParse(value); // TODO: Another silent failure?

        if (!isNumber(value)) {
          return mom;
        }
      }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

    return mom;
  }

  function getSetMonth(value) {
    if (value != null) {
      setMonth(this, value);
      hooks.updateOffset(this, true);
      return this;
    } else {
      return get(this, 'Month');
    }
  }

  function getDaysInMonth() {
    return daysInMonth(this.year(), this.month());
  }

  var defaultMonthsShortRegex = matchWord;

  function monthsShortRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, '_monthsRegex')) {
        computeMonthsParse.call(this);
      }

      if (isStrict) {
        return this._monthsShortStrictRegex;
      } else {
        return this._monthsShortRegex;
      }
    } else {
      if (!hasOwnProp(this, '_monthsShortRegex')) {
        this._monthsShortRegex = defaultMonthsShortRegex;
      }

      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
    }
  }

  var defaultMonthsRegex = matchWord;

  function monthsRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, '_monthsRegex')) {
        computeMonthsParse.call(this);
      }

      if (isStrict) {
        return this._monthsStrictRegex;
      } else {
        return this._monthsRegex;
      }
    } else {
      if (!hasOwnProp(this, '_monthsRegex')) {
        this._monthsRegex = defaultMonthsRegex;
      }

      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
    }
  }

  function computeMonthsParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }

    var shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom;

    for (i = 0; i < 12; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, i]);
      shortPieces.push(this.monthsShort(mom, ''));
      longPieces.push(this.months(mom, ''));
      mixedPieces.push(this.months(mom, ''));
      mixedPieces.push(this.monthsShort(mom, ''));
    } // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.


    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);

    for (i = 0; i < 12; i++) {
      shortPieces[i] = regexEscape(shortPieces[i]);
      longPieces[i] = regexEscape(longPieces[i]);
    }

    for (i = 0; i < 24; i++) {
      mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
  }

  function createDate(y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    var date = new Date(y, m, d, h, M, s, ms); // the date constructor remaps years 0-99 to 1900-1999

    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
      date.setFullYear(y);
    }

    return date;
  }

  function createUTCDate(y) {
    var date = new Date(Date.UTC.apply(null, arguments)); // the Date.UTC function remaps years 0-99 to 1900-1999

    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
      date.setUTCFullYear(y);
    }

    return date;
  } // start-of-first-week - start-of-year


  function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
    fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
    fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
    return -fwdlw + fwd - 1;
  } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday


  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear,
        resDayOfYear;

    if (dayOfYear <= 0) {
      resYear = year - 1;
      resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
      resYear = year + 1;
      resDayOfYear = dayOfYear - daysInYear(year);
    } else {
      resYear = year;
      resDayOfYear = dayOfYear;
    }

    return {
      year: resYear,
      dayOfYear: resDayOfYear
    };
  }

  function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek,
        resYear;

    if (week < 1) {
      resYear = mom.year() - 1;
      resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
      resWeek = week - weeksInYear(mom.year(), dow, doy);
      resYear = mom.year() + 1;
    } else {
      resYear = mom.year();
      resWeek = week;
    }

    return {
      week: resWeek,
      year: resYear
    };
  }

  function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
  } // FORMATTING


  addFormatToken('w', ['ww', 2], 'wo', 'week');
  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES

  addUnitAlias('week', 'w');
  addUnitAlias('isoWeek', 'W'); // PRIORITIES

  addUnitPriority('week', 5);
  addUnitPriority('isoWeek', 5); // PARSING

  addRegexToken('w', match1to2);
  addRegexToken('ww', match1to2, match2);
  addRegexToken('W', match1to2);
  addRegexToken('WW', match1to2, match2);
  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
  }); // HELPERS
  // LOCALES

  function localeWeek(mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
  }

  var defaultLocaleWeek = {
    dow: 0,
    // Sunday is the first day of the week.
    doy: 6 // The week that contains Jan 1st is the first week of the year.

  };

  function localeFirstDayOfWeek() {
    return this._week.dow;
  }

  function localeFirstDayOfYear() {
    return this._week.doy;
  } // MOMENTS


  function getSetWeek(input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
  }

  function getSetISOWeek(input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
  } // FORMATTING


  addFormatToken('d', 0, 'do', 'day');
  addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
  });
  addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
  });
  addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
  });
  addFormatToken('e', 0, 0, 'weekday');
  addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES

  addUnitAlias('day', 'd');
  addUnitAlias('weekday', 'e');
  addUnitAlias('isoWeekday', 'E'); // PRIORITY

  addUnitPriority('day', 11);
  addUnitPriority('weekday', 11);
  addUnitPriority('isoWeekday', 11); // PARSING

  addRegexToken('d', match1to2);
  addRegexToken('e', match1to2);
  addRegexToken('E', match1to2);
  addRegexToken('dd', function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
  });
  addRegexToken('ddd', function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
  });
  addRegexToken('dddd', function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
  });
  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid


    if (weekday != null) {
      week.d = weekday;
    } else {
      getParsingFlags(config).invalidWeekday = input;
    }
  });
  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
  }); // HELPERS

  function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
      return input;
    }

    if (!isNaN(input)) {
      return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);

    if (typeof input === 'number') {
      return input;
    }

    return null;
  }

  function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
      return locale.weekdaysParse(input) % 7 || 7;
    }

    return isNaN(input) ? null : input;
  } // LOCALES


  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

  function localeWeekdays(m, format) {
    if (!m) {
      return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];
    }

    return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
  }

  var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

  function localeWeekdaysShort(m) {
    return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
  }

  var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

  function localeWeekdaysMin(m) {
    return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
  }

  function handleStrictParse$1(weekdayName, format, strict) {
    var i,
        ii,
        mom,
        llc = weekdayName.toLocaleLowerCase();

    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._minWeekdaysParse = [];

      for (i = 0; i < 7; ++i) {
        mom = createUTC([2000, 1]).day(i);
        this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
      }
    }

    if (strict) {
      if (format === 'dddd') {
        ii = indexOf.call(this._weekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else if (format === 'ddd') {
        ii = indexOf.call(this._shortWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      }
    } else {
      if (format === 'dddd') {
        ii = indexOf.call(this._weekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._shortWeekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else if (format === 'ddd') {
        ii = indexOf.call(this._shortWeekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._weekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._minWeekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._weekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._shortWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      }
    }
  }

  function localeWeekdaysParse(weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
      return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._minWeekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, 1]).day(i);

      if (strict && !this._fullWeekdaysParse[i]) {
        this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
        this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
        this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
      }

      if (!this._weekdaysParse[i]) {
        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
      } // test the regex


      if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
        return i;
      } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
        return i;
      } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
        return i;
      } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
        return i;
      }
    }
  } // MOMENTS


  function getSetDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }

    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

    if (input != null) {
      input = parseWeekday(input, this.localeData());
      return this.add(input - day, 'd');
    } else {
      return day;
    }
  }

  function getSetLocaleDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }

    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
  }

  function getSetISODayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    } // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.


    if (input != null) {
      var weekday = parseIsoWeekday(input, this.localeData());
      return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
      return this.day() || 7;
    }
  }

  var defaultWeekdaysRegex = matchWord;

  function weekdaysRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }

      if (isStrict) {
        return this._weekdaysStrictRegex;
      } else {
        return this._weekdaysRegex;
      }
    } else {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        this._weekdaysRegex = defaultWeekdaysRegex;
      }

      return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
    }
  }

  var defaultWeekdaysShortRegex = matchWord;

  function weekdaysShortRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }

      if (isStrict) {
        return this._weekdaysShortStrictRegex;
      } else {
        return this._weekdaysShortRegex;
      }
    } else {
      if (!hasOwnProp(this, '_weekdaysShortRegex')) {
        this._weekdaysShortRegex = defaultWeekdaysShortRegex;
      }

      return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
  }

  var defaultWeekdaysMinRegex = matchWord;

  function weekdaysMinRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }

      if (isStrict) {
        return this._weekdaysMinStrictRegex;
      } else {
        return this._weekdaysMinRegex;
      }
    } else {
      if (!hasOwnProp(this, '_weekdaysMinRegex')) {
        this._weekdaysMinRegex = defaultWeekdaysMinRegex;
      }

      return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
  }

  function computeWeekdaysParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }

    var minPieces = [],
        shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom,
        minp,
        shortp,
        longp;

    for (i = 0; i < 7; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, 1]).day(i);
      minp = this.weekdaysMin(mom, '');
      shortp = this.weekdaysShort(mom, '');
      longp = this.weekdays(mom, '');
      minPieces.push(minp);
      shortPieces.push(shortp);
      longPieces.push(longp);
      mixedPieces.push(minp);
      mixedPieces.push(shortp);
      mixedPieces.push(longp);
    } // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.


    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);

    for (i = 0; i < 7; i++) {
      shortPieces[i] = regexEscape(shortPieces[i]);
      longPieces[i] = regexEscape(longPieces[i]);
      mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;
    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
  } // FORMATTING


  function hFormat() {
    return this.hours() % 12 || 12;
  }

  function kFormat() {
    return this.hours() || 24;
  }

  addFormatToken('H', ['HH', 2], 0, 'hour');
  addFormatToken('h', ['hh', 2], 0, hFormat);
  addFormatToken('k', ['kk', 2], 0, kFormat);
  addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
  });
  addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
  });
  addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
  });
  addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
  });

  function meridiem(token, lowercase) {
    addFormatToken(token, 0, 0, function () {
      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
  }

  meridiem('a', true);
  meridiem('A', false); // ALIASES

  addUnitAlias('hour', 'h'); // PRIORITY

  addUnitPriority('hour', 13); // PARSING

  function matchMeridiem(isStrict, locale) {
    return locale._meridiemParse;
  }

  addRegexToken('a', matchMeridiem);
  addRegexToken('A', matchMeridiem);
  addRegexToken('H', match1to2);
  addRegexToken('h', match1to2);
  addRegexToken('k', match1to2);
  addRegexToken('HH', match1to2, match2);
  addRegexToken('hh', match1to2, match2);
  addRegexToken('kk', match1to2, match2);
  addRegexToken('hmm', match3to4);
  addRegexToken('hmmss', match5to6);
  addRegexToken('Hmm', match3to4);
  addRegexToken('Hmmss', match5to6);
  addParseToken(['H', 'HH'], HOUR);
  addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
  });
  addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
  });
  addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
  });
  addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
  }); // LOCALES

  function localeIsPM(input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return (input + '').toLowerCase().charAt(0) === 'p';
  }

  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

  function localeMeridiem(hours, minutes, isLower) {
    if (hours > 11) {
      return isLower ? 'pm' : 'PM';
    } else {
      return isLower ? 'am' : 'AM';
    }
  } // MOMENTS
  // Setting the hour should keep the time, because the user explicitly
  // specified which hour they want. So trying to maintain the same hour (in
  // a new timezone) makes sense. Adding/subtracting hours does not follow
  // this rule.


  var getSetHour = makeGetSet('Hours', true);
  var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,
    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,
    week: defaultLocaleWeek,
    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,
    meridiemParse: defaultLocaleMeridiemParse
  }; // internal storage for locale config files

  var locales = {};
  var localeFamilies = {};
  var globalLocale;

  function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
  } // pick the locale from the array
  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root


  function chooseLocale(names) {
    var i = 0,
        j,
        next,
        locale,
        split;

    while (i < names.length) {
      split = normalizeLocale(names[i]).split('-');
      j = split.length;
      next = normalizeLocale(names[i + 1]);
      next = next ? next.split('-') : null;

      while (j > 0) {
        locale = loadLocale(split.slice(0, j).join('-'));

        if (locale) {
          return locale;
        }

        if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
          //the next array item is better than a shallower substring of this one
          break;
        }

        j--;
      }

      i++;
    }

    return globalLocale;
  }

  function loadLocale(name) {
    var oldLocale = null; // TODO: Find a better way to register and load all the locales in Node

    if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
      try {
        oldLocale = globalLocale._abbr;
        var aliasedRequire = require;
        !(function webpackMissingModule() { var e = new Error("Cannot find module 'undefined'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
        getSetGlobalLocale(oldLocale);
      } catch (e) {}
    }

    return locales[name];
  } // This function will load locale and then set the global locale.  If
  // no arguments are passed in, it will simply return the current global
  // locale key.


  function getSetGlobalLocale(key, values) {
    var data;

    if (key) {
      if (isUndefined(values)) {
        data = getLocale(key);
      } else {
        data = defineLocale(key, values);
      }

      if (data) {
        // moment.duration._locale = moment._locale = data;
        globalLocale = data;
      } else {
        if (typeof console !== 'undefined' && console.warn) {
          //warn user if arguments are passed but the locale could not be set
          console.warn('Locale ' + key + ' not found. Did you forget to load it?');
        }
      }
    }

    return globalLocale._abbr;
  }

  function defineLocale(name, config) {
    if (config !== null) {
      var locale,
          parentConfig = baseConfig;
      config.abbr = name;

      if (locales[name] != null) {
        deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
        parentConfig = locales[name]._config;
      } else if (config.parentLocale != null) {
        if (locales[config.parentLocale] != null) {
          parentConfig = locales[config.parentLocale]._config;
        } else {
          locale = loadLocale(config.parentLocale);

          if (locale != null) {
            parentConfig = locale._config;
          } else {
            if (!localeFamilies[config.parentLocale]) {
              localeFamilies[config.parentLocale] = [];
            }

            localeFamilies[config.parentLocale].push({
              name: name,
              config: config
            });
            return null;
          }
        }
      }

      locales[name] = new Locale(mergeConfigs(parentConfig, config));

      if (localeFamilies[name]) {
        localeFamilies[name].forEach(function (x) {
          defineLocale(x.name, x.config);
        });
      } // backwards compat for now: also set the locale
      // make sure we set the locale AFTER all child locales have been
      // created, so we won't end up with the child locale set.


      getSetGlobalLocale(name);
      return locales[name];
    } else {
      // useful for testing
      delete locales[name];
      return null;
    }
  }

  function updateLocale(name, config) {
    if (config != null) {
      var locale,
          tmpLocale,
          parentConfig = baseConfig; // MERGE

      tmpLocale = loadLocale(name);

      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }

      config = mergeConfigs(parentConfig, config);
      locale = new Locale(config);
      locale.parentLocale = locales[name];
      locales[name] = locale; // backwards compat for now: also set the locale

      getSetGlobalLocale(name);
    } else {
      // pass null for config to unupdate, useful for tests
      if (locales[name] != null) {
        if (locales[name].parentLocale != null) {
          locales[name] = locales[name].parentLocale;
        } else if (locales[name] != null) {
          delete locales[name];
        }
      }
    }

    return locales[name];
  } // returns locale data


  function getLocale(key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
      key = key._locale._abbr;
    }

    if (!key) {
      return globalLocale;
    }

    if (!isArray(key)) {
      //short-circuit everything else
      locale = loadLocale(key);

      if (locale) {
        return locale;
      }

      key = [key];
    }

    return chooseLocale(key);
  }

  function listLocales() {
    return keys(locales);
  }

  function checkOverflow(m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
        overflow = DATE;
      }

      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
        overflow = WEEK;
      }

      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
        overflow = WEEKDAY;
      }

      getParsingFlags(m).overflow = overflow;
    }

    return m;
  } // Pick the first defined of two or three arguments.


  function defaults(a, b, c) {
    if (a != null) {
      return a;
    }

    if (b != null) {
      return b;
    }

    return c;
  }

  function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());

    if (config._useUTC) {
      return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }

    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
  } // convert an array to a date.
  // the array should mirror the parameters below
  // note: all values past the year are optional and will default to the lowest possible value.
  // [year, month, day , hour, minute, second, millisecond]


  function configFromArray(config) {
    var i,
        date,
        input = [],
        currentDate,
        expectedWeekday,
        yearToUse;

    if (config._d) {
      return;
    }

    currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays

    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
      dayOfYearFromWeekInfo(config);
    } //if the day of the year is set, figure out what it is


    if (config._dayOfYear != null) {
      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

      if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
        getParsingFlags(config)._overflowDayOfYear = true;
      }

      date = createUTCDate(yearToUse, 0, config._dayOfYear);
      config._a[MONTH] = date.getUTCMonth();
      config._a[DATE] = date.getUTCDate();
    } // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything


    for (i = 0; i < 3 && config._a[i] == null; ++i) {
      config._a[i] = input[i] = currentDate[i];
    } // Zero out whatever was not defaulted, including time


    for (; i < 7; i++) {
      config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
    } // Check for 24:00:00.000


    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
      config._nextDay = true;
      config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.

    if (config._tzm != null) {
      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
      config._a[HOUR] = 24;
    } // check for mismatching day of week


    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
      getParsingFlags(config).weekdayMismatch = true;
    }
  }

  function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
    w = config._w;

    if (w.GG != null || w.W != null || w.E != null) {
      dow = 1;
      doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on
      // how we interpret now (local, utc, fixed offset). So create
      // a now version of current config (take local/utc/offset flags, and
      // create now).

      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
      week = defaults(w.W, 1);
      weekday = defaults(w.E, 1);

      if (weekday < 1 || weekday > 7) {
        weekdayOverflow = true;
      }
    } else {
      dow = config._locale._week.dow;
      doy = config._locale._week.doy;
      var curWeek = weekOfYear(createLocal(), dow, doy);
      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.

      week = defaults(w.w, curWeek.week);

      if (w.d != null) {
        // weekday -- low day numbers are considered next week
        weekday = w.d;

        if (weekday < 0 || weekday > 6) {
          weekdayOverflow = true;
        }
      } else if (w.e != null) {
        // local weekday -- counting starts from begining of week
        weekday = w.e + dow;

        if (w.e < 0 || w.e > 6) {
          weekdayOverflow = true;
        }
      } else {
        // default to begining of week
        weekday = dow;
      }
    }

    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
      getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
      getParsingFlags(config)._overflowWeekday = true;
    } else {
      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
      config._a[YEAR] = temp.year;
      config._dayOfYear = temp.dayOfYear;
    }
  } // iso 8601 regex
  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)


  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
  var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], // YYYYMM is NOT allowed by the standard
  ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]]; // iso time formats and regexes

  var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
  var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i; // date from iso format

  function configFromISO(config) {
    var i,
        l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime,
        dateFormat,
        timeFormat,
        tzFormat;

    if (match) {
      getParsingFlags(config).iso = true;

      for (i = 0, l = isoDates.length; i < l; i++) {
        if (isoDates[i][1].exec(match[1])) {
          dateFormat = isoDates[i][0];
          allowTime = isoDates[i][2] !== false;
          break;
        }
      }

      if (dateFormat == null) {
        config._isValid = false;
        return;
      }

      if (match[3]) {
        for (i = 0, l = isoTimes.length; i < l; i++) {
          if (isoTimes[i][1].exec(match[3])) {
            // match[2] should be 'T' or space
            timeFormat = (match[2] || ' ') + isoTimes[i][0];
            break;
          }
        }

        if (timeFormat == null) {
          config._isValid = false;
          return;
        }
      }

      if (!allowTime && timeFormat != null) {
        config._isValid = false;
        return;
      }

      if (match[4]) {
        if (tzRegex.exec(match[4])) {
          tzFormat = 'Z';
        } else {
          config._isValid = false;
          return;
        }
      }

      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
      configFromStringAndFormat(config);
    } else {
      config._isValid = false;
    }
  } // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3


  var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

    if (secondStr) {
      result.push(parseInt(secondStr, 10));
    }

    return result;
  }

  function untruncateYear(yearStr) {
    var year = parseInt(yearStr, 10);

    if (year <= 49) {
      return 2000 + year;
    } else if (year <= 999) {
      return 1900 + year;
    }

    return year;
  }

  function preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  }

  function checkWeekday(weekdayStr, parsedInput, config) {
    if (weekdayStr) {
      // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
      var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
          weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

      if (weekdayProvided !== weekdayActual) {
        getParsingFlags(config).weekdayMismatch = true;
        config._isValid = false;
        return false;
      }
    }

    return true;
  }

  var obsOffsets = {
    UT: 0,
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
  };

  function calculateOffset(obsOffset, militaryOffset, numOffset) {
    if (obsOffset) {
      return obsOffsets[obsOffset];
    } else if (militaryOffset) {
      // the only allowed military tz is Z
      return 0;
    } else {
      var hm = parseInt(numOffset, 10);
      var m = hm % 100,
          h = (hm - m) / 100;
      return h * 60 + m;
    }
  } // date and time from ref 2822 format


  function configFromRFC2822(config) {
    var match = rfc2822.exec(preprocessRFC2822(config._i));

    if (match) {
      var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

      if (!checkWeekday(match[1], parsedArray, config)) {
        return;
      }

      config._a = parsedArray;
      config._tzm = calculateOffset(match[8], match[9], match[10]);
      config._d = createUTCDate.apply(null, config._a);

      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

      getParsingFlags(config).rfc2822 = true;
    } else {
      config._isValid = false;
    }
  } // date from iso format or fallback


  function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
      config._d = new Date(+matched[1]);
      return;
    }

    configFromISO(config);

    if (config._isValid === false) {
      delete config._isValid;
    } else {
      return;
    }

    configFromRFC2822(config);

    if (config._isValid === false) {
      delete config._isValid;
    } else {
      return;
    } // Final attempt, use Input Fallback


    hooks.createFromInputFallback(config);
  }

  hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
  }); // constant that refers to the ISO standard

  hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form


  hooks.RFC_2822 = function () {}; // date from string and format string


  function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
      configFromISO(config);
      return;
    }

    if (config._f === hooks.RFC_2822) {
      configFromRFC2822(config);
      return;
    }

    config._a = [];
    getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`

    var string = '' + config._i,
        i,
        parsedInput,
        tokens,
        token,
        skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;
    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
      token = tokens[i];
      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0]; // console.log('token', token, 'parsedInput', parsedInput,
      //         'regex', getParseRegexForToken(token, config));

      if (parsedInput) {
        skipped = string.substr(0, string.indexOf(parsedInput));

        if (skipped.length > 0) {
          getParsingFlags(config).unusedInput.push(skipped);
        }

        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
        totalParsedInputLength += parsedInput.length;
      } // don't parse if it's not a known token


      if (formatTokenFunctions[token]) {
        if (parsedInput) {
          getParsingFlags(config).empty = false;
        } else {
          getParsingFlags(config).unusedTokens.push(token);
        }

        addTimeToArrayFromToken(token, parsedInput, config);
      } else if (config._strict && !parsedInput) {
        getParsingFlags(config).unusedTokens.push(token);
      }
    } // add remaining unparsed input length to the string


    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

    if (string.length > 0) {
      getParsingFlags(config).unusedInput.push(string);
    } // clear _12h flag if hour is <= 12


    if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
      getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem; // handle meridiem

    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
    configFromArray(config);
    checkOverflow(config);
  }

  function meridiemFixWrap(locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
      // nothing to do
      return hour;
    }

    if (locale.meridiemHour != null) {
      return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
      // Fallback
      isPm = locale.isPM(meridiem);

      if (isPm && hour < 12) {
        hour += 12;
      }

      if (!isPm && hour === 12) {
        hour = 0;
      }

      return hour;
    } else {
      // this is not supposed to happen
      return hour;
    }
  } // date from string and array of format strings


  function configFromStringAndArray(config) {
    var tempConfig, bestMoment, scoreToBeat, i, currentScore;

    if (config._f.length === 0) {
      getParsingFlags(config).invalidFormat = true;
      config._d = new Date(NaN);
      return;
    }

    for (i = 0; i < config._f.length; i++) {
      currentScore = 0;
      tempConfig = copyConfig({}, config);

      if (config._useUTC != null) {
        tempConfig._useUTC = config._useUTC;
      }

      tempConfig._f = config._f[i];
      configFromStringAndFormat(tempConfig);

      if (!isValid(tempConfig)) {
        continue;
      } // if there is any input that was not parsed add a penalty for that format


      currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens

      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
      getParsingFlags(tempConfig).score = currentScore;

      if (scoreToBeat == null || currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }

    extend(config, bestMoment || tempConfig);
  }

  function configFromObject(config) {
    if (config._d) {
      return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
      return obj && parseInt(obj, 10);
    });
    configFromArray(config);
  }

  function createFromConfig(config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));

    if (res._nextDay) {
      // Adding is smart enough around DST
      res.add(1, 'd');
      res._nextDay = undefined;
    }

    return res;
  }

  function prepareConfig(config) {
    var input = config._i,
        format = config._f;
    config._locale = config._locale || getLocale(config._l);

    if (input === null || format === undefined && input === '') {
      return createInvalid({
        nullInput: true
      });
    }

    if (typeof input === 'string') {
      config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
      return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
      config._d = input;
    } else if (isArray(format)) {
      configFromStringAndArray(config);
    } else if (format) {
      configFromStringAndFormat(config);
    } else {
      configFromInput(config);
    }

    if (!isValid(config)) {
      config._d = null;
    }

    return config;
  }

  function configFromInput(config) {
    var input = config._i;

    if (isUndefined(input)) {
      config._d = new Date(hooks.now());
    } else if (isDate(input)) {
      config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
      configFromString(config);
    } else if (isArray(input)) {
      config._a = map(input.slice(0), function (obj) {
        return parseInt(obj, 10);
      });
      configFromArray(config);
    } else if (isObject(input)) {
      configFromObject(config);
    } else if (isNumber(input)) {
      // from milliseconds
      config._d = new Date(input);
    } else {
      hooks.createFromInputFallback(config);
    }
  }

  function createLocalOrUTC(input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
      strict = locale;
      locale = undefined;
    }

    if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
      input = undefined;
    } // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423


    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;
    return createFromConfig(c);
  }

  function createLocal(input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
  }

  var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
    var other = createLocal.apply(null, arguments);

    if (this.isValid() && other.isValid()) {
      return other < this ? this : other;
    } else {
      return createInvalid();
    }
  });
  var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
    var other = createLocal.apply(null, arguments);

    if (this.isValid() && other.isValid()) {
      return other > this ? this : other;
    } else {
      return createInvalid();
    }
  }); // Pick a moment m from moments so that m[fn](other) is true for all
  // other. This relies on the function fn to be transitive.
  //
  // moments should either be an array of moment objects or an array, whose
  // first element is an array of moment objects.

  function pickBy(fn, moments) {
    var res, i;

    if (moments.length === 1 && isArray(moments[0])) {
      moments = moments[0];
    }

    if (!moments.length) {
      return createLocal();
    }

    res = moments[0];

    for (i = 1; i < moments.length; ++i) {
      if (!moments[i].isValid() || moments[i][fn](res)) {
        res = moments[i];
      }
    }

    return res;
  } // TODO: Use [].sort instead?


  function min() {
    var args = [].slice.call(arguments, 0);
    return pickBy('isBefore', args);
  }

  function max() {
    var args = [].slice.call(arguments, 0);
    return pickBy('isAfter', args);
  }

  var now = function now() {
    return Date.now ? Date.now() : +new Date();
  };

  var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

  function isDurationValid(m) {
    for (var key in m) {
      if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
        return false;
      }
    }

    var unitHasDecimal = false;

    for (var i = 0; i < ordering.length; ++i) {
      if (m[ordering[i]]) {
        if (unitHasDecimal) {
          return false; // only allow non-integers for smallest unit
        }

        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
          unitHasDecimal = true;
        }
      }
    }

    return true;
  }

  function isValid$1() {
    return this._isValid;
  }

  function createInvalid$1() {
    return createDuration(NaN);
  }

  function Duration(duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;
    this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove

    this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
    minutes * 6e4 + // 1000 * 60
    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately

    this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.

    this._months = +months + quarters * 3 + years * 12;
    this._data = {};
    this._locale = getLocale();

    this._bubble();
  }

  function isDuration(obj) {
    return obj instanceof Duration;
  }

  function absRound(number) {
    if (number < 0) {
      return Math.round(-1 * number) * -1;
    } else {
      return Math.round(number);
    }
  } // FORMATTING


  function offset(token, separator) {
    addFormatToken(token, 0, 0, function () {
      var offset = this.utcOffset();
      var sign = '+';

      if (offset < 0) {
        offset = -offset;
        sign = '-';
      }

      return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
    });
  }

  offset('Z', ':');
  offset('ZZ', ''); // PARSING

  addRegexToken('Z', matchShortOffset);
  addRegexToken('ZZ', matchShortOffset);
  addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
  }); // HELPERS
  // timezone chunker
  // '+10:00' > ['10',  '00']
  // '-1530'  > ['-15', '30']

  var chunkOffset = /([\+\-]|\d\d)/gi;

  function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
      return null;
    }

    var chunk = matches[matches.length - 1] || [];
    var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);
    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
  } // Return a moment from input, that is local/utc/zone equivalent to model.


  function cloneWithOffset(input, model) {
    var res, diff;

    if (model._isUTC) {
      res = model.clone();
      diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.

      res._d.setTime(res._d.valueOf() + diff);

      hooks.updateOffset(res, false);
      return res;
    } else {
      return createLocal(input).local();
    }
  }

  function getDateOffset(m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
  } // HOOKS
  // This function will be called whenever a moment is mutated.
  // It is intended to keep the offset in sync with the timezone.


  hooks.updateOffset = function () {}; // MOMENTS
  // keepLocalTime = true means only change the timezone, without
  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
  // +0200, so we adjust the time as needed, to be valid.
  //
  // Keeping the time actually adds/subtracts (one hour)
  // from the actual represented time. That is why we call updateOffset
  // a second time. In case it wants us to change the offset again
  // _changeInProgress == true case, then we have to adjust, because
  // there is no such time in the given timezone.


  function getSetOffset(input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0,
        localAdjust;

    if (!this.isValid()) {
      return input != null ? this : NaN;
    }

    if (input != null) {
      if (typeof input === 'string') {
        input = offsetFromString(matchShortOffset, input);

        if (input === null) {
          return this;
        }
      } else if (Math.abs(input) < 16 && !keepMinutes) {
        input = input * 60;
      }

      if (!this._isUTC && keepLocalTime) {
        localAdjust = getDateOffset(this);
      }

      this._offset = input;
      this._isUTC = true;

      if (localAdjust != null) {
        this.add(localAdjust, 'm');
      }

      if (offset !== input) {
        if (!keepLocalTime || this._changeInProgress) {
          addSubtract(this, createDuration(input - offset, 'm'), 1, false);
        } else if (!this._changeInProgress) {
          this._changeInProgress = true;
          hooks.updateOffset(this, true);
          this._changeInProgress = null;
        }
      }

      return this;
    } else {
      return this._isUTC ? offset : getDateOffset(this);
    }
  }

  function getSetZone(input, keepLocalTime) {
    if (input != null) {
      if (typeof input !== 'string') {
        input = -input;
      }

      this.utcOffset(input, keepLocalTime);
      return this;
    } else {
      return -this.utcOffset();
    }
  }

  function setOffsetToUTC(keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
  }

  function setOffsetToLocal(keepLocalTime) {
    if (this._isUTC) {
      this.utcOffset(0, keepLocalTime);
      this._isUTC = false;

      if (keepLocalTime) {
        this.subtract(getDateOffset(this), 'm');
      }
    }

    return this;
  }

  function setOffsetToParsedOffset() {
    if (this._tzm != null) {
      this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
      var tZone = offsetFromString(matchOffset, this._i);

      if (tZone != null) {
        this.utcOffset(tZone);
      } else {
        this.utcOffset(0, true);
      }
    }

    return this;
  }

  function hasAlignedHourOffset(input) {
    if (!this.isValid()) {
      return false;
    }

    input = input ? createLocal(input).utcOffset() : 0;
    return (this.utcOffset() - input) % 60 === 0;
  }

  function isDaylightSavingTime() {
    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
  }

  function isDaylightSavingTimeShifted() {
    if (!isUndefined(this._isDSTShifted)) {
      return this._isDSTShifted;
    }

    var c = {};
    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
      var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
      this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
    } else {
      this._isDSTShifted = false;
    }

    return this._isDSTShifted;
  }

  function isLocal() {
    return this.isValid() ? !this._isUTC : false;
  }

  function isUtcOffset() {
    return this.isValid() ? this._isUTC : false;
  }

  function isUtc() {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
  } // ASP.NET json date format regex


  var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/; // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
  // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
  // and further modified to allow for strings containing both week and day

  var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

  function createDuration(input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
    match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
      duration = {
        ms: input._milliseconds,
        d: input._days,
        M: input._months
      };
    } else if (isNumber(input)) {
      duration = {};

      if (key) {
        duration[key] = input;
      } else {
        duration.milliseconds = input;
      }
    } else if (!!(match = aspNetRegex.exec(input))) {
      sign = match[1] === '-' ? -1 : 1;
      duration = {
        y: 0,
        d: toInt(match[DATE]) * sign,
        h: toInt(match[HOUR]) * sign,
        m: toInt(match[MINUTE]) * sign,
        s: toInt(match[SECOND]) * sign,
        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match

      };
    } else if (!!(match = isoRegex.exec(input))) {
      sign = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;
      duration = {
        y: parseIso(match[2], sign),
        M: parseIso(match[3], sign),
        w: parseIso(match[4], sign),
        d: parseIso(match[5], sign),
        h: parseIso(match[6], sign),
        m: parseIso(match[7], sign),
        s: parseIso(match[8], sign)
      };
    } else if (duration == null) {
      // checks for null or undefined
      duration = {};
    } else if (_typeof(duration) === 'object' && ('from' in duration || 'to' in duration)) {
      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
      duration = {};
      duration.ms = diffRes.milliseconds;
      duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
      ret._locale = input._locale;
    }

    return ret;
  }

  createDuration.fn = Duration.prototype;
  createDuration.invalid = createInvalid$1;

  function parseIso(inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it

    return (isNaN(res) ? 0 : res) * sign;
  }

  function positiveMomentsDifference(base, other) {
    var res = {
      milliseconds: 0,
      months: 0
    };
    res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

    if (base.clone().add(res.months, 'M').isAfter(other)) {
      --res.months;
    }

    res.milliseconds = +other - +base.clone().add(res.months, 'M');
    return res;
  }

  function momentsDifference(base, other) {
    var res;

    if (!(base.isValid() && other.isValid())) {
      return {
        milliseconds: 0,
        months: 0
      };
    }

    other = cloneWithOffset(other, base);

    if (base.isBefore(other)) {
      res = positiveMomentsDifference(base, other);
    } else {
      res = positiveMomentsDifference(other, base);
      res.milliseconds = -res.milliseconds;
      res.months = -res.months;
    }

    return res;
  } // TODO: remove 'name' arg after deprecation is removed


  function createAdder(direction, name) {
    return function (val, period) {
      var dur, tmp; //invert the arguments, but complain about it

      if (period !== null && !isNaN(+period)) {
        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
        tmp = val;
        val = period;
        period = tmp;
      }

      val = typeof val === 'string' ? +val : val;
      dur = createDuration(val, period);
      addSubtract(this, dur, direction);
      return this;
    };
  }

  function addSubtract(mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
      // No op
      return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (months) {
      setMonth(mom, get(mom, 'Month') + months * isAdding);
    }

    if (days) {
      set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }

    if (milliseconds) {
      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }

    if (updateOffset) {
      hooks.updateOffset(mom, days || months);
    }
  }

  var add = createAdder(1, 'add');
  var subtract = createAdder(-1, 'subtract');

  function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
  }

  function calendar$1(time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';
    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
  }

  function clone() {
    return new Moment(this);
  }

  function isAfter(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);

    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }

    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');

    if (units === 'millisecond') {
      return this.valueOf() > localInput.valueOf();
    } else {
      return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
  }

  function isBefore(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);

    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }

    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');

    if (units === 'millisecond') {
      return this.valueOf() < localInput.valueOf();
    } else {
      return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
  }

  function isBetween(from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
  }

  function isSame(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;

    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }

    units = normalizeUnits(units || 'millisecond');

    if (units === 'millisecond') {
      return this.valueOf() === localInput.valueOf();
    } else {
      inputMs = localInput.valueOf();
      return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
  }

  function isSameOrAfter(input, units) {
    return this.isSame(input, units) || this.isAfter(input, units);
  }

  function isSameOrBefore(input, units) {
    return this.isSame(input, units) || this.isBefore(input, units);
  }

  function diff(input, units, asFloat) {
    var that, zoneDelta, output;

    if (!this.isValid()) {
      return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
      return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
    units = normalizeUnits(units);

    switch (units) {
      case 'year':
        output = monthDiff(this, that) / 12;
        break;

      case 'month':
        output = monthDiff(this, that);
        break;

      case 'quarter':
        output = monthDiff(this, that) / 3;
        break;

      case 'second':
        output = (this - that) / 1e3;
        break;
      // 1000

      case 'minute':
        output = (this - that) / 6e4;
        break;
      // 1000 * 60

      case 'hour':
        output = (this - that) / 36e5;
        break;
      // 1000 * 60 * 60

      case 'day':
        output = (this - that - zoneDelta) / 864e5;
        break;
      // 1000 * 60 * 60 * 24, negate dst

      case 'week':
        output = (this - that - zoneDelta) / 6048e5;
        break;
      // 1000 * 60 * 60 * 24 * 7, negate dst

      default:
        output = this - that;
    }

    return asFloat ? output : absFloor(output);
  }

  function monthDiff(a, b) {
    // difference in months
    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
    anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2,
        adjust;

    if (b - anchor < 0) {
      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month

      adjust = (b - anchor) / (anchor - anchor2);
    } else {
      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month

      adjust = (b - anchor) / (anchor2 - anchor);
    } //check for negative zero, return zero if negative zero


    return -(wholeMonthDiff + adjust) || 0;
  }

  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

  function toString() {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
  }

  function toISOString(keepOffset) {
    if (!this.isValid()) {
      return null;
    }

    var utc = keepOffset !== true;
    var m = utc ? this.clone().utc() : this;

    if (m.year() < 0 || m.year() > 9999) {
      return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    if (isFunction(Date.prototype.toISOString)) {
      // native implementation is ~50x faster, use it when we can
      if (utc) {
        return this.toDate().toISOString();
      } else {
        return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
      }
    }

    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
  }
  /**
   * Return a human readable representation of a moment that can
   * also be evaluated to get a new moment which is the same
   *
   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
   */


  function inspect() {
    if (!this.isValid()) {
      return 'moment.invalid(/* ' + this._i + ' */)';
    }

    var func = 'moment';
    var zone = '';

    if (!this.isLocal()) {
      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
      zone = 'Z';
    }

    var prefix = '[' + func + '("]';
    var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';
    return this.format(prefix + year + datetime + suffix);
  }

  function format(inputString) {
    if (!inputString) {
      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }

    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
  }

  function from(time, withoutSuffix) {
    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
      return createDuration({
        to: this,
        from: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    } else {
      return this.localeData().invalidDate();
    }
  }

  function fromNow(withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
  }

  function to(time, withoutSuffix) {
    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
      return createDuration({
        from: this,
        to: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    } else {
      return this.localeData().invalidDate();
    }
  }

  function toNow(withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
  } // If passed a locale key, it will set the locale for this
  // instance.  Otherwise, it will return the locale configuration
  // variables for this instance.


  function locale(key) {
    var newLocaleData;

    if (key === undefined) {
      return this._locale._abbr;
    } else {
      newLocaleData = getLocale(key);

      if (newLocaleData != null) {
        this._locale = newLocaleData;
      }

      return this;
    }
  }

  var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
    if (key === undefined) {
      return this.localeData();
    } else {
      return this.locale(key);
    }
  });

  function localeData() {
    return this._locale;
  }

  function startOf(units) {
    units = normalizeUnits(units); // the following switch intentionally omits break keywords
    // to utilize falling through the cases.

    switch (units) {
      case 'year':
        this.month(0);

      /* falls through */

      case 'quarter':
      case 'month':
        this.date(1);

      /* falls through */

      case 'week':
      case 'isoWeek':
      case 'day':
      case 'date':
        this.hours(0);

      /* falls through */

      case 'hour':
        this.minutes(0);

      /* falls through */

      case 'minute':
        this.seconds(0);

      /* falls through */

      case 'second':
        this.milliseconds(0);
    } // weeks are a special case


    if (units === 'week') {
      this.weekday(0);
    }

    if (units === 'isoWeek') {
      this.isoWeekday(1);
    } // quarters are also special


    if (units === 'quarter') {
      this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
  }

  function endOf(units) {
    units = normalizeUnits(units);

    if (units === undefined || units === 'millisecond') {
      return this;
    } // 'date' is an alias for 'day', so it should be considered as such.


    if (units === 'date') {
      units = 'day';
    }

    return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
  }

  function valueOf() {
    return this._d.valueOf() - (this._offset || 0) * 60000;
  }

  function unix() {
    return Math.floor(this.valueOf() / 1000);
  }

  function toDate() {
    return new Date(this.valueOf());
  }

  function toArray() {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
  }

  function toObject() {
    var m = this;
    return {
      years: m.year(),
      months: m.month(),
      date: m.date(),
      hours: m.hours(),
      minutes: m.minutes(),
      seconds: m.seconds(),
      milliseconds: m.milliseconds()
    };
  }

  function toJSON() {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
  }

  function isValid$2() {
    return isValid(this);
  }

  function parsingFlags() {
    return extend({}, getParsingFlags(this));
  }

  function invalidAt() {
    return getParsingFlags(this).overflow;
  }

  function creationData() {
    return {
      input: this._i,
      format: this._f,
      locale: this._locale,
      isUTC: this._isUTC,
      strict: this._strict
    };
  } // FORMATTING


  addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
  });
  addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
  });

  function addWeekYearFormatToken(token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
  }

  addWeekYearFormatToken('gggg', 'weekYear');
  addWeekYearFormatToken('ggggg', 'weekYear');
  addWeekYearFormatToken('GGGG', 'isoWeekYear');
  addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES

  addUnitAlias('weekYear', 'gg');
  addUnitAlias('isoWeekYear', 'GG'); // PRIORITY

  addUnitPriority('weekYear', 1);
  addUnitPriority('isoWeekYear', 1); // PARSING

  addRegexToken('G', matchSigned);
  addRegexToken('g', matchSigned);
  addRegexToken('GG', match1to2, match2);
  addRegexToken('gg', match1to2, match2);
  addRegexToken('GGGG', match1to4, match4);
  addRegexToken('gggg', match1to4, match4);
  addRegexToken('GGGGG', match1to6, match6);
  addRegexToken('ggggg', match1to6, match6);
  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
  });
  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
  }); // MOMENTS

  function getSetWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
  }

  function getSetISOWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
  }

  function getISOWeeksInYear() {
    return weeksInYear(this.year(), 1, 4);
  }

  function getWeeksInYear() {
    var weekInfo = this.localeData()._week;

    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
  }

  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;

    if (input == null) {
      return weekOfYear(this, dow, doy).year;
    } else {
      weeksTarget = weeksInYear(input, dow, doy);

      if (week > weeksTarget) {
        week = weeksTarget;
      }

      return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
  }

  function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
  } // FORMATTING


  addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES

  addUnitAlias('quarter', 'Q'); // PRIORITY

  addUnitPriority('quarter', 7); // PARSING

  addRegexToken('Q', match1);
  addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
  }); // MOMENTS

  function getSetQuarter(input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
  } // FORMATTING


  addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES

  addUnitAlias('date', 'D'); // PRIORITY

  addUnitPriority('date', 9); // PARSING

  addRegexToken('D', match1to2);
  addRegexToken('DD', match1to2, match2);
  addRegexToken('Do', function (isStrict, locale) {
    // TODO: Remove "ordinalParse" fallback in next major release.
    return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
  });
  addParseToken(['D', 'DD'], DATE);
  addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0]);
  }); // MOMENTS

  var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING

  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES

  addUnitAlias('dayOfYear', 'DDD'); // PRIORITY

  addUnitPriority('dayOfYear', 4); // PARSING

  addRegexToken('DDD', match1to3);
  addRegexToken('DDDD', match3);
  addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
  }); // HELPERS
  // MOMENTS

  function getSetDayOfYear(input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
  } // FORMATTING


  addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES

  addUnitAlias('minute', 'm'); // PRIORITY

  addUnitPriority('minute', 14); // PARSING

  addRegexToken('m', match1to2);
  addRegexToken('mm', match1to2, match2);
  addParseToken(['m', 'mm'], MINUTE); // MOMENTS

  var getSetMinute = makeGetSet('Minutes', false); // FORMATTING

  addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES

  addUnitAlias('second', 's'); // PRIORITY

  addUnitPriority('second', 15); // PARSING

  addRegexToken('s', match1to2);
  addRegexToken('ss', match1to2, match2);
  addParseToken(['s', 'ss'], SECOND); // MOMENTS

  var getSetSecond = makeGetSet('Seconds', false); // FORMATTING

  addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
  });
  addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
  });
  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
  addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
  });
  addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
  });
  addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
  });
  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
  });
  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
  });
  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
  }); // ALIASES

  addUnitAlias('millisecond', 'ms'); // PRIORITY

  addUnitPriority('millisecond', 16); // PARSING

  addRegexToken('S', match1to3, match1);
  addRegexToken('SS', match1to3, match2);
  addRegexToken('SSS', match1to3, match3);
  var token;

  for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
  }

  function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
  }

  for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
  } // MOMENTS


  var getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING

  addFormatToken('z', 0, 0, 'zoneAbbr');
  addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS

  function getZoneAbbr() {
    return this._isUTC ? 'UTC' : '';
  }

  function getZoneName() {
    return this._isUTC ? 'Coordinated Universal Time' : '';
  }

  var proto = Moment.prototype;
  proto.add = add;
  proto.calendar = calendar$1;
  proto.clone = clone;
  proto.diff = diff;
  proto.endOf = endOf;
  proto.format = format;
  proto.from = from;
  proto.fromNow = fromNow;
  proto.to = to;
  proto.toNow = toNow;
  proto.get = stringGet;
  proto.invalidAt = invalidAt;
  proto.isAfter = isAfter;
  proto.isBefore = isBefore;
  proto.isBetween = isBetween;
  proto.isSame = isSame;
  proto.isSameOrAfter = isSameOrAfter;
  proto.isSameOrBefore = isSameOrBefore;
  proto.isValid = isValid$2;
  proto.lang = lang;
  proto.locale = locale;
  proto.localeData = localeData;
  proto.max = prototypeMax;
  proto.min = prototypeMin;
  proto.parsingFlags = parsingFlags;
  proto.set = stringSet;
  proto.startOf = startOf;
  proto.subtract = subtract;
  proto.toArray = toArray;
  proto.toObject = toObject;
  proto.toDate = toDate;
  proto.toISOString = toISOString;
  proto.inspect = inspect;
  proto.toJSON = toJSON;
  proto.toString = toString;
  proto.unix = unix;
  proto.valueOf = valueOf;
  proto.creationData = creationData;
  proto.year = getSetYear;
  proto.isLeapYear = getIsLeapYear;
  proto.weekYear = getSetWeekYear;
  proto.isoWeekYear = getSetISOWeekYear;
  proto.quarter = proto.quarters = getSetQuarter;
  proto.month = getSetMonth;
  proto.daysInMonth = getDaysInMonth;
  proto.week = proto.weeks = getSetWeek;
  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
  proto.weeksInYear = getWeeksInYear;
  proto.isoWeeksInYear = getISOWeeksInYear;
  proto.date = getSetDayOfMonth;
  proto.day = proto.days = getSetDayOfWeek;
  proto.weekday = getSetLocaleDayOfWeek;
  proto.isoWeekday = getSetISODayOfWeek;
  proto.dayOfYear = getSetDayOfYear;
  proto.hour = proto.hours = getSetHour;
  proto.minute = proto.minutes = getSetMinute;
  proto.second = proto.seconds = getSetSecond;
  proto.millisecond = proto.milliseconds = getSetMillisecond;
  proto.utcOffset = getSetOffset;
  proto.utc = setOffsetToUTC;
  proto.local = setOffsetToLocal;
  proto.parseZone = setOffsetToParsedOffset;
  proto.hasAlignedHourOffset = hasAlignedHourOffset;
  proto.isDST = isDaylightSavingTime;
  proto.isLocal = isLocal;
  proto.isUtcOffset = isUtcOffset;
  proto.isUtc = isUtc;
  proto.isUTC = isUtc;
  proto.zoneAbbr = getZoneAbbr;
  proto.zoneName = getZoneName;
  proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
  proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
  proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
  proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
  proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

  function createUnix(input) {
    return createLocal(input * 1000);
  }

  function createInZone() {
    return createLocal.apply(null, arguments).parseZone();
  }

  function preParsePostFormat(string) {
    return string;
  }

  var proto$1 = Locale.prototype;
  proto$1.calendar = calendar;
  proto$1.longDateFormat = longDateFormat;
  proto$1.invalidDate = invalidDate;
  proto$1.ordinal = ordinal;
  proto$1.preparse = preParsePostFormat;
  proto$1.postformat = preParsePostFormat;
  proto$1.relativeTime = relativeTime;
  proto$1.pastFuture = pastFuture;
  proto$1.set = set;
  proto$1.months = localeMonths;
  proto$1.monthsShort = localeMonthsShort;
  proto$1.monthsParse = localeMonthsParse;
  proto$1.monthsRegex = monthsRegex;
  proto$1.monthsShortRegex = monthsShortRegex;
  proto$1.week = localeWeek;
  proto$1.firstDayOfYear = localeFirstDayOfYear;
  proto$1.firstDayOfWeek = localeFirstDayOfWeek;
  proto$1.weekdays = localeWeekdays;
  proto$1.weekdaysMin = localeWeekdaysMin;
  proto$1.weekdaysShort = localeWeekdaysShort;
  proto$1.weekdaysParse = localeWeekdaysParse;
  proto$1.weekdaysRegex = weekdaysRegex;
  proto$1.weekdaysShortRegex = weekdaysShortRegex;
  proto$1.weekdaysMinRegex = weekdaysMinRegex;
  proto$1.isPM = localeIsPM;
  proto$1.meridiem = localeMeridiem;

  function get$1(format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
  }

  function listMonthsImpl(format, index, field) {
    if (isNumber(format)) {
      index = format;
      format = undefined;
    }

    format = format || '';

    if (index != null) {
      return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];

    for (i = 0; i < 12; i++) {
      out[i] = get$1(format, i, field, 'month');
    }

    return out;
  } // ()
  // (5)
  // (fmt, 5)
  // (fmt)
  // (true)
  // (true, 5)
  // (true, fmt, 5)
  // (true, fmt)


  function listWeekdaysImpl(localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
      if (isNumber(format)) {
        index = format;
        format = undefined;
      }

      format = format || '';
    } else {
      format = localeSorted;
      index = format;
      localeSorted = false;

      if (isNumber(format)) {
        index = format;
        format = undefined;
      }

      format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
      return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];

    for (i = 0; i < 7; i++) {
      out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }

    return out;
  }

  function listMonths(format, index) {
    return listMonthsImpl(format, index, 'months');
  }

  function listMonthsShort(format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
  }

  function listWeekdays(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
  }

  function listWeekdaysShort(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
  }

  function listWeekdaysMin(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
  }

  getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal: function ordinal(number) {
      var b = number % 10,
          output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
      return number + output;
    }
  }); // Side effect imports

  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
  var mathAbs = Math.abs;

  function abs() {
    var data = this._data;
    this._milliseconds = mathAbs(this._milliseconds);
    this._days = mathAbs(this._days);
    this._months = mathAbs(this._months);
    data.milliseconds = mathAbs(data.milliseconds);
    data.seconds = mathAbs(data.seconds);
    data.minutes = mathAbs(data.minutes);
    data.hours = mathAbs(data.hours);
    data.months = mathAbs(data.months);
    data.years = mathAbs(data.years);
    return this;
  }

  function addSubtract$1(duration, input, value, direction) {
    var other = createDuration(input, value);
    duration._milliseconds += direction * other._milliseconds;
    duration._days += direction * other._days;
    duration._months += direction * other._months;
    return duration._bubble();
  } // supports only 2.0-style add(1, 's') or add(duration)


  function add$1(input, value) {
    return addSubtract$1(this, input, value, 1);
  } // supports only 2.0-style subtract(1, 's') or subtract(duration)


  function subtract$1(input, value) {
    return addSubtract$1(this, input, value, -1);
  }

  function absCeil(number) {
    if (number < 0) {
      return Math.floor(number);
    } else {
      return Math.ceil(number);
    }
  }

  function bubble() {
    var milliseconds = this._milliseconds;
    var days = this._days;
    var months = this._months;
    var data = this._data;
    var seconds, minutes, hours, years, monthsFromDays; // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166

    if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
      days = 0;
      months = 0;
    } // The following code bubbles up values, see the tests for
    // examples of what that means.


    data.milliseconds = milliseconds % 1000;
    seconds = absFloor(milliseconds / 1000);
    data.seconds = seconds % 60;
    minutes = absFloor(seconds / 60);
    data.minutes = minutes % 60;
    hours = absFloor(minutes / 60);
    data.hours = hours % 24;
    days += absFloor(hours / 24); // convert days to months

    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year

    years = absFloor(months / 12);
    months %= 12;
    data.days = days;
    data.months = months;
    data.years = years;
    return this;
  }

  function daysToMonths(days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
  }

  function monthsToDays(months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
  }

  function as(units) {
    if (!this.isValid()) {
      return NaN;
    }

    var days;
    var months;
    var milliseconds = this._milliseconds;
    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
      days = this._days + milliseconds / 864e5;
      months = this._months + daysToMonths(days);
      return units === 'month' ? months : months / 12;
    } else {
      // handle milliseconds separately because of floating point math errors (issue #1867)
      days = this._days + Math.round(monthsToDays(this._months));

      switch (units) {
        case 'week':
          return days / 7 + milliseconds / 6048e5;

        case 'day':
          return days + milliseconds / 864e5;

        case 'hour':
          return days * 24 + milliseconds / 36e5;

        case 'minute':
          return days * 1440 + milliseconds / 6e4;

        case 'second':
          return days * 86400 + milliseconds / 1000;
        // Math.floor prevents floating point math errors here

        case 'millisecond':
          return Math.floor(days * 864e5) + milliseconds;

        default:
          throw new Error('Unknown unit ' + units);
      }
    }
  } // TODO: Use this.as('ms')?


  function valueOf$1() {
    if (!this.isValid()) {
      return NaN;
    }

    return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
  }

  function makeAs(alias) {
    return function () {
      return this.as(alias);
    };
  }

  var asMilliseconds = makeAs('ms');
  var asSeconds = makeAs('s');
  var asMinutes = makeAs('m');
  var asHours = makeAs('h');
  var asDays = makeAs('d');
  var asWeeks = makeAs('w');
  var asMonths = makeAs('M');
  var asYears = makeAs('y');

  function clone$1() {
    return createDuration(this);
  }

  function get$2(units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + 's']() : NaN;
  }

  function makeGetter(name) {
    return function () {
      return this.isValid() ? this._data[name] : NaN;
    };
  }

  var milliseconds = makeGetter('milliseconds');
  var seconds = makeGetter('seconds');
  var minutes = makeGetter('minutes');
  var hours = makeGetter('hours');
  var days = makeGetter('days');
  var months = makeGetter('months');
  var years = makeGetter('years');

  function weeks() {
    return absFloor(this.days() / 7);
  }

  var round = Math.round;
  var thresholds = {
    ss: 44,
    // a few seconds to seconds
    s: 45,
    // seconds to minute
    m: 45,
    // minutes to hour
    h: 22,
    // hours to day
    d: 26,
    // days to month
    M: 11 // months to year

  }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  }

  function relativeTime$1(posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds = round(duration.as('s'));
    var minutes = round(duration.as('m'));
    var hours = round(duration.as('h'));
    var days = round(duration.as('d'));
    var months = round(duration.as('M'));
    var years = round(duration.as('y'));
    var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
  } // This function allows you to set the rounding function for relative time strings


  function getSetRelativeTimeRounding(roundingFunction) {
    if (roundingFunction === undefined) {
      return round;
    }

    if (typeof roundingFunction === 'function') {
      round = roundingFunction;
      return true;
    }

    return false;
  } // This function allows you to set a threshold for relative time strings


  function getSetRelativeTimeThreshold(threshold, limit) {
    if (thresholds[threshold] === undefined) {
      return false;
    }

    if (limit === undefined) {
      return thresholds[threshold];
    }

    thresholds[threshold] = limit;

    if (threshold === 's') {
      thresholds.ss = limit - 1;
    }

    return true;
  }

  function humanize(withSuffix) {
    if (!this.isValid()) {
      return this.localeData().invalidDate();
    }

    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
      output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
  }

  var abs$1 = Math.abs;

  function sign(x) {
    return (x > 0) - (x < 0) || +x;
  }

  function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
      return this.localeData().invalidDate();
    }

    var seconds = abs$1(this._milliseconds) / 1000;
    var days = abs$1(this._days);
    var months = abs$1(this._months);
    var minutes, hours, years; // 3600 seconds -> 60 minutes -> 1 hour

    minutes = absFloor(seconds / 60);
    hours = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60; // 12 months -> 1 year

    years = absFloor(months / 12);
    months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
    var total = this.asSeconds();

    if (!total) {
      // this is the same as C#'s (Noda) and python (isodate)...
      // but not other JS (goog.date)
      return 'P0D';
    }

    var totalSign = total < 0 ? '-' : '';
    var ymSign = sign(this._months) !== sign(total) ? '-' : '';
    var daysSign = sign(this._days) !== sign(total) ? '-' : '';
    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
    return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
  }

  var proto$2 = Duration.prototype;
  proto$2.isValid = isValid$1;
  proto$2.abs = abs;
  proto$2.add = add$1;
  proto$2.subtract = subtract$1;
  proto$2.as = as;
  proto$2.asMilliseconds = asMilliseconds;
  proto$2.asSeconds = asSeconds;
  proto$2.asMinutes = asMinutes;
  proto$2.asHours = asHours;
  proto$2.asDays = asDays;
  proto$2.asWeeks = asWeeks;
  proto$2.asMonths = asMonths;
  proto$2.asYears = asYears;
  proto$2.valueOf = valueOf$1;
  proto$2._bubble = bubble;
  proto$2.clone = clone$1;
  proto$2.get = get$2;
  proto$2.milliseconds = milliseconds;
  proto$2.seconds = seconds;
  proto$2.minutes = minutes;
  proto$2.hours = hours;
  proto$2.days = days;
  proto$2.weeks = weeks;
  proto$2.months = months;
  proto$2.years = years;
  proto$2.humanize = humanize;
  proto$2.toISOString = toISOString$1;
  proto$2.toString = toISOString$1;
  proto$2.toJSON = toISOString$1;
  proto$2.locale = locale;
  proto$2.localeData = localeData;
  proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
  proto$2.lang = lang; // Side effect imports
  // FORMATTING

  addFormatToken('X', 0, 0, 'unix');
  addFormatToken('x', 0, 0, 'valueOf'); // PARSING

  addRegexToken('x', matchSigned);
  addRegexToken('X', matchTimestamp);
  addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
  });
  addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
  }); // Side effect imports

  hooks.version = '2.22.2';
  setHookCallback(createLocal);
  hooks.fn = proto;
  hooks.min = min;
  hooks.max = max;
  hooks.now = now;
  hooks.utc = createUTC;
  hooks.unix = createUnix;
  hooks.months = listMonths;
  hooks.isDate = isDate;
  hooks.locale = getSetGlobalLocale;
  hooks.invalid = createInvalid;
  hooks.duration = createDuration;
  hooks.isMoment = isMoment;
  hooks.weekdays = listWeekdays;
  hooks.parseZone = createInZone;
  hooks.localeData = getLocale;
  hooks.isDuration = isDuration;
  hooks.monthsShort = listMonthsShort;
  hooks.weekdaysMin = listWeekdaysMin;
  hooks.defineLocale = defineLocale;
  hooks.updateLocale = updateLocale;
  hooks.locales = listLocales;
  hooks.weekdaysShort = listWeekdaysShort;
  hooks.normalizeUnits = normalizeUnits;
  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
  hooks.calendarFormat = getCalendarFormat;
  hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats

  hooks.HTML5_FMT = {
    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
    // <input type="datetime-local" />
    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
    // <input type="datetime-local" step="1" />
    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
    // <input type="datetime-local" step="0.001" />
    DATE: 'YYYY-MM-DD',
    // <input type="date" />
    TIME: 'HH:mm',
    // <input type="time" />
    TIME_SECONDS: 'HH:mm:ss',
    // <input type="time" step="1" />
    TIME_MS: 'HH:mm:ss.SSS',
    // <input type="time" step="0.001" />
    WEEK: 'YYYY-[W]WW',
    // <input type="week" />
    MONTH: 'YYYY-MM' // <input type="month" />

  };
  return hooks;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");

var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
} // Copy static methods from Buffer


copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }

  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  var buf = Buffer(size);

  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }

  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return buffer.SlowBuffer(size);
};

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/


var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;

  switch (encoding && encoding.toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;

  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';

      case 'latin1':
      case 'binary':
        return 'latin1';

      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;

      default:
        if (retried) return; // undefined

        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
}

; // Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings

function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);

  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
} // StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.


exports.StringDecoder = StringDecoder;

function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;

  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;

    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;

    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;

    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }

  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;

  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }

  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
}; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.


function utf8CheckByte(_byte) {
  if (_byte <= 0x7F) return 0;else if (_byte >> 5 === 0x06) return 2;else if (_byte >> 4 === 0x0E) return 3;else if (_byte >> 3 === 0x1E) return 4;
  return _byte >> 6 === 0x02 ? -1 : -2;
} // Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.


function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }

    return nb;
  }

  return 0;
} // Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.


function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return "\uFFFD";
  }

  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return "\uFFFD";
    }

    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return "\uFFFD";
      }
    }
  }
} // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;

  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
} // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.


function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
} // For UTF-8, a replacement character is added when ending on a partial
// character.


function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + "\uFFFD";
  return r;
} // UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.


function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);

    if (r) {
      var c = r.charCodeAt(r.length - 1);

      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }

    return r;
  }

  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
} // For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.


function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';

  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }

  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;

  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }

  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
} // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function isBuffer(arg) {
  return arg && _typeof(arg) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/*! exports used: isArray, isBoolean, isDate, isFunction, isNumber, isObject, isString, isSymbol */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
  var keys = Object.keys(obj);
  var descriptors = {};

  for (var i = 0; i < keys.length; i++) {
    descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
  }

  return descriptors;
};

var formatRegExp = /%[sdj%]/g;

exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];

    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }

    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;

    switch (x) {
      case '%s':
        return String(args[i++]);

      case '%d':
        return Number(args[i++]);

      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }

      default:
        return x;
    }
  });

  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }

  return str;
}; // Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.


exports.deprecate = function (fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  } // Allow for deprecating things in the process of starting up.


  if (typeof process === 'undefined') {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
};

var debugs = {};
var debugEnviron;

exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();

  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;

      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }

  return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */

/* legacy: obj, showHidden, depth, colors*/


function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = JSON.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
} // NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.


function isArray(ar) {
  return Array.isArray(ar);
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return _typeof(arg) === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return _typeof(arg) === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
} // log is just a thin wrapper to console.log that prepends a timestamp


exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */


exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];

    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }

    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};

exports.promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }

  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  } // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.


  function callbackified() {
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();

    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }

    var self = this;

    var cb = function cb() {
      return maybeCb.apply(self, arguments);
    }; // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)


    original.apply(this, args).then(function (ret) {
      process.nextTick(cb, null, ret);
    }, function (rej) {
      process.nextTick(callbackifyOnRejected, rej, cb);
    });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}

exports.callbackify = callbackify;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./pages/BasePage.js":
/*!***************************!*\
  !*** ./pages/BasePage.js ***!
  \***************************/
/*! exports provided: BasePage */
/*! exports used: BasePage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BasePage; });
/* harmony import */ var _core_Binder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Binder */ "./core/Binder.js");
/* harmony import */ var _core_NavController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/NavController */ "./core/NavController.js");
/* harmony import */ var _core_ChangeWatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/ChangeWatcher */ "./core/ChangeWatcher.js");
/* harmony import */ var _core_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/helpers */ "./core/helpers.js");
/* harmony import */ var _components_BaseComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/BaseComponent */ "./components/BaseComponent.js");
/* harmony import */ var _core_Objects__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/Objects */ "./core/Objects.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }







var BasePage = /*#__PURE__*/function (_ChangeWatcher) {
  _inherits(BasePage, _ChangeWatcher);

  var _super = _createSuper(BasePage);

  function BasePage() {
    var _this;

    _classCallCheck(this, BasePage);

    _this = _super.call(this);
    /** @type {HTMLElement}*/

    _this.page = null;
    /** @type {NavController} */

    _this.Nav;
    /** @type {CSSStyleDeclaration} */

    _this.style; // @ts-ignore

    _this.style = {};
    _this.components = null;
    _this.binder = new _core_Binder__WEBPACK_IMPORTED_MODULE_0__[/* Binder */ "a"](_assertThisInitialized(_this));
    _this.name = null;
    _this.isDeleting = null;
    _this.isCreating = null;
    _this.isHiding = null;
    _this.isShowing = null;
    _this.isVisible = null;
    _this.isDeleted = null;
    _this.isHidden = null;
    _this.isRoot = null, _this.selector = _this.constructor.selector;
    _this.className = _this.constructor.className;
    _this.visibleParent = _this.constructor.visibleParent;
    _this.classNames = []; //Be lazy. This allows us to directly pass page methods without having to worry about "this"

    _core_Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].bindMethods(_assertThisInitialized(_this));
    return _this;
  }
  /**
  * Force Page update
  */


  _createClass(BasePage, [{
    key: "update",
    value: function update() {
      if (!this.binder) return;
      this.onBeforeUpdated();
      this.binder.updateElements();
      this.onUpdated();
    }
  }, {
    key: "_onVisible",
    value: function _onVisible() {
      this.onVisible();
    }
    /**
    * Command the nav controller to remove this page from the stack
    */

  }, {
    key: "destroy",
    value: function destroy() {
      if (this.isDeleted) {
        return;
      }

      if (this.Nav && this.onBeforeDestroy() === false) {
        return;
      } //if nav exists, then tell nav to delete the page. Nav will then call this method again


      if (this.Nav) {
        //tell Nav to remove the page from the stack
        this.Nav.remove(this);
      } else {
        //Nav does not exist any more: delete the page
        //notify whoever implements, that page is to be destroyed.
        this.onDestroy(); //Call destroy on all child components

        if (this.components) {
          for (var i in this.components) {
            var comp = this.components[i];

            if (comp instanceof _components_BaseComponent__WEBPACK_IMPORTED_MODULE_4__[/* BaseComponent */ "a"]) {
              Object(_core_helpers__WEBPACK_IMPORTED_MODULE_3__[/* tryCall */ "g"])(comp, comp.destroy);
              delete this.components[i];
            }
          }
        } //destroy binder


        if (this.binder) {
          this.binder.destroy();
        } //Destroy the rest of listeners, properties and methods


        this.stopWatch();
        _core_Objects__WEBPACK_IMPORTED_MODULE_5__[/* Objects */ "a"].strip(this);
        this.isDeleted = true;
      }
    } //Implementation of Lifecycle callbacks that are called by NavController

    /**
    * ***OverrideCallSuper***
    * Initialize binder
    */

  }, {
    key: "_init",
    value: function _init(binderEvent) {
      //this.template = BasePage.template.replace('<!--child-template-->', this.template);
      this.binder.bindElements(binderEvent, this.template);
      this.page = this.binder.vdom.elem;

      _get(_getPrototypeOf(BasePage.prototype), "startWatch", this).call(this);
    }
    /**
    * ***Override***
    * Called after page is created and inserted into the document but before it is rendered
    * @param {HTMLElement} page 
    */

  }, {
    key: "onInit",
    value: function onInit(page) {}
    /**
    * ***Override***
    * * Called after the page is created and fully rendered
    */

  }, {
    key: "onLoaded",
    value: function onLoaded() {}
    /**
    * ***Override****
    * Called before page is updated either manually, or by watcher
    */

  }, {
    key: "onBeforeUpdated",
    value: function onBeforeUpdated() {} //console.log(this.constructor.name, 'updated');

    /**
    * ***Override****
    * Called after page is updated either manually, or by watcher
    */

  }, {
    key: "onUpdated",
    value: function onUpdated() {} //console.log(this.constructor.name, 'updated');

    /**
    * ***Override****
    * * Called every time the page becomes active but before transitions
    */

  }, {
    key: "onEnter",
    value: function onEnter() {}
    /**
    * ***Override***
    * Called every time the transitions have ended and the page is fully visible.
    */

  }, {
    key: "onVisible",
    value: function onVisible() {}
    /**
    * ***Override****
    */

  }, {
    key: "onLeave",
    value: function onLeave() {}
    /**
    * ***Override***
    * @param {{width:number, height:number}} windowSize
    */

  }, {
    key: "onResize",
    value: function onResize(windowSize) {}
    /**
    * ***OverrideCallSuper***
    * @param {{width:number, height:number}} windowSize
    */

  }, {
    key: "resize",
    value: function resize(windowSize) {
      this.onResize(windowSize);
    }
    /**
    * ***Override***
    * Called when NavController removes it self from the page and page is about to be deleted
    * @override
    */

  }, {
    key: "onDestroy",
    value: function onDestroy() {}
    /**
    * ***Override***
    * Called before page is deleted. Return false to prefent page deletion. 
    * @return {any|false}
    * @override
    */

  }, {
    key: "onBeforeDestroy",
    value: function onBeforeDestroy() {
      return true;
    }
    /**
    * ***Override***
    * Called just before navigating back from the page.
    * return false to cancel the back page navigation
    * @returns {boolean}
    */

  }, {
    key: "onBackNavigate",
    value: function onBackNavigate() {
      return true;
    }
    /**
    * Extend the base template with child template.
    * Use <!--child-template--> to mark the slot
    * @param {string} super_template 
    * @param {string} child_template 
    */

  }, {
    key: "extendTemplate",
    value: function extendTemplate(super_template, child_template) {
      return super_template.replace('<!--child-template-->', child_template);
    }
    /**
    * ***Readonly*** property that returns the template string
    *   You can extend base template by returning this.extendTemplate(super.template,'child template string');
    */

  }, {
    key: "template",
    get: function get() {
      return "<div page [class]=\"this.className\" [style]=\"this.style\" [attribute]=\"{root: this.isRoot, hidden:this.isHidden,visible:this.isVisible,showing:this.isShowing,hiding:this.isHiding,creating:this.isCreating,deleting:this.isDeleting}\"><!--child-template--></div>";
    }
  }]);

  return BasePage;
}(_core_ChangeWatcher__WEBPACK_IMPORTED_MODULE_2__[/* ChangeWatcher */ "a"]);
BasePage.visibleParent = null;
BasePage.selector = null;
BasePage.className = null;

/***/ }),

/***/ "./pages/DialogPage/DialogPage.html":
/*!******************************************!*\
  !*** ./pages/DialogPage/DialogPage.html ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = "<div class=\"backdrop\">\r\n\t<div class='popup'>\r\n\t\t<div class = 'title' [if]='this.title'  bind=\"Translate(this.title)\">Dialog title</div>\r\n\t\t<div class = 'prompt' [if]='this.prompt' bind=\"Translate(this.prompt)\">Prompt</div>\r\n\t\t\r\n\t\t<div class = 'dialog-content touch-scroll' [style]=\"{maxHeight:this.dialog_content_max_height}\">\r\n\t\t\t<div [directive] = \"this.content\"></div>\r\n\t\t</div>\r\n\t\t<div class = 'dialog-buttons' [if]=\"this.buttons\">\r\n\t\t\t<button [foreach]=\"button_title in this.buttons as button\" onclick=\"this.onButtonClicked(button_title)\" bind=\"Translate(button_title)\" [attribute]=\"{id:'dialogButton'+button_title}\"></button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"

/***/ }),

/***/ "./pages/DialogPage/DialogPage.js":
/*!****************************************!*\
  !*** ./pages/DialogPage/DialogPage.js ***!
  \****************************************/
/*! exports provided: Dialog, DialogPage */
/*! exports used: Dialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Dialog; });
/* unused harmony export DialogPage */
/* harmony import */ var _BasePage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../BasePage */ "./pages/BasePage.js");
/* harmony import */ var _DialogPage_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DialogPage.html */ "./pages/DialogPage/DialogPage.html");
/* harmony import */ var _DialogPage_html__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_DialogPage_html__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _DialogPage_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DialogPage.scss */ "./pages/DialogPage/DialogPage.scss");
/* harmony import */ var _DialogPage_scss__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_DialogPage_scss__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _core_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/helpers */ "./core/helpers.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _components_Forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/Forms */ "./components/Forms.js");
/* harmony import */ var _core_Injector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/Injector */ "./core/Injector.js");
/* harmony import */ var _core_NavController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/NavController */ "./core/NavController.js");
/* harmony import */ var _core_Objects__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/Objects */ "./core/Objects.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

 // @ts-ignore









/**
 * Create an instance of the dialog page
 * @param {string} title 
 */

function Dialog(title) {
  /** @type {NavController} */
  var nav = _core_Injector__WEBPACK_IMPORTED_MODULE_6__[/* Injector */ "a"].Nav;
  var d = nav.push(DialogPage);
  d.title = title;
  return d;
}
var DialogPage = /*#__PURE__*/function (_BasePage) {
  _inherits(DialogPage, _BasePage);

  var _super = _createSuper(DialogPage);

  function DialogPage(title) {
    var _this;

    _classCallCheck(this, DialogPage);

    _this = _super.call(this);
    /** @type {KeyValuePair} */

    _this.buttons = {};
    _this.title = title;
    _this.prompt = null;
    _this.dialog_content_max_height = "100%";
    _this.controls = [];
    _this.data = {};
    _this.errors = {};
    /** @type {Forms} */

    _this.content = new _components_Forms__WEBPACK_IMPORTED_MODULE_5__[/* Forms */ "a"](_this.controls, _this.data, _this.errors);
    return _this;
  }

  _createClass(DialogPage, [{
    key: "onResize",
    value: function onResize(windowSize) {
      _get(_getPrototypeOf(DialogPage.prototype), "onResize", this).call(this, windowSize);

      var h = this.page.offsetHeight - 150;
      this.dialog_content_max_height = h + "px";
    }
  }, {
    key: "onButtonClicked",
    value: function onButtonClicked(button_title) {
      if (Object(_core_helpers__WEBPACK_IMPORTED_MODULE_3__[/* tryCall */ "g"])(this, this.buttons[button_title], this) != false) this.destroy();
    }
  }, {
    key: "render",
    value: function render() {
      this.content.updateTemplate(this.controls);
    }
  }, {
    key: "addCheck",
    value: function addCheck(name, title, value, required, attrs) {
      var valRule = Object(util__WEBPACK_IMPORTED_MODULE_4__["isString"])(required) ? required : required ? "required" : null;
      this.controls.push({
        name: name,
        type: 'checkbox',
        title: title,
        validateRule: valRule,
        attributes: attrs
      });
      this.data[name] = value;
      this.render();
      return this;
    }
  }, {
    key: "addSelect",
    value: function addSelect(name, title, value, required, items, attrs) {
      var valRule = Object(util__WEBPACK_IMPORTED_MODULE_4__["isString"])(required) ? required : required ? "required" : null;
      this.controls.push({
        name: name,
        type: "select",
        title: title,
        validateRule: valRule,
        items: items,
        attributes: attrs
      });
      this.data[name] = value;
      this.render();
      return this;
    }
  }, {
    key: "addInput",
    value: function addInput(name, title, type, value, required, attrs) {
      var valRule = Object(util__WEBPACK_IMPORTED_MODULE_4__["isString"])(required) ? required : required ? "required" : null;
      this.controls.push({
        name: name,
        type: type,
        title: title,
        validateRule: valRule,
        attributes: attrs
      });
      this.data[name] = value;
      this.render();
      return this;
    }
  }, {
    key: "addDate",
    value: function addDate(name, title, value, required, attrs) {
      var valRule = Object(util__WEBPACK_IMPORTED_MODULE_4__["isString"])(required) ? required : required ? "required" : null;
      this.controls.push({
        name: name,
        type: "date",
        title: title,
        validateRule: valRule,
        attributes: attrs
      });
      this.data[name] = value;
      this.render();
      return this;
    }
  }, {
    key: "addDateTime",
    value: function addDateTime(name, title, value, required, attrs) {
      var valRule = Object(util__WEBPACK_IMPORTED_MODULE_4__["isString"])(required) ? required : required ? "required" : null;
      this.controls.push({
        name: name,
        type: "datetime",
        title: title,
        validateRule: valRule,
        attributes: attrs
      });
      this.data[name] = value;
      this.render();
      return this;
    }
  }, {
    key: "addTime",
    value: function addTime(name, title, value, required, attrs) {
      var valRule = Object(util__WEBPACK_IMPORTED_MODULE_4__["isString"])(required) ? required : required ? "required" : null;
      this.controls.push({
        name: name,
        type: "time",
        title: title,
        validateRule: valRule,
        attributes: attrs
      });
      this.data[name] = value;
      this.render();
      return this;
    }
  }, {
    key: "addTextArea",
    value: function addTextArea(name, title, value, required, attrs) {
      var valRule = Object(util__WEBPACK_IMPORTED_MODULE_4__["isString"])(required) ? required : required ? "required" : null;
      this.controls.push({
        name: name,
        type: "textarea",
        title: title,
        validateRule: valRule,
        attributes: attrs
      });
      this.data[name] = value;
      this.render();
      return this;
    }
  }, {
    key: "addText",
    value: function addText(name, title, value, required, attrs) {
      return this.addInput(name, title, "text", value, required, attrs);
    }
  }, {
    key: "addLabel",
    value: function addLabel(title, value, attrs) {
      this.controls.push({
        type: 'label',
        title: title,
        value: value,
        attributes: attrs
      });
      this.render();
      return this;
    }
  }, {
    key: "addLink",
    value: function addLink(title, value, attrs) {
      this.controls.push({
        type: 'link',
        title: title,
        value: value,
        attributes: attrs
      });
      this.render();
      return this;
    }
  }, {
    key: "addPassword",
    value: function addPassword(name, title, value, required, attrs) {
      return this.addInput(name, title, "password", value, required, attrs);
    }
  }, {
    key: "removeField",
    value: function removeField(name) {
      this.controls = _core_Objects__WEBPACK_IMPORTED_MODULE_8__[/* Objects */ "a"].filter(this.controls, function (el) {
        return el.name != name;
      });
      if (this.data[name]) delete this.data[name];
      this.render();
    }
  }, {
    key: "addHtml",
    value: function addHtml(value) {
      this.controls.push({
        type: 'html',
        value: value
      });
      this.render();
      return this;
    }
  }, {
    key: "addSplit",
    value: function addSplit(items) {
      this.controls.push({
        name: "split",
        type: 'split',
        title: null,
        value: null,
        items: items
      });
      this.render();
      return this;
    }
    /**
    * Validate the content form
    */

  }, {
    key: "validate",
    value: function validate() {
      if (this.content instanceof _components_Forms__WEBPACK_IMPORTED_MODULE_5__[/* Forms */ "a"]) return this.content.validator.validate();
    }
    /**
    * Add Action Button to the dialog
    * @param {string} title
    * @param {function(DialogPage)} callback - fired when button is clicked. Return false to stop dialog from closing
    */

  }, {
    key: "addActionButton",
    value: function addActionButton(title, callback) {
      callback = callback || null;
      this.buttons[title] = callback;
      return this;
    }
  }, {
    key: "template",
    get: function get() {
      return this.extendTemplate(_get(_getPrototypeOf(DialogPage.prototype), "template", this), _DialogPage_html__WEBPACK_IMPORTED_MODULE_1__);
    }
  }]);

  return DialogPage;
}(_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]);
DialogPage.className = 'page-DialogPage';
DialogPage.visibleParent = true;

/***/ }),

/***/ "./pages/DialogPage/DialogPage.scss":
/*!******************************************!*\
  !*** ./pages/DialogPage/DialogPage.scss ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./pages/HeaderPage/HeaderPage.js":
/*!****************************************!*\
  !*** ./pages/HeaderPage/HeaderPage.js ***!
  \****************************************/
/*! exports provided: HeaderPage */
/*! exports used: HeaderPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return HeaderPage; });
/* harmony import */ var _HeaderPage_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HeaderPage.scss */ "./pages/HeaderPage/HeaderPage.scss");
/* harmony import */ var _HeaderPage_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_HeaderPage_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _BasePage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../BasePage */ "./pages/BasePage.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



/**
 * A page with header and menu and back buttons
 */

var HeaderPage = /*#__PURE__*/function (_BasePage) {
  _inherits(HeaderPage, _BasePage);

  var _super = _createSuper(HeaderPage);

  function HeaderPage() {
    var _this;

    _classCallCheck(this, HeaderPage);

    _this = _super.call(this);
    _this.backButton = false;
    _this.menuButton = false;
    _this.refreshButton = false;
    _this.searchButton = false;
    _this.title = ""; //content directive

    _this.content = null; //footer directive

    _this.footer = null;
    _this.showFooter = false;
    _this.serviceProvider_id = null; //header directive

    _this.header = "\n\t\t\t<button id=\"backButton\" [if]=\"this.backButton\" onclick = \"this.onBackButtonClicked()\"><i class=\"fas fa-arrow-left\"></i></button>\n\t\t\t<button id=\"menuButton\" [if]=\"this.menuButton\" onclick = \"this.onMenuButtonClicked()\"><i class=\"fas fa-bars\"></i></button>\n\t\t\t<span class=\"headertitle\" [innerhtml]=\"this.title\"></span>\n\t\t\t<span class=\"logo\" [if]=\"!this.title\"></span>\n\t\t\t<button id=\"refreshButton\" [if]=\"this.refreshButton\" [class]=\"this.refreshButtonRotating ? 'rotating' : null\" onclick = \"this.onRefreshButtonClicked()\"><i class=\"fas fa-sync-alt\"></i></button>\n\t\t\t<button id=\"searchButton\" [if]=\"this.searchButton\" onclick = \"this.onSearchButtonClicked()\"><i class=\"fas fa-search\"></i></button>\n\t\t";
    return _this;
  }
  /**
  * ***Override***
  */


  _createClass(HeaderPage, [{
    key: "onBackButtonClicked",
    value: function onBackButtonClicked() {
      this.destroy();
    }
    /**
    * ***Override***
    */

  }, {
    key: "onMenuButtonClicked",
    value: function onMenuButtonClicked() {
      console.log("Override me : onMenuButtonClicked");
    }
    /**
    * ***Override***
    */

  }, {
    key: "onRefreshButtonClicked",
    value: function onRefreshButtonClicked() {
      console.log("Override me : onRefreshButtonClicked");
    }
    /**
    * ***Override***
    */

  }, {
    key: "onSearchButtonClicked",
    value: function onSearchButtonClicked() {}
  }, {
    key: "template",
    get: function get() {
      return this.extendTemplate(_get(_getPrototypeOf(HeaderPage.prototype), "template", this), template);
    }
  }]);

  return HeaderPage;
}(_BasePage__WEBPACK_IMPORTED_MODULE_1__[/* BasePage */ "a"]);
HeaderPage.className = 'page-HeaderPage';
var template = "\n\t<div class=\"header\" [if]=\"this.header\">\n\t\t<div [directive] = \"this.header\"></div>\n\t</div>\n\t\n\t<div class=\"content\">\n\t\t<!--default-template-begin-->\n\t\t<div [directive] = \"this.content\"></div>\n\t\t<!--default-template-end-->\n\t\t<!--child-template-->\n\t</div>\n\n\t<div class=\"footer\" [if]=\"this.footer && this.showFooter\">\n\t\t<div [directive] = \"this.footer\"></div>\n\t</div>\n";

/***/ }),

/***/ "./pages/HeaderPage/HeaderPage.scss":
/*!******************************************!*\
  !*** ./pages/HeaderPage/HeaderPage.scss ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./pages/NumericKeyboard/NumericKeyboard.js":
/*!**************************************************!*\
  !*** ./pages/NumericKeyboard/NumericKeyboard.js ***!
  \**************************************************/
/*! exports provided: NumericKeyboard */
/*! exports used: NumericKeyboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NumericKeyboard; });
/* harmony import */ var _NumericKeyboardPage_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumericKeyboardPage.scss */ "./pages/NumericKeyboard/NumericKeyboardPage.scss");
/* harmony import */ var _NumericKeyboardPage_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_NumericKeyboardPage_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _NumericKeyboardPage_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NumericKeyboardPage.html */ "./pages/NumericKeyboard/NumericKeyboardPage.html");
/* harmony import */ var _NumericKeyboardPage_html__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_NumericKeyboardPage_html__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _BasePage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../BasePage */ "./pages/BasePage.js");
/* harmony import */ var _core_Injector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../core/Injector */ "./core/Injector.js");
/* harmony import */ var _core_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../core/helpers */ "./core/helpers.js");
/* harmony import */ var _core_DOM__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/DOM */ "./core/DOM.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

 // @ts-ignore






var NumericKeyboard = {
  isEnabled: false,

  /** @type {NumericKeyboardPage} */
  _page: null,
  options: {
    /** 0 - Tall simple, 1 -Tall Full, 2 - short full */
    layout: 0,
    selectOnFocus: false,
    selectForeColor: 'white',
    selectBackColor: '#039be5',
    theme: ''
  },
  enable: function enable() {
    if (NumericKeyboard.isEnabled) return; //DOM(document).off('focus.virtual_keyboard_c', focusEventHandler);

    Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(document).on('focus', focusEventHandler, true);
    NumericKeyboard.isEnabled = true;
  },
  disable: function disable() {
    if (NumericKeyboard._page) {
      NumericKeyboard._page.destroyKB();
    }

    NumericKeyboard.isEnabled = false;
    Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(document).off('focus', focusEventHandler);
  },
  onClick: function onClick() {}
};

function focusEventHandler(event) {
  //'input[type=number], input[number]'

  /** @type {HTMLInputElement} */
  var el = event.target;
  if (el.tagName != "INPUT" || el.getAttribute('type') != "number" && el.getAttribute('number') == null) return;
  /** @type {HTMLInputElement} */
  // @ts-ignore

  var elem = event.target;

  if (NumericKeyboard.isEnabled) {
    if (NumericKeyboard._page) {
      //if (!NumericKeyboard._page.isDeleting){
      NumericKeyboard._page.focusElement(elem); //}

    } else {
      NumericKeyboard._page = _core_Injector__WEBPACK_IMPORTED_MODULE_3__[/* Injector */ "a"].Nav.push(NumericKeyboardPage, NumericKeyboard.options);

      NumericKeyboard._page.focusElement(elem);

      NumericKeyboard._page.onDestroy = function () {
        NumericKeyboard._page = null;
      };

      NumericKeyboard._page.onClick = NumericKeyboard.onClick;
    }
  }
}

function isTouchDevice() {
  try {
    document.createEvent("TouchEvent");
    return true;
  } catch (e) {
    return false;
  }
}

function getPxNumber(val) {
  val = val + "";
  return Number(val.split('px')[0]);
}

var NumericKeyboardPage = /*#__PURE__*/function (_BasePage) {
  _inherits(NumericKeyboardPage, _BasePage);

  var _super = _createSuper(NumericKeyboardPage);

  function NumericKeyboardPage(options) {
    var _this;

    _classCallCheck(this, NumericKeyboardPage);

    _this = _super.call(this);
    _this.selector = "page-NumericKeyboardPage";
    _this.className = "page-NumericKeyboardPage";
    _this.visibleParent = true;
    /** @type {HTMLInputElement} */

    _this.old_input;
    /** @type {HTMLDivElement} */

    _this.curr_input;
    _this.mouseDownEl = null;
    _this.old_input_hidden = false;
    _this.blinker = null;
    _this.value = "";
    _this.isTextSelected = false;
    _this.scrolled = 0;
    _this.isPipeVisible = false;
    _this._options = {
      layout: 0,
      selectOnFocus: false,
      selectForeColor: 'white',
      selectBackColor: '#039be5',
      theme: ''
    };
    _this.inputStyle = {};

    _this.setOptions(Object.assign({}, _this._options, options));

    return _this;
  }
  /**
  * 
  * @param {{layout:number,selectOnFocus: boolean,selectForeColor: string,selectBackColor:string}} value 
  */


  _createClass(NumericKeyboardPage, [{
    key: "setOptions",
    value: function setOptions(value) {
      this._options = value;
      this.className = "layout-" + this._options.layout + ' ' + this._options.theme;
    }
  }, {
    key: "unFocusCurrentElement",
    value: function unFocusCurrentElement() {
      this.stopBlinker();
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(this.old_input).css({
        display: this.original.elemDisplay
      });
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(this.curr_input).remove();
      this.old_input_hidden = false;
    }
  }, {
    key: "focusElement",
    value: function focusElement(elem) {
      var isNew = true; //same element

      if (this.curr_input == elem) {
        elem.blur();
        setTimeout(function () {
          window.focus();
        }, 1);
        return;
      } //switch to new element without closing keyboard


      if (this.curr_input) {
        this.enter();
        this.unFocusCurrentElement();
        isNew = false;
      }
      /** @type {HTMLInputElement} */


      this.old_input = elem;
      /** @type {HTMLDivElement} */

      this.curr_input = document.createElement('div');
      var st = Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(elem).css(['display', 'padding', 'padding-top', 'padding-bottom', 'border', 'border-top', 'border-bottom', 'border-left', 'border-right', 'border-radius', 'font', 'font-size', 'color', 'top', 'left', 'bottom', 'right', 'width', 'height', 'position', 'background', 'box-shadow']);
      var p = getPxNumber(st['height']) - (getPxNumber(st['padding-top']) + getPxNumber(st['padding-bottom']));
      st['line-height'] = p + 'px';
      st['overflow'] = 'hidden';
      this.inputStyle = st;
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(this.curr_input).css(st);
      this.setValue(elem.value);

      if (this._options.selectOnFocus) {
        this.isTextSelected = true;
      }

      if (isNew) {
        this.original = {
          type: elem.type,
          bodyStyle: Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])('body').css(['height', 'overflow', 'position']),
          elemClassName: elem.className,
          elemDisplay: Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(elem).css('display')
        };
        this.original.bodyStyle.height = "100%";
      } //remove focus from the old element!


      elem.blur();
      setTimeout(function () {
        window.focus();
      }, 1);
      this.startBlinker();

      if (isNew) {
        this.hookEvents();
      }
    }
  }, {
    key: "hookEvents",
    value: function hookEvents() {
      var _this2 = this;

      if (isTouchDevice()) {
        var ev_name = 'touchstart';
      } else {
        var ev_name = 'click';
      } //stop events bubbling past keyboard element


      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(this.page).on(ev_name, function (ev) {
        ev.stopPropagation();
      }); //attach button events

      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(this.page).on(ev_name, function (ev) {
        if (ev.target.tagName != "BUTTON") {
          return;
        }

        ev.stopPropagation();
        ev.target.classList.add('active');
        setTimeout(function () {
          ev.target.classList.remove('active');
        }, 100);
        var v = ev.target.value;

        if (v == "d") {
          _this2.backspace();
        } else if (v == "e") {
          _this2.destroyKB();
        } else if (v == "-") {
          _this2.minus();
        } else {
          _this2.type_char(ev.target.value);
        }
      }, true);
      var self = this; //handle hardware keyboard input

      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(document).on('keydown.virtual_keyboard', function (ev) {
        self.customKB_keydownhandler(ev);
      }); //handle click on anything other than the keyboard

      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(document).on('mousedown.virtual_keyboard', function (ev) {
        _this2.mouseDownEl = ev.target;
      });
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(document).on('click.virtual_keyboard mouseup.virtual_keyboard', function (ev) {
        /** @type {HTMLInputElement} */
        // @ts-ignore
        var el = ev.target; //if old element is still visible then hide the old element and exit here

        if (!_this2.old_input_hidden) {
          _this2.old_input_hidden = true;
          Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(_this2.old_input).css({
            display: 'none'
          });
          Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(_this2.curr_input).css({
            display: self.original.elemDisplay
          });
          Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(_this2.curr_input).insertAfter(_this2.old_input);

          _this2.setValue(_this2.old_input.value);

          return;
        } //weird click mousedown does not match!


        if (_this2.mouseDownEl !== el) {
          return;
        } //if clicked inside current_input then return


        if (_this2.curr_input === el || _this2.curr_input.contains(el)) {
          return;
        } //if clicked inside keyboard then return as well


        if (self.page.contains(el)) {
          return;
        } //in clicked on another "input[number]" then trigger change event for the current field


        if (el.tagName === "INPUT" && (el.type === "number" || el.getAttribute('number') != null)) {
          self.curr_input.dispatchEvent(new Event('change'));
          return;
        } //if clicked outside of keyboard AND target element is not input number, simulate ENTER


        ev.stopPropagation();
        self.destroyKB();
      });
      var w_h = window.innerHeight;
      var kb_h = this.page.offsetHeight; //phase one: show keyboard slowly with body the same

      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(this.page).css({
        top: w_h - kb_h + "px"
      });
      this.listenResize = true;

      this._resizeBody(true);
    }
  }, {
    key: "_resizeBody",
    value: function _resizeBody(emitResize) {
      var _this3 = this;

      if (!this.listenResize) {
        return;
      }

      var w_h = window.innerHeight;
      var kb_h = this.page.offsetHeight; //phase two resize body after keyboard is shown

      var self = this;
      setTimeout(function () {
        if (!self.page || !_this3.listenResize) {
          //in case page is already removed
          return;
        }

        var w_h = window.innerHeight;
        var b_h = w_h - kb_h;
        Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(self.page).css({
          top: w_h - kb_h + "px"
        });
        Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])('body').css({
          height: b_h + "px",
          overflow: 'visible',
          position: 'relative'
        });

        if (emitResize) {
          window.dispatchEvent(new Event('resize'));
        }

        var c = Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(self.curr_input).closest('.scroll').first();

        if (!c) {
          c = Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(self.curr_input).closest('.content').first();
        }

        if (c) {
          var input_p = Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(self.curr_input).offsetTop() + self.curr_input.offsetHeight - c.scrollTop;

          if (input_p > b_h) {
            var s = kb_h + c.scrollTop;
            Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(c).scrollTo({
              top: s,
              behavior: 'smooth'
            });
            _this3.scrolled = kb_h;
          }
        }
      }, 400);
    }
  }, {
    key: "destroyKB",
    value: function destroyKB() {
      this.destroy();
    }
    /*onBackNavigate(){
    this.destroyKB();
    return true;
    }*/
    //prepare for removing the keyboard page

  }, {
    key: "onBeforeDestroy",
    value: function onBeforeDestroy() {
      this.unFocusCurrentElement();
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(this.page).removeAllEventListeners();
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(document).off('keydown.virtual_keyboard');
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(document).off('click.virtual_keyboard mouseup.virtual_keyboard');
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(document).off('focus.virtual_keyboard');
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(document).off('mousedown.virtual_keyboard');
      var w_h = window.innerHeight;
      var kb_h = this.page.offsetHeight;
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])(this.page).css({
        top: w_h - kb_h + "px"
      });
      Object(_core_DOM__WEBPACK_IMPORTED_MODULE_5__[/* DOM */ "a"])('body').css(this.original.bodyStyle);
      this.listenResize = false;
      window.dispatchEvent(new Event('resize'));
      this.enter();
    }
  }, {
    key: "onResize",
    value: function onResize() {
      this.window_resize = true;

      this._resizeBody(false);
    }
  }, {
    key: "customKB_keydownhandler",
    value: function customKB_keydownhandler(e) {
      switch (e.keyCode) {
        case 27:
          e.preventDefault();
          this.destroyKB();
          break;

        case 46:
        case 8:
          e.preventDefault();
          this.backspace();
          break;

        case 13:
          e.preventDefault();
          this.destroyKB();
          break;

        case 109:
          e.preventDefault();
          this.minus();
          break;

        case 190:
        case 110:
          e.preventDefault();
          this.type_char(".");
          break;

        case 48:
        case 96:
          e.preventDefault();
          this.type_char(0);
          break;

        case 49:
        case 97:
          e.preventDefault();
          this.type_char(1);
          break;

        case 50:
        case 98:
          e.preventDefault();
          this.type_char(2);
          break;

        case 51:
        case 99:
          e.preventDefault();
          this.type_char(3);
          break;

        case 52:
        case 100:
          e.preventDefault();
          this.type_char(4);
          break;

        case 53:
        case 101:
          e.preventDefault();
          this.type_char(5);
          break;

        case 54:
        case 102:
          e.preventDefault();
          this.type_char(6);
          break;

        case 55:
        case 103:
          e.preventDefault();
          this.type_char(7);
          break;

        case 56:
        case 104:
          e.preventDefault();
          this.type_char(8);
          break;

        case 57:
        case 105:
          e.preventDefault();
          this.type_char(9);
          break;
      }
    }
  }, {
    key: "setValue",
    value: function setValue(t) {
      this.value = t;
      var v = Number(t);

      if (isNaN(v)) {
        v = Object(_core_helpers__WEBPACK_IMPORTED_MODULE_4__[/* numberFromLocaleString */ "e"])(t);
      }

      this.old_input.value = v;
      var style = "";

      if (this.isTextSelected) {
        style = "background-color: " + this._options.selectBackColor + "; color: " + this._options.selectForeColor;
      }

      var pipechar = "<span style=\"border-left:1px solid " + this.inputStyle['color'] + ";\">&nbsp;</span>";
      this.curr_input.innerHTML = "<span style=\"" + style + "\">" + t + '</span>' + (this.isPipeVisible ? pipechar : '&nbsp;');
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.value;
    }
  }, {
    key: "blink",
    value: function blink() {
      var t = this.getValue();
      this.isPipeVisible = !this.isPipeVisible;
      this.setValue(t);
    }
  }, {
    key: "startBlinker",
    value: function startBlinker() {
      var _this4 = this;

      this.blinker = setInterval(function () {
        if (!_this4.isDeleted) {
          _this4.blink();
        }
      }, 400);
    }
  }, {
    key: "stopBlinker",
    value: function stopBlinker() {
      this.isTextSelected = false;
      clearInterval(this.blinker);
      this.setValue(this.getValue());
    }
  }, {
    key: "type_char",
    value: function type_char(chr) {
      var r_val = this.getValue();

      if (this.isTextSelected) {
        this.isTextSelected = false;
        r_val = "";
      } //if DOT already exists, do nothing


      if (chr == "." && r_val.indexOf(".") >= 0) {
        return;
      } //if first char is 0, add DOT after


      if (r_val == "0" && chr !== ".") {
        r_val = r_val + ".";
      } //if first char is DOT, add 0 before


      if (r_val == "" && chr == ".") {
        r_val = r_val + "0"; //. will be added later
      }

      this.setValue(r_val + chr.toString());
      this.old_input.dispatchEvent(new Event('input'));
      this.onClick();
      return false;
    }
  }, {
    key: "backspace",
    value: function backspace() {
      var r_val = this.getValue(); //remove caret

      this.isTextSelected = false;
      this.setValue(r_val.substring(0, r_val.length - 1)); //remove last char and add caret

      this.old_input.dispatchEvent(new Event('input'));
      this.onClick();
      return false;
    }
    /**
    * *** Override ***
    */

  }, {
    key: "onClick",
    value: function onClick() {}
  }, {
    key: "minus",
    value: function minus() {
      var r_val = this.getValue(); //remove caret

      this.isTextSelected = false;

      if (r_val.substring(0, 1) == "-") {
        //Remove minus
        this.setValue(r_val.substring(1, r_val.length)); //remove minus char
      } else {
        //remove minus
        this.setValue("-" + r_val); //add minus
      }

      this.old_input.dispatchEvent(new Event('input'));
      this.onClick();
      return false;
    }
  }, {
    key: "enter",
    value: function enter(silent) {
      this.stopBlinker();
      silent = silent || false;

      if (this.curr_input != null && typeof this.getValue() !== "undefined") {
        //trigger onchange
        this.old_input.dispatchEvent(new Event('change')); //trigger blur

        this.old_input.dispatchEvent(new Event('blur'));
      }

      if (!silent) this.onClick();
      return false;
    }
  }, {
    key: "template",
    get: function get() {
      return this.extendTemplate(_get(_getPrototypeOf(NumericKeyboardPage.prototype), "template", this), _NumericKeyboardPage_html__WEBPACK_IMPORTED_MODULE_1__);
    }
  }]);

  return NumericKeyboardPage;
}(_BasePage__WEBPACK_IMPORTED_MODULE_2__[/* BasePage */ "a"]);

/***/ }),

/***/ "./pages/NumericKeyboard/NumericKeyboardPage.html":
/*!********************************************************!*\
  !*** ./pages/NumericKeyboard/NumericKeyboardPage.html ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = "<div class=\"wrapper\">\r\n<table class=\"keyboard\" [if]=\"this._options.layout == 0\" colpadding=\"0\" colspacing=\"0\">\r\n\t<tr>\r\n\t\t<td><button value=\"1\">1</button></td>\r\n\t\t<td><button value=\"2\">2</button></td>\r\n\t\t<td><button value=\"3\">3</button></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><button value=\"4\">4</button></td>\r\n\t\t<td><button value=\"5\">5</button></td>\r\n\t\t<td><button value=\"6\">6</button></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><button value=\"7\">7</button></td>\r\n\t\t<td><button value=\"8\">8</button></td>\r\n\t\t<td><button value=\"9\">9</button></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><button class=\"gr\" value=\".\">.</button></td>\r\n\t\t<td><button value=\"0\">0</button></td>\r\n\t\t<td><button class=\"gr\" id=\"delete\" value=\"d\"><i class=\"NumericKeyboardPage-icon-kb_delete\"></i></button></td>\r\n\t</tr>\r\n</table>\r\n\r\n<table class=\"keyboard\" [if]=\"this._options.layout == 1\" colpadding=\"0\" colspacing=\"0\">\r\n\t<tr>\r\n\t\t<td><button value=\"1\">1</button></td>\r\n\t\t<td><button value=\"2\">2</button></td>\r\n\t\t<td><button value=\"3\">3</button></td>\r\n\t\t<td><button class=\"gr\" id=\"delete\" value=\"d\"><i class=\"NumericKeyboardPage-icon-kb_delete\"></i></button></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><button value=\"4\">4</button></td>\r\n\t\t<td><button value=\"5\">5</button></td>\r\n\t\t<td><button value=\"6\">6</button></td>\r\n\t\t<td rowspan=\"3\"><button class=\"gr\" id=\"enter\" value=\"e\"><i class=\"NumericKeyboardPage-icon-kb_enter\"></i></button></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><button value=\"7\">7</button></td>\r\n\t\t<td><button value=\"8\">8</button></td>\r\n\t\t<td><button  value=\"9\">9</button></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><button class=\"gr\" value=\"-\">-</button></td>\r\n\t\t<td><button value=\"0\">0</button></td>\r\n\t\t<td><button class=\"gr\" value=\".\">.</button></td>\r\n\t</tr>\r\n</table>\r\n<table class=\"keyboard\" [if]=\"this._options.layout == 2\" colpadding=\"0\" colspacing=\"0\">\r\n\t<tr>\r\n\t\t<td><button value=\"1\">1</button></td>\r\n\t\t<td><button value=\"2\">2</button></td>\r\n\t\t<td><button value=\"3\">3</button></td>\r\n\t\t<td><button value=\"4\">4</button></td>\r\n\t\t<td><button value=\"5\">5</button></td>\r\n\t\t<td><button value=\"6\">6</button></td>\r\n\t\t<td><button class=\"gr\" id=\"delete\" value=\"d\" class=\"delete\"><i class=\"NumericKeyboardPage-icon-kb_delete\"></i></button></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><button value=\"7\">7</button></td>\r\n\t\t<td><button value=\"8\">8</button></td>\r\n\t\t<td><button  value=\"9\">9</button></td>\r\n\t\t<td><button value=\"0\">0</button></td>\r\n\t\t<td><button class=\"gr\" value=\".\">.</button></td>\r\n\t\t<td><button class=\"gr\" value=\"-\">-</button></td>\r\n\t\t<td><button class=\"gr\" id=\"enter\" value=\"e\"><i class=\"NumericKeyboardPage-icon-kb_enter\"></i></button></td>\r\n\t</tr>\r\n</table>\t\r\n</div>"

/***/ }),

/***/ "./pages/NumericKeyboard/NumericKeyboardPage.scss":
/*!********************************************************!*\
  !*** ./pages/NumericKeyboard/NumericKeyboardPage.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./scss/app.scss":
/*!***********************!*\
  !*** ./scss/app.scss ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./scss/buttons.scss":
/*!***************************!*\
  !*** ./scss/buttons.scss ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./scss/forms.scss":
/*!*************************!*\
  !*** ./scss/forms.scss ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./test/InjectTemplate.js":
/*!********************************!*\
  !*** ./test/InjectTemplate.js ***!
  \********************************/
/*! exports provided: InjectTemplate */
/*! exports used: InjectTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InjectTemplate; });
/* harmony import */ var _core_NavController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/NavController */ "./core/NavController.js");

var InjectTemplate = {
  /** @type {NavController} */
  Nav: null
};

/***/ }),

/***/ "./test/Pages/RootPage.js":
/*!********************************!*\
  !*** ./test/Pages/RootPage.js ***!
  \********************************/
/*! exports provided: RootPage */
/*! exports used: RootPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RootPage; });
/* harmony import */ var _TestArrayPage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TestArrayPage */ "./test/Pages/TestArrayPage.js");
/* harmony import */ var _TestFormsPage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TestFormsPage */ "./test/Pages/TestFormsPage.js");
/* harmony import */ var _pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../pages/HeaderPage/HeaderPage */ "./pages/HeaderPage/HeaderPage.js");
/* harmony import */ var _TestFileUploadPage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TestFileUploadPage */ "./test/Pages/TestFileUploadPage.js");
/* harmony import */ var _TestChangeWatcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TestChangeWatcher */ "./test/Pages/TestChangeWatcher.js");
/* harmony import */ var _TestFormsVisiblePage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TestFormsVisiblePage */ "./test/Pages/TestFormsVisiblePage.js");
/* harmony import */ var _TestComponentPage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TestComponentPage */ "./test/Pages/TestComponentPage.js");
/* harmony import */ var _TestFormsSelectItemsPage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TestFormsSelectItemsPage */ "./test/Pages/TestFormsSelectItemsPage.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }









var RootPage = /*#__PURE__*/function (_HeaderPage) {
  _inherits(RootPage, _HeaderPage);

  var _super = _createSuper(RootPage);

  function RootPage() {
    var _this;

    _classCallCheck(this, RootPage);

    _this = _super.call(this);
    _this.pages = [{
      page: _TestArrayPage__WEBPACK_IMPORTED_MODULE_0__[/* TestArrayPage */ "a"],
      name: "Test Array Page"
    }, {
      page: _TestFormsPage__WEBPACK_IMPORTED_MODULE_1__[/* TestFormsPage */ "a"],
      name: "Test Forms Page"
    }, {
      page: _TestFileUploadPage__WEBPACK_IMPORTED_MODULE_3__[/* TestFileUploadPage */ "a"],
      name: "Test File upload"
    }, {
      page: _TestChangeWatcher__WEBPACK_IMPORTED_MODULE_4__[/* TestChangeWatcher */ "a"],
      name: "Test Change Watcher"
    }, {
      page: _TestFormsVisiblePage__WEBPACK_IMPORTED_MODULE_5__[/* TestFormsVisiblePage */ "a"],
      name: "Test Forms Visible"
    }, {
      page: _TestComponentPage__WEBPACK_IMPORTED_MODULE_6__[/* TestComponentPage */ "a"],
      name: "Test Component"
    }, {
      page: _TestFormsSelectItemsPage__WEBPACK_IMPORTED_MODULE_7__[/* TestFormsSelectItemsPage */ "a"],
      name: "Test Forms Select Items"
    }];
    return _this;
  }

  _createClass(RootPage, [{
    key: "loadPage",
    value: function loadPage(index) {
      var p = this.Nav.push(this.pages[index].page);
      p.backButton = true;
    }
  }, {
    key: "template",
    get: function get() {
      return _get(_getPrototypeOf(RootPage.prototype), "extendTemplate", this).call(this, _get(_getPrototypeOf(RootPage.prototype), "template", this), template);
    }
  }]);

  return RootPage;
}(_pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_2__[/* HeaderPage */ "a"]);
var template = "\n<div [foreach]=\"index in this.pages as item\">\n\t<button onclick=\"this.loadPage(index)\">{{ item.name }}</button>\n</div>\n";

/***/ }),

/***/ "./test/Pages/TestArrayPage.js":
/*!*************************************!*\
  !*** ./test/Pages/TestArrayPage.js ***!
  \*************************************/
/*! exports provided: TestArrayPage */
/*! exports used: TestArrayPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TestArrayPage; });
/* harmony import */ var _components_Forms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/Forms */ "./components/Forms.js");
/* harmony import */ var _pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../pages/HeaderPage/HeaderPage */ "./pages/HeaderPage/HeaderPage.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



var TestArrayPage = /*#__PURE__*/function (_HeaderPage) {
  _inherits(TestArrayPage, _HeaderPage);

  var _super = _createSuper(TestArrayPage);

  function TestArrayPage() {
    var _this;

    _classCallCheck(this, TestArrayPage);

    _this = _super.call(this);
    _this.arr = [];
    _this.objarr = [];
    _this.findex = 0;
    _this.formarr = [];
    _this.objobj = {};
    return _this;
  }

  _createClass(TestArrayPage, [{
    key: "onAddClicked",
    value: function onAddClicked() {
      this.arr.push(this.index++);
    }
  }, {
    key: "onDeleteItemClicked",
    value: function onDeleteItemClicked(index) {
      this.arr.splice(index, 1);
    }
  }, {
    key: "onAddFormClicked",
    value: function onAddFormClicked() {
      this.arr.push(this.findex);
      this.objarr.push({
        a: this.findex
      });
      this.objobj[this.findex] = {
        a: this.findex
      };
      this.formarr.push(new _components_Forms__WEBPACK_IMPORTED_MODULE_0__[/* Forms */ "a"]([{
        type: "text",
        title: "Some field " + this.findex,
        name: "someName_" + this.findex++
      }]));
    }
  }, {
    key: "onDeleteFormItemClicked",
    value: function onDeleteFormItemClicked(index) {
      this.arr.splice(index, 1);
      this.objarr.splice(index, 1);
      delete this.objobj[index];
      var f = this.formarr.splice(index, 1)[0]; //f.destroy();
    }
  }, {
    key: "template",
    get: function get() {
      return this.extendTemplate(_get(_getPrototypeOf(TestArrayPage.prototype), "template", this), template);
    }
  }]);

  return TestArrayPage;
}(_pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_1__[/* HeaderPage */ "a"]);
var template = "\n<div class=\"fill scroll\">\n\t<!-- <div>\n\t\t<button onclick = \"this.onAddClicked()\" class=\"btn btn-primary\">Add Item</button>\n\t</div>\n\n\t<div [foreach] = \"index in this.arr as item\">\n\t\t{{index}} {{item}} <button onclick=\"this.onDeleteItemClicked(index)\" class=\"btn btn-danger\">X</button>\n\t</div> -->\n\n\t<div>\n\t\t<button onclick = \"this.onAddFormClicked()\" class=\"btn btn-primary\">Add Form Item</button>\n\t</div>\n\n\t<div [foreach] = \"index in this.formarr as item\">\n\t\t<div [component]=\"item\"></div>\n\t\t <button onclick=\"this.onDeleteFormItemClicked(index)\" class=\"btn btn-danger\">X</button>\n\t</div>\n\n\t<div [foreach] = \"index in this.objarr as item\">\n\t\t{{item.a}} \n\t</div>\n\n\t<div [foreach] = \"index in this.objobj as item\">\n\t\t{{item.a}} \n\t</div>\n\n\t<div [foreach] = \"index in this.arr as item\">\n\t\t{{index}} {{item}}\n\t</div>\n\n</div>\n\n";

/***/ }),

/***/ "./test/Pages/TestChangeWatcher.js":
/*!*****************************************!*\
  !*** ./test/Pages/TestChangeWatcher.js ***!
  \*****************************************/
/*! exports provided: TestChangeWatcher */
/*! exports used: TestChangeWatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TestChangeWatcher; });
/* harmony import */ var _pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../pages/HeaderPage/HeaderPage */ "./pages/HeaderPage/HeaderPage.js");
/* harmony import */ var _core_Watcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/Watcher */ "./core/Watcher.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



var TestChangeWatcher = /*#__PURE__*/function (_HeaderPage) {
  _inherits(TestChangeWatcher, _HeaderPage);

  var _super = _createSuper(TestChangeWatcher);

  function TestChangeWatcher() {
    var _this;

    _classCallCheck(this, TestChangeWatcher);

    _this = _super.call(this);
    _this.backButton = true;
    _this.object = {
      counter: 0,
      level2: {
        counter: 0
      },
      level3: {
        counter: 0
      }
    };
    _this.log = "";
    return _this;
  }

  _createClass(TestChangeWatcher, [{
    key: "mutate",
    value: function mutate() {
      var _this2 = this;

      this.log += "Mutate State counters to " + (this.object.counter + 1) + "\n";
      this.object.counter++;
      this.object.level2.counter++;
      setTimeout(function () {
        _this2.object.level3.counter++;
      }, 10);
    }
  }, {
    key: "hookWatchers",
    value: function hookWatchers() {
      var _this3 = this;

      this.log += "Watchers Connected!\n";
      _core_Watcher__WEBPACK_IMPORTED_MODULE_1__[/* Watcher */ "a"].on(this.object, function (target, prop, value) {
        _this3.log += "Watcher 1: Prop " + prop + " changed to " + value + "\n";
      }, function () {
        //throw new Error("Watcher1 onChange fail!")
        _this3.log += "Watcher 1: Object updated\n";
      });
      _core_Watcher__WEBPACK_IMPORTED_MODULE_1__[/* Watcher */ "a"].on(this.object, function (target, prop, value) {
        _this3.log += "Watcher 2: Prop " + prop + " changed to " + value + "\n";
      }, function () {
        _this3.log += "Watcher 2: Object updated\n";
      });
    }
  }, {
    key: "unHookWatchers",
    value: function unHookWatchers() {
      _core_Watcher__WEBPACK_IMPORTED_MODULE_1__[/* Watcher */ "a"].off(this.object);
    }
  }, {
    key: "memTest",
    value: function memTest() {
      var _this4 = this;

      this.log = "Running 100000 mounts\n";

      for (var index = 0; index <= 100000; index++) {
        setTimeout(function () {
          _this4.unHookWatchers();

          _this4.hookWatchers();

          _this4.mutate();

          _this4.log = "New Counter: " + _this4.object.counter + "\n";
        }, 1);
      } //this.log += `New Counter: ${this.object.counter}\n`
      //this.mutate();
      //this.unHookWatchers();

    }
  }, {
    key: "onNewWindow",
    value: function onNewWindow() {
      var p = this.Nav.push(TestChangeWatcher);
      p.object = this.object;
    }
  }, {
    key: "template",
    get: function get() {
      return _get(_getPrototypeOf(TestChangeWatcher.prototype), "extendTemplate", this).call(this, _get(_getPrototypeOf(TestChangeWatcher.prototype), "template", this), template);
    }
  }]);

  return TestChangeWatcher;
}(_pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_0__[/* HeaderPage */ "a"]);
var template = "\n<div class=\"fill scroll\">\n<div><button onclick=\"this.hookWatchers()\">Hook Watchers</button> <button onclick=\"this.unHookWatchers()\">Un-Hook Watchers</button> <button onclick=\"this.memTest()\">Test for Memory Leaks</button></div>\n<div><button onclick=\"this.mutate()\">Mutate State</button></div>\n<div><button onclick=\"this.onNewWindow()\">New Window</button></div>\n<pre>{{ this.log }}</pre>\n</div>\n";

/***/ }),

/***/ "./test/Pages/TestComponentPage.js":
/*!*****************************************!*\
  !*** ./test/Pages/TestComponentPage.js ***!
  \*****************************************/
/*! exports provided: TestComponentPage */
/*! exports used: TestComponentPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TestComponentPage; });
/* harmony import */ var _pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../pages/HeaderPage/HeaderPage */ "./pages/HeaderPage/HeaderPage.js");
/* harmony import */ var _components_BaseComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/BaseComponent */ "./components/BaseComponent.js");
/* harmony import */ var _core_DOM__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/DOM */ "./core/DOM.js");
/* harmony import */ var _core_Binder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../core/Binder */ "./core/Binder.js");
/* harmony import */ var _core_Watcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/Watcher */ "./core/Watcher.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






var TestComponentPage = /*#__PURE__*/function (_HeaderPage) {
  _inherits(TestComponentPage, _HeaderPage);

  var _super = _createSuper(TestComponentPage);

  function TestComponentPage() {
    var _this;

    _classCallCheck(this, TestComponentPage);

    _this = _super.call(this);
    _this.counter = 0;
    _this.comp = null;
    return _this;
  }

  _createClass(TestComponentPage, [{
    key: "onCreateCompClicked",
    value: function onCreateCompClicked() {
      var el = Object(_core_DOM__WEBPACK_IMPORTED_MODULE_2__[/* DOM */ "a"])(this.page).find("#placeholder").first();
      var c = new TestComponenet(); //mount componenet on to dom

      c.binder = new _core_Binder__WEBPACK_IMPORTED_MODULE_3__[/* Binder */ "a"](c).bindElements({}, c.template);

      c._onInit(el);

      el.append(c.binder.vdom.elem);
      _core_Watcher__WEBPACK_IMPORTED_MODULE_4__[/* Watcher */ "a"].on(this, function (target, prop, val) {
        if (prop == "counter") {
          c.counter = val;
        }
      }); //c.update();

      this.comp = c;
    }
  }, {
    key: "onIncrementClicked",
    value: function onIncrementClicked() {
      this.counter++;
    }
  }, {
    key: "template",
    get: function get() {
      return _get(_getPrototypeOf(TestComponentPage.prototype), "extendTemplate", this).call(this, _get(_getPrototypeOf(TestComponentPage.prototype), "template", this), "\n    <div><button onclick=\"this.onCreateCompClicked();\">Create</button> <button onclick=\"this.onIncrementClicked();\">Increment</button></div>\n      <div id=\"placeholder\">Old content</div>\n    ");
    }
  }]);

  return TestComponentPage;
}(_pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_0__[/* HeaderPage */ "a"]);

var TestComponenet = /*#__PURE__*/function (_BaseComponent) {
  _inherits(TestComponenet, _BaseComponent);

  var _super2 = _createSuper(TestComponenet);

  function TestComponenet() {
    var _this2;

    _classCallCheck(this, TestComponenet);

    _this2 = _super2.call(this);
    _this2.counter = 0;
    _this2.template = +"<div><button onclick=\"this.counter++\">I am Alive! {{ this.counter }}</button></div>";
    console.log(
    /*html*/
    "<br>", "\n     <div>vvv</div>\n    ");
    console.log(
    /*html*/
    "\n         <br>\n    ", "<br>") + "<br>" + ["<br>"];
    var s = [
    /*html*/
    "<br>"];
    var aa = "ssssss";
    return _this2;
  }

  return TestComponenet;
}(_components_BaseComponent__WEBPACK_IMPORTED_MODULE_1__[/* BaseComponent */ "a"]);

/***/ }),

/***/ "./test/Pages/TestFileUploadPage.js":
/*!******************************************!*\
  !*** ./test/Pages/TestFileUploadPage.js ***!
  \******************************************/
/*! exports provided: TestFileUploadPage */
/*! exports used: TestFileUploadPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TestFileUploadPage; });
/* harmony import */ var _pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../pages/HeaderPage/HeaderPage */ "./pages/HeaderPage/HeaderPage.js");
/* harmony import */ var _core_FileAccess__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/FileAccess */ "./core/FileAccess.js");
/* harmony import */ var _core_simple_confirm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/simple_confirm */ "./core/simple_confirm.js");
/* harmony import */ var _core_DOM__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/DOM */ "./core/DOM.js");
/* harmony import */ var _components_Forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/Forms */ "./components/Forms.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






var TestFileUploadPage = /*#__PURE__*/function (_HeaderPage) {
  _inherits(TestFileUploadPage, _HeaderPage);

  var _super = _createSuper(TestFileUploadPage);

  function TestFileUploadPage() {
    var _this;

    _classCallCheck(this, TestFileUploadPage);

    _this = _super.call(this);
    _this.fileField = "";
    _this.fileFieldFileData = null;
    _this.formData = {};
    _this.form = new _components_Forms__WEBPACK_IMPORTED_MODULE_4__[/* Forms */ "a"]([{
      type: "file",
      name: "file1",
      title: "Select File",
      validateRule: "required|max:500|min:50|mimes:jpg,jpeg,png,pdf,doc,docx"
    }], _this.formData);
    return _this;
  }

  _createClass(TestFileUploadPage, [{
    key: "fileFieldChanged",
    value: function fileFieldChanged(evt) {
      var _this2 = this;

      //console.log(this.fileField);
      if (!_core_FileAccess__WEBPACK_IMPORTED_MODULE_1__[/* FileAccess */ "a"].isSupported) {
        Object(_core_simple_confirm__WEBPACK_IMPORTED_MODULE_2__[/* Alert */ "a"])("File upload is not supported!");
        return;
      }
      /** @type {HTMLInputElement} */


      var fileFiled = evt.target;
      var file = fileFiled.files[0];
      _core_FileAccess__WEBPACK_IMPORTED_MODULE_1__[/* FileAccess */ "a"].ReadFile(fileFiled.files[0]).DataURL().then(function (ret) {
        //console.log(ret);
        if (file.type.indexOf("image/") == 0) {
          _this2.fileFieldImage = ret;
        }

        _this2.fileFieldFileData = ret;
      })["catch"](function (err) {
        console.log(err);
      });
    }
  }, {
    key: "fileFieldUploadClicked",
    value: function fileFieldUploadClicked() {
      var data = {
        field1: "value1",
        field2: "value2",
        field3: "value3",
        field4: "value4"
      }; // new FormData();

      var formData = new FormData();
      formData.append("data", JSON.stringify(data));
      formData.append("fileFieldFileData", this.fileFieldFileData); //formData.append('fileFieldFileData', this.fileFieldFileData);

      $.ajax("http://mg.zero-divide.net/api/dump/", {
        method: "POST",
        data: formData,
        //contentType: "application/json",
        dataType: "json",
        processData: false
      }).done(function (data) {
        if (data.success) {
          alert('Your file was successfully uploaded!');
        } else {
          alert('There was an error uploading your file!');
        }
      }).fail(function (err) {
        console.log(err);
      });
    }
  }, {
    key: "formUploadClicked",
    value: function formUploadClicked() {
      var data = this.formData;
      var formData = new FormData();
      formData.append("data", JSON.stringify(data));
      formData.append("fileFieldFileData", this.fileFieldFileData); //formData.append('fileFieldFileData', this.fileFieldFileData);

      window.fetch("http://mg.zero-divide.net/api/dump/", {
        method: "POST",
        mode: 'cors',
        // no-cors, *cors, same-origin
        cache: 'no-cache',
        // *default, no-cache, reload, force-cache, only-if-cached
        redirect: 'follow',
        headers: new Headers([['Content-Type', 'application/json']]),
        body: JSON.stringify(data)
      }).then(function (ret) {
        console.log(ret);

        if (ret.status == 200) {
          alert('Your file was successfully uploaded!');
        } else {
          alert('There was an error uploading your file!');
        }
      }); // $.ajax(
      // 	"http://mg.zero-divide.net/api/dump/",
      // 	{
      // 		method: "POST",
      // 		data: JSON.stringify(data),
      // 		//contentType: "application/json",
      // 		dataType:"json",
      // 		processData: false
      // 	})
      // .done(data=>{
      // 	if (data.success) {
      // 		alert('Your file was successfully uploaded!');
      // 	} else {
      // 		alert('There was an error uploading your file!');
      // 	}
      // }).fail(err=>{
      // 	console.log(err)
      // })
    }
  }, {
    key: "template",
    get: function get() {
      return this.extendTemplate(_get(_getPrototypeOf(TestFileUploadPage.prototype), "template", this), template);
    }
  }]);

  return TestFileUploadPage;
}(_pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_0__[/* HeaderPage */ "a"]);
var template = "\n<div class=\"fill scroll\">\n\t<h3>Plain File Field</h3>\n\t<div class = \"fieldgroup\">\n\t\t<img [src] = \"this.fileFieldImage\" width =\"100px\"/>\n\t\t<input type=\"file\" name = \"fileField\" bind=\"this.fileField\" onchange=\"this.fileFieldChanged($event)\"/>\n\t</div>\n\t<div class = \"fieldgroup\">\n\t\t<button type=\"button\" onclick = \"this.fileFieldUploadClicked()\">Upload!</button>\n\t</div>\n\n\t<h3>Forms File Field</h3>\n\t<div [component]=\"this.form\"></div>\n\t<div class = \"fieldgroup\">\n\t\t<button type=\"button\" onclick = \"this.formUploadClicked()\">Upload!</button>\n\t</div>\n\t<button onclick=\"this.form.validator.validate()\">Validate</button\n</div>\t\n";

/***/ }),

/***/ "./test/Pages/TestFormsPage.js":
/*!*************************************!*\
  !*** ./test/Pages/TestFormsPage.js ***!
  \*************************************/
/*! exports provided: TestFormsPage */
/*! exports used: TestFormsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TestFormsPage; });
/* harmony import */ var _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../pages/BasePage */ "./pages/BasePage.js");
/* harmony import */ var _components_Forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/Forms */ "./components/Forms.js");
/* harmony import */ var _core_simple_confirm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/simple_confirm */ "./core/simple_confirm.js");
/* harmony import */ var _pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../pages/HeaderPage/HeaderPage */ "./pages/HeaderPage/HeaderPage.js");
/* harmony import */ var _pages_NumericKeyboard_NumericKeyboard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../pages/NumericKeyboard/NumericKeyboard */ "./pages/NumericKeyboard/NumericKeyboard.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






var TestFormsPage = /*#__PURE__*/function (_HeaderPage) {
  _inherits(TestFormsPage, _HeaderPage);

  var _super = _createSuper(TestFormsPage);

  function TestFormsPage() {
    var _this;

    _classCallCheck(this, TestFormsPage);

    _this = _super.call(this);
    _this.form1data = {};
    _this.form1errors = {};
    _this.form1attributes = {};
    _this.form1template = [{
      type: "number",
      name: "number1",
      title: "Enter Number 1"
    }, {
      type: "number",
      name: "number2",
      title: "Enter Number 2",
      validateRule: "required"
    }, {
      type: "checkbox",
      name: "checkbox1",
      title: "Show text1"
    }, {
      type: "text",
      name: "text1",
      title: "text1",
      validateRule: "required",
      displayRule: "true_if:checkbox1,true",
      attributes: {
        onclick: "this.onClicked()"
      }
    }, {
      type: "checkbox",
      name: "checkbox2",
      title: "Show form1",
      validateRule: "required"
    }, {
      type: "form",

      /*name:"form1"*/
      title: "form1",
      displayRule: "true_if:checkbox2,true",
      items: [{
        type: "text",
        name: "text2",
        title: "text2",
        validateRule: "required"
      }]
    }, {
      type: "form",
      name: "someForm11",
      title: "form2",
      items: [{
        type: "text",
        name: "text3",
        title: "someForm11.text3",
        validateRule: "required"
      }]
    }, {
      type: "number",
      name: "number3",
      title: "Enter Number 3"
    }];
    _this.form1 = new _components_Forms__WEBPACK_IMPORTED_MODULE_1__[/* Forms */ "a"](_this.form1template, _this.form1data, _this.form1errors, {
      nestedData: true
    });
    _this.form1.onClicked = _this.onClicked;
    _this.visibleForm1data = null;
    console.log(_pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"] instanceof Object);
    console.log(new _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]() instanceof Object);
    console.log(_typeof(_pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]));
    console.log(_typeof(new _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]()));
    console.log(_typeof(_pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"].prototype));
    console.log(_typeof(new _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]().prototype));
    _pages_NumericKeyboard_NumericKeyboard__WEBPACK_IMPORTED_MODULE_4__[/* NumericKeyboard */ "a"].enable();
    _pages_NumericKeyboard_NumericKeyboard__WEBPACK_IMPORTED_MODULE_4__[/* NumericKeyboard */ "a"].options.layout = 1;
    return _this;
  }

  _createClass(TestFormsPage, [{
    key: "onClicked",
    value: function onClicked() {
      Object(_core_simple_confirm__WEBPACK_IMPORTED_MODULE_2__[/* Alert */ "a"])("CLICKED!");
    }
  }, {
    key: "validate",
    value: function validate() {
      this.isValid = this.form1.validator.validate();
      this.visibleForm1data = this.form1.getVisibleData();
    }
  }, {
    key: "template",
    get: function get() {
      return this.extendTemplate(_get(_getPrototypeOf(TestFormsPage.prototype), "template", this), template);
    }
  }]);

  return TestFormsPage;
}(_pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_3__[/* HeaderPage */ "a"]);
var template = "\n<div class=\"scroll fill\">\n\t<div [component] = \"this.form1\"></div>\n\t<button onclick=\"this.validate()\">Validate {{ this.isValid ? 'VALID' : 'INVALID'}}</button>\n\t<!-- <hr>\n\tform1template\n\t<pre>{{ JSON.stringify(this.form1template,null,'  ') }}</pre> -->\n\t<hr>\n\tform1data\n\t<pre>{{ JSON.stringify(this.form1data,null,'  ') }}</pre>\n\t<hr>\n\tvisibleForm1data \n\t<pre>{{ JSON.stringify(this.visibleForm1data,null,'  ') }}</pre>\n\t<hr>\n\tform1errors\n\t<pre>{{ JSON.stringify(this.form1errors,null,'  ') }}</pre>\n\t<hr>\n\tform.fields\n\t<pre>{{ JSON.stringify(this.form1.fields,null,'  ') }}</pre>\n</div>\n";

/***/ }),

/***/ "./test/Pages/TestFormsSelectItemsPage.js":
/*!************************************************!*\
  !*** ./test/Pages/TestFormsSelectItemsPage.js ***!
  \************************************************/
/*! exports provided: TestFormsSelectItemsPage */
/*! exports used: TestFormsSelectItemsPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TestFormsSelectItemsPage; });
/* harmony import */ var _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../pages/BasePage */ "./pages/BasePage.js");
/* harmony import */ var _components_Forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/Forms */ "./components/Forms.js");
/* harmony import */ var _core_simple_confirm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/simple_confirm */ "./core/simple_confirm.js");
/* harmony import */ var _pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../pages/HeaderPage/HeaderPage */ "./pages/HeaderPage/HeaderPage.js");
/* harmony import */ var _pages_NumericKeyboard_NumericKeyboard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../pages/NumericKeyboard/NumericKeyboard */ "./pages/NumericKeyboard/NumericKeyboard.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






var TestFormsSelectItemsPage = /*#__PURE__*/function (_HeaderPage) {
  _inherits(TestFormsSelectItemsPage, _HeaderPage);

  var _super = _createSuper(TestFormsSelectItemsPage);

  function TestFormsSelectItemsPage() {
    var _this;

    _classCallCheck(this, TestFormsSelectItemsPage);

    _this = _super.call(this);
    _this.form1data = {};
    _this.form1errors = {};
    _this.form1attributes = {};
    var form1template = [{
      "validateRule": "required",
      "name": "commentMethod",
      "placeholder": "-- Please Select --",
      "title": "Comments",
      "type": "select",
      "items": [{
        "title": "Appraiser requires this appraisal to be cancelled/re-assigned",
        "value": "cancelledReassignedAppraiser",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "Appraiser requires supporting documentation in order to complete such as floor plans, blueprints, etc.",
        "value": "requireAgreementSupportingDoc",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "Appraiser assigned to this request",
        "value": "assignedAppraiser",
        "items": [{
          "validateRule": "required",
          "name": "appraiserUsername",
          "placeholder": "Select Appraiser",
          "title": "Appraiser Name",
          "type": "select",
          "items": [{
            "title": "Appraiser not found",
            "value": "",
            "items": [{
              "name": "note1",
              "title": "Note",
              "type": "label",
              "value": "Enter the appraiser information below. And contact NAS at appraisers@nationwideappraisals.com to set up an account."
            }, {
              "validateRule": "",
              "name": "appraiserDesignation",
              "title": "Designation",
              "type": "select",
              "items": [{
                "title": "Candidate",
                "value": "Candidate"
              }, {
                "title": "CRA",
                "value": "CRA"
              }, {
                "title": "DAR",
                "value": "DAR"
              }, {
                "title": "E.A.",
                "value": "E.A."
              }, {
                "title": "DAC",
                "value": "DAC"
              }, {
                "title": "AACI",
                "value": "AACI"
              }, {
                "title": "MVA",
                "value": "MVA"
              }]
            }, {
              "validateRule": "required|max:50",
              "name": "appraiserFirstname",
              "title": "First Name",
              "type": "text"
            }, {
              "validateRule": "required|max:50",
              "name": "appraiserLastname",
              "title": "Last Name",
              "type": "text"
            }, {
              "validateRule": "required|max:20",
              "name": "appraiserPhone",
              "title": "Phone Number",
              "type": "phone"
            }, {
              "validateRule": "required|max:20",
              "name": "appraiserMobilePhone",
              "title": "Mobile Number",
              "type": "phone"
            }, {
              "validateRule": "required|max:100",
              "name": "appraiserEmail",
              "title": "Email Address",
              "type": "email"
            }]
          }, {
            "title": "John Flynn",
            "value": "John Flynn"
          }, {
            "title": "joseph-assoc",
            "value": "joseph-assoc"
          }, {
            "title": "tmdar",
            "value": "tmdar"
          }]
        }]
      }, {
        "title": "Request is a tenanted property, appraiser will update NAS site with appointment as soon as tenant confirms",
        "value": "tenantedProperty",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "Appraiser requires purchase/sale agreement in order to complete.",
        "value": "requireAgreement",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "Fee increase status update",
        "value": "feeIncreaseStatusUpdate",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "Appraiser requires additional contact information and/or confirmation of address information",
        "value": "requireVerification",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "Require technical support/assistance",
        "value": "technicalSupport",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "File assigned as a Desktop, however a Desktop is not possible for this appraisal",
        "value": "fileAssignedAsDesktop",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "Applicant delay",
        "value": "applicantNotReadyToProceed",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "Policy/requirements verification",
        "value": "policyRequirementsVerification",
        "items": [{
          "validateRule": "required",
          "name": "check1",
          "title": "I have reviewed the lender requirements attached to this request",
          "type": "checkbox"
        }, {
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "textarea",
          "value": "Policy/requirements verification"
        }]
      }, {
        "title": "Estimated Time of Report Delivery",
        "value": "appraisalReportWillBeUploadedShortly",
        "items": [{
          "validateRule": "required",
          "name": "report_date_from",
          "title": "Report Completion Date",
          "type": "dateTime"
        }, {
          "validateRule": "required",
          "name": "report_date_to",
          "title": "Report Completion Time",
          "type": "time"
        }, {
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }, {
        "title": "Left message for the contact(s) ",
        "value": "messageLeft",
        "items": [{
          "validateRule": "required",
          "name": "comment",
          "title": "Message",
          "type": "text"
        }]
      }]
    }];
    _this.form1 = new _components_Forms__WEBPACK_IMPORTED_MODULE_1__[/* Forms */ "a"](form1template, _this.form1data, _this.form1errors, {
      nestedData: true
    });
    _this.form1template = form1template;
    _this.form1.onClicked = _this.onClicked;
    _this.visibleForm1data = null;
    console.log(_pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"] instanceof Object);
    console.log(new _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]() instanceof Object);
    console.log(_typeof(_pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]));
    console.log(_typeof(new _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]()));
    console.log(_typeof(_pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"].prototype));
    console.log(_typeof(new _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]().prototype));
    _pages_NumericKeyboard_NumericKeyboard__WEBPACK_IMPORTED_MODULE_4__[/* NumericKeyboard */ "a"].enable();
    _pages_NumericKeyboard_NumericKeyboard__WEBPACK_IMPORTED_MODULE_4__[/* NumericKeyboard */ "a"].options.layout = 1;
    return _this;
  }

  _createClass(TestFormsSelectItemsPage, [{
    key: "onClicked",
    value: function onClicked() {
      Object(_core_simple_confirm__WEBPACK_IMPORTED_MODULE_2__[/* Alert */ "a"])("CLICKED!");
    }
  }, {
    key: "validate",
    value: function validate() {
      this.isValid = this.form1.validator.validate();
      this.visibleForm1data = this.form1.getVisibleData();
    }
  }, {
    key: "template",
    get: function get() {
      return this.extendTemplate(_get(_getPrototypeOf(TestFormsSelectItemsPage.prototype), "template", this), template);
    }
  }]);

  return TestFormsSelectItemsPage;
}(_pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_3__[/* HeaderPage */ "a"]);
var template = "\n<div class=\"scroll fill\">\n\t<div [component] = \"this.form1\"></div>\n\t<button onclick=\"this.validate()\">Validate {{ this.isValid ? 'VALID' : 'INVALID'}}</button>\n\t\n\t<hr>\n\tform1data\n\t<pre>{{ JSON.stringify(this.form1data,null,'  ') }}</pre>\n\t<hr>\n\tvisibleForm1data \n\t<pre>{{ JSON.stringify(this.visibleForm1data,null,'  ') }}</pre>\n\t<hr>\n\tform1errors\n\t<pre>{{ JSON.stringify(this.form1errors,null,'  ') }}</pre>\n\t<hr>\n\tform.fields\n  <pre>{{ JSON.stringify(this.form1.fields,null,'  ') }}</pre>\n  <hr>\n\tform1template\n\t<pre>{{ JSON.stringify(this.form1template,null,'  ') }}</pre>\n</div>\n";

/***/ }),

/***/ "./test/Pages/TestFormsVisiblePage.js":
/*!********************************************!*\
  !*** ./test/Pages/TestFormsVisiblePage.js ***!
  \********************************************/
/*! exports provided: TestFormsVisiblePage */
/*! exports used: TestFormsVisiblePage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TestFormsVisiblePage; });
/* harmony import */ var _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../pages/BasePage */ "./pages/BasePage.js");
/* harmony import */ var _components_Forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/Forms */ "./components/Forms.js");
/* harmony import */ var _core_simple_confirm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/simple_confirm */ "./core/simple_confirm.js");
/* harmony import */ var _pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../pages/HeaderPage/HeaderPage */ "./pages/HeaderPage/HeaderPage.js");
/* harmony import */ var _pages_NumericKeyboard_NumericKeyboard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../pages/NumericKeyboard/NumericKeyboard */ "./pages/NumericKeyboard/NumericKeyboard.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






var TestFormsVisiblePage = /*#__PURE__*/function (_HeaderPage) {
  _inherits(TestFormsVisiblePage, _HeaderPage);

  var _super = _createSuper(TestFormsVisiblePage);

  function TestFormsVisiblePage() {
    var _this;

    _classCallCheck(this, TestFormsVisiblePage);

    _this = _super.call(this);
    _this.form1data = {};
    _this.form1errors = {};
    _this.form1attributes = {};
    _this.form1template = [{
      type: "select",
      name: "select1",
      value: "val1",
      title: "option1",
      items: [{
        value: "val1",
        title: "Value 1"
      }, {
        value: "val2",
        title: "Value 2"
      }]
    }, {
      type: "select",
      name: "select2",
      value: "val11",
      title: "select2",
      displayRule: "true_if:select1,val2",
      items: [{
        value: "val11",
        title: "Value 1"
      }, {
        value: "val22",
        title: "Value 2"
      }]
    }, {
      type: "text",
      name: "text1",
      title: "text1",
      validateRule: "required",
      displayRule: "true_if:select2,val22"
    }];
    _this.form1 = new _components_Forms__WEBPACK_IMPORTED_MODULE_1__[/* Forms */ "a"](_this.form1template, _this.form1data, _this.form1errors, {
      nestedData: true
    });
    _this.form1.onClicked = _this.onClicked;
    _this.visibleForm1data = null;
    console.log(_pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"] instanceof Object);
    console.log(new _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]() instanceof Object);
    console.log(_typeof(_pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]));
    console.log(_typeof(new _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]()));
    console.log(_typeof(_pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"].prototype));
    console.log(_typeof(new _pages_BasePage__WEBPACK_IMPORTED_MODULE_0__[/* BasePage */ "a"]().prototype));
    _pages_NumericKeyboard_NumericKeyboard__WEBPACK_IMPORTED_MODULE_4__[/* NumericKeyboard */ "a"].enable();
    _pages_NumericKeyboard_NumericKeyboard__WEBPACK_IMPORTED_MODULE_4__[/* NumericKeyboard */ "a"].options.layout = 1;
    return _this;
  }

  _createClass(TestFormsVisiblePage, [{
    key: "onClicked",
    value: function onClicked() {
      Object(_core_simple_confirm__WEBPACK_IMPORTED_MODULE_2__[/* Alert */ "a"])("CLICKED!");
    }
  }, {
    key: "validate",
    value: function validate() {
      this.isValid = this.form1.validator.validate();
      this.visibleForm1data = this.form1.getVisibleData();
    }
  }, {
    key: "template",
    get: function get() {
      return this.extendTemplate(_get(_getPrototypeOf(TestFormsVisiblePage.prototype), "template", this), template);
    }
  }]);

  return TestFormsVisiblePage;
}(_pages_HeaderPage_HeaderPage__WEBPACK_IMPORTED_MODULE_3__[/* HeaderPage */ "a"]);
var template = "\n<div class=\"scroll fill\">\n\t<div [component] = \"this.form1\"></div>\n\t<button onclick=\"this.validate()\">Validate {{ this.isValid ? 'VALID' : 'INVALID'}}</button>\n\t<hr>\n\tform1template\n\t<pre>{{ JSON.stringify(this.form1template,null,'  ') }}</pre>\n\t<hr>\n\tform1data\n\t<pre>{{ JSON.stringify(this.form1data,null,'  ') }}</pre>\n\t<hr>\n\tvisibleForm1data \n\t<pre>{{ JSON.stringify(this.visibleForm1data,null,'  ') }}</pre>\n\t<hr>\n\tform1errors\n\t<pre>{{ JSON.stringify(this.form1errors,null,'  ') }}</pre>\n\t<hr>\n\tform.fields\n\t<pre>{{ JSON.stringify(this.form1.fields,null,'  ') }}</pre>\n</div>\n";

/***/ }),

/***/ "./test/index.test.js":
/*!****************************!*\
  !*** ./test/index.test.js ***!
  \****************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_polyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/polyfill.js */ "./core/polyfill.js");
/* harmony import */ var _core_polyfill_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_core_polyfill_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _scss_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../scss/app.scss */ "./scss/app.scss");
/* harmony import */ var _scss_app_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_scss_app_scss__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _scss_forms_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../scss/forms.scss */ "./scss/forms.scss");
/* harmony import */ var _scss_forms_scss__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_scss_forms_scss__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _scss_buttons_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../scss/buttons.scss */ "./scss/buttons.scss");
/* harmony import */ var _scss_buttons_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_scss_buttons_scss__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _core_Translate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/Translate.js */ "./core/Translate.js");
/* harmony import */ var _core_Injector_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/Injector.js */ "./core/Injector.js");
/* harmony import */ var _InjectTemplate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./InjectTemplate.js */ "./test/InjectTemplate.js");
/* harmony import */ var _core_NavController_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/NavController.js */ "./core/NavController.js");
/* harmony import */ var _Pages_RootPage_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Pages/RootPage.js */ "./test/Pages/RootPage.js");
/* harmony import */ var _core_DOM_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../core/DOM.js */ "./core/DOM.js");
/* harmony import */ var _components_Forms__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/Forms */ "./components/Forms.js");











window['Translate'] = _core_Translate_js__WEBPACK_IMPORTED_MODULE_4__[/* Translate */ "a"];
window['DOM'] = _core_DOM_js__WEBPACK_IMPORTED_MODULE_9__[/* DOM */ "a"];
var Inject = _core_Injector_js__WEBPACK_IMPORTED_MODULE_5__[/* Injector */ "a"].implement(_InjectTemplate_js__WEBPACK_IMPORTED_MODULE_6__[/* InjectTemplate */ "a"]);
Inject.Nav = new _core_NavController_js__WEBPACK_IMPORTED_MODULE_7__[/* NavController */ "a"]();
var v = Inject.Nav.setRoot(_Pages_RootPage_js__WEBPACK_IMPORTED_MODULE_8__[/* RootPage */ "a"]); // Forms.field_definitions["select"] = function(forms, el, parentPath){
//   return forms.renderFieldGroupHTML(el, [
//     `<select-tree name="${el.name}"
//       [el] = "${forms.refactorAttrName('this.fields.' + el._name)}"
//       (onChange)="this.events.change.apply(null,arguments)"
//       [(value)]= "${forms.refactorAttrName('this.data.' + el._name)}"
//       placeholder="${el.placeholder}"
//       [items] = "${forms.refactorAttrName('this.fields.' + el._name + '.items')}">
//     </select-tree>`
//   ]);
// }

/***/ }),

/***/ 0:
/*!**********************************!*\
  !*** multi ./test/index.test.js ***!
  \**********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./test/index.test.js */"./test/index.test.js");


/***/ }),

/***/ 1:
/*!*********************************!*\
  !*** readable-stream (ignored) ***!
  \*********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFja1xcYm9vdHN0cmFwIiwid2VicGFjazovLy9jb21wb25lbnRzXFxCYXNlQ29tcG9uZW50LmpzIiwid2VicGFjazovLy9jb21wb25lbnRzXFxGb3Jtcy5qcyIsIndlYnBhY2s6Ly8vY29yZVxcQmluZGVyLmpzIiwid2VicGFjazovLy9jb3JlXFxDaGFuZ2VXYXRjaGVyLmpzIiwid2VicGFjazovLy9jb3JlXFxET00uanMiLCJ3ZWJwYWNrOi8vL2NvcmVcXERhdGVUaW1lLmpzIiwid2VicGFjazovLy9jb3JlXFxGaWxlQWNjZXNzLmpzIiwid2VicGFjazovLy9jb3JlXFxJbmplY3Rvci5qcyIsIndlYnBhY2s6Ly8vY29yZVxcTmF2Q29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vY29yZVxcT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly8vY29yZVxcVHJhbnNsYXRlLmpzIiwid2VicGFjazovLy9jb3JlXFxXYXRjaGVyLmpzIiwid2VicGFjazovLy9jb3JlXFxmb3JtX3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vY29yZVxcaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vY29yZVxccG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vL2NvcmVcXHNpbXBsZV9jb25maXJtLmpzIiwid2VicGFjazovLy9jb3JlXFx0ZXh0LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGJhc2U2NC1qc1xcaW5kZXguanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcYnVmZmVyXFxpbmRleC5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzXFxkb20tc2VyaWFsaXplclxcaW5kZXguanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcZG9tZWxlbWVudHR5cGVcXGluZGV4LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGRvbWhhbmRsZXJcXGluZGV4LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGRvbWhhbmRsZXJcXGxpYlxcZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzXFxkb21oYW5kbGVyXFxsaWJcXG5vZGUuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcZG9tdXRpbHNcXGluZGV4LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGRvbXV0aWxzXFxsaWJcXGhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcZG9tdXRpbHNcXGxpYlxcbGVnYWN5LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGRvbXV0aWxzXFxsaWJcXG1hbmlwdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzXFxkb211dGlsc1xcbGliXFxxdWVyeWluZy5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzXFxkb211dGlsc1xcbGliXFxzdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcZG9tdXRpbHNcXGxpYlxcdHJhdmVyc2FsLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGVudGl0aWVzXFxpbmRleC5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzXFxlbnRpdGllc1xcbGliXFxkZWNvZGUuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcZW50aXRpZXNcXGxpYlxcZGVjb2RlX2NvZGVwb2ludC5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzXFxlbnRpdGllc1xcbGliXFxlbmNvZGUuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcZXZlbnRzXFxldmVudHMuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcZXhwci1ldmFsXFxkaXN0XFxidW5kbGUuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcaHRtbHBhcnNlcjJcXGxpYlxcQ29sbGVjdGluZ0hhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcaHRtbHBhcnNlcjJcXGxpYlxcRmVlZEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcaHRtbHBhcnNlcjJcXGxpYlxcUGFyc2VyLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGh0bWxwYXJzZXIyXFxsaWJcXFByb3h5SGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzXFxodG1scGFyc2VyMlxcbGliXFxTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcaHRtbHBhcnNlcjJcXGxpYlxcVG9rZW5pemVyLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGh0bWxwYXJzZXIyXFxsaWJcXFdyaXRhYmxlU3RyZWFtLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGh0bWxwYXJzZXIyXFxsaWJcXGluZGV4LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGllZWU3NTRcXGluZGV4LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGluaGVyaXRzXFxpbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXGlzYXJyYXlcXGluZGV4LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXG1vbWVudFxcbW9tZW50LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXHByb2Nlc3NcXGJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlc1xcc2FmZS1idWZmZXJcXGluZGV4LmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXHN0cmluZ19kZWNvZGVyXFxsaWJcXHN0cmluZ19kZWNvZGVyLmpzIiwid2VicGFjazovLy9ub2RlX21vZHVsZXNcXHV0aWxcXHN1cHBvcnRcXGlzQnVmZmVyQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzXFx1dGlsXFx1dGlsLmpzIiwid2VicGFjazovLy8od2VicGFjaylcXGJ1aWxkaW5cXGdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spXFxidWlsZGluXFxtb2R1bGUuanMiLCJ3ZWJwYWNrOi8vL3BhZ2VzXFxCYXNlUGFnZS5qcyIsIndlYnBhY2s6Ly8vcGFnZXNcXERpYWxvZ1BhZ2VcXERpYWxvZ1BhZ2UuaHRtbCIsIndlYnBhY2s6Ly8vcGFnZXNcXERpYWxvZ1BhZ2VcXERpYWxvZ1BhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vcGFnZXMvRGlhbG9nUGFnZS9EaWFsb2dQYWdlLnNjc3M/NTJmYyIsIndlYnBhY2s6Ly8vcGFnZXNcXEhlYWRlclBhZ2VcXEhlYWRlclBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vcGFnZXMvSGVhZGVyUGFnZS9IZWFkZXJQYWdlLnNjc3M/NzE5NiIsIndlYnBhY2s6Ly8vcGFnZXNcXE51bWVyaWNLZXlib2FyZFxcTnVtZXJpY0tleWJvYXJkLmpzIiwid2VicGFjazovLy9wYWdlc1xcTnVtZXJpY0tleWJvYXJkXFxOdW1lcmljS2V5Ym9hcmRQYWdlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vcGFnZXMvTnVtZXJpY0tleWJvYXJkL051bWVyaWNLZXlib2FyZFBhZ2Uuc2Nzcz84M2VmIiwid2VicGFjazovLy8uL3Njc3MvYXBwLnNjc3M/ZTk5OCIsIndlYnBhY2s6Ly8vLi9zY3NzL2J1dHRvbnMuc2Nzcz80MzQxIiwid2VicGFjazovLy8uL3Njc3MvZm9ybXMuc2Nzcz85MmMyIiwid2VicGFjazovLy90ZXN0XFxJbmplY3RUZW1wbGF0ZS5qcyIsIndlYnBhY2s6Ly8vdGVzdFxcUGFnZXNcXFJvb3RQYWdlLmpzIiwid2VicGFjazovLy90ZXN0XFxQYWdlc1xcVGVzdEFycmF5UGFnZS5qcyIsIndlYnBhY2s6Ly8vdGVzdFxcUGFnZXNcXFRlc3RDaGFuZ2VXYXRjaGVyLmpzIiwid2VicGFjazovLy90ZXN0XFxQYWdlc1xcVGVzdENvbXBvbmVudFBhZ2UuanMiLCJ3ZWJwYWNrOi8vL3Rlc3RcXFBhZ2VzXFxUZXN0RmlsZVVwbG9hZFBhZ2UuanMiLCJ3ZWJwYWNrOi8vL3Rlc3RcXFBhZ2VzXFxUZXN0Rm9ybXNQYWdlLmpzIiwid2VicGFjazovLy90ZXN0XFxQYWdlc1xcVGVzdEZvcm1zU2VsZWN0SXRlbXNQYWdlLmpzIiwid2VicGFjazovLy90ZXN0XFxQYWdlc1xcVGVzdEZvcm1zVmlzaWJsZVBhZ2UuanMiLCJ3ZWJwYWNrOi8vL3Rlc3RcXGluZGV4LnRlc3QuanMiLCJ3ZWJwYWNrOi8vL3JlYWRhYmxlLXN0cmVhbSAoaWdub3JlZCkiXSwibmFtZXMiOlsiQmFzZUNvbXBvbmVudCIsImJpbmRlciIsInRlbXBsYXRlIiwiZXZlbnRzIiwidGVtcGxhdGVGcmFnbWVudCIsInRlbXBsYXRlVXBkYXRlIiwiT2JqZWN0cyIsImJpbmRNZXRob2RzIiwicGFyZW50UGFnZSIsImNvbnRhaW5lciIsImF0dHJpYnV0ZXMiLCJjb21wb25lbnRzIiwicHVzaCIsIm9uSW5pdCIsIm9uQmVmb3JlVXBkYXRlIiwidXBkYXRlRWxlbWVudHMiLCJvblVwZGF0ZSIsIm9uRGVzdHJveSIsImkiLCJjb21wIiwidHJ5Q2FsbCIsImRlc3Ryb3kiLCJzdG9wV2F0Y2giLCJzdHJpcCIsIkNoYW5nZVdhdGNoZXIiLCJGb3JtcyIsImZvcm1UZW1wbGF0ZSIsImRhdGEiLCJlcnJvcnMiLCJvcHRpb25zIiwiZXh0cmFEYXRhIiwibmVzdGVkRGF0YSIsImZvcm1DbGFzcyIsImZpZWxkQ2xhc3MiLCJPYmplY3QiLCJhc3NpZ24iLCJhdHRyRXZlbnRzIiwidHlwZXMiLCJhcnJheXMiLCJlbGVtZW50SXRlbXMiLCJpbnB1dCIsImV2Iiwic2V0VGltZW91dCIsIm9uSW5wdXQiLCJjbGljayIsIm9uQ2xpY2siLCJjaGFuZ2UiLCJ0YXJnZXQiLCJuYW1lIiwidmFsaWRhdG9yIiwidmFsaWRhdGVGaWVsZCIsIm9uQ2hhbmdlIiwiY29uc29sZSIsImVycm9yIiwiRXJyb3IiLCJmb2N1cyIsIl9uYW1lIiwiZmllbGRzIiwiYWN0aXZlIiwiYmx1ciIsImZpZWxkX2RlZmluaXRpb25zIiwidXBkYXRlVGVtcGxhdGUiLCJmb3JFYWNoIiwiZmllbGQiLCJrZXkiLCJjdXJyZW50VmFsdWUiLCJnZXRQcm9wZXJ0eUJ5UGF0aCIsInZhbHVlIiwidW5kZWZpbmVkIiwic2V0UHJvcGVydHlCeVBhdGgiLCJlcnIiLCJGb3JtVmFsaWRhdG9yIiwic2V0RGF0YVZhbHVlc0Zyb21GaWVsZHMiLCJ2YWxpZGF0ZVZpc2liaWxpdHkiLCJodG1sIiwicmVuZGVyQXJyYXkiLCJmb3JtSFRNTCIsImlzT2JqZWN0IiwiZXZlbnQiLCJldnQiLCJpc1RpbWUiLCJlbCIsImRhdGUiLCJ0aW1lIiwiRGF0ZVRpbWUiLCJmcm9tSHVtYW5UaW1lIiwiZnJvbUh1bWFuRGF0ZSIsIm5ld0RhdGUiLCJjb21iaW5lRGF0ZVRpbWUiLCJzZWxTIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxFIiwib2xkIiwiVGV4dCIsImZvcm1hdFBob25lIiwiZGlmIiwibGVuZ3RoIiwic2VsZWN0aW9uRW5kIiwicGFyZW50UGF0aCIsImhhc093blByb3BlcnR5IiwidHlwZSIsInJldCIsInJlbmRlcl9maWVsZCIsImpvaW4iLCJ0b0xvd2VyQ2FzZSIsIml0ZW1zIiwiSlNPTiIsInN0cmluZ2lmeSIsIm11c3RIYXZlIiwidmFsaWRhdGVSdWxlIiwiaW5kZXhPZiIsInJlbmRlckZvcm1IVE1MIiwicmVuZGVyQXJyYXlIVE1MIiwiZ2V0VmlzaWJsZURhdGEiLCJjaGlsZHJlbkhUTUwiLCJidXR0b25FbCIsInRpdGxlIiwiYWRkQnV0dG9uIiwiYWRkVGl0bGUiLCJlbEhUTUwiLCJub1RpdGxlIiwibm9FcnJvckhpbnQiLCJpc1JlcXVpcmVkIiwiaW5jbHVkZXMiLCJpc0FycmF5IiwiYWRkRXJyb3JIaW50Iiwib2JqZWN0IiwicGF0aCIsImV4IiwiZW1wdHkiLCJoaWRkZW4iLCJjbGFzc25hbWVzIiwib3ZlcnJpZGUiLCJvcHQiLCJwbGFjZWhvbGRlciIsInJlZmFjdG9yQXR0ck5hbWUiLCJnZW5lcmF0ZUF0dHJpYnV0ZXMiLCJ1bml0IiwiaWNvbiIsIlRyYW5zbGF0ZSIsImF1dG9jb3JyZWN0IiwiYXV0b2NhcGl0YWxpemUiLCJlbGVtcyIsIml0ZW0iLCJkYXRhVHlwZSIsImZvcm1hdCIsImJpbmQiLCJvbmNoYW5nZSIsImVsZW0iLCJpdGVtc19pdGVtcyIsImhhc1N1Ykl0ZW1zIiwib3B0aW9uIiwiaXNOdW1iZXIiLCJyZW5kZXJGaWVsZEdyb3VwSFRNTCIsInJlbmRlclNlbGVjdEdyb3VwSFRNTCIsImluZm8iLCJhZGRJbmZvIiwiaGludCIsIkFsZXJ0IiwidGV4dCIsImNhbGxiYWNrIiwiaXNTdHJpbmciLCJyZXBsYWNlIiwiYSIsImIiLCJjIiwiZCIsIm9uY2xpY2siLCJtYXAiLCJidG4iLCJzdHJPcHRzIiwidmFsIiwiRE9NIiwiZmluZCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImZpbGVOYW1lIiwic3BsaXQiLCJwb3AiLCJ2IiwidHJpbURpc3BsYXlGaWxlTmFtZSIsInJvdW5kIiwic2l6ZSIsIkZpbGVBY2Nlc3MiLCJpc1N1cHBvcnRlZCIsIndhcm4iLCJmaWxlRmlsZWQiLCJmaWxlIiwiZmlsZXMiLCJmaWxlQmxvYiIsImZvcm0iLCJmb3JtcyIsImFkZEZvcm0iLCJhcnJheSIsImFkZEFycmF5IiwiZW1haWwiLCJhc3NlcnRWYWxpZGF0ZVJ1bGVIYXMiLCJhZGRJbnB1dCIsImFkZEZpbGUiLCJkYXRldGltZSIsImRhdGVUaW1lIiwiZGF0ZUVsIiwidGltZUVsIiwibnVtYmVyIiwicGF0dGVybiIsIm5vdmFsaWRhdGUiLCJwYXNzd29yZCIsImFkZFBhc3N3b3JkIiwicGhvbmUiLCJvbmlucHV0IiwidGV4dGFyZWEiLCJhZGRUZXh0QXJlYSIsImNoZWNrYm94IiwiZWxfY2giLCJjb3B5IiwiYWRkQ2hlY2siLCJyYWRpbyIsImFkZFJhZGlvIiwic2VsZWN0IiwiYWRkU2VsZWN0IiwibGFiZWwiLCJhZGRMYWJlbCIsImxpbmsiLCJhZGRMaW5rIiwiYnV0dG9uIiwiYnV0dG9ucyIsImFkZEJ1dHRvbnMiLCJhZGRIdG1sIiwiaHRtbHBhcnNlciIsInJlcXVpcmUiLCJCaW5kZXIiLCJjb250ZXh0IiwiZ2V0dGVyQ2FzaGUiLCJzZWxmIiwidmRvbSIsImluamVjdFZhcnMiLCJFQXR0clJlc3VsdCIsIk5vbmUiLCJOb2RlQ2hhbmdlZCIsIlNraXBDaGlsZHJlbiIsIk5vZGVDaGFuZ2VkU2tpcENoaWxkcmVuIiwiZXZlbnRDYWxsYmFja3MiLCJpbnNlcnRCZWZvcmUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsInBhcmVudE5vZGUiLCJpbnNlcnRBZnRlciIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0VkRvbUVsZW1lbnRBZnRlciIsInZEb20iLCJDb21tZW50IiwiaW5zZXJ0VkRvbUl0ZW1zQWZ0ZXIiLCJmcmFnIiwiZG9jdW1lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYXBwZW5kQ2hpbGQiLCJnZXR0ZXJzIiwiY29tcG9uZW50IiwicmVtb3ZlRWxlbWVudCIsImtlZXBFdmVudHMiLCJyZW1vdmVDaGlsZCIsInJlbW92ZURPTUVsZW1lbnQiLCJyZW1vdmVWRG9tSXRlbXMiLCJyZXBsYWNlRWxlbWVudCIsIm9sZE5vZGUiLCJzZXRDb250ZXh0Iiwic2V0SW5qZWN0VmFycyIsInZhcnMiLCJiaW5kRWxlbWVudHMiLCJleGVjdXRlU291cmNlIiwicGFyc2VFbGVtZW50IiwicmVtb3ZlVkRPTUVsZW1lbnQiLCJlc2NhcGVBdHRyaWJ1dGUiLCJhdHRyVmFsdWUiLCJoYW5kbGVyIiwiRG9tSGFuZGxlciIsImRvbSIsInBhcnNlciIsIlBhcnNlciIsImxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzIiwiZGVjb2RlRW50aXRpZXMiLCJwYXJzZUNvbXBsZXRlIiwicm9vdGVsZW1lbnRzIiwiZmlsdGVyIiwicGFyc2VBU1QiLCJhdHRyaWJzIiwiZnJhZ21lbnQiLCJjaGlsZHJlbiIsIm9iaiIsInRoaXNTb3J1cmNlIiwid3JhcERpcmVjdGl2ZSIsImVzY2FwZWQiLCJiaXRzIiwic3BsaXROb2RlcyIsInAxIiwicDIiLCJ0YWciLCJjb21wb25lbmV0IiwidHJ5R2V0Q29tcG9uZW5ldCIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiY2hpbGQiLCJnZXRIdG1sRnJvbVJlbmRlciIsImF0dHJzIiwiYXR0cnNfc3RyIiwiYXRyIiwicGFyc2VkU291cmNlIiwiaW5qIiwic2NvcGUiLCJjcmVhdGVEaXJlY3RpdmVFbGVtZW50IiwiY3JlYXRlRWxlbWVudHMiLCJpbmplY3QiLCJkaXJlY3RpdmVGcmFnbWVudCIsImF0dHJLZXlzIiwia2V5cyIsImF0dHJOYW1lIiwiYmluZEV4cHJlc3Npb24iLCJjcmVhdGVDb21tZW50IiwiclR5cGUiLCJnZXRSZWFjdGl2aXR5VHlwZSIsImdldEZvcmVhY2hBdHRyUGFydHMiLCJjcmVhdGVHZXR0ZXIiLCJpdGVtQnVpbGRlciIsImdldEF0dHJpYnV0ZSIsImFwcGVuZCIsImNoaWxkTm9kZXMiLCJJTkpFQ1QiLCJ2YWx1ZXMiLCJzZXR0ZXJzIiwiY2FsbGVycyIsImV4ZWN1dGVBdHRyaWJ1dGUiLCJtZXNzYWdlIiwiY3JlYXRlRWxlbWVudCIsInZkb21JdGVtcyIsInBsYWluQXR0cnMiLCJyZW5kZXJJbW1lZGlhdGVseSIsImNyZWF0ZVRleHROb2RlIiwidmFsdWVzRCIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZVNldHRlciIsImlzRWxlbWVudFNldHRpbmciLCJhcHBseUNhbGxiYWNrcyIsImNyZWF0ZUNhbGxlciIsImlpIiwiaXNGdW5jdGlvbiIsImJpbmRFdmVudHNUb0NvbnRleHQiLCJleGVjIiwiRnVuY3Rpb24iLCJpc1JlYWN0aXZlR2V0dGVyIiwibWF0Y2hlcyIsIm1hdGNoIiwidkRvbUNyZWF0ZUl0ZW1zIiwib24iLCJEb2N1bWVudEZyYWdtZW50IiwiYXR0ciIsInNfbmFtZSIsInN1YnN0ciIsInVwZGF0ZUJvdW5kQ29udGV4dFByb3BlcnR5IiwiZmluZEVsZW1JbmplY3QiLCJhZGRFdmVudExpc3RlbmVyIiwiVkRPTSIsImlzU2tpcFVwZGF0ZSIsImNoZWNrVkRvbU5vZGUiLCJub2RlQ2hhbmdlZCIsImRpclJlc3VsdCIsImxvZyIsImF0dHJpYnV0ZSIsImdldHRlciIsImlzVHJ1ZSIsInRyaWdnZXIiLCJkdXJhdGlvbiIsImVudGVyIiwiZW50ZXJfYWN0aXZlIiwiZW50ZXJfdG8iLCJsZWF2ZSIsImxlYXZlX2FjdGl2ZSIsImxlYXZlX3RvIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwic2hpZnQiLCJuZXdWYWx1ZSIsInVwZGF0ZUJvdW5kRWxlbWVudCIsInJlbW92ZUF0dHJpYnV0ZSIsInByb3AiLCJzdHlsZSIsImRpc3BsYXkiLCJjbGFzc05hbWUiLCJpbm5lckhUTUwiLCJwYXJ0cyIsImZvIiwiZm8xIiwidG91Y2hlZEtleXMiLCJtb3ZlQWxsVG9GcmFnbWVudCIsImluZGV4IiwiaGFzTmV3IiwiaGFzRGVsZXRlZCIsImhhc0NoYW5nZXMiLCJpc09iakxpdGVyYWwiLCJwYXJlbnRFbGVtZW50IiwiY192RG9tIiwicF92RG9tIiwiZHluYW1pY0V2ZW50cyIsInNldHRlciIsImNhbGxlciIsImNvbnN0cnVjdG9yIiwicF9mcmFnIiwiX29uSW5pdCIsInVwZGF0ZSIsImFwcGx5Q2FsbEJhY2siLCJldk5hbWUiLCJjYW5jZWxVSVVwZGF0ZSIsInJlcGFpbnQiLCJjYWxsYmFja3MiLCJrIiwiaXNFbGVtZW50U2V0dGluZ09uSW5wdXQiLCJjcmVhdGVFeGVjdXRlRWxlbUF0dHJHZXR0ZXIiLCJyZXN1bHQiLCJmb3JtYXRzIiwiaXNOYU4iLCJsbiIsInBhcnNlSW50IiwiTnVtYmVyIiwidG9Mb2NhbGVTdHJpbmciLCJ0aXRsZXMiLCJ0b0h1bWFuRGF0ZVRpbWUiLCJ0b0h1bWFuRGF0ZSIsInRvSHVtYW5UaW1lIiwidGFnTmFtZSIsImZpcnN0T3B0aW9uIiwic2VsZWN0ZWQiLCJmVmFsIiwic2VsIiwiY3YiLCJpc0Jvb2xlYW4iLCJjaGVja2VkIiwidG9JbnB1dFZhbHVlIiwic3JjIiwibm9kZVZhbHVlIiwiaW5uZXJUZXh0IiwiZm9ybWF0VmFsdWVUb0VsZW0iLCJudW1iZXJGcm9tTG9jYWxlU3RyaW5nIiwiZnJvbUh1bWFuRGF0ZVRpbWUiLCJza2lwVXBkYXRlIiwiZG9tRWxWYWwiLCJ2RG9tZG9tRWxWYWwiLCJwIiwid2hlcmUiLCJwX25hbWUiLCJwYXJ0IiwiZXhwcmVzc2lvbiIsImNyZWF0ZUluamVjdFZhclRleHQiLCJjYXNoZSIsImVsZW1lbnQiLCJudW0iLCJkZWNpbWFscyIsInNjYWxlIiwiTWF0aCIsInBvdyIsIndpbmRvdyIsImVuIiwicHJvcENoYW5nZUhhbmxlciIsIlN5bWJvbCIsIm9iamVjdENoYW5nZUhhbmxlciIsIldhdGNoZXIiLCJza2lwIiwicHJvcGVydHkiLCJvZmYiLCJpZGVudGl0eVN5bWJvbCIsImVsZW1PclF1ZXJ5IiwiZ2V0QXJyYXkiLCJpc0l0ZXJhYmxlIiwiSFRNTEVsZW1lbnQiLCJpbnRlcnBvbGF0ZUxpbmUiLCJzdGVwcyIsIk4iLCJzdGVwIiwiYW51bWF0ZVRvRGVzdCIsInQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ5IiwibGVycCIsIngiLCJzdGFydCIsImVuZCIsInB4UmVxdWlyZWRLZXlzIiwicmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMiLCJoYW5kbGVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVIYW5kbGVyIiwiYXIiLCJqIiwiZXZlbnRIYW5kbGVycyIsImFkZFB4Iiwia2V5TmFtZSIsImlkZW50aXR5IiwiZWFjaCIsImVsZW1BcnJheSIsImdldCIsImZpcnN0IiwicmVtb3ZlQXR0ciIsImNzcyIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJlbFN0eWxlcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInRvZ2dsZSIsIm9uUmVtb3ZlRWxlbWVudCIsImNoaWxkT3JDaGlsZHJlbiIsImNoQXJyYXkiLCJyZWZDaGlsZCIsIm5leHRFbGVtZW50U2libGluZyIsInJlcGxhY2VXaXRoIiwibmV3RWxlbWVudCIsInBhcmVudCIsImNhcHR1cmUiLCJvbkNoaWxkIiwicXVlcnkiLCJtc01hdGNoZXNTZWxlY3RvciIsImNsb3Nlc3QiLCJlbGVtZW50cyIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsImhlaWdodCIsIm9mZnNldEhlaWdodCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJvZmZzZXQiLCJpbm5lckhlaWdodCIsImNsaWVudEhlaWdodCIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsImRpc3RhbmNlIiwib2Zmc2V0UGFyZW50Iiwic2Nyb2xsVG8iLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiYmVoYXZpb3IiLCJzaG93IiwiX0RPTV9vbGRTdHlsZSIsImhpZGUiLCJpbnN0YW5jZSIsImNyZWF0ZSIsInNtYXJ0Rm9ybWF0Iiwib3V0cHV0T2Zmc2V0Iiwibm93IiwibW9tZW50IiwidXRjT2Zmc2V0IiwiaGFzWm9uZSIsIl90em0iLCJzYW1lWm9uZSIsImYiLCJ5ZWFyIiwibW9udGgiLCJ3ZWVrIiwiZGF5IiwiZm9ybWF0TG9jYWxEYXRlIiwiX19kYXRlIiwiaXNWYWxpZCIsImZyb21Mb2NhbERhdGUiLCJ0b0lTT1N0cmluZyIsIl9odW1hbkRhdGUiLCJ0b0RhdGUiLCJfaHVtYW5UaW1lIiwiX2h1bWFuRGF0ZVRpbWUiLCJ0b0Zvcm1hdCIsIl9odW1hbk1NRERZWVlZIiwidG9KU09ORGF0ZSIsIl9KU09ORGF0ZSIsImZyb21KU09ORGF0ZSIsImZyb21KU09ORGV2aWNlRGF0ZSIsInBhcnNlWm9uZSIsInYyIiwidGltZV9tIiwiY0giLCJob3VyIiwiY00iLCJtaW51dGUiLCJjUyIsInNlY29uZCIsImRhdGVfbSIsInNldCIsInNldExvY2FsZSIsImxhbmciLCJnZXRSZWFkZXJQcm9taXNlIiwicmVhZGVyQ2FsbGJhY2siLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWRlbmQiLCJvbmVycm9yIiwiRGF0YVVSTCIsInJlYWRBc0RhdGFVUkwiLCJBcnJheUJ1ZmZlciIsInJlYWRBc0FycmF5QnVmZmVyIiwiQmluYXJ5U3RyaW5nIiwicmVhZEFzQmluYXJ5U3RyaW5nIiwicmVhZEFzVGV4dCIsIkZpbGUiLCJGb3JtRGF0YSIsIkluamVjdG9yIiwiaW1wbGVtZW50IiwiSW5qZWN0VGVtcGxhdGUiLCJOYXZDb250cm9sbGVyIiwic3RhY2siLCJ3aW5kb3dTaXplIiwiYmFja1RpbWVvdXQiLCJiYWNrVGltZW91dFJ1bm5pbmciLCJ0cmFuc2l0aW9uVGltZSIsInBhZ2VDb250YWluZXIiLCJib2R5Iiwic2V0Q29udGFpbmVyIiwibGlzdGVuVG9iQmFja0J1dHRvbiIsImRvY3VtZW50QmFja0J1dHRvbkhhbmRsZXIiLCJzZXRSb290IiwicGFnZUNvbnN0cnVjdG9yIiwicGFyYW1ldGVycyIsInJlbW92ZUFsbEZyYW1lcyIsInBhZ2UiLCJjcmVhdGVQYWdlIiwiYXJndW1lbnRzVG9BcnJheSIsImFyZ3VtZW50cyIsInJlbW92ZUFsbCIsImN1cnJlbnRGcmFtZSIsIm9uTGVhdmUiLCJwdXNoSW50byIsImJhY2siLCJyZW1vdmVMYXN0RnJhbWUiLCJvblBhZ2VOYXZpZ2F0ZUJhY2siLCJyZXNldFBhZ2VzVmlzaWJpbGl0eSIsInBhZ2VPYmplY3QiLCJyZW1vdmVGcmFtZU4iLCJnZXRQYWdlTmFtZXMiLCJnZXRQYWdlcyIsImFyZ3MiLCJpbnNlcnRJbnRvRE9NIiwib25QYWdlTmF2aWdhdGVUbyIsIl9pc1Z1ZSIsIm5ld0VsIiwiJGFyZ3MiLCIkbW91bnQiLCIkZWwiLCJfaW5pdCIsInNlbGVjdG9yIiwiTmF2IiwiekluZGV4IiwiZ2V0TWF4U3RhY2taSW5kZXgiLCJjbGFzc2VzIiwib25QYWdlQ3JlYXRlZCIsIm9uTG9hZGVkIiwidGhlbiIsIl9wYWdlQ29uc3RydWN0b3IiLCJjcmVhdGVQYWdlSW5zdGFuY2UiLCJtYXhaIiwiZnJhbWUiLCJtYXgiLCJmcmFtZUluZGV4Iiwic3BsaWNlIiwiX29uRGVzdHJveSIsImhpZGVQYWdlRWxlbWVudCIsInNldFBhZ2VTdGF0ZSIsInN0YXRlIiwiaXNEZWxldGluZyIsImlzQ3JlYXRpbmciLCJpc0hpZGluZyIsImlzSGlkZGVuIiwiaXNTaG93aW5nIiwiaXNWaXNpYmxlIiwibiIsImhpZGVBZnRlciIsImlzUm9vdCIsInZpc2libGVQYXJlbnQiLCJzaG93UGFnZUVsZW1lbnQiLCJpbmFjdGl2ZSIsIm9uRW50ZXIiLCJyZXNpemUiLCJpc0luYWN0aXZlIiwiX29uVmlzaWJsZSIsImRvSGlkZUVsZW0iLCJ3aW5kb3dSZXNpemVIYW5kbGVyIiwiZSIsImNmIiwib25CYWNrTmF2aWdhdGUiLCJvbkJlZm9yZURlc3Ryb3kiLCJvblJvb3RQYWdlQmFja1ByZXNzZWQiLCJIaXN0b3J5IiwiX3N0YWNrIiwiZ2V0Q3VycmVudFN0YXRlIiwiaGlzdG9yeSIsInVybCIsInB1c2hTdGF0ZSIsImdvIiwicmVzZXRIaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwia2V5QnkiLCJjb2x1bW5OYW1lIiwiY29sdW1uTmFtZXMiLCJyIiwiY24iLCJjbGVhciIsIm92ZXJ3cml0ZSIsIkRhdGUiLCJnZXRUaW1lIiwid2FsayIsIm9iajEiLCJ3YWxrMiIsIm9iajIiLCJwYXRoQXJyYXkiLCJjVmFsIiwic2hmdCIsImRlbGV0ZVByb3BlcnR5QnlQYXRoIiwiZ2V0TWV0aG9kcyIsIm1ldGhvZHMiLCJpT2JqIiwiY29uY2F0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFByb3RvdHlwZU9mIiwiZ2V0UHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJJbmplY3QiLCJSZXBsYWNlVmFsdWVzIiwiTGFuZ0NvbnN0VGV4dCIsInJlcGxhY2VWYWx1ZXMiLCJjb250ZW50cyIsImlucHV0X3N0cmluZyIsImtleU9yVGV4dCIsImFwcGx5IiwiaXNQcm94eSIsImlzV2F0Y2hlZCIsInByb3BlcnR5Q2hhbmdlQ2FsbGJhY2tzIiwib2JqZWN0Q2hhbmdlQ2FsbGJhY2tzIiwid2F0Y2hlZCIsIm9uUHJvcGVydHlDaGFuZ2VDYWxsYmFjayIsIm9uT2JqZWN0Q2hhbmdlQ2FsbGJhY2siLCJpZ25vcmVQcm9wZXJ0aWVzIiwicHJvcGVydHlDaGFuZ2VIYW5kbGVyIiwiaXNTeW1ib2wiLCJpc1NraXAiLCJpc1NraXAyIiwic2NoZWR1bGVUYXJnZXRDYWxsYmFjayIsInNjaGVkdWxlQ2FsbGJhY2siLCJzY2hlZHVsZWRVcGRhdGUiLCJvblVwZGF0ZUNhbGxiYWNrIiwiZ2V0V2F0Y2hlZE9iamVjdCIsIm9uUHJvcGVydHlDaGFuZ2UiLCJyZWNlaXZlciIsIlJlZmxlY3QiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJQcm94eSIsImRlZmluZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsImRlbGV0ZVByb3BlcnR5Iiwib25PYmplY3REaXJ0eUNoYW5nZSIsIl9vYmoiLCJfdGVzdCIsInJlZk9iamVjdCIsImNoZWNrSGFzaCIsIm9iamVjdENsb25lQ29tcGFyZSIsIm9sZE9iaiIsIm5ld09iaiIsIm9sZEtleXMiLCJnZXRPYmpLZXlzIiwibmV3S2V5cyIsIm5ld0NoZWNrZWQiLCJpc0RhdGUiLCJkeW5hbWljSW5kZXhTeW1ib2wiLCJfZGF0YSIsIl90ZW1wbGF0ZSIsIl9lcnJvcnMiLCJ1c2VkIiwidG91Y2hlZCIsIl9tZXNzYWdlcyIsIm1lc3NhZ2VzIiwiX29wdGlvbnMiLCJzZXRNZXNzYWdlcyIsIl9ydWxlcyIsInJ1bGVzIiwiX19kZWZpbmVHZXR0ZXJfXyIsInZhbGlkYXRlIiwiRm9ybVdhbGtlciIsInNldF9uYW1lcyIsIndhbGtFbGVtZW50cyIsIm5wYXRoIiwic2V0RGF0YSIsInNldFRlbXBsYXRlIiwic2V0RXJyb3JzIiwic2V0UnVsZXMiLCJnZXRNZXNzYWdlcyIsInNob3dFcnJvcnMiLCJ2YWxpZGF0ZV9vYmplY3QiLCJjbGVhckVycm9ycyIsInZhbGlkYXRlX2ZpZWxkIiwiZ2V0VGVtcGxhdGVWYWx1ZSIsInZhbGlkYXRlX3Zpc2liaWxpdHkiLCJleGVjdXRlX2ZpZWxkX2FjdGlvbiIsInZpc2libGUiLCJpc19maWVsZF92aXNpYmxlIiwicHJlcEZpZWxkIiwiaXNfZmllbGRfaW52YWxpZCIsInNldFZhbHVlIiwibmV3T25lcyIsInZhbHVlX29sZCIsImVsMiIsInByb3BuYW1lIiwid2hvbGVydWxlIiwiZXhwciIsImFjdGlvbiIsImZpZWxkTmFtZSIsImdldFZhbHVlIiwicmVzIiwiZXZhbHVhdGUiLCJkaXNwbGF5UnVsZSIsInJ1bGUiLCJvdGhlcmZpZWxkQ29tcGFyZVZhbHVlcyIsIm90aGVyRmllbGROYW1lIiwib3RoZXJGaWVsZFZhbHVlIiwiZ2V0RGF0YVZhbHVlIiwicHJvcE5hbWUiLCJlcnJtc2ciLCJyciIsImNvbmRpdGlvbnMiLCJkVmFsdWUiLCJjb25kaXRpb25zX2FyciIsImNfbmFtZSIsImNfdGVtcGxhdGUiLCJ0cnlEZWZhdWx0Rm9ybSIsIm90aGVyRmllbGRJdGVtIiwidmFsaWRhdGVfaXNmYWlsIiwiY05hbWUiLCJ1bmlxdWUiLCJhY2NlcHRlZCIsInJlcXVpcmVkIiwiZmlsbGVkIiwiZGlmZmVyZW50Iiwic2FtZSIsInJlcXVpcmVkX2lmIiwib3RoZXJWYWx1ZSIsIm1pbiIsIm1pbWVzIiwiY2hWYWwiLCJmaWxlRXh0ZW5zaW9uIiwiYWZ0ZXIiLCJiZWZvcmUiLCJkaWdpdHMiLCJyZSIsIlJlZ0V4cCIsInRlc3QiLCJkaWdpdHNfYmV0d2VlbiIsInN0cmluZyIsIm51bWVyaWMiLCJwYXJzZUZsb2F0IiwiaW50ZWdlciIsInJlZ2V4IiwiY29uZGl0aW9uIiwia2V5ZWQiLCJzZXRfbmFtZXNfaW50IiwiaGFzU2V0Iiwic3RyaW5nVmFsdWUiLCJsb2NhbGUiLCJ1bnNoaWZ0IiwiU3RyaW5nIiwiblN0YXJ0IiwiT3ZlcnJpZGUiLCJvcmlnaW5hbENvbnRleHQiLCJvcmlnaW5hbEZ1bmN0aW9uIiwib3ZlcnJpZGVGdW5jdGlvbiIsImFyZ3NXaXRoTmV4dCIsIkV4dGVuZCIsInBhcmVudENvbnN0cnVjdG9yIiwiY2hpbGRDb25zdHJ1Y3RvciIsIkdVSUQiLCJyYW5kb20iLCJ0b1N0cmluZyIsIml0ZXJhdG9yIiwiRWxlbWVudCIsImxhc3RJbmRleE9mIiwic2VhcmNoRWxlbWVudCIsIlR5cGVFcnJvciIsImxlbiIsImZsb29yIiwiYWJzIiwicmVwZWF0IiwiY291bnQiLCJzdHIiLCJSYW5nZUVycm9yIiwiSW5maW5pdHkiLCJycHQiLCJ2YXJBcmdzIiwidG8iLCJuZXh0U291cmNlIiwibmV4dEtleSIsImRvY3VtZW50RWxlbWVudCIsImZuIiwiY29udGFpbnMiLCJwbGF0Zm9ybSIsIm1vZGVsIiwibGFzdFRpbWUiLCJ2ZW5kb3JzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjdXJyVGltZSIsInRpbWVUb0NhbGwiLCJpZCIsImNsZWFyVGltZW91dCIsIm1vZHVsZSIsImV4cG9ydHMiLCJDb25maXJtQnV0dG9ucyIsInByb21wdCIsIkRpYWxvZyIsImVzY2FwZUhUTUwiLCJhZGRBY3Rpb25CdXR0b24iLCJDb25maXJtIiwib25Db25maXJtIiwiQ29uZmlybURhbmdlciIsIlByb21wdCIsImNvbnRlbnQiLCJ1bnNhZmUiLCJjb252ZXJ0TmV3bGluZXMiLCJtYXNrIiwibnVtYmVycyIsImZOYW1lIiwibGkiLCJmaWxlRnVsbE5hbWUiLCJqb2luUGF0aCIsImNhcGl0YWxpemUiLCJ0b1VwcGVyQ2FzZSIsImJ5dGVMZW5ndGgiLCJ0b0J5dGVBcnJheSIsImZyb21CeXRlQXJyYXkiLCJsb29rdXAiLCJyZXZMb29rdXAiLCJBcnIiLCJVaW50OEFycmF5IiwiY29kZSIsImNoYXJDb2RlQXQiLCJnZXRMZW5zIiwiYjY0IiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJsZW5zIiwiX2J5dGVMZW5ndGgiLCJ0bXAiLCJhcnIiLCJjdXJCeXRlIiwidHJpcGxldFRvQmFzZTY0IiwiZW5jb2RlQ2h1bmsiLCJ1aW50OCIsIm91dHB1dCIsImV4dHJhQnl0ZXMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiLCJiYXNlNjQiLCJpZWVlNzU0IiwiQnVmZmVyIiwiU2xvd0J1ZmZlciIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImdsb2JhbCIsInR5cGVkQXJyYXlTdXBwb3J0Iiwia01heExlbmd0aCIsIl9fcHJvdG9fXyIsImZvbyIsInN1YmFycmF5IiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJmcm9tQXJyYXlCdWZmZXIiLCJmcm9tU3RyaW5nIiwiZnJvbU9iamVjdCIsInNwZWNpZXMiLCJhc3NlcnRTaXplIiwiYWxsb2MiLCJmaWxsIiwiZW5jb2RpbmciLCJhbGxvY1Vuc2FmZVNsb3ciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tQXJyYXlMaWtlIiwiYnl0ZU9mZnNldCIsImlzQnVmZmVyIiwiYnVmZmVyIiwiaXNuYW4iLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwibGlzdCIsInBvcyIsImJ1ZiIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJtIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiZXF1YWxzIiwiaW5zcGVjdCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImFycmF5SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInV0ZjE2bGVUb0J5dGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiY29kZVBvaW50cyIsImZyb21DaGFyQ29kZSIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJuZXdCdWYiLCJzbGljZUxlbiIsImNoZWNrT2Zmc2V0IiwiZXh0IiwicmVhZFVJbnRMRSIsIm5vQXNzZXJ0IiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwiY2hlY2tJbnQiLCJ3cml0ZVVJbnRMRSIsIm1heEJ5dGVzIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIm9iamVjdFdyaXRlVUludDMyIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsIklOVkFMSURfQkFTRTY0X1JFIiwiYmFzZTY0Y2xlYW4iLCJzdHJpbmd0cmltIiwidHJpbSIsInVuaXRzIiwibGVhZFN1cnJvZ2F0ZSIsImJ5dGVBcnJheSIsImhpIiwibG8iLCJkc3QiLCJFbGVtZW50VHlwZSIsImVudGl0aWVzIiwidW5lbmNvZGVkRWxlbWVudHMiLCJzY3JpcHQiLCJ4bXAiLCJpZnJhbWUiLCJub2VtYmVkIiwibm9mcmFtZXMiLCJwbGFpbnRleHQiLCJub3NjcmlwdCIsImZvcm1hdEF0dHJzIiwib3B0cyIsInhtbE1vZGUiLCJlbmNvZGVYTUwiLCJzaW5nbGVUYWciLCJhcmVhIiwiYmFzZSIsImJhc2Vmb250IiwiYnIiLCJjb2wiLCJjb21tYW5kIiwiZW1iZWQiLCJociIsImltZyIsImlzaW5kZXgiLCJrZXlnZW4iLCJtZXRhIiwicGFyYW0iLCJzb3VyY2UiLCJ0cmFjayIsIndiciIsInJlbmRlciIsImNoZWVyaW8iLCJpc1RhZyIsInJlbmRlclRhZyIsIkRpcmVjdGl2ZSIsInJlbmRlckRpcmVjdGl2ZSIsInJlbmRlckNvbW1lbnQiLCJDREFUQSIsInJlbmRlckNkYXRhIiwicmVuZGVyVGV4dCIsIlNjcmlwdCIsIlN0eWxlIiwiVGFnIiwiRG9jdHlwZSIsInJlX3doaXRlc3BhY2UiLCJOb2RlUHJvdG90eXBlIiwiRWxlbWVudFByb3RvdHlwZSIsImVsZW1lbnRDQiIsImRlZmF1bHRPcHRzIiwiX2NhbGxiYWNrIiwiX2VsZW1lbnRDQiIsIl9kb25lIiwiX3RhZ1N0YWNrIiwiX3BhcnNlciIsIm5vcm1hbGl6ZVdoaXRlc3BhY2UiLCJ3aXRoU3RhcnRJbmRpY2VzIiwid2l0aEVuZEluZGljZXMiLCJvbnBhcnNlcmluaXQiLCJvbnJlc2V0Iiwib25lbmQiLCJfaGFuZGxlQ2FsbGJhY2siLCJvbmNsb3NldGFnIiwiZW5kSW5kZXgiLCJfY3JlYXRlRG9tRWxlbWVudCIsIndpdGhEb21MdmwxIiwiX2FkZERvbUVsZW1lbnQiLCJzaWJsaW5ncyIsInByZXZpb3VzU2libGluZyIsIm5leHQiLCJzdGFydEluZGV4IiwicHJldiIsIm9ub3BlbnRhZyIsIm9udGV4dCIsIm5vcm1hbGl6ZSIsImlnbm9yZVdoaXRlc3BhY2UiLCJsYXN0VGFnIiwib25jb21tZW50Iiwib25jZGF0YXN0YXJ0Iiwib25jb21tZW50ZW5kIiwib25jZGF0YWVuZCIsIm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uIiwiZG9tTHZsMSIsInNob3J0aGFuZCIsImZpcnN0Q2hpbGQiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVUeXBlcyIsImNkYXRhIiwiY29tbWVudCIsIkRvbVV0aWxzIiwicmVtb3ZlU3Vic2V0cyIsIm5vZGVzIiwiaWR4Iiwibm9kZSIsImFuY2VzdG9yIiwiUE9TSVRJT04iLCJESVNDT05ORUNURUQiLCJQUkVDRURJTkciLCJGT0xMT1dJTkciLCJDT05UQUlOUyIsIkNPTlRBSU5FRF9CWSIsImNvbXBhcmVQb3MiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm5vZGVBIiwibm9kZUIiLCJhUGFyZW50cyIsImJQYXJlbnRzIiwiY3VycmVudCIsInNoYXJlZFBhcmVudCIsImFTaWJsaW5nIiwiYlNpYmxpbmciLCJ1bmlxdWVTb3J0Iiwic29ydCIsInJlbGF0aXZlIiwidGVzdEVsZW1lbnQiLCJ0YWdfbmFtZSIsInRhZ190eXBlIiwidGFnX2NvbnRhaW5zIiwiQ2hlY2tzIiwiZ2V0QXR0cmliQ2hlY2siLCJhdHRyaWIiLCJjb21iaW5lRnVuY3MiLCJnZXRFbGVtZW50cyIsInJlY3Vyc2UiLCJmdW5jcyIsInJlZHVjZSIsImdldEVsZW1lbnRCeUlkIiwiZmluZE9uZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeVRhZ1R5cGUiLCJjaGlsZHMiLCJyZXBsYWNlbWVudCIsInNpYmxpbmciLCJjdXJyTmV4dCIsInByZXBlbmQiLCJmaW5kT25lQ2hpbGQiLCJleGlzdHNPbmUiLCJmaW5kQWxsIiwibCIsInJvb3RFbGVtcyIsImdldE91dGVySFRNTCIsImdldElubmVySFRNTCIsImdldFRleHQiLCJnZXRDaGlsZHJlbiIsImdldFBhcmVudCIsImdldFNpYmxpbmdzIiwiZ2V0QXR0cmlidXRlVmFsdWUiLCJoYXNBdHRyaWIiLCJnZXROYW1lIiwiZW5jb2RlIiwiZGVjb2RlIiwibGV2ZWwiLCJYTUwiLCJIVE1MIiwiZGVjb2RlU3RyaWN0IiwiSFRNTFN0cmljdCIsImVuY29kZUhUTUw0IiwiZW5jb2RlSFRNTDUiLCJlbmNvZGVIVE1MIiwiZGVjb2RlWE1MIiwiZGVjb2RlWE1MU3RyaWN0IiwiZGVjb2RlSFRNTDQiLCJkZWNvZGVIVE1MNSIsImRlY29kZUhUTUwiLCJkZWNvZGVIVE1MNFN0cmljdCIsImRlY29kZUhUTUw1U3RyaWN0IiwiZGVjb2RlSFRNTFN0cmljdCIsImVzY2FwZSIsImVudGl0eU1hcCIsImxlZ2FjeU1hcCIsInhtbE1hcCIsImRlY29kZUNvZGVQb2ludCIsImdldFN0cmljdERlY29kZXIiLCJnZXRSZXBsYWNlciIsImxlZ2FjeSIsInNvcnRlciIsInJlcGxhY2VyIiwiY2hhckF0IiwiZGVjb2RlTWFwIiwiaW52ZXJzZVhNTCIsImdldEludmVyc2VPYmoiLCJ4bWxSZXBsYWNlciIsImdldEludmVyc2VSZXBsYWNlciIsImdldEludmVyc2UiLCJpbnZlcnNlSFRNTCIsImh0bWxSZXBsYWNlciIsImludmVyc2UiLCJzaW5nbGUiLCJtdWx0aXBsZSIsInJlX25vbkFTQ0lJIiwicmVfYXN0cmFsU3ltYm9scyIsInNpbmdsZUNoYXJSZXBsYWNlciIsImFzdHJhbFJlcGxhY2VyIiwiaGlnaCIsImxvdyIsImZ1bmMiLCJyZV94bWxDaGFycyIsImVzY2FwZVhNTCIsIlIiLCJSZWZsZWN0QXBwbHkiLCJSZWZsZWN0T3duS2V5cyIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJQcm9jZXNzRW1pdFdhcm5pbmciLCJ3YXJuaW5nIiwiTnVtYmVySXNOYU4iLCJFdmVudEVtaXR0ZXIiLCJpbml0IiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiY2hlY2tMaXN0ZW5lciIsImxpc3RlbmVyIiwiZW51bWVyYWJsZSIsInNldE1heExpc3RlbmVycyIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJlbWl0IiwiZG9FcnJvciIsImVyIiwibGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsIl9hZGRMaXN0ZW5lciIsImV4aXN0aW5nIiwibmV3TGlzdGVuZXIiLCJ3YXJuZWQiLCJ3IiwiZW1pdHRlciIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsInJlbW92ZUxpc3RlbmVyIiwid3JhcEZuIiwiX29uY2VXcmFwIiwid3JhcHBlZCIsIm9uY2UiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwib3JpZ2luYWxMaXN0ZW5lciIsInNwbGljZU9uZSIsInJlbW92ZUFsbExpc3RlbmVycyIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwibGlzdGVuZXJDb3VudCIsImV2ZW50TmFtZXMiLCJmYWN0b3J5IiwiZGVmaW5lIiwiSU5VTUJFUiIsIklPUDEiLCJJT1AyIiwiSU9QMyIsIklWQVIiLCJJRlVOQ0FMTCIsIklFWFBSIiwiSU1FTUJFUiIsIkluc3RydWN0aW9uIiwidW5hcnlJbnN0cnVjdGlvbiIsImJpbmFyeUluc3RydWN0aW9uIiwidGVybmFyeUluc3RydWN0aW9uIiwic2ltcGxpZnkiLCJ0b2tlbnMiLCJ1bmFyeU9wcyIsImJpbmFyeU9wcyIsInRlcm5hcnlPcHMiLCJuc3RhY2siLCJuZXdleHByZXNzaW9uIiwibjEiLCJuMiIsIm4zIiwic3Vic3RpdHV0ZSIsInZhcmlhYmxlIiwiZXhwcml0ZW0iLCJyZXBsaXRlbSIsImZ1bmN0aW9ucyIsImFyZ0NvdW50IiwiZXhwcmVzc2lvblRvU3RyaW5nIiwidG9KUyIsImVzY2FwZVZhbHVlIiwiZ2V0U3ltYm9scyIsInN5bWJvbHMiLCJ3aXRoTWVtYmVycyIsInByZXZWYXIiLCJFeHByZXNzaW9uIiwicGFyc2UiLCJ2YXJpYWJsZXMiLCJ0b0pTRnVuY3Rpb24iLCJURU9GIiwiVE9QIiwiVE5VTUJFUiIsIlRTVFJJTkciLCJUUEFSRU4iLCJUQ09NTUEiLCJUTkFNRSIsIlRva2VuIiwiVG9rZW5TdHJlYW0iLCJjb25zdHMiLCJzYXZlZFBvc2l0aW9uIiwic2F2ZWRDdXJyZW50IiwibmV3VG9rZW4iLCJzYXZlIiwicmVzdG9yZSIsImlzV2hpdGVzcGFjZSIsImlzQ29tbWVudCIsImlzUmFkaXhJbnRlZ2VyIiwiaXNPcGVyYXRvciIsImlzUGFyZW4iLCJpc0NvbW1hIiwiaXNOYW1lZE9wIiwiaXNDb25zdCIsImlzTmFtZSIsInBhcnNlRXJyb3IiLCJzdGFydFBvcyIsInF1b3RlIiwicmF3U3RyaW5nIiwic3Vic3RyaW5nIiwidW5lc2NhcGUiLCJpc09wZXJhdG9yRW5hYmxlZCIsImhhc0xldHRlciIsImNvZGVQb2ludFBhdHRlcm4iLCJiYWNrc2xhc2giLCJyYWRpeCIsInZhbGlkRGlnaXQiLCJ2YWxpZCIsInJlc2V0UG9zIiwiZm91bmREb3QiLCJmb3VuZERpZ2l0cyIsImFjY2VwdFNpZ24iLCJ2YWxpZEV4cG9uZW50Iiwib3B0aW9uTmFtZU1hcCIsImdldE9wdGlvbk5hbWUiLCJvcCIsIm9wdGlvbk5hbWUiLCJvcGVyYXRvcnMiLCJnZXRDb29yZGluYXRlcyIsImxpbmUiLCJjb2x1bW4iLCJuZXdsaW5lIiwibXNnIiwiY29vcmRzIiwiUGFyc2VyU3RhdGUiLCJ0b2tlblN0cmVhbSIsIm5leHRUb2tlbiIsInNhdmVkTmV4dFRva2VuIiwiYWxsb3dNZW1iZXJBY2Nlc3MiLCJ0b2tlbk1hdGNoZXMiLCJ0b2tlbiIsImFjY2VwdCIsImV4cGVjdCIsInBhcnNlQXRvbSIsImluc3RyIiwicGFyc2VFeHByZXNzaW9uIiwicGFyc2VDb25kaXRpb25hbEV4cHJlc3Npb24iLCJwYXJzZU9yRXhwcmVzc2lvbiIsInRydWVCcmFuY2giLCJmYWxzZUJyYW5jaCIsInBhcnNlQW5kRXhwcmVzc2lvbiIsInBhcnNlQ29tcGFyaXNvbiIsIkNPTVBBUklTT05fT1BFUkFUT1JTIiwicGFyc2VBZGRTdWIiLCJBRERfU1VCX09QRVJBVE9SUyIsInBhcnNlVGVybSIsIlRFUk1fT1BFUkFUT1JTIiwicGFyc2VGYWN0b3IiLCJpc1ByZWZpeE9wZXJhdG9yIiwicGFyc2VFeHBvbmVudGlhbCIsInBhcnNlUG9zdGZpeEV4cHJlc3Npb24iLCJwYXJzZUZ1bmN0aW9uQ2FsbCIsInBhcnNlTWVtYmVyRXhwcmVzc2lvbiIsInBhcnNlQXJndW1lbnRMaXN0IiwiZGl2IiwibW9kIiwiZXF1YWwiLCJub3RFcXVhbCIsImdyZWF0ZXJUaGFuIiwibGVzc1RoYW4iLCJncmVhdGVyVGhhbkVxdWFsIiwibGVzc1RoYW5FcXVhbCIsImFuZE9wZXJhdG9yIiwiQm9vbGVhbiIsIm9yT3BlcmF0b3IiLCJpbk9wZXJhdG9yIiwic2luaCIsImV4cCIsImNvc2giLCJ0YW5oIiwiYXNpbmgiLCJzcXJ0IiwiYWNvc2giLCJhdGFuaCIsImxvZzEwIiwiTE9HMTBFIiwibmVnIiwibm90IiwidHJ1bmMiLCJjZWlsIiwiZmFjdG9yaWFsIiwiZ2FtbWEiLCJpc0ludGVnZXIiLCJHQU1NQV9HIiwiR0FNTUFfUCIsIk5hTiIsIlBJIiwic2luIiwidHdvTiIsInRocmVlTiIsImZvdXJOIiwiZml2ZU4iLCJFIiwic3RyaW5nTGVuZ3RoIiwicyIsImh5cG90Iiwic3VtIiwibGFyZyIsImNvbmQiLCJ5ZXAiLCJub3BlIiwicm91bmRUbyIsImNvcyIsInRhbiIsImFzaW4iLCJhY29zIiwiYXRhbiIsImxnIiwiYW5kIiwib3IiLCJmYWMiLCJweXQiLCJhdGFuMiIsInBhcnNlclN0YXRlIiwic2hhcmVkUGFyc2VyIiwiQ29sbGVjdGluZ0hhbmRsZXIiLCJjYnMiLCJfY2JzIiwiRVZFTlRTIiwicmVzdGFydCIsIkZlZWRIYW5kbGVyIiwid2hhdCIsImdldE9uZUVsZW1lbnQiLCJmZXRjaCIsImFkZENvbmRpdGlvbmFsbHkiLCJpc1ZhbGlkRmVlZCIsImZlZWQiLCJmZWVkUm9vdCIsImhyZWYiLCJ1cGRhdGVkIiwiZW50cnkiLCJkZXNjcmlwdGlvbiIsInB1YkRhdGUiLCJUb2tlbml6ZXIiLCJmb3JtVGFncyIsIm9wdGdyb3VwIiwiZGF0YWxpc3QiLCJvcGVuSW1wbGllc0Nsb3NlIiwidHIiLCJ0aCIsInRkIiwidGhlYWQiLCJoZWFkIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwidm9pZEVsZW1lbnRzIiwiZm9yZWlnbkNvbnRleHRFbGVtZW50cyIsIm1hdGgiLCJzdmciLCJodG1sSW50ZWdyYXRpb25FbGVtZW50cyIsIm1pIiwibW8iLCJtbiIsIm1zIiwibXRleHQiLCJmb3JlaWduT2JqZWN0IiwicmVfbmFtZUVuZCIsIl90YWduYW1lIiwiX2F0dHJpYm5hbWUiLCJfYXR0cmlidmFsdWUiLCJfYXR0cmlicyIsIl9mb3JlaWduQ29udGV4dCIsIl9sb3dlckNhc2VUYWdOYW1lcyIsImxvd2VyQ2FzZVRhZ3MiLCJfbG93ZXJDYXNlQXR0cmlidXRlTmFtZXMiLCJfdG9rZW5pemVyIiwiX3VwZGF0ZVBvc2l0aW9uIiwiaW5pdGlhbE9mZnNldCIsIl9zZWN0aW9uU3RhcnQiLCJnZXRBYnNvbHV0ZUluZGV4Iiwib25vcGVudGFnbmFtZSIsIm9ub3BlbnRhZ2VuZCIsIl9jbG9zZUN1cnJlbnRUYWciLCJvbnNlbGZjbG9zaW5ndGFnIiwicmVjb2duaXplU2VsZkNsb3NpbmciLCJvbmF0dHJpYm5hbWUiLCJvbmF0dHJpYmRhdGEiLCJvbmF0dHJpYmVuZCIsIm9uYXR0cmlidXRlIiwiX2dldEluc3RydWN0aW9uTmFtZSIsInNlYXJjaCIsIm9uZGVjbGFyYXRpb24iLCJvbmNkYXRhIiwicmVjb2duaXplQ0RBVEEiLCJyZXNldCIsImNodW5rIiwicGF1c2UiLCJyZXN1bWUiLCJwYXJzZUNodW5rIiwiZG9uZSIsIlByb3h5SGFuZGxlciIsIlN0cmVhbSIsIkNicyIsInJlYWRhYmxlIiwiVEVYVCIsIkJFRk9SRV9UQUdfTkFNRSIsIklOX1RBR19OQU1FIiwiSU5fU0VMRl9DTE9TSU5HX1RBRyIsIkJFRk9SRV9DTE9TSU5HX1RBR19OQU1FIiwiSU5fQ0xPU0lOR19UQUdfTkFNRSIsIkFGVEVSX0NMT1NJTkdfVEFHX05BTUUiLCJCRUZPUkVfQVRUUklCVVRFX05BTUUiLCJJTl9BVFRSSUJVVEVfTkFNRSIsIkFGVEVSX0FUVFJJQlVURV9OQU1FIiwiQkVGT1JFX0FUVFJJQlVURV9WQUxVRSIsIklOX0FUVFJJQlVURV9WQUxVRV9EUSIsIklOX0FUVFJJQlVURV9WQUxVRV9TUSIsIklOX0FUVFJJQlVURV9WQUxVRV9OUSIsIkJFRk9SRV9ERUNMQVJBVElPTiIsIklOX0RFQ0xBUkFUSU9OIiwiSU5fUFJPQ0VTU0lOR19JTlNUUlVDVElPTiIsIkJFRk9SRV9DT01NRU5UIiwiSU5fQ09NTUVOVCIsIkFGVEVSX0NPTU1FTlRfMSIsIkFGVEVSX0NPTU1FTlRfMiIsIkJFRk9SRV9DREFUQV8xIiwiQkVGT1JFX0NEQVRBXzIiLCJCRUZPUkVfQ0RBVEFfMyIsIkJFRk9SRV9DREFUQV80IiwiQkVGT1JFX0NEQVRBXzUiLCJCRUZPUkVfQ0RBVEFfNiIsIklOX0NEQVRBIiwiQUZURVJfQ0RBVEFfMSIsIkFGVEVSX0NEQVRBXzIiLCJCRUZPUkVfU1BFQ0lBTCIsIkJFRk9SRV9TUEVDSUFMX0VORCIsIkJFRk9SRV9TQ1JJUFRfMSIsIkJFRk9SRV9TQ1JJUFRfMiIsIkJFRk9SRV9TQ1JJUFRfMyIsIkJFRk9SRV9TQ1JJUFRfNCIsIkJFRk9SRV9TQ1JJUFRfNSIsIkFGVEVSX1NDUklQVF8xIiwiQUZURVJfU0NSSVBUXzIiLCJBRlRFUl9TQ1JJUFRfMyIsIkFGVEVSX1NDUklQVF80IiwiQUZURVJfU0NSSVBUXzUiLCJCRUZPUkVfU1RZTEVfMSIsIkJFRk9SRV9TVFlMRV8yIiwiQkVGT1JFX1NUWUxFXzMiLCJCRUZPUkVfU1RZTEVfNCIsIkFGVEVSX1NUWUxFXzEiLCJBRlRFUl9TVFlMRV8yIiwiQUZURVJfU1RZTEVfMyIsIkFGVEVSX1NUWUxFXzQiLCJCRUZPUkVfRU5USVRZIiwiQkVGT1JFX05VTUVSSUNfRU5USVRZIiwiSU5fTkFNRURfRU5USVRZIiwiSU5fTlVNRVJJQ19FTlRJVFkiLCJJTl9IRVhfRU5USVRZIiwiU1BFQ0lBTF9OT05FIiwiU1BFQ0lBTF9TQ1JJUFQiLCJTUEVDSUFMX1NUWUxFIiwid2hpdGVzcGFjZSIsImlmRWxzZVN0YXRlIiwidXBwZXIiLCJTVUNDRVNTIiwiRkFJTFVSRSIsImxvd2VyIiwiX3N0YXRlIiwiX2luZGV4IiwiY29uc3VtZVNwZWNpYWxOYW1lQ2hhciIsIk5FWFRfU1RBVEUiLCJfYnVmZmVyIiwiX2J1ZmZlck9mZnNldCIsIl9iYXNlU3RhdGUiLCJfc3BlY2lhbCIsIl9ydW5uaW5nIiwiX2VuZGVkIiwiX3htbE1vZGUiLCJfZGVjb2RlRW50aXRpZXMiLCJfc3RhdGVUZXh0IiwiX2dldFNlY3Rpb24iLCJfc3RhdGVCZWZvcmVUYWdOYW1lIiwiX3N0YXRlSW5UYWdOYW1lIiwiX2VtaXRUb2tlbiIsIl9zdGF0ZUJlZm9yZUNsb3NlaW5nVGFnTmFtZSIsIl9zdGF0ZUluQ2xvc2VpbmdUYWdOYW1lIiwiX3N0YXRlQWZ0ZXJDbG9zZWluZ1RhZ05hbWUiLCJfc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lIiwiX3N0YXRlSW5TZWxmQ2xvc2luZ1RhZyIsIl9zdGF0ZUluQXR0cmlidXRlTmFtZSIsIl9zdGF0ZUFmdGVyQXR0cmlidXRlTmFtZSIsIl9zdGF0ZUJlZm9yZUF0dHJpYnV0ZVZhbHVlIiwiX3N0YXRlSW5BdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlcyIsIl9zdGF0ZUluQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZXMiLCJfc3RhdGVJbkF0dHJpYnV0ZVZhbHVlTm9RdW90ZXMiLCJfc3RhdGVCZWZvcmVEZWNsYXJhdGlvbiIsIl9zdGF0ZUluRGVjbGFyYXRpb24iLCJfc3RhdGVJblByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsIl9zdGF0ZUJlZm9yZUNvbW1lbnQiLCJfc3RhdGVJbkNvbW1lbnQiLCJfc3RhdGVBZnRlckNvbW1lbnQxIiwiX3N0YXRlQWZ0ZXJDb21tZW50MiIsIl9zdGF0ZUJlZm9yZUNkYXRhMSIsIl9zdGF0ZUJlZm9yZUNkYXRhMiIsIl9zdGF0ZUJlZm9yZUNkYXRhMyIsIl9zdGF0ZUJlZm9yZUNkYXRhNCIsIl9zdGF0ZUJlZm9yZUNkYXRhNSIsIl9zdGF0ZUJlZm9yZUNkYXRhNiIsIl9zdGF0ZUluQ2RhdGEiLCJfc3RhdGVBZnRlckNkYXRhMSIsIl9zdGF0ZUFmdGVyQ2RhdGEyIiwiX3N0YXRlQmVmb3JlU3BlY2lhbCIsIl9zdGF0ZUJlZm9yZVNwZWNpYWxFbmQiLCJfc3RhdGVCZWZvcmVTY3JpcHQxIiwiX3N0YXRlQmVmb3JlU2NyaXB0MiIsIl9zdGF0ZUJlZm9yZVNjcmlwdDMiLCJfc3RhdGVCZWZvcmVTY3JpcHQ0IiwiX3N0YXRlQmVmb3JlU2NyaXB0NSIsIl9zdGF0ZUFmdGVyU2NyaXB0MSIsIl9zdGF0ZUFmdGVyU2NyaXB0MiIsIl9zdGF0ZUFmdGVyU2NyaXB0MyIsIl9zdGF0ZUFmdGVyU2NyaXB0NCIsIl9zdGF0ZUFmdGVyU2NyaXB0NSIsIl9zdGF0ZUJlZm9yZVN0eWxlMSIsIl9zdGF0ZUJlZm9yZVN0eWxlMiIsIl9zdGF0ZUJlZm9yZVN0eWxlMyIsIl9zdGF0ZUJlZm9yZVN0eWxlNCIsIl9zdGF0ZUFmdGVyU3R5bGUxIiwiX3N0YXRlQWZ0ZXJTdHlsZTIiLCJfc3RhdGVBZnRlclN0eWxlMyIsIl9zdGF0ZUFmdGVyU3R5bGU0IiwiX3N0YXRlQmVmb3JlRW50aXR5IiwiX3N0YXRlQmVmb3JlTnVtZXJpY0VudGl0eSIsIl9wYXJzZU5hbWVkRW50aXR5U3RyaWN0IiwiZW50aXR5IiwiX2VtaXRQYXJ0aWFsIiwiX3BhcnNlTGVnYWN5RW50aXR5IiwiX3N0YXRlSW5OYW1lZEVudGl0eSIsIl9kZWNvZGVOdW1lcmljRW50aXR5Iiwic2VjdGlvblN0YXJ0IiwiX3N0YXRlSW5OdW1lcmljRW50aXR5IiwiX3N0YXRlSW5IZXhFbnRpdHkiLCJfY2xlYW51cCIsIl9wYXJzZSIsIl9maW5pc2giLCJfaGFuZGxlVHJhaWxpbmdEYXRhIiwiV3JpdGFibGVTdHJlYW0iLCJXcml0YWJsZSIsIlN0cmluZ0RlY29kZXIiLCJkZWNvZGVyIiwiX2RlY29kZXIiLCJkZWNvZGVTdHJpbmdzIiwiX3dyaXRlIiwiY2IiLCJkZWZpbmVQcm9wIiwiRGVmYXVsdEhhbmRsZXIiLCJSc3NIYW5kbGVyIiwicGFyc2VET00iLCJwYXJzZUZlZWQiLCJjcmVhdGVEb21TdHJlYW0iLCJlbGVtZW50Q2IiLCJjZGF0YXN0YXJ0IiwiY2RhdGFlbmQiLCJwcm9jZXNzaW5naW5zdHJ1Y3Rpb24iLCJjb21tZW50ZW5kIiwiY2xvc2V0YWciLCJvcGVudGFnIiwib3BlbnRhZ25hbWUiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsInJ0IiwiTE4yIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJob29rQ2FsbGJhY2siLCJob29rcyIsInNldEhvb2tDYWxsYmFjayIsImlzT2JqZWN0RW1wdHkiLCJpc1VuZGVmaW5lZCIsImhhc093blByb3AiLCJleHRlbmQiLCJ2YWx1ZU9mIiwiY3JlYXRlVVRDIiwic3RyaWN0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImRlZmF1bHRQYXJzaW5nRmxhZ3MiLCJ1bnVzZWRUb2tlbnMiLCJ1bnVzZWRJbnB1dCIsIm92ZXJmbG93IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJtZXJpZGllbSIsInJmYzI4MjIiLCJ3ZWVrZGF5TWlzbWF0Y2giLCJnZXRQYXJzaW5nRmxhZ3MiLCJfcGYiLCJzb21lIiwiZnVuIiwiX2lzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsIl9kIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwiYmlnSG91ciIsImlzRnJvemVuIiwiY3JlYXRlSW52YWxpZCIsIm1vbWVudFByb3BlcnRpZXMiLCJjb3B5Q29uZmlnIiwiX2lzQU1vbWVudE9iamVjdCIsIl9pIiwiX2YiLCJfbCIsIl9pc1VUQyIsIl9vZmZzZXQiLCJfbG9jYWxlIiwidXBkYXRlSW5Qcm9ncmVzcyIsIk1vbWVudCIsImNvbmZpZyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50IiwiYWJzRmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwiY29tcGFyZUFycmF5cyIsImFycmF5MSIsImFycmF5MiIsImRvbnRDb252ZXJ0IiwibGVuZ3RoRGlmZiIsImRpZmZzIiwic3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwiX2NvbmZpZyIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwiX29yZGluYWxQYXJzZSIsIm1lcmdlQ29uZmlncyIsInBhcmVudENvbmZpZyIsImNoaWxkQ29uZmlnIiwiTG9jYWxlIiwiZGVmYXVsdENhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiY2FsZW5kYXIiLCJtb20iLCJfY2FsZW5kYXIiLCJkZWZhdWx0TG9uZ0RhdGVGb3JtYXQiLCJMVFMiLCJMVCIsIkwiLCJMTCIsIkxMTCIsIkxMTEwiLCJsb25nRGF0ZUZvcm1hdCIsIl9sb25nRGF0ZUZvcm1hdCIsImZvcm1hdFVwcGVyIiwiZGVmYXVsdEludmFsaWREYXRlIiwiaW52YWxpZERhdGUiLCJfaW52YWxpZERhdGUiLCJkZWZhdWx0T3JkaW5hbCIsImRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwib3JkaW5hbCIsIl9vcmRpbmFsIiwiZGVmYXVsdFJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaCIsImhoIiwiZGQiLCJNIiwiTU0iLCJ5eSIsInJlbGF0aXZlVGltZSIsIndpdGhvdXRTdWZmaXgiLCJpc0Z1dHVyZSIsIl9yZWxhdGl2ZVRpbWUiLCJwYXN0RnV0dXJlIiwiZGlmZiIsImFsaWFzZXMiLCJhZGRVbml0QWxpYXMiLCJsb3dlckNhc2UiLCJub3JtYWxpemVVbml0cyIsIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwiaW5wdXRPYmplY3QiLCJub3JtYWxpemVkSW5wdXQiLCJub3JtYWxpemVkUHJvcCIsInByaW9yaXRpZXMiLCJhZGRVbml0UHJpb3JpdHkiLCJwcmlvcml0eSIsImdldFByaW9yaXRpemVkVW5pdHMiLCJ1bml0c09iaiIsInUiLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwic2lnbiIsImZvcm1hdHRpbmdUb2tlbnMiLCJsb2NhbEZvcm1hdHRpbmdUb2tlbnMiLCJmb3JtYXRGdW5jdGlvbnMiLCJmb3JtYXRUb2tlbkZ1bmN0aW9ucyIsImFkZEZvcm1hdFRva2VuIiwicGFkZGVkIiwibG9jYWxlRGF0YSIsInJlbW92ZUZvcm1hdHRpbmdUb2tlbnMiLCJtYWtlRm9ybWF0RnVuY3Rpb24iLCJmb3JtYXRNb21lbnQiLCJleHBhbmRGb3JtYXQiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsYXN0SW5kZXgiLCJtYXRjaDEiLCJtYXRjaDIiLCJtYXRjaDMiLCJtYXRjaDQiLCJtYXRjaDYiLCJtYXRjaDF0bzIiLCJtYXRjaDN0bzQiLCJtYXRjaDV0bzYiLCJtYXRjaDF0bzMiLCJtYXRjaDF0bzQiLCJtYXRjaDF0bzYiLCJtYXRjaFVuc2lnbmVkIiwibWF0Y2hTaWduZWQiLCJtYXRjaE9mZnNldCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJtYXRjaFRpbWVzdGFtcCIsIm1hdGNoV29yZCIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsInVuZXNjYXBlRm9ybWF0IiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDMiLCJwNCIsImFkZFBhcnNlVG9rZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsInBhcnNlVHdvRGlnaXRZZWFyIiwiZGF5c0luWWVhciIsImlzTGVhcFllYXIiLCJnZXRTZXRZZWFyIiwibWFrZUdldFNldCIsImdldElzTGVhcFllYXIiLCJrZWVwVGltZSIsInNldCQxIiwiZGF5c0luTW9udGgiLCJzdHJpbmdHZXQiLCJzdHJpbmdTZXQiLCJwcmlvcml0aXplZCIsIm8iLCJtb2RNb250aCIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImxvY2FsZU1vbnRocyIsIl9tb250aHMiLCJpc0Zvcm1hdCIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsImxvY2FsZU1vbnRoc1Nob3J0IiwiX21vbnRoc1Nob3J0IiwiaGFuZGxlU3RyaWN0UGFyc2UiLCJtb250aE5hbWUiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsImxvY2FsZU1vbnRoc1BhcnNlIiwiX21vbnRoc1BhcnNlRXhhY3QiLCJzZXRNb250aCIsImRheU9mTW9udGgiLCJnZXRTZXRNb250aCIsImdldERheXNJbk1vbnRoIiwiZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXgiLCJjb21wdXRlTW9udGhzUGFyc2UiLCJfbW9udGhzU2hvcnRTdHJpY3RSZWdleCIsIl9tb250aHNTaG9ydFJlZ2V4IiwiZGVmYXVsdE1vbnRoc1JlZ2V4IiwiX21vbnRoc1N0cmljdFJlZ2V4IiwiX21vbnRoc1JlZ2V4IiwiY21wTGVuUmV2Iiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJjcmVhdGVEYXRlIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsImNyZWF0ZVVUQ0RhdGUiLCJVVEMiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZndkbHciLCJnZXRVVENEYXkiLCJkYXlPZlllYXJGcm9tV2Vla3MiLCJ3ZWVrZGF5IiwibG9jYWxXZWVrZGF5Iiwid2Vla09mZnNldCIsImRheU9mWWVhciIsInJlc1llYXIiLCJyZXNEYXlPZlllYXIiLCJ3ZWVrT2ZZZWFyIiwicmVzV2VlayIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJsb2NhbGVXZWVrIiwiX3dlZWsiLCJkZWZhdWx0TG9jYWxlV2VlayIsImxvY2FsZUZpcnN0RGF5T2ZXZWVrIiwibG9jYWxlRmlyc3REYXlPZlllYXIiLCJnZXRTZXRXZWVrIiwiZ2V0U2V0SVNPV2VlayIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNNaW5SZWdleCIsIndlZWtkYXlzU2hvcnRSZWdleCIsIndlZWtkYXlzUmVnZXgiLCJ3ZWVrZGF5c1BhcnNlIiwicGFyc2VXZWVrZGF5IiwicGFyc2VJc29XZWVrZGF5IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwibG9jYWxlV2Vla2RheXMiLCJfd2Vla2RheXMiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCIsImxvY2FsZVdlZWtkYXlzU2hvcnQiLCJfd2Vla2RheXNTaG9ydCIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsImxvY2FsZVdlZWtkYXlzTWluIiwiX3dlZWtkYXlzTWluIiwiaGFuZGxlU3RyaWN0UGFyc2UkMSIsIndlZWtkYXlOYW1lIiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJsb2NhbGVXZWVrZGF5c1BhcnNlIiwiX3dlZWtkYXlzUGFyc2VFeGFjdCIsIl9mdWxsV2Vla2RheXNQYXJzZSIsImdldFNldERheU9mV2VlayIsImdldERheSIsImdldFNldExvY2FsZURheU9mV2VlayIsImdldFNldElTT0RheU9mV2VlayIsImRlZmF1bHRXZWVrZGF5c1JlZ2V4IiwiY29tcHV0ZVdlZWtkYXlzUGFyc2UiLCJfd2Vla2RheXNTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFJlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzTWluUmVnZXgiLCJfd2Vla2RheXNNaW5TdHJpY3RSZWdleCIsIl93ZWVrZGF5c01pblJlZ2V4IiwibWluUGllY2VzIiwibWlucCIsInNob3J0cCIsImxvbmdwIiwiaEZvcm1hdCIsImhvdXJzIiwia0Zvcm1hdCIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwibG93ZXJjYXNlIiwibWF0Y2hNZXJpZGllbSIsIl9tZXJpZGllbVBhcnNlIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zMSIsInBvczIiLCJsb2NhbGVJc1BNIiwiZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UiLCJsb2NhbGVNZXJpZGllbSIsImlzTG93ZXIiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImRheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJtZXJpZGllbVBhcnNlIiwibG9jYWxlcyIsImxvY2FsZUZhbWlsaWVzIiwiZ2xvYmFsTG9jYWxlIiwibm9ybWFsaXplTG9jYWxlIiwiY2hvb3NlTG9jYWxlIiwibmFtZXMiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiX2FiYnIiLCJhbGlhc2VkUmVxdWlyZSIsImdldFNldEdsb2JhbExvY2FsZSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJwYXJlbnRMb2NhbGUiLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJsaXN0TG9jYWxlcyIsImNoZWNrT3ZlcmZsb3ciLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIl9vdmVyZmxvd1dlZWtkYXkiLCJkZWZhdWx0cyIsImN1cnJlbnREYXRlQXJyYXkiLCJub3dWYWx1ZSIsIl91c2VVVEMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRNb250aCIsImdldERhdGUiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9kYXlPZlllYXIiLCJfbmV4dERheSIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwid2Vla1llYXIiLCJ0ZW1wIiwid2Vla2RheU92ZXJmbG93IiwiR0ciLCJXIiwiY3JlYXRlTG9jYWwiLCJjdXJXZWVrIiwiZ2ciLCJleHRlbmRlZElzb1JlZ2V4IiwiYmFzaWNJc29SZWdleCIsInR6UmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwiYXNwTmV0SnNvblJlZ2V4IiwiY29uZmlnRnJvbUlTTyIsImFsbG93VGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lRm9ybWF0IiwidHpGb3JtYXQiLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwiZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyIsInllYXJTdHIiLCJtb250aFN0ciIsImRheVN0ciIsImhvdXJTdHIiLCJtaW51dGVTdHIiLCJzZWNvbmRTdHIiLCJ1bnRydW5jYXRlWWVhciIsInByZXByb2Nlc3NSRkMyODIyIiwiY2hlY2tXZWVrZGF5Iiwid2Vla2RheVN0ciIsInBhcnNlZElucHV0Iiwid2Vla2RheVByb3ZpZGVkIiwid2Vla2RheUFjdHVhbCIsIm9ic09mZnNldHMiLCJVVCIsIkdNVCIsIkVEVCIsIkVTVCIsIkNEVCIsIkNTVCIsIk1EVCIsIk1TVCIsIlBEVCIsIlBTVCIsImNhbGN1bGF0ZU9mZnNldCIsIm9ic09mZnNldCIsIm1pbGl0YXJ5T2Zmc2V0IiwibnVtT2Zmc2V0IiwiaG0iLCJjb25maWdGcm9tUkZDMjgyMiIsInBhcnNlZEFycmF5IiwiY29uZmlnRnJvbVN0cmluZyIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiSVNPXzg2MDEiLCJSRkNfMjgyMiIsInNraXBwZWQiLCJ0b3RhbFBhcnNlZElucHV0TGVuZ3RoIiwibWVyaWRpZW1GaXhXcmFwIiwiaXNQbSIsIm1lcmlkaWVtSG91ciIsImNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheSIsInRlbXBDb25maWciLCJiZXN0TW9tZW50Iiwic2NvcmVUb0JlYXQiLCJjdXJyZW50U2NvcmUiLCJzY29yZSIsImNvbmZpZ0Zyb21PYmplY3QiLCJtaWxsaXNlY29uZCIsImNyZWF0ZUZyb21Db25maWciLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJjb25maWdGcm9tSW5wdXQiLCJpc1VUQyIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiaXNEdXJhdGlvblZhbGlkIiwidW5pdEhhc0RlY2ltYWwiLCJpc1ZhbGlkJDEiLCJjcmVhdGVJbnZhbGlkJDEiLCJjcmVhdGVEdXJhdGlvbiIsIkR1cmF0aW9uIiwieWVhcnMiLCJxdWFydGVycyIsInF1YXJ0ZXIiLCJ3ZWVrcyIsImRheXMiLCJtaWxsaXNlY29uZHMiLCJfbWlsbGlzZWNvbmRzIiwiX2RheXMiLCJfYnViYmxlIiwiaXNEdXJhdGlvbiIsImFic1JvdW5kIiwic2VwYXJhdG9yIiwib2Zmc2V0RnJvbVN0cmluZyIsImNodW5rT2Zmc2V0IiwibWF0Y2hlciIsImNsb25lV2l0aE9mZnNldCIsImNsb25lIiwic2V0VGltZSIsImxvY2FsIiwiZ2V0RGF0ZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0U2V0T2Zmc2V0Iiwia2VlcExvY2FsVGltZSIsImtlZXBNaW51dGVzIiwibG9jYWxBZGp1c3QiLCJfY2hhbmdlSW5Qcm9ncmVzcyIsImFkZFN1YnRyYWN0IiwiZ2V0U2V0Wm9uZSIsInNldE9mZnNldFRvVVRDIiwic2V0T2Zmc2V0VG9Mb2NhbCIsInN1YnRyYWN0Iiwic2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQiLCJ0Wm9uZSIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEYXlsaWdodFNhdmluZ1RpbWUiLCJpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwidG9BcnJheSIsImlzTG9jYWwiLCJpc1V0Y09mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImRpZmZSZXMiLCJwYXJzZUlzbyIsIm1vbWVudHNEaWZmZXJlbmNlIiwiaW52YWxpZCIsImlucCIsInBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsImR1ciIsImlzQWRkaW5nIiwiZ2V0Q2FsZW5kYXJGb3JtYXQiLCJteU1vbWVudCIsImNhbGVuZGFyJDEiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJsb2NhbElucHV0IiwiZW5kT2YiLCJpc0JldHdlZW4iLCJpbmNsdXNpdml0eSIsImlzU2FtZSIsImlucHV0TXMiLCJpc1NhbWVPckFmdGVyIiwiaXNTYW1lT3JCZWZvcmUiLCJhc0Zsb2F0Iiwiem9uZURlbHRhIiwibW9udGhEaWZmIiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJhbmNob3IyIiwiYWRqdXN0IiwiZGVmYXVsdEZvcm1hdCIsImRlZmF1bHRGb3JtYXRVdGMiLCJrZWVwT2Zmc2V0Iiwiem9uZSIsInByZWZpeCIsInN1ZmZpeCIsImlucHV0U3RyaW5nIiwicG9zdGZvcm1hdCIsImh1bWFuaXplIiwiZnJvbU5vdyIsInRvTm93IiwibmV3TG9jYWxlRGF0YSIsImlzb1dlZWtkYXkiLCJ1bml4IiwidG9PYmplY3QiLCJpc1ZhbGlkJDIiLCJwYXJzaW5nRmxhZ3MiLCJpbnZhbGlkQXQiLCJjcmVhdGlvbkRhdGEiLCJpc29XZWVrWWVhciIsImFkZFdlZWtZZWFyRm9ybWF0VG9rZW4iLCJnZXRTZXRXZWVrWWVhciIsImdldFNldFdlZWtZZWFySGVscGVyIiwiZ2V0U2V0SVNPV2Vla1llYXIiLCJpc29XZWVrIiwiZ2V0SVNPV2Vla3NJblllYXIiLCJnZXRXZWVrc0luWWVhciIsIndlZWtJbmZvIiwid2Vla3NUYXJnZXQiLCJzZXRXZWVrQWxsIiwiZGF5T2ZZZWFyRGF0YSIsImdldFNldFF1YXJ0ZXIiLCJnZXRTZXREYXlPZk1vbnRoIiwiZ2V0U2V0RGF5T2ZZZWFyIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsImdldFNldE1pbGxpc2Vjb25kIiwiZ2V0Wm9uZUFiYnIiLCJnZXRab25lTmFtZSIsInByb3RvIiwiaXNvV2Vla3MiLCJpc29XZWVrc0luWWVhciIsImlzRFNUIiwiem9uZUFiYnIiLCJ6b25lTmFtZSIsImRhdGVzIiwiaXNEU1RTaGlmdGVkIiwiY3JlYXRlVW5peCIsImNyZWF0ZUluWm9uZSIsInByZVBhcnNlUG9zdEZvcm1hdCIsInByb3RvJDEiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiZ2V0JDEiLCJsaXN0TW9udGhzSW1wbCIsImxpc3RXZWVrZGF5c0ltcGwiLCJsb2NhbGVTb3J0ZWQiLCJsaXN0TW9udGhzIiwibGlzdE1vbnRoc1Nob3J0IiwibGlzdFdlZWtkYXlzIiwibGlzdFdlZWtkYXlzU2hvcnQiLCJsaXN0V2Vla2RheXNNaW4iLCJsYW5nRGF0YSIsIm1hdGhBYnMiLCJhZGRTdWJ0cmFjdCQxIiwiYWRkJDEiLCJzdWJ0cmFjdCQxIiwiYWJzQ2VpbCIsImJ1YmJsZSIsIm1vbnRoc0Zyb21EYXlzIiwibW9udGhzVG9EYXlzIiwiZGF5c1RvTW9udGhzIiwiYXMiLCJ2YWx1ZU9mJDEiLCJtYWtlQXMiLCJhbGlhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzWWVhcnMiLCJjbG9uZSQxIiwiZ2V0JDIiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsInN1YnN0aXR1dGVUaW1lQWdvIiwicmVsYXRpdmVUaW1lJDEiLCJwb3NOZWdEdXJhdGlvbiIsImdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIiwicm91bmRpbmdGdW5jdGlvbiIsImdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCIsInRocmVzaG9sZCIsIndpdGhTdWZmaXgiLCJhYnMkMSIsInRvSVNPU3RyaW5nJDEiLCJZIiwiRCIsInRvRml4ZWQiLCJ0b3RhbCIsInRvdGFsU2lnbiIsInltU2lnbiIsImRheXNTaWduIiwiaG1zU2lnbiIsInByb3RvJDIiLCJ0b0lzb1N0cmluZyIsInZlcnNpb24iLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJlbGF0aXZlVGltZVRocmVzaG9sZCIsIkhUTUw1X0ZNVCIsIkRBVEVUSU1FX0xPQ0FMIiwiREFURVRJTUVfTE9DQUxfU0VDT05EUyIsIkRBVEVUSU1FX0xPQ0FMX01TIiwiVElNRSIsIlRJTUVfU0VDT05EUyIsIlRJTUVfTVMiLCJwcm9jZXNzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsInF1ZXVlIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJuZXh0VGljayIsIkl0ZW0iLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwibm9vcCIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiY29weVByb3BzIiwiU2FmZUJ1ZmZlciIsIl9ub3JtYWxpemVFbmNvZGluZyIsImVuYyIsInJldHJpZWQiLCJub3JtYWxpemVFbmNvZGluZyIsIm5lbmMiLCJuYiIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOEVuZCIsInV0ZjhUZXh0IiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwidXRmOENoZWNrRXh0cmFCeXRlcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9ycyIsImZvcm1hdFJlZ0V4cCIsIm9iamVjdHMiLCJfIiwiaXNOdWxsIiwibm9EZXByZWNhdGlvbiIsImRlcHJlY2F0ZWQiLCJ0aHJvd0RlcHJlY2F0aW9uIiwidHJhY2VEZXByZWNhdGlvbiIsInRyYWNlIiwiZGVidWdzIiwiZGVidWdFbnZpcm9uIiwiZGVidWdsb2ciLCJOT0RFX0RFQlVHIiwicGlkIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImRlcHRoIiwiY29sb3JzIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwiYXJyYXlUb0hhc2giLCJoYXNoIiwicmVjdXJzZVRpbWVzIiwicHJpbWl0aXZlIiwiZm9ybWF0UHJpbWl0aXZlIiwidmlzaWJsZUtleXMiLCJpc0Vycm9yIiwiZm9ybWF0RXJyb3IiLCJpc1JlZ0V4cCIsImJyYWNlcyIsInRvVVRDU3RyaW5nIiwiZm9ybWF0QXJyYXkiLCJmb3JtYXRQcm9wZXJ0eSIsInJlZHVjZVRvU2luZ2xlU3RyaW5nIiwic2ltcGxlIiwibnVtTGluZXNFc3QiLCJjdXIiLCJpc051bGxPclVuZGVmaW5lZCIsIm9iamVjdFRvU3RyaW5nIiwiaXNQcmltaXRpdmUiLCJwYWQiLCJ0aW1lc3RhbXAiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwib3JpZ2luIiwia0N1c3RvbVByb21pc2lmaWVkU3ltYm9sIiwicHJvbWlzaWZ5Iiwib3JpZ2luYWwiLCJwcm9taXNlUmVzb2x2ZSIsInByb21pc2VSZWplY3QiLCJwcm9taXNlIiwic2V0UHJvdG90eXBlT2YiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3VzdG9tIiwiY2FsbGJhY2tpZnlPblJlamVjdGVkIiwicmVhc29uIiwibmV3UmVhc29uIiwiY2FsbGJhY2tpZnkiLCJjYWxsYmFja2lmaWVkIiwibWF5YmVDYiIsInJlaiIsImciLCJ3ZWJwYWNrUG9seWZpbGwiLCJwYXRocyIsIkJhc2VQYWdlIiwiaXNEZWxldGVkIiwiY2xhc3NOYW1lcyIsIm9uQmVmb3JlVXBkYXRlZCIsIm9uVXBkYXRlZCIsIm9uVmlzaWJsZSIsImJpbmRlckV2ZW50Iiwib25SZXNpemUiLCJzdXBlcl90ZW1wbGF0ZSIsImNoaWxkX3RlbXBsYXRlIiwibmF2IiwiRGlhbG9nUGFnZSIsImRpYWxvZ19jb250ZW50X21heF9oZWlnaHQiLCJjb250cm9scyIsImJ1dHRvbl90aXRsZSIsInZhbFJ1bGUiLCJleHRlbmRUZW1wbGF0ZSIsIkhlYWRlclBhZ2UiLCJiYWNrQnV0dG9uIiwibWVudUJ1dHRvbiIsInJlZnJlc2hCdXR0b24iLCJzZWFyY2hCdXR0b24iLCJmb290ZXIiLCJzaG93Rm9vdGVyIiwic2VydmljZVByb3ZpZGVyX2lkIiwiaGVhZGVyIiwiTnVtZXJpY0tleWJvYXJkIiwiaXNFbmFibGVkIiwiX3BhZ2UiLCJsYXlvdXQiLCJzZWxlY3RPbkZvY3VzIiwic2VsZWN0Rm9yZUNvbG9yIiwic2VsZWN0QmFja0NvbG9yIiwidGhlbWUiLCJlbmFibGUiLCJmb2N1c0V2ZW50SGFuZGxlciIsImRpc2FibGUiLCJkZXN0cm95S0IiLCJmb2N1c0VsZW1lbnQiLCJOdW1lcmljS2V5Ym9hcmRQYWdlIiwiaXNUb3VjaERldmljZSIsImNyZWF0ZUV2ZW50IiwiZ2V0UHhOdW1iZXIiLCJvbGRfaW5wdXQiLCJjdXJyX2lucHV0IiwibW91c2VEb3duRWwiLCJvbGRfaW5wdXRfaGlkZGVuIiwiYmxpbmtlciIsImlzVGV4dFNlbGVjdGVkIiwic2Nyb2xsZWQiLCJpc1BpcGVWaXNpYmxlIiwiaW5wdXRTdHlsZSIsInNldE9wdGlvbnMiLCJzdG9wQmxpbmtlciIsImVsZW1EaXNwbGF5IiwiaXNOZXciLCJ1bkZvY3VzQ3VycmVudEVsZW1lbnQiLCJzdCIsImJvZHlTdHlsZSIsImVsZW1DbGFzc05hbWUiLCJzdGFydEJsaW5rZXIiLCJob29rRXZlbnRzIiwiZXZfbmFtZSIsInN0b3BQcm9wYWdhdGlvbiIsImJhY2tzcGFjZSIsIm1pbnVzIiwidHlwZV9jaGFyIiwiY3VzdG9tS0Jfa2V5ZG93bmhhbmRsZXIiLCJ3X2giLCJrYl9oIiwibGlzdGVuUmVzaXplIiwiX3Jlc2l6ZUJvZHkiLCJlbWl0UmVzaXplIiwiYl9oIiwiaW5wdXRfcCIsIndpbmRvd19yZXNpemUiLCJrZXlDb2RlIiwicHJldmVudERlZmF1bHQiLCJwaXBlY2hhciIsInNldEludGVydmFsIiwiYmxpbmsiLCJjbGVhckludGVydmFsIiwiY2hyIiwicl92YWwiLCJzaWxlbnQiLCJSb290UGFnZSIsInBhZ2VzIiwiVGVzdEFycmF5UGFnZSIsIlRlc3RGb3Jtc1BhZ2UiLCJUZXN0RmlsZVVwbG9hZFBhZ2UiLCJUZXN0Q2hhbmdlV2F0Y2hlciIsIlRlc3RGb3Jtc1Zpc2libGVQYWdlIiwiVGVzdENvbXBvbmVudFBhZ2UiLCJUZXN0Rm9ybXNTZWxlY3RJdGVtc1BhZ2UiLCJvYmphcnIiLCJmaW5kZXgiLCJmb3JtYXJyIiwib2Jqb2JqIiwiY291bnRlciIsImxldmVsMiIsImxldmVsMyIsInVuSG9va1dhdGNoZXJzIiwiaG9va1dhdGNoZXJzIiwibXV0YXRlIiwiVGVzdENvbXBvbmVuZXQiLCJhYSIsImZpbGVGaWVsZCIsImZpbGVGaWVsZEZpbGVEYXRhIiwiZm9ybURhdGEiLCJSZWFkRmlsZSIsImZpbGVGaWVsZEltYWdlIiwiZmllbGQxIiwiZmllbGQyIiwiZmllbGQzIiwiZmllbGQ0IiwiJCIsImFqYXgiLCJtZXRob2QiLCJwcm9jZXNzRGF0YSIsInN1Y2Nlc3MiLCJhbGVydCIsImZhaWwiLCJtb2RlIiwiY2FjaGUiLCJyZWRpcmVjdCIsImhlYWRlcnMiLCJIZWFkZXJzIiwic3RhdHVzIiwiZm9ybTFkYXRhIiwiZm9ybTFlcnJvcnMiLCJmb3JtMWF0dHJpYnV0ZXMiLCJmb3JtMXRlbXBsYXRlIiwiZm9ybTEiLCJvbkNsaWNrZWQiLCJ2aXNpYmxlRm9ybTFkYXRhIl0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDJCQUEyQiwwQkFBMEIsRUFBRTtRQUN2RCxpQ0FBaUMsZUFBZTtRQUNoRDtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxzREFBc0QsK0RBQStEOztRQUVySDtRQUNBOzs7UUFHQTtRQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsRkE7QUFDQTtBQUNBO0FBQ0E7QUFFTyxJQUFNQSxhQUFiO0FBQUE7O0FBQUE7O0FBQ0UsMkJBQWM7QUFBQTs7QUFBQTs7QUFDWjtBQUNBOztBQUNBLFVBQUtDLE1BQUwsR0FBYyxJQUFkO0FBQ0E7O0FBQ0EsVUFBS0MsUUFBTCxHQUFn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L0NGO0FBQUE7QUFBQSx3QkFpRGU7QUFDYixhQUFPLEtBQUtzOUUsY0FBTCwwRUFBb0Nya0YsUUFBcEMsQ0FBUDtBQUNBO0FBbkRGOztBQUFBO0FBQUEsRUFBMENza0YsK0VBQTFDO0FBc0RBLElBQU10a0YsUUFBUSxtbkJBQWQsQzs7Ozs7Ozs7Ozs7OztBQzVEQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTJjLE1BQU0sQ0FBQyxXQUFELENBQU4sR0FBc0JsVSxvRUFBdEI7QUFDQWtVLE1BQU0sQ0FBQyxLQUFELENBQU4sR0FBZ0JqUyx3REFBaEI7QUFFQSxJQUFJOGlCLE1BQU0sR0FBR3ZILGtFQUFRLENBQUNDLFNBQVQsQ0FBbUJDLHlFQUFuQixDQUFiO0FBQ0FxSCxNQUFNLENBQUMzRSxHQUFQLEdBQWEsSUFBSXpDLDRFQUFKLEVBQWI7QUFFQSxJQUFJbmIsQ0FBQyxHQUFHdWlCLE1BQU0sQ0FBQzNFLEdBQVAsQ0FBVzlCLE9BQVgsQ0FBbUIyaEUsbUVBQW5CLENBQVIsQyxDQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9CQSxlIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCB7IEJpbmRlciB9IGZyb20gXCIuLi9jb3JlL0JpbmRlclwiO1xyXG5pbXBvcnQgeyBDaGFuZ2VXYXRjaGVyIH0gZnJvbSBcIi4uL2NvcmUvQ2hhbmdlV2F0Y2hlclwiO1xyXG5pbXBvcnQgeyBPYmplY3RzIH0gZnJvbSBcIi4uL2NvcmUvT2JqZWN0c1wiO1xyXG5pbXBvcnQgeyB0cnlDYWxsIH0gZnJvbSBcIi4uL2NvcmUvaGVscGVyc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJhc2VDb21wb25lbnQgZXh0ZW5kcyBDaGFuZ2VXYXRjaGVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICAvKiogQHR5cGUge0JpbmRlcn0gKi9cclxuICAgIHRoaXMuYmluZGVyID0gbnVsbDtcclxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xyXG4gICAgdGhpcy50ZW1wbGF0ZSA9IG51bGw7XHJcbiAgICB0aGlzLmV2ZW50cyA9IG51bGw7XHJcbiAgICAvKiogZnJhZ21lbnQgd2l0aCBjaGlsZHJlbiAqL1xyXG4gICAgdGhpcy50ZW1wbGF0ZUZyYWdtZW50ID0gbnVsbDtcclxuICAgIC8qKiB1cGRhdGUgY2hpbGRyZW4qL1xyXG4gICAgdGhpcy50ZW1wbGF0ZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgIE9iamVjdHMuYmluZE1ldGhvZHModGhpcyk7XHJcbiAgICAvKiogcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgcGFnZSAqL1xyXG4gICAgdGhpcy5wYXJlbnRQYWdlID0gbnVsbDtcclxuXHJcbiAgICAvKipAdHlwZSB7SFRNTEVsZW1lbnR9ICovXHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XHJcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBbXTtcclxuICB9XHJcblxyXG4gIGdldCByZWYoKSB7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG5cdC8qKiBcclxuXHQgKiAgKioqRE8gTk9UIE9WRVJSSURFKioqIFxyXG5cdCAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgYWZ0ZXIgdGhlIGNvbnRhaW5lciBpcyBib3VuZCB0byBjb250ZXh0XHJcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyXHJcblx0ICovXHJcbiAgX29uSW5pdChjb250YWluZXIpIHtcclxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgc3VwZXIuc3RhcnRXYXRjaCgpO1xyXG4gICAgLy9yZWdpc3RlciBteSBzZWxmIHdpdGggdGhlIGJhc2VQYWdlIGNvbXBvbmVudHMsIHNvIGl0IGtub3dzIHdoYXQgdG8gZGVzdHJveSBsYXRlclxyXG4gICAgaWYgKHRoaXMucGFyZW50UGFnZSkge1xyXG4gICAgICBpZiAoIXRoaXMucGFyZW50UGFnZS5jb21wb25lbnRzKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRQYWdlLmNvbXBvbmVudHMgPSBbXTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnBhcmVudFBhZ2UuY29tcG9uZW50cy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vbkluaXQodGhpcy5jb250YWluZXIpO1xyXG4gIH1cclxuXHJcblx0LyoqIFxyXG5cdCAqICAqKipPdmVycmlkZSoqKiBcclxuXHQgKiBUaGlzIGZ1bmN0aW5vbiBpcyBjYWxsZWQgb25jZSBhZnRlciB0aGUgY29udGFpbmVyIGlzIGJvdW5kIHRvIGNvbnRleHRcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXJcclxuXHQgKi9cclxuICBvbkluaXQoY29udGFpbmVyKSB7XHJcblxyXG4gIH1cclxuXHJcblx0LyoqXHJcblx0ICogT3ZlcnJpZGVzIENoYW5nZVdhdGNoZXIudXBkYXRlIG1ldGhvZFxyXG5cdCAqL1xyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLm9uQmVmb3JlVXBkYXRlKCkgPT09IGZhbHNlKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBpZiAodGhpcy5iaW5kZXIpXHJcbiAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZUVsZW1lbnRzKCk7XHJcbiAgICB0aGlzLm9uVXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMub25EZXN0cm95KSB7XHJcbiAgICAgIHRoaXMub25EZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29tcG9uZW50cykge1xyXG4gICAgICBmb3IgKGxldCBpIGluIHRoaXMuY29tcG9uZW50cykge1xyXG4gICAgICAgIHZhciBjb21wID0gdGhpcy5jb21wb25lbnRzW2ldO1xyXG4gICAgICAgIGlmIChjb21wIGluc3RhbmNlb2YgQmFzZUNvbXBvbmVudCkge1xyXG4gICAgICAgICAgdHJ5Q2FsbChjb21wLCBjb21wLmRlc3Ryb3kpO1xyXG4gICAgICAgICAgZGVsZXRlIHRoaXMuY29tcG9uZW50c1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5iaW5kZXIpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdG9wV2F0Y2goKTtcclxuICAgIE9iamVjdHMuc3RyaXAodGhpcyk7XHJcbiAgfVxyXG5cclxuXHQvKipcclxuXHQgKiAqKipPdmVycmlkZSoqKlxyXG5cdCAqKi9cclxuICBvbkRlc3Ryb3koKSB7XHJcblxyXG4gIH1cclxuXHJcblx0LyoqXHJcblx0ICogKioqT3ZlcnJpZGUqKipcclxuXHQgKiBDYWxsZWQgYmVmb3JlIFVJIGlzIHVwZGF0ZWRcclxuXHQgKiBSZXR1cm4gZmFsc2UgdG8gY2FuY2VsIHVwZGF0ZVxyXG5cdCAqIEByZXR1cm4ge3ZvaWR8Ym9vbGVhbn1cclxuXHQgKiovXHJcbiAgb25CZWZvcmVVcGRhdGUoKSB7XHJcblxyXG4gIH1cclxuXHQvKipcclxuXHQgKiAqKipPdmVycmlkZSoqKlxyXG5cdCAqKi9cclxuICBvblVwZGF0ZSgpIHtcclxuXHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgT2JqZWN0cyB9IGZyb20gXCIuLy4uL2NvcmUvT2JqZWN0c1wiO1xyXG5pbXBvcnQgeyBGb3JtVmFsaWRhdG9yIH0gZnJvbSBcIi4vLi4vY29yZS9mb3JtX3ZhbGlkYXRvclwiO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSBcIi4vLi4vY29yZS90ZXh0XCI7XHJcbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tIFwiLi9CYXNlQ29tcG9uZW50XCI7XHJcbmltcG9ydCB7IGlzTnVtYmVyLCBpc0FycmF5LCBpc1N0cmluZywgaXNPYmplY3QgfSBmcm9tIFwidXRpbFwiO1xyXG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gXCIuLy4uL2NvcmUvRGF0ZVRpbWVcIjtcclxuaW1wb3J0IHsgVHJhbnNsYXRlIH0gZnJvbSBcIi4uL2NvcmUvVHJhbnNsYXRlXCI7XHJcbmltcG9ydCB7IHRyeUNhbGwsIHJvdW5kIH0gZnJvbSAnLi4vY29yZS9oZWxwZXJzJztcclxuaW1wb3J0IHsgQWxlcnQgfSBmcm9tIFwiLi4vY29yZS9zaW1wbGVfY29uZmlybVwiO1xyXG5pbXBvcnQgeyBET00gfSBmcm9tIFwiLi4vY29yZS9ET01cIjtcclxuaW1wb3J0IHsgRmlsZUFjY2VzcyB9IGZyb20gXCIuLi9jb3JlL0ZpbGVBY2Nlc3NcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtcyBleHRlbmRzIEJhc2VDb21wb25lbnQge1xyXG4gIC8qKlxyXG4gICAqIEZvcm1zIERpcmVjdGl2ZS4gR2VuZXJhdGUgZm9ybXMgZnJvbSBKU09OIGRhdGFcclxuICAgKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGVbXX0gZm9ybVRlbXBsYXRlIFxyXG4gICAqIEBwYXJhbSB7Kn0gW2RhdGFdXHJcbiAgICogQHBhcmFtIHsqfSBbZXJyb3JzXVxyXG4gICAqIEBwYXJhbSB7e25lc3RlZERhdGE/OmJvb2xlYW4sIGZvcm1DbGFzcz86c3RyaW5nLCBmaWVsZENsYXNzPzpzdHJpbmd9fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihmb3JtVGVtcGxhdGUsIGRhdGEsIGVycm9ycywgb3B0aW9ucykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuZm9ybVRlbXBsYXRlID0gZm9ybVRlbXBsYXRlO1xyXG4gICAgdGhpcy5kYXRhID0gZGF0YSB8fCB7fTtcclxuXHJcbiAgICB0aGlzLmV4dHJhRGF0YSA9IHt9O1xyXG5cclxuICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzIHx8IHt9O1xyXG5cclxuICAgIHRoaXMub3B0aW9ucyA9IHsgbmVzdGVkRGF0YTogdHJ1ZSwgZm9ybUNsYXNzOiAnZm9ybWdyb3VwJywgZmllbGRDbGFzczogJ2ZpZWxkZ3JvdXAnIH07XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgdGhpcy5hdHRyRXZlbnRzID0ge307XHJcbiAgICB0aGlzLnR5cGVzID0ge307XHJcbiAgICB0aGlzLmFycmF5cyA9IHt9O1xyXG5cclxuICAgIHRoaXMuZWxlbWVudEl0ZW1zID0ge307XHJcblxyXG4gICAgdGhpcy5ldmVudHMgPSB7XHJcbiAgICAgIGlucHV0OiAoZXYpID0+IHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRoaXMub25JbnB1dChldik7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNsaWNrOiAoZXYpID0+IHtcclxuICAgICAgICAvL25vdGlmeSBpbiB0aGUgbmV4dCByZW5kZXIgY3ljbGUuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLm9uQ2xpY2soZXYpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICB9LFxyXG4gICAgICBjaGFuZ2U6IChldikgPT4ge1xyXG4gICAgICAgIC8vdmFsaWRhdGUgZWxlbWVudCBvbiBjaGFuZ2VcclxuICAgICAgICBpZiAoZXYudGFyZ2V0Lm5hbWUpIHtcclxuICAgICAgICAgIC8vdmFsaWRhdGUgaW4gdGhlIG5leHQgcmVuZGVyIGN5Y2xlLlxyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbGlkYXRvcikge1xyXG4gICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yLnZhbGlkYXRlRmllbGQoZXYudGFyZ2V0Lm5hbWUpO1xyXG4gICAgICAgICAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZUVsZW1lbnRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL25vdGlmeSBpbiB0aGUgbmV4dCByZW5kZXIgY3ljbGUuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5vbkNoYW5nZSA9PSB0aGlzLmV2ZW50cy5jaGFuZ2UpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihldik7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNoYW5nZSB0cmlnZ2VycyBpbmZpbml0ZSBsb29wIVwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMub25DaGFuZ2UoZXYpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICB9LFxyXG4gICAgICBmb2N1czogKGV2KSA9PiB7XHJcbiAgICAgICAgdmFyIF9uYW1lID0gZXYudGFyZ2V0Lm5hbWU7XHJcbiAgICAgICAgaWYgKF9uYW1lKSB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHNbX25hbWVdLmF0dHJpYnV0ZXMuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgYmx1cjogKGV2KSA9PiB7XHJcbiAgICAgICAgdmFyIF9uYW1lID0gZXYudGFyZ2V0Lm5hbWU7XHJcbiAgICAgICAgaWYgKF9uYW1lKSB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHNbX25hbWVdLmF0dHJpYnV0ZXMuYWN0aXZlID0gbnVsbDtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMuZmllbGRfZGVmaW5pdGlvbnMgPSBGb3Jtcy5maWVsZF9kZWZpbml0aW9ucztcclxuXHJcbiAgICB0aGlzLnRlbXBsYXRlID0gYDxkaXYgW2RpcmVjdGl2ZV09XCJ0aGlzLmZvcm1IVE1MXCI+PC9kaXY+YDtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVRlbXBsYXRlKGZvcm1UZW1wbGF0ZSk7XHJcbiAgfVxyXG5cclxuICBzZXREYXRhVmFsdWVzRnJvbUZpZWxkcygpIHtcclxuICAgIE9iamVjdHMuZm9yRWFjaCh0aGlzLmZpZWxkcywgKGZpZWxkLCBrZXkpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gT2JqZWN0cy5nZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmRhdGEsIGtleSk7XHJcblxyXG4gICAgICAgIGlmIChmaWVsZC52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIGN1cnJlbnRWYWx1ZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIE9iamVjdHMuc2V0UHJvcGVydHlCeVBhdGgodGhpcy5kYXRhLCBrZXksIGZpZWxkLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG5cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVUZW1wbGF0ZShmb3JtVGVtcGxhdGUpIHtcclxuICAgIHRoaXMuZm9ybVRlbXBsYXRlID0gZm9ybVRlbXBsYXRlO1xyXG5cclxuICAgIHRoaXMudmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IodGhpcy5kYXRhLCBmb3JtVGVtcGxhdGUsIHRoaXMuZXJyb3JzLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgdGhpcy5maWVsZHMgPSB0aGlzLnZhbGlkYXRvci5maWVsZHM7XHJcbiAgICB0aGlzLnNldERhdGFWYWx1ZXNGcm9tRmllbGRzKCk7XHJcbiAgICB0aGlzLnZhbGlkYXRvci52YWxpZGF0ZVZpc2liaWxpdHkoKTtcclxuXHJcblxyXG4gICAgdmFyIGh0bWwgPSB0aGlzLnJlbmRlckFycmF5KHRoaXMuZm9ybVRlbXBsYXRlLCBudWxsKTtcclxuICAgIHRoaXMuZm9ybUhUTUwgPSBodG1sO1xyXG4gIH1cclxuXHJcbiAgLy8vbGlzdGVuIHRvIGF0dGVtcHRzIHRvIG92ZXJ3cml0ZSBvbkNoYW5nZSBsaXN0ZW5lciBcclxuICBvbkNoYW5nZUNoYW5nZSh2YWx1ZSkge1xyXG4gICAgaWYgKGlzT2JqZWN0KHRoaXMuZXZlbnRzKSAmJiB2YWx1ZSA9PSB0aGlzLmV2ZW50cy5jaGFuZ2UpIHtcclxuICAgICAgY29uc29sZS5lcnJvcih2YWx1ZSk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHQgdG8gb3ZlcnJpZGUgRm9ybXMub25DaGFuZ2UgY2FsbGJhY2sgd2l0aCBGb3Jtcy5ldmVudHMuY2hhbmdlIHdpbGwgbGVhZCB0byBpbmZpbml0ZSBsb29wIVwiKTtcclxuICAgIH1cclxuICB9XHJcbiAgLy8vbGlzdGVuIHRvIGF0dGVtcHRzIHRvIG92ZXJ3cml0ZSBvbklucHV0IGxpc3RlbmVyIFxyXG4gIG9uSW5wdXRDaGFuZ2UodmFsdWUpIHtcclxuICAgIGlmIChpc09iamVjdCh0aGlzLmV2ZW50cykgJiYgdmFsdWUgPT0gdGhpcy5ldmVudHMuaW5wdXQpIHtcclxuICAgICAgY29uc29sZS5lcnJvcih2YWx1ZSk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHQgdG8gb3ZlcnJpZGUgRm9ybXMub25JbnB1dCBjYWxsYmFjayB3aXRoIEZvcm1zLmV2ZW50cy5pbnB1dCB3aWxsIGxlYWQgdG8gaW5maW5pdGUgbG9vcCFcIik7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vL2xpc3RlbiB0byBhdHRlbXB0cyB0byBvdmVyd3JpdGUgb25DbGljayBsaXN0ZW5lciBcclxuICBvbkNsaWNrQ2hhbmdlKHZhbHVlKSB7XHJcbiAgICBpZiAoaXNPYmplY3QodGhpcy5ldmVudHMpICYmIHZhbHVlID09IHRoaXMuZXZlbnRzLmNsaWNrKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IodmFsdWUpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0IHRvIG92ZXJyaWRlIEZvcm1zLm9uQ2xpY2sgY2FsbGJhY2sgd2l0aCBGb3Jtcy5ldmVudHMuY2xpY2sgd2lsbCBsZWFkIHRvIGluZmluaXRlIGxvb3AhXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIFxyXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudENoYW5nZUV2ZW50fSBldmVudFxyXG4gICAqL1xyXG4gIG9uQ2hhbmdlKGV2ZW50KSB7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqIFxyXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudENoYW5nZUV2ZW50fSBldmVudFxyXG4gICAqL1xyXG4gIG9uSW5wdXQoZXZlbnQpIHtcclxuXHJcbiAgfVxyXG4gIC8qKiBcclxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnRDaGFuZ2VFdmVudH0gZXZlbnRcclxuICAgKi9cclxuICBvbkNsaWNrKGV2ZW50KSB7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqIFxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnRNb3VzZUV2ZW50fSBldmVudFxyXG4gICAqL1xyXG4gIG9uQnV0dG9uQ2xpY2soZXZlbnQpIHtcclxuXHJcbiAgfVxyXG5cclxuICBfZm9ybWF0U3BsaXREYXRlRmllbGQoZXZ0LCBuYW1lLCBpc1RpbWUpIHtcclxuICAgIC8qKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gKi9cclxuICAgIHZhciBlbCA9IGV2dC50YXJnZXQ7XHJcbiAgICAvL2NvbnNvbGUubG9nKGV2dCwgbmFtZSwgaXNUaW1lKTtcclxuICAgIHZhciBkYXRlID0gbnVsbDtcclxuICAgIHZhciB0aW1lID0gbnVsbDtcclxuXHJcbiAgICBpZiAoaXNUaW1lKSB7XHJcbiAgICAgIGRhdGUgPSBPYmplY3RzLmdldFByb3BlcnR5QnlQYXRoKHRoaXMuZGF0YSwgbmFtZSk7XHJcbiAgICAgIHRpbWUgPSBEYXRlVGltZS5mcm9tSHVtYW5UaW1lKGVsLnZhbHVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRhdGUgPSBEYXRlVGltZS5mcm9tSHVtYW5EYXRlKGVsLnZhbHVlKTtcclxuICAgICAgdGltZSA9IE9iamVjdHMuZ2V0UHJvcGVydHlCeVBhdGgodGhpcy5kYXRhLCBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbmV3RGF0ZSA9IERhdGVUaW1lLmNvbWJpbmVEYXRlVGltZShkYXRlLCB0aW1lKTtcclxuICAgIE9iamVjdHMuc2V0UHJvcGVydHlCeVBhdGgodGhpcy5kYXRhLCBuYW1lLCBuZXdEYXRlKTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKG5ld0RhdGUpO1xyXG4gIH1cclxuXHJcbiAgX2Zvcm1hdFBob25lTnVtYmVyKGV2dCkge1xyXG4gICAgdmFyIGVsID0gZXZ0LnRhcmdldDtcclxuICAgIHZhciBzZWxTID0gZWwuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgICB2YXIgc2VsRSA9IGVsLnNlbGVjdGlvblN0YXJ0O1xyXG4gICAgdmFyIG9sZCA9IGVsLnZhbHVlO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGVsLnZhbHVlID0gVGV4dC5mb3JtYXRQaG9uZShlbC52YWx1ZSwgeyAzOiAnLScsIDY6ICctJywgMTA6ICd4JyB9IC8qezM6Jy0nLDY6Jy0nfS8qKi8pO1xyXG4gICAgICB2YXIgZGlmID0gZWwudmFsdWUubGVuZ3RoIC0gb2xkLmxlbmd0aDtcclxuICAgICAgZWwuc2VsZWN0aW9uU3RhcnQgPSBzZWxTICsgZGlmO1xyXG4gICAgICBlbC5zZWxlY3Rpb25FbmQgPSBzZWxFICsgZGlmO1xyXG4gICAgfSwgMSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlW119IGZvcm1UZW1wbGF0ZSBcclxuICAgKi9cclxuICByZW5kZXJBcnJheShmb3JtVGVtcGxhdGUsIHBhcmVudFBhdGgpIHtcclxuICAgIHZhciBodG1sID0gW107XHJcblxyXG4gICAgZm9yICh2YXIgaSBpbiBmb3JtVGVtcGxhdGUpIHtcclxuICAgICAgaWYgKCFmb3JtVGVtcGxhdGUuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xyXG4gICAgICB2YXIgZWwgPSBmb3JtVGVtcGxhdGVbaV07XHJcbiAgICAgIGlmIChlbC50eXBlKSB7XHJcbiAgICAgICAgaWYgKGVsLnR5cGUgPT0gXCJmb3JtXCIpIHtcclxuICAgICAgICAgIHZhciByZXQgPSB0aGlzLnJlbmRlcl9maWVsZChlbCwgcGFyZW50UGF0aCk7XHJcbiAgICAgICAgICBpZiAocmV0KSB7XHJcbiAgICAgICAgICAgIGh0bWwucHVzaChyZXQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvKmlmICgoZWwubmFtZSA9PSBudWxsIHx8IGVsLm5hbWU9PXVuZGVmaW5lZCkpe1xyXG4gICAgICAgICAgZWwubmFtZSA9IGk7XHJcbiAgICAgICAgICB9Ki9cclxuICAgICAgICAgIC8vZG8gd2Ugc3VwcG9ydCBuZXN0ZWQgZGF0YT9cclxuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLm5lc3RlZERhdGEpIHtcclxuICAgICAgICAgICAgcGFyZW50UGF0aCA9IG51bGw7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHBhcmVudFBhdGggJiYgZWwubmFtZSkge1xyXG4gICAgICAgICAgICAvL2VsLl9uYW1lID0gcGFyZW50UGF0aCArIFwiLlwiICsgZWwubmFtZSA7XHJcbiAgICAgICAgICAgIC8vZWwuX3BhcmVudCA9IE9iamVjdHMuZ2V0UHJvcGVydHlCeVBhdGgodGhpcy5mb3JtVGVtcGxhdGUsIGVsLl9uYW1lKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vZWwuX25hbWUgPSBlbC5uYW1lO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy9jcmVhdGUgdmFsdWUgaW4gZWFjaCBzdHJ1Y3R1cmVcclxuICAgICAgICAgIC8qaWYgKCEgT2JqZWN0cy5nZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmRhdGEsIGVsLl9uYW1lKSlcclxuICAgICAgICAgIE9iamVjdHMuc2V0UHJvcGVydHlCeVBhdGgodGhpcy5kYXRhLCBlbC5fbmFtZSwgZWwudmFsdWUgIT0gdW5kZWZpbmVkID8gZWwudmFsdWUgOiBudWxsKTtcclxuICAgICAgICAgIGlmICghIE9iamVjdHMuZ2V0UHJvcGVydHlCeVBhdGgodGhpcy5lcnJvcnMsIGVsLl9uYW1lKSlcclxuICAgICAgICAgIE9iamVjdHMuc2V0UHJvcGVydHlCeVBhdGgodGhpcy5lcnJvcnMsIGVsLl9uYW1lLCBudWxsKTtcclxuICAgICAgICAgIGlmICghIE9iamVjdHMuZ2V0UHJvcGVydHlCeVBhdGgodGhpcy5hdHRyaWJ1dGVzLCBlbC5fbmFtZSkpXHJcbiAgICAgICAgICBPYmplY3RzLnNldFByb3BlcnR5QnlQYXRoKHRoaXMuYXR0cmlidXRlcywgZWwuX25hbWUsIG51bGwpO1xyXG4gICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICB2YXIgcmV0ID0gdGhpcy5yZW5kZXJfZmllbGQoZWwsIHBhcmVudFBhdGgpO1xyXG4gICAgICAgICAgaWYgKHJldCkge1xyXG4gICAgICAgICAgICBodG1sLnB1c2gocmV0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBodG1sLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcblxyXG5cclxuICAvKipcclxuICAgKiBcclxuICAgKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGV9IGVsIFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRQYXRoIFxyXG4gICAqL1xyXG4gIHJlbmRlcl9maWVsZChlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXHJcbiAgICBlbC50eXBlID0gZWwudHlwZSA/IGVsLnR5cGUudG9Mb3dlckNhc2UoKSA6ICcnO1xyXG5cclxuICAgIGlmICh0aGlzLmZpZWxkX2RlZmluaXRpb25zW2VsLnR5cGVdKSB7XHJcbiAgICAgIGlmICh0aGlzLmZpZWxkc1tlbC5fbmFtZV0gJiYgZWwuYXR0cmlidXRlcykge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5maWVsZHNbZWwuX25hbWVdLmF0dHJpYnV0ZXMsIGVsLmF0dHJpYnV0ZXMpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChlbC5pdGVtcykge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudEl0ZW1zW2VsLl9uYW1lXSA9IGVsLml0ZW1zO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0cnlDYWxsKHRoaXMsIHRoaXMuZmllbGRfZGVmaW5pdGlvbnNbZWwudHlwZV0sIHRoaXMsIGVsLCBwYXJlbnRQYXRoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IEVycm9yKFwiVW5rbm93biBmb3JtIGVsZW1lbnQgdHlwZTpcIiArIGVsLnR5cGUgKyBcIiBpbiBcIiArIEpTT04uc3RyaW5naWZ5KGVsLCBudWxsLCAnXFx0JykpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXNzZXJ0VmFsaWRhdGVSdWxlSGFzKGVsLCBtdXN0SGF2ZSkge1xyXG4gICAgaWYgKCFlbC52YWxpZGF0ZVJ1bGUpXHJcbiAgICAgIGVsLnZhbGlkYXRlUnVsZSA9IG11c3RIYXZlO1xyXG4gICAgZWxzZSBpZiAoZWwudmFsaWRhdGVSdWxlLmluZGV4T2YoJ2VtYWlsJykgPCAwKVxyXG4gICAgICBlbC52YWxpZGF0ZVJ1bGUgPSBlbC52YWxpZGF0ZVJ1bGUgKyBcInxcIiArIG11c3RIYXZlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlfSBlbCBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3BhcmVudFBhdGhdXHJcbiAgICovXHJcbiAgYWRkRm9ybShlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgLy9kbyB3ZSBzdXBwb3J0IG5lc3RlZCBkYXRhP1xyXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubmVzdGVkRGF0YSkge1xyXG4gICAgICBwYXJlbnRQYXRoID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFyZW50UGF0aCAmJiBlbC5uYW1lKSB7XHJcbiAgICAgIC8vZWwuX25hbWUgPSBwYXJlbnRQYXRoICsgXCIuXCIgKyBlbC5uYW1lIDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vZWwuX25hbWUgPSBlbC5uYW1lO1xyXG4gICAgfVxyXG4gICAgaWYgKGVsLl9uYW1lKSB7XHJcbiAgICAgIC8vaWYgY3JlYXRlIHZhbHVlIGluIGVhY2ggc3RydWN0dXJlXHJcbiAgICAgIGlmICghT2JqZWN0cy5nZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmRhdGEsIGVsLl9uYW1lKSlcclxuICAgICAgICBPYmplY3RzLnNldFByb3BlcnR5QnlQYXRoKHRoaXMuZGF0YSwgZWwuX25hbWUsIHt9KTtcclxuICAgICAgaWYgKCFPYmplY3RzLmdldFByb3BlcnR5QnlQYXRoKHRoaXMuZXJyb3JzLCBlbC5fbmFtZSkpXHJcbiAgICAgICAgT2JqZWN0cy5zZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmVycm9ycywgZWwuX25hbWUsIHt9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJGb3JtSFRNTChlbCwgdGhpcy5yZW5kZXJBcnJheShlbC5pdGVtcywgZWwuX25hbWUpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSB7RmllbGRUZW1wbGF0ZX0gZWwgXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtwYXJlbnRQYXRoXVxyXG4gICAqL1xyXG4gIGFkZEFycmF5KGVsLCBwYXJlbnRQYXRoKSB7XHJcbiAgICAvL2RvIHdlIHN1cHBvcnQgbmVzdGVkIGRhdGE/XHJcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5uZXN0ZWREYXRhKSB7XHJcbiAgICAgIHBhcmVudFBhdGggPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYXJlbnRQYXRoICYmIGVsLm5hbWUpIHtcclxuICAgICAgZWwuX25hbWUgPSBwYXJlbnRQYXRoICsgXCIuXCIgKyBlbC5uYW1lO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZWwuX25hbWUgPSBlbC5uYW1lO1xyXG4gICAgfVxyXG4gICAgaWYgKGVsLl9uYW1lKSB7XHJcbiAgICAgIC8vaWYgY3JlYXRlIHZhbHVlIGluIGVhY2ggc3RydWN0dXJlXHJcbiAgICAgIGlmICghdGhpcy5nZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmRhdGEsIGVsLl9uYW1lKSlcclxuICAgICAgICBPYmplY3RzLnNldFByb3BlcnR5QnlQYXRoKHRoaXMuZGF0YSwgZWwuX25hbWUsIHt9KTtcclxuICAgICAgaWYgKCF0aGlzLmdldFByb3BlcnR5QnlQYXRoKHRoaXMuZXJyb3JzLCBlbC5fbmFtZSkpXHJcbiAgICAgICAgT2JqZWN0cy5zZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmVycm9ycywgZWwuX25hbWUsIHt9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFycmF5c1tlbC5uYW1lXSA9IFtcIlwiXTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJBcnJheUhUTUwoZWwsIHRoaXMucmVuZGVyQXJyYXkoZWwuaXRlbXMsIGVsLl9uYW1lKSk7XHJcbiAgfVxyXG5cclxuICBnZXRWaXNpYmxlRGF0YSgpIHtcclxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRvci5nZXRWaXNpYmxlRGF0YSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlfSBlbCBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hpbGRyZW5IVE1MXHJcbiAgICovXHJcbiAgcmVuZGVyQXJyYXlIVE1MKGVsLCBjaGlsZHJlbkhUTUwpIHtcclxuICAgIC8qKiBAdHlwZSB7RmllbGRUZW1wbGF0ZX0gKi9cclxuICAgIHZhciBidXR0b25FbCA9IHtcclxuICAgICAgbmFtZTogZWwubmFtZSArIFwiX2FkZF9idXR0b25cIixcclxuICAgICAgX25hbWU6IGVsLm5hbWUgKyBcIl9hZGRfYnV0dG9uXCIsXHJcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXHJcbiAgICAgIHZhbHVlOiBlbC50aXRsZSxcclxuICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB0aGlzLmFycmF5c1tlbC5uYW1lXS5wdXNoKFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gYDxkaXY+XHJcbiR7dGhpcy5hZGRCdXR0b24oYnV0dG9uRWwpfVxyXG48ZGl2IFtmb3JlYWNoXT1cInRoaXMuYXJyYXlzWycke2VsLm5hbWV9J11cIj5cclxuJHtjaGlsZHJlbkhUTUx9XHJcbjwvZGl2PlxyXG48L2Rpdj5cclxuYDtcclxuXHJcbiAgfVxyXG5cclxuICByZW5kZXJGb3JtSFRNTChlbCwgY2hpbGRyZW5IVE1MKSB7XHJcbiAgICByZXR1cm4gYFxyXG48ZGl2IGNsYXNzPVwiJHt0aGlzLm9wdGlvbnMuZm9ybUNsYXNzfSAke2VsLmNsYXNzfVwiIFtpZl09XCJ0aGlzLmdldElzVmlzaWJsZSgnJHtlbC5fbmFtZSA/IGVsLl9uYW1lIDogJyd9JylcIj5cclxuJHt0aGlzLmFkZFRpdGxlKGVsKX1cclxuJHtjaGlsZHJlbkhUTUx9XHJcbjwvZGl2PlxyXG5gO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyRmllbGRHcm91cEhUTUwoZWwsIGVsSFRNTCwgbm9UaXRsZSwgbm9FcnJvckhpbnQpIHtcclxuICAgIHZhciBpc1JlcXVpcmVkID0gZWwudmFsaWRhdGVSdWxlID8gZWwudmFsaWRhdGVSdWxlLmluY2x1ZGVzKCdyZXF1aXJlZCcpIDogbnVsbDtcclxuXHJcbiAgICByZXR1cm4gYFxyXG48ZGl2IGNsYXNzPVwiJHt0aGlzLm9wdGlvbnMuZmllbGRDbGFzc30gJHtlbC5jbGFzcyA/ICcgJyArIGVsLmNsYXNzIDogJyd9ICR7ZWwudHlwZSA/ICcgJyArIGVsLnR5cGUgOiAnJ30gJHtpc1JlcXVpcmVkID8gJ3JlcXVpcmVkJyA6ICcnfVwiIFtjbGFzc109XCJ0aGlzLmdldENsYXNzTmFtZSgnJHtlbC5fbmFtZSA/IGVsLl9uYW1lIDogJyd9JylcIiBbaWZdPVwidGhpcy5nZXRJc1Zpc2libGUoJyR7ZWwuX25hbWUgPyBlbC5fbmFtZSA6ICcnfScpXCI+XHJcbiR7dGhpcy5hZGRUaXRsZShlbCl9XHJcbiR7aXNBcnJheShlbEhUTUwpID8gZWxIVE1MLmpvaW4oJycpIDogZWxIVE1MfVxyXG4keyhub0Vycm9ySGludCA/ICcnIDogdGhpcy5hZGRFcnJvckhpbnQoZWwpKX1cclxuPC9kaXY+YDtcclxuICB9XHJcblxyXG5cclxuICByZW5kZXJTZWxlY3RHcm91cEhUTUwoZWwsIGVsSFRNTCkge1xyXG4gICAgcmV0dXJuIGA8ZGl2IFtpZl09XCJ0aGlzLmdldElzVmlzaWJsZSgnJHtlbC5fbmFtZSA/IGVsLl9uYW1lIDogJyd9JylcIj4ke2VsSFRNTH08L2Rpdj5gO1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcGVydHlCeVBhdGgob2JqZWN0LCBwYXRoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB2YXIgcmV0ID0gT2JqZWN0cy5nZXRQcm9wZXJ0eUJ5UGF0aChvYmplY3QsIHBhdGgpO1xyXG4gICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICBnZXRJc1Zpc2libGUoX25hbWUpIHtcclxuICAgIGlmIChlbXB0eShfbmFtZSkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gIXRoaXMuZmllbGRzW19uYW1lXS5hdHRyaWJ1dGVzLmhpZGRlbjtcclxuICB9XHJcblxyXG4gIGdldENsYXNzTmFtZShfbmFtZSkge1xyXG4gICAgdmFyIGNsYXNzbmFtZXMgPSBbXTtcclxuXHJcbiAgICBpZiAoZW1wdHkoX25hbWUpKSB7XHJcbiAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciByZXQgPSB0aGlzLmdldFByb3BlcnR5QnlQYXRoKHRoaXMuZXJyb3JzLCBfbmFtZSk7XHJcbiAgICBpZiAocmV0KSB7XHJcbiAgICAgIGNsYXNzbmFtZXMucHVzaCgnZXJyb3InKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcmV0ID0gdGhpcy5nZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmRhdGEsIF9uYW1lKTtcclxuICAgIGlmIChyZXQgIT09IG51bGwgJiYgcmV0ICE9PSB1bmRlZmluZWQgJiYgcmV0ICE9PSBcIlwiKSB7XHJcbiAgICAgIGNsYXNzbmFtZXMucHVzaCgnZmlsbGVkJyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlmICh0aGlzLmZpZWxkc1tfbmFtZV0gJiYgdGhpcy5maWVsZHNbX25hbWVdLmF0dHJpYnV0ZXMgJiYgdGhpcy5maWVsZHNbX25hbWVdLmF0dHJpYnV0ZXMuYWN0aXZlKSB7XHJcbiAgICAgIGNsYXNzbmFtZXMucHVzaCgnYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2xhc3NuYW1lcy5qb2luKCcgJyk7XHJcbiAgfVxyXG5cclxuICBnZXRFcnJvcihfbmFtZSkge1xyXG4gICAgaWYgKGVtcHR5KF9uYW1lKSkge1xyXG4gICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcmV0ID0gdGhpcy5nZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmVycm9ycywgX25hbWUpO1xyXG5cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlfSBlbCBcclxuICAgKiBAcGFyYW0ge0tleVZhbHVlUGFpcn0gW292ZXJyaWRlXVxyXG4gICAqL1xyXG4gIGFkZElucHV0KGVsLCBvdmVycmlkZSkge1xyXG5cclxuICAgIHZhciBvcHQgPSB7IG5hbWU6IGVsLl9uYW1lLCB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IGVsLnBsYWNlaG9sZGVyIH07XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihvcHQsIG92ZXJyaWRlLCBlbC5hdHRyaWJ1dGVzKTtcclxuICAgIC8vJHt0aGlzLmdlbmVyYXRlQXR0cmlidXRlcyhvcHQpfVxyXG4gICAgcmV0dXJuIGBcclxuPGRpdiBjbGFzcz1cImZpZWxkcm93XCI+XHJcbjxpbnB1dCBiaW5kPVwiJHt0aGlzLnJlZmFjdG9yQXR0ck5hbWUoJ3RoaXMuZGF0YS4nICsgZWwuX25hbWUpfVwiIG5hbWU9XCIke2VsLl9uYW1lfVwiIFthdHRyaWJ1dGVdPVwidGhpcy5nZXRGaWVsZEF0dHJpYnV0ZXMoJyR7ZWwuX25hbWV9JylcIiAke3RoaXMuZ2VuZXJhdGVBdHRyaWJ1dGVzKG9wdCl9IC8+YCArXHJcbiAgICAgIChlbC51bml0IHx8IGVsLmljb24gPyBgPGRpdiBjbGFzcz1cImljb25cIj5cclxuJHtlbC51bml0ID8gZWwudW5pdCA6ICcnfVxyXG4ke2VsLmljb24gPyBgPGkgY2xhc3M9XCIke2VsLmljb259XCI+PC9pPmAgOiAnJ31cclxuPC9kaXY+YCA6ICcnKSArXHJcbiAgICAgIGA8L2Rpdj5gXHJcbiAgICAgIDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogXHJcbiAgKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGV9IGVsIFxyXG4gICogQHBhcmFtIHtLZXlWYWx1ZVBhaXJ9IFtvdmVycmlkZV1cclxuICAqL1xyXG4gIGFkZEZpbGUoZWwsIG92ZXJyaWRlKSB7XHJcblxyXG4gICAgdmFyIG9wdCA9IHsgbmFtZTogZWwuX25hbWUsIHR5cGU6IFwiZmlsZVwiLCBwbGFjZWhvbGRlcjogZWwucGxhY2Vob2xkZXIgfTtcclxuXHJcbiAgICBPYmplY3QuYXNzaWduKG9wdCwgb3ZlcnJpZGUsIGVsLmF0dHJpYnV0ZXMpO1xyXG4gICAgaWYgKCFlbC5pY29uKSB7XHJcbiAgICAgIGVsLmljb24gPSBcImZhcyBmYS11cGxvYWRcIjtcclxuICAgIH1cclxuICAgIC8vIGJpbmQ9XCIke3RoaXMucmVmYWN0b3JBdHRyTmFtZSgndGhpcy5kYXRhLicgKyBlbC5fbmFtZSArICcubmFtZScpfVwiXHJcbiAgICBPYmplY3RzLnNldFByb3BlcnR5QnlQYXRoKHRoaXMuZGF0YSwgdGhpcy5yZWZhY3RvckF0dHJOYW1lKGVsLl9uYW1lICsgJy5uYW1lJyksIG51bGwpO1xyXG4gICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiZmllbGRyb3dcIj5cclxuPGxhYmVsIGNsYXNzPVwiaW5wdXQgZmlsZVwiPnt7IHRoaXMuZ2V0RmlsZUZpZWxkRmlsZU5hbWUoJyR7ZWwuX25hbWV9JykgfHwgJyR7VHJhbnNsYXRlKGVsLnBsYWNlaG9sZGVyIHx8ICdObyBmaWxlIGNob3NlbicpfScgfX1cclxuPGlucHV0IHR5cGU9XCJmaWxlXCIgYmluZD1cIiR7dGhpcy5yZWZhY3RvckF0dHJOYW1lKCd0aGlzLmRhdGEuJyArIGVsLl9uYW1lICsgJy5uYW1lJyl9XCIgJHt0aGlzLmdlbmVyYXRlQXR0cmlidXRlcyhvcHQpfSBvbmNoYW5nZT1cInRoaXMub25GaWxlRmllbGRDaGFuZ2VkKCcke2VsLl9uYW1lfScsICRldmVudClcIi8+XHJcbjwvbGFiZWw+YCtcclxuICAgICAgKGVsLnVuaXQgfHwgZWwuaWNvbiA/IGA8ZGl2IGNsYXNzPVwiaWNvblwiPlxyXG4ke2VsLnVuaXQgPyBlbC51bml0IDogJyd9XHJcbiR7ZWwuaWNvbiA/IGA8aSBjbGFzcz1cIiR7ZWwuaWNvbn1cIj48L2k+YCA6ICcnfVxyXG48L2Rpdj5gIDogJycpICtcclxuICAgICAgYDwvZGl2PmA7XHJcbiAgfVxyXG5cclxuICAvL3t0eXBlOidwYXNzd29yZCcsIGF1dG9jb3JyZWN0Olwib2ZmXCIsIGF1dG9jYXBpdGFsaXplOlwib2ZmXCJ9XHJcbiAgLyoqXHJcbiAgKiBcclxuICAqIEBwYXJhbSB7RmllbGRUZW1wbGF0ZX0gZWwgXHJcbiAgKiBAcGFyYW0ge0tleVZhbHVlUGFpcn0gW292ZXJyaWRlXVxyXG4gICovXHJcbiAgYWRkUGFzc3dvcmQoZWwsIG92ZXJyaWRlKSB7XHJcblxyXG4gICAgdmFyIG9wdCA9IHsgbmFtZTogZWwuX25hbWUsIGF1dG9jb3JyZWN0OiBcIm9mZlwiLCBhdXRvY2FwaXRhbGl6ZTogXCJvZmZcIiB9O1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24ob3B0LCBvdmVycmlkZSwgZWwuYXR0cmlidXRlcyk7XHJcbiAgICB0aGlzLnR5cGVzW2VsLl9uYW1lXSA9IFwicGFzc3dvcmRcIjtcclxuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImZpZWxkcm93XCI+XHJcbjxpbnB1dCBiaW5kPVwiJHt0aGlzLnJlZmFjdG9yQXR0ck5hbWUoJ3RoaXMuZGF0YS4nICsgZWwuX25hbWUpfVwiIG5hbWU9XCIke2VsLl9uYW1lfVwiICR7dGhpcy5nZW5lcmF0ZUF0dHJpYnV0ZXMob3B0KX0gW2F0dHJpYnV0ZV09XCJ7dHlwZTogdGhpcy50eXBlc1snJHtlbC5fbmFtZX0nXX1cIi8+YCArXHJcbiAgICAgICh0cnVlID8gYDxkaXYgY2xhc3M9XCJpY29uXCIgb25jbGljaz1cInRoaXMudG9nZ2xlUGFzc3dvcmRUeXBlKCcke2VsLl9uYW1lfScpXCI+XHJcbjxpIGNsYXNzPVwiZmFzIGZhLWV5ZVwiIFtpZl09XCJ0aGlzLnR5cGVzWycke2VsLl9uYW1lfSddPT0ncGFzc3dvcmQnXCI+PC9pPlxyXG48aSBjbGFzcz1cImZhcyBmYS1leWUtc2xhc2hcIiBbaWZdPVwidGhpcy50eXBlc1snJHtlbC5fbmFtZX0nXT09J3RleHQnXCI+PC9pPlxyXG48L2Rpdj5gIDogJycpICtcclxuICAgICAgJzwvZGl2Pic7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICogXHJcbiAgKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGV9IGVsIFxyXG4gICogQHBhcmFtIHtLZXlWYWx1ZVBhaXJ9IFtvdmVycmlkZV1cclxuICAqL1xyXG4gIGFkZFRleHRBcmVhKGVsLCBvdmVycmlkZSkge1xyXG5cclxuICAgIHZhciBvcHQgPSB7IG5hbWU6IGVsLl9uYW1lLCB0eXBlOiBcInRleHRcIiB9O1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24ob3B0LCBvdmVycmlkZSwgZWwuYXR0cmlidXRlcyk7XHJcbiAgICByZXR1cm4gYDx0ZXh0YXJlYSBiaW5kPVwiJHt0aGlzLnJlZmFjdG9yQXR0ck5hbWUoJ3RoaXMuZGF0YS4nICsgZWwuX25hbWUpfVwiICR7dGhpcy5nZW5lcmF0ZUF0dHJpYnV0ZXMob3B0KX0+PC90ZXh0YXJlYT5gO1xyXG4gIH1cclxuICAvKipcclxuICAqIFxyXG4gICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlfSBlbCBcclxuICAqIEBwYXJhbSB7S2V5VmFsdWVQYWlyfSBbb3ZlcnJpZGVdXHJcbiAgKi9cclxuICBhZGRDaGVjayhlbCwgb3ZlcnJpZGUpIHtcclxuICAgIHZhciBvcHQgPSB7IG5hbWU6IGVsLl9uYW1lLCB0eXBlOiBcImNoZWNrYm94XCIgfTtcclxuICAgIE9iamVjdC5hc3NpZ24ob3B0LCBvdmVycmlkZSwgZWwuYXR0cmlidXRlcyk7XHJcbiAgICByZXR1cm4gYDxsYWJlbCBjbGFzcz1cInRvZ2dsZVwiPjxzcGFuIGNsYXNzPVwidGV4dFwiPiR7ZWwudGl0bGV9PC9zcGFuPlxyXG48aW5wdXQgYmluZD1cIiR7dGhpcy5yZWZhY3RvckF0dHJOYW1lKCd0aGlzLmRhdGEuJyArIGVsLl9uYW1lKX1cIiAke3RoaXMuZ2VuZXJhdGVBdHRyaWJ1dGVzKG9wdCl9IC8+XHJcbjxzcGFuIGNsYXNzPVwic2xpZGVyIHJvdW5kXCI+PC9zcGFuPlxyXG48L2xhYmVsPlxyXG5gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBcclxuICAqIEBwYXJhbSB7RmllbGRUZW1wbGF0ZX0gZWwgXHJcbiAgKiBAcGFyYW0ge0tleVZhbHVlUGFpcn0gW292ZXJyaWRlXVxyXG4gICovXHJcbiAgYWRkUmFkaW8oZWwsIG92ZXJyaWRlKSB7XHJcbiAgICB2YXIgb3B0ID0geyBuYW1lOiBlbC5fbmFtZSwgdHlwZTogXCJyYWRpb1wiIH07XHJcbiAgICBPYmplY3QuYXNzaWduKG9wdCwgb3ZlcnJpZGUsIGVsLmF0dHJpYnV0ZXMpO1xyXG5cclxuICAgIHZhciBlbGVtcyA9IGA8ZGl2IGNsYXNzPVwiZmllbGRyb3dcIj5gO1xyXG4gICAgT2JqZWN0cy5mb3JFYWNoKGVsLml0ZW1zLCBpdGVtID0+IHtcclxuICAgICAgZWxlbXMgKz0gYDxsYWJlbCBjbGFzcz1cInRvZ2dsZVwiPlxyXG48aW5wdXQgYmluZCA9IFwiJHt0aGlzLnJlZmFjdG9yQXR0ck5hbWUoJ3RoaXMuZGF0YS4nICsgZWwuX25hbWUpfVwiIGZvcm1hdD1cIiR7ZWwuZGF0YVR5cGUgPyBlbC5kYXRhVHlwZSA6ICcnfVwiIHZhbHVlID0gXCIke2l0ZW0udmFsdWUgIT09IG51bGwgPyBpdGVtLnZhbHVlIDogJyd9XCIgJHt0aGlzLmdlbmVyYXRlQXR0cmlidXRlcyhvcHQpfSAvPlxyXG48c3BhbiBjbGFzcz1cInJhZGlvIHJvdW5kXCI+PC9zcGFuPlxyXG4ke2l0ZW0udGl0bGV9XHJcbjwvbGFiZWw+XHJcbmA7XHJcbiAgICB9KTtcclxuXHJcbiAgICBlbGVtcyArPSBcIjwvZGl2PlwiO1xyXG5cclxuICAgIHJldHVybiBlbGVtcztcclxuICB9XHJcbiAgLyoqXHJcbiAgKiBcclxuICAqIEBwYXJhbSB7RmllbGRUZW1wbGF0ZX0gZWwgXHJcbiAgKiBAcGFyYW0ge0tleVZhbHVlUGFpcn0gW292ZXJyaWRlXVxyXG4gICovXHJcbiAgYWRkU2VsZWN0KGVsLCBvdmVycmlkZSwgcGFyZW50UGF0aCkge1xyXG5cclxuICAgIHZhciBvcHQgPSB7IG5hbWU6IGVsLl9uYW1lLCB0eXBlOiBcInNlbGVjdFwiLCBmb3JtYXQ6IGVsLmRhdGFUeXBlLCBiaW5kOiBgJHt0aGlzLnJlZmFjdG9yQXR0ck5hbWUoJ3RoaXMuZGF0YS4nICsgZWwuX25hbWUpfWAsIHBsYWNlaG9sZGVyOiBlbC5wbGFjZWhvbGRlciB9O1xyXG4gICAgT2JqZWN0LmFzc2lnbihvcHQsIG92ZXJyaWRlLCBlbC5hdHRyaWJ1dGVzLCB7IG9uY2hhbmdlOiBgdGhpcy5fb25TZWxlY3RCb3hDaGFuZ2VkKCcke2VsLl9uYW1lfScpYCB9KTtcclxuICAgIHZhciBlbGVtID0gYDxzZWxlY3QgJHt0aGlzLmdlbmVyYXRlQXR0cmlidXRlcyhvcHQpfT5gO1xyXG4gICAgaWYgKGVsLnBsYWNlaG9sZGVyKVxyXG4gICAgICBlbGVtID0gZWxlbSArIGA8b3B0aW9uPiR7ZWwucGxhY2Vob2xkZXJ9PC9vcHRpb24+YDtcclxuXHJcbiAgICB2YXIgaXRlbXNfaXRlbXMgPSBcIlwiO1xyXG5cclxuICAgIHZhciBoYXNTdWJJdGVtcyA9IGZhbHNlO1xyXG4gICAgT2JqZWN0cy5mb3JFYWNoKGVsLml0ZW1zLCAob3B0aW9uKSA9PiB7XHJcbiAgICAgIGVsZW0gPSBlbGVtICsgYDxvcHRpb24gdmFsdWU9XCIke29wdGlvbi52YWx1ZSA9PT0gbnVsbCA/ICcnIDogb3B0aW9uLnZhbHVlfVwiIHRpdGxlPVwiJHtvcHRpb24ucGxhY2Vob2xkZXIgfHwgJyd9XCI+JHtvcHRpb24udGl0bGV9PC9vcHRpb24+YDtcclxuICAgICAgaWYgKG9wdGlvbi5pdGVtcykge1xyXG4gICAgICAgIGhhc1N1Ykl0ZW1zID0gdHJ1ZTtcclxuICAgICAgICBpdGVtc19pdGVtcyArPSBgXHJcbiAgICAgICAgPGRpdiBbaWZdPVwiJHt0aGlzLnJlZmFjdG9yQXR0ck5hbWUoJ3RoaXMuZGF0YS4nICsgZWwuX25hbWUpfSA9PSAkeyhpc051bWJlcihvcHRpb24udmFsdWUpIHx8IG9wdGlvbi52YWx1ZSA9PSBudWxsID8gb3B0aW9uLnZhbHVlIDogXCInXCIgKyBvcHRpb24udmFsdWUgKyBcIidcIil9XCI+XHJcbiAgICAgICAgICR7dGhpcy5yZW5kZXJBcnJheShvcHRpb24uaXRlbXMsIHBhcmVudFBhdGgpfVxyXG4gICAgICAgIDwvZGl2PmA7XHJcblxyXG4gICAgICAgIC8qaWYgKCF0aGlzLmZpZWxkc1tlbC5fbmFtZV0uY29tcG9uZW50KSB7XHJcbiAgICAgICAgICB0aGlzLmZpZWxkc1tlbC5fbmFtZV0uY29tcG9uZW50ID0gbmV3IEZvcm1zKG9wdGlvbi5pdGVtcywgdGhpcy5kYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGl0ZW1zX2l0ZW1zICs9IGBcclxuICAgICAgICA8ZGl2IFtpZl09XCIke3RoaXMucmVmYWN0b3JBdHRyTmFtZSgndGhpcy5kYXRhLicgKyBlbC5fbmFtZSl9ID09ICR7KGlzTnVtYmVyKG9wdGlvbi52YWx1ZSkgfHwgb3B0aW9uLnZhbHVlID09IG51bGwgPyBvcHRpb24udmFsdWUgOiBcIidcIiArIG9wdGlvbi52YWx1ZSArIFwiJ1wiKX1cIj5cclxuICAgICAgICAgIDxkaXYgW2NvbXBvbmVudF09XCIke3RoaXMucmVmYWN0b3JBdHRyTmFtZSgndGhpcy5maWVsZHMuJyArIGVsLl9uYW1lICsgJy5jb21wb25lbnQnKX1cIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5gXHJcbiAgICAgICAgKi9cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBlbGVtID0gZWxlbSArIFwiPC9zZWxlY3Q+XCI7XHJcblxyXG4gICAgaWYgKGhhc1N1Ykl0ZW1zKSB7XHJcbiAgICAgIC8vdGhpcy5maWVsZHNbZWwuX25hbWVdLmNvbXBvbmVudCA9IG5ldyBGb3JtcyhbXSwgdGhpcy5kYXRhKTtcclxuICAgICAgLy9pdGVtc19pdGVtcyArPSAnPGRpdj5TdWIgaXRlbXMgZ28gaGVyZTwvZGl2Pic7XHJcbiAgICAgIC8vaXRlbXNfaXRlbXMgKz0gYDxkaXYgW2RpcmVjdGl2ZV0gPSBcIiR7dGhpcy5yZWZhY3RvckF0dHJOYW1lKCd0aGlzLmZpZWxkcy4nICsgZWwuX25hbWUgKyAnLnN1Yml0ZW1zJyl9XCIgPlN1YiBpdGVtcyBnbyBoZXJlPC9kaXY+YDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJGaWVsZEdyb3VwSFRNTChlbCwgZWxlbSkgKyB0aGlzLnJlbmRlclNlbGVjdEdyb3VwSFRNTChlbCwgaXRlbXNfaXRlbXMpO1xyXG4gIH1cclxuXHJcbiAgX29uU2VsZWN0Qm94Q2hhbmdlZChfbmFtZSkge1xyXG4gICAgLy9pZiAodGhpcy5maWVsZHNbX25hbWVdLmkpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFxyXG4gICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlfSBlbCBcclxuICAqL1xyXG4gIGFkZFRpdGxlKGVsKSB7XHJcbiAgICBpZiAoIWVsLnRpdGxlICYmICFlbC5pbmZvKSByZXR1cm4gJyc7XHJcbiAgICByZXR1cm4gYDxsYWJlbD57eyBUcmFuc2xhdGUodGhpcy5maWVsZHNbJyR7ZWwuX25hbWV9J10udGl0bGUpIH19JHtlbC5pbmZvID8gdGhpcy5hZGRJbmZvKGVsKSA6ICcnfTwvbGFiZWw+YDtcclxuICB9XHJcbiAgLyoqXHJcbiAgKiBcclxuICAqIEBwYXJhbSB7RmllbGRUZW1wbGF0ZX0gZWwgXHJcbiAgKi9cclxuICBhZGRJbmZvKGVsKSB7XHJcbiAgICAvL2lmICghZWwudGl0bGUpIHJldHVybiAnJztcclxuICAgIHJldHVybiBgPGkgY2xhc3M9XCJmYXMgZmEtcXVlc3Rpb24tY2lyY2xlXCIgb25jbGljaz1cInRoaXMuc2hvd0luZm9UZXh0KCcke2VsLl9uYW1lfScpXCI+PC9pPmA7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICogXHJcbiAgKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGV9IGVsIFxyXG4gICovXHJcbiAgYWRkRXJyb3JIaW50KGVsKSB7XHJcbiAgICByZXR1cm4gKGA8ZGl2IGNsYXNzPVwiaGludFwiIFtjbGFzc109XCJ0aGlzLmdldEVycm9yKCcke2VsLl9uYW1lfScpID8gJ2Vycm9yJyA6ICcnXCI+e3sgdGhpcy5nZXRFcnJvcignJHtlbC5fbmFtZX0nKSB8fCAnJHtlbC5oaW50ID8gZWwuaGludCA6ICcnfScgfX08L2Rpdj5gKTtcclxuICB9XHJcblxyXG4gIHNob3dJbmZvVGV4dChuYW1lKSB7XHJcbiAgICBpZiAoaXNPYmplY3QodGhpcy5maWVsZHNbbmFtZV0uaW5mbykpIHtcclxuICAgICAgQWxlcnQodGhpcy5maWVsZHNbbmFtZV0uaW5mby50ZXh0LCB0aGlzLmZpZWxkc1tuYW1lXS5pbmZvLmNhbGxiYWNrLCB0aGlzLmZpZWxkc1tuYW1lXS5pbmZvLnRpdGxlKTtcclxuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcodGhpcy5maWVsZHNbbmFtZV0uaW5mbykpIHtcclxuICAgICAgQWxlcnQodGhpcy5maWVsZHNbbmFtZV0uaW5mbyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBGb3Jtcy5maWVsZHNbJyR7bmFtZX0nXS5pbmZvIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWRgLCB0aGlzLmZpZWxkc1tuYW1lXS5pbmZvKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogU3BsaXQgZm9ybSBuYW1lIGZyb20gcHJvcGVydHkgbmFtZSBcclxuICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxyXG4gICovXHJcbiAgcmVmYWN0b3JBdHRyTmFtZShuYW1lKSB7XHJcbiAgICAvL2lmIG5hbWUgY29udGFpbnMgLm51bWJlciBwYXJ0cywgcmVwbGFjZSB0aGVtIHdpdGggYXJyYXkgbm90YXRpb25cclxuICAgIHJldHVybiBuYW1lLnJlcGxhY2UoL1xcLihcXGR7MX1bXlxcLl0qKS8sIGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XHJcbiAgICAgIC8vY29uc29sZS5sb2coYXJndW1lbnRzKTtcclxuICAgICAgcmV0dXJuIGBbJyR7Yn0nXWA7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgKiBcclxuICAqIEBwYXJhbSB7RmllbGRUZW1wbGF0ZX0gZWwgXHJcbiAgKi9cclxuICBhZGRMYWJlbChlbCwgb3ZlcnJpZGUpIHtcclxuICAgIHZhciBvcHQgPSB7IG9uY2xpY2s6IFwidGhpcy5vbkNsaWNrKCRldmVudCk7XCIgfTtcclxuXHJcbiAgICBPYmplY3QuYXNzaWduKG9wdCwgeyBuYW1lOiBlbC5fbmFtZSB9LCBlbC5hdHRyaWJ1dGVzLCBvdmVycmlkZSk7XHJcbiAgICByZXR1cm4gYFxyXG48ZGl2IGNsYXNzPVwibGFiZWxcIiAke3RoaXMuZ2VuZXJhdGVBdHRyaWJ1dGVzKG9wdCl9ID4keyhlbC52YWx1ZSAhPSBudWxsID8gZWwudmFsdWUgOiBcIlwiKX08L2Rpdj5gICtcclxuICAgICAgKGVsLnVuaXQgfHwgZWwuaWNvbiA/IGA8ZGl2IGNsYXNzPVwiaWNvblwiPlxyXG4ke2VsLnVuaXQgPyBlbC51bml0IDogJyd9XHJcbiR7ZWwuaWNvbiA/IGA8aSBjbGFzcz1cIiR7ZWwuaWNvbn1cIj48L2k+YCA6ICcnfVxyXG48L2Rpdj5gIDogJycpO1xyXG4gIH1cclxuICAvKipcclxuICAqIFxyXG4gICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlfSBlbCBcclxuICAqL1xyXG4gIGFkZEh0bWwoZWwpIHtcclxuICAgIHZhciBvcHQgPSBPYmplY3QuYXNzaWduKHt9LCB7IG5hbWU6IGVsLl9uYW1lIH0sIHsgb25jbGljazogXCJ0aGlzLm9uQ2xpY2soJGV2ZW50KTtcIiB9LCBlbC5hdHRyaWJ1dGVzKTtcclxuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImh0bWxcIiAke3RoaXMuZ2VuZXJhdGVBdHRyaWJ1dGVzKG9wdCl9PiR7KGVsLnZhbHVlICE9IG51bGwgPyBlbC52YWx1ZSA6IFwiXCIpfTwvZGl2PmA7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICogXHJcbiAgKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGV9IGVsIFxyXG4gICovXHJcbiAgYWRkTGluayhlbCkge1xyXG4gICAgdmFyIG9wdCA9IE9iamVjdC5hc3NpZ24oe30sIHsgb25jbGljazogXCJ0aGlzLm9uQ2xpY2soJGV2ZW50KTtcIiB9LCBlbC5hdHRyaWJ1dGVzKTtcclxuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImxpbmtcIiAke3RoaXMuZ2VuZXJhdGVBdHRyaWJ1dGVzKG9wdCl9IG5hbWU9XCIke2VsLl9uYW1lfVwiPiR7KGVsLnZhbHVlICE9IG51bGwgPyBlbC52YWx1ZSA6IFwiXCIpfTwvZGl2PmAgK1xyXG4gICAgICAoZWwudW5pdCB8fCBlbC5pY29uID8gYDxkaXYgY2xhc3M9XCJpY29uXCI+XHJcbiAgICAgICR7ZWwudW5pdCA/IGVsLnVuaXQgOiAnJ31cclxuICAgICAgJHtlbC5pY29uID8gYDxpIGNsYXNzPVwiJHtlbC5pY29ufVwiPjwvaT5gIDogJyd9XHJcbiAgICAgIDwvZGl2PmAgOiAnJyk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICogXHJcbiAgKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGV9IGVsIFxyXG4gICovXHJcbiAgYWRkQnV0dG9uKGVsKSB7XHJcbiAgICB2YXIgb3B0ID0gT2JqZWN0LmFzc2lnbih7fSwgeyBuYW1lOiBlbC5uYW1lIH0sIGVsLmF0dHJpYnV0ZXMpO1xyXG4gICAgcmV0dXJuIGBcclxuICAgIDxidXR0b24gJHt0aGlzLmdlbmVyYXRlQXR0cmlidXRlcyhvcHQpfSBuYW1lPVwiJHtlbC5fbmFtZX1cIiBvbmNsaWNrPVwidGhpcy5vbkJ1dHRvbkNsaWNrKCRldmVudCk7XCI+JHsoZWwuaWNvbiA/IGA8aSBjbGFzcz1cIiR7ZWwuaWNvbn1cIj48L2k+YCA6ICcnKX0ke2VsLnZhbHVlIHx8ICcnfTwvYnV0dG9uPlxyXG4gICAgYDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogXHJcbiAgKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGV9IGVsIFxyXG4gICovXHJcbiAgYWRkQnV0dG9ucyhlbCkge1xyXG4gICAgdmFyIGl0ZW1zID0gZWwuaXRlbXMubWFwKGZ1bmN0aW9uIChidG4pIHtcclxuICAgICAgcmV0dXJuIGA8YnV0dG9uIGNsYXNzPVwibGlua1wiIGJpbmQgbmFtZT1cIiR7YnRuLm5hbWV9XCI+JHtidG4udGl0bGV9PC9idXR0b24+YDtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBgXHJcbjxkaXYgY2xhc3M9XCJidXR0b25zXCI+XHJcbiR7aXRlbXMuam9pbignJyl9XHJcbjwvZGl2PlxyXG5gO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlUGFzc3dvcmRUeXBlKG5hbWUpIHtcclxuICAgIGlmICh0aGlzLnR5cGVzW25hbWVdID09PSBcInRleHRcIilcclxuICAgICAgdGhpcy50eXBlc1tuYW1lXSA9IFwicGFzc3dvcmRcIjtcclxuICAgIGVsc2VcclxuICAgICAgdGhpcy50eXBlc1tuYW1lXSA9IFwidGV4dFwiO1xyXG4gIH1cclxuXHJcbiAgZ2V0RmllbGRBdHRyaWJ1dGVzKF9uYW1lKSB7XHJcbiAgICBpZiAoZW1wdHkoX25hbWUpKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5maWVsZHNbX25hbWVdID8gdGhpcy5maWVsZHNbX25hbWVdLmF0dHJpYnV0ZXMgOiB7fTtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlQXR0cmlidXRlcyhvcHQpIHtcclxuICAgIHZhciBzdHJPcHRzID0gXCJcIjtcclxuICAgIHZhciBuYW1lID0gb3B0Lm5hbWU7XHJcbiAgICBPYmplY3RzLmZvckVhY2gob3B0LCAodmFsLCBrZXkpID0+IHtcclxuICAgICAgaWYgKGtleSAhPT0gXCJpbnB1dFwiICYmIGtleSAhPT0gXCJjbGlja1wiICYmIGtleSAhPT0gXCJjaGFuZ2VcIikge1xyXG4gICAgICAgIGlmICh2YWwgIT09IG51bGwgJiYgdmFsICE9PSB1bmRlZmluZWQgJiYga2V5ICE9IFwiaGlkZGVuXCIpXHJcbiAgICAgICAgICBzdHJPcHRzICs9IGtleSArICc9XCInICsgdmFsICsgJ1wiICc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIXRoaXMuYXR0ckV2ZW50c1tuYW1lXSA/IHRoaXMuYXR0ckV2ZW50c1tuYW1lXSA9IHt9IDogbnVsbDtcclxuICAgICAgICB0aGlzLmF0dHJFdmVudHNbbmFtZV1ba2V5XSA9IHZhbDtcclxuICAgICAgICBzdHJPcHRzICs9ICdvbicgKyBrZXkgKyBgPVwidGhpcy5hdHRyRXZlbnRzWycke25hbWV9J11bJyR7a2V5fSddKClcImA7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHN0ck9wdHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFxyXG4gICogQHBhcmFtIHtFdmVudH0gZXZlbnQgIFxyXG4gICovXHJcbiAgdHJhbnNmZXJFdmVudFRvQ2hpbGRJbnB1dChldmVudCkge1xyXG4gICAgdmFyIGVsID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgdmFyIGlucHV0ID0gRE9NKGVsKS5maW5kKCdpbnB1dCcpWzBdO1xyXG5cclxuICAgIGlucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KGV2ZW50LnR5cGUpKTtcclxuICB9XHJcblxyXG4gIHRyaW1EaXNwbGF5RmlsZU5hbWUoZmlsZU5hbWUpIHtcclxuICAgIGlmICghZmlsZU5hbWUgfHwgIWlzU3RyaW5nKGZpbGVOYW1lKSkge1xyXG4gICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuICAgIHJldHVybiBmaWxlTmFtZS5zcGxpdCgvXFxcXHxcXC8vKS5wb3AoKTtcclxuICB9XHJcblxyXG4gIGdldEZpbGVGaWVsZEZpbGVOYW1lKG5hbWUpIHtcclxuICAgIHZhciB2ID0gT2JqZWN0cy5nZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmRhdGEsIG5hbWUpO1xyXG4gICAgaWYgKHYgJiYgdi5uYW1lKSB7XHJcbiAgICAgIHJldHVybiBgJHt0aGlzLnRyaW1EaXNwbGF5RmlsZU5hbWUodi5uYW1lKX0gKCR7cm91bmQodi5zaXplIC8gMTAyNCl9IGtCKWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gXCJcIjtcclxuICB9XHJcblxyXG4gIG9uRmlsZUZpZWxkQ2hhbmdlZChuYW1lLCBldmVudCkge1xyXG4gICAgaWYgKCFGaWxlQWNjZXNzLmlzU3VwcG9ydGVkKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcIkZpbGUgdXBsb2FkIGlzIG5vdCBzdXBwb3J0ZWQhXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50fSAqL1xyXG4gICAgdmFyIGZpbGVGaWxlZCA9IGV2ZW50LnRhcmdldDtcclxuICAgIHZhciBmaWxlID0gZmlsZUZpbGVkLmZpbGVzWzBdO1xyXG5cclxuICAgIC8vdmFyIG5hbWUgPSBmaWxlRmlsZWQuZ2V0QXR0cmlidXRlKFwiYmluZFwiKTtcclxuICAgIGlmICghZmlsZSkge1xyXG4gICAgICBPYmplY3RzLnNldFByb3BlcnR5QnlQYXRoKHRoaXMuZGF0YSwgbmFtZSwgeyBuYW1lOiBudWxsIH0pO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgT2JqZWN0cy5zZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmRhdGEsIG5hbWUsIHsgbmFtZTogZmlsZS5uYW1lLCB0eXBlOiBmaWxlLnR5cGUsIC8qZGF0YVVSTDogZGF0YVVSTCwqLyBmaWxlQmxvYjogZmlsZSwgc2l6ZTogZmlsZS5zaXplIH0pO1xyXG5cclxuICAgIC8qRmlsZUFjY2Vzcy5SZWFkRmlsZShmaWxlRmlsZWQuZmlsZXNbMF0pLkRhdGFVUkwoKS50aGVuKCBkYXRhVVJMID0+e1xyXG4gICAgT2JqZWN0cy5zZXRQcm9wZXJ0eUJ5UGF0aCh0aGlzLmRhdGEsIG5hbWUsIHtuYW1lOiBmaWxlLm5hbWUsIHR5cGU6ZmlsZS50eXBlLCBkYXRhVVJMOiBkYXRhVVJMLCBmaWxlQmxvYjpmaWxlLCBzaXplOmZpbGUuc2l6ZX0pO1xyXG4gICAgdGhpcy5ldmVudHMuY2hhbmdlKGV2ZW50KTtcclxuICAgIH0pLmNhdGNoKGVycj0+e1xyXG4gICAgY29uc29sZS53YXJuKGVycik7XHJcbiAgICBPYmplY3RzLnNldFByb3BlcnR5QnlQYXRoKHRoaXMuZGF0YSwgbmFtZSwge25hbWU6IG51bGx9KTtcclxuICAgIHRoaXMuZXZlbnRzLmNoYW5nZShldmVudCk7XHJcbiAgICB9KTsqL1xyXG4gIH1cclxufVxyXG4vKiogQHR5cGUge3tba2V5OnN0cmluZ106IGZ1bmN0aW9uKEZvcm1zLCBGaWVsZFRlbXBsYXRlLCBzdHJpbmcpOiBzdHJpbmd9fSAqL1xyXG5Gb3Jtcy5maWVsZF9kZWZpbml0aW9ucyA9IHtcclxuICBmb3JtKGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgcmV0dXJuIGZvcm1zLmFkZEZvcm0oZWwsIHBhcmVudFBhdGggLyo/IHBhcmVudFBhdGggKycuJyArZWwubmFtZSA6IGVsLm5hbWUqLyk7XHJcbiAgfSxcclxuICBhcnJheShmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIHJldHVybiBmb3Jtcy5hZGRBcnJheShlbCwgcGFyZW50UGF0aCAvKj8gcGFyZW50UGF0aCArJy4nICtlbC5uYW1lIDogZWwubmFtZSovKTtcclxuICB9LFxyXG4gIGVtYWlsKGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgZm9ybXMuYXNzZXJ0VmFsaWRhdGVSdWxlSGFzKGVsLCBcImVtYWlsXCIpO1xyXG4gICAgcmV0dXJuIGZvcm1zLnJlbmRlckZpZWxkR3JvdXBIVE1MKGVsLCBbZm9ybXMuYWRkSW5wdXQoZWwsIHsgdHlwZTogJ2VtYWlsJyB9KV0pO1xyXG4gIH0sXHJcbiAgZmlsZShmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIHJldHVybiBmb3Jtcy5yZW5kZXJGaWVsZEdyb3VwSFRNTChlbCwgW2Zvcm1zLmFkZEZpbGUoZWwpXSk7XHJcbiAgfSxcclxuICB0ZXh0KGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgcmV0dXJuIGZvcm1zLnJlbmRlckZpZWxkR3JvdXBIVE1MKGVsLCBbZm9ybXMuYWRkSW5wdXQoZWwsIG51bGwpXSk7XHJcbiAgfSxcclxuICBkYXRlKGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgZWwuaWNvbiA9IFwiZmFyIGZhLWNhbGVuZGFyLWFsdFwiO1xyXG4gICAgcmV0dXJuIGZvcm1zLnJlbmRlckZpZWxkR3JvdXBIVE1MKGVsLCBbZm9ybXMuYWRkSW5wdXQoZWwsIHsgZGF0ZTogJycsIGZvcm1hdDogJ2RhdGUnIH0pXSk7XHJcbiAgfSxcclxuICBkYXRldGltZShmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIGVsLmljb24gPSBcImZhciBmYS1jYWxlbmRhci1hbHRcIjtcclxuICAgIHJldHVybiBmb3Jtcy5yZW5kZXJGaWVsZEdyb3VwSFRNTChlbCwgW2Zvcm1zLmFkZElucHV0KGVsLCB7IGRhdGVUaW1lOiAnJywgZm9ybWF0OiAnZGF0ZVRpbWUnIH0pXSk7XHJcbiAgfSxcclxuICB0aW1lKGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgZWwuaWNvbiA9IFwiZmFyIGZhLWNsb2NrXCI7XHJcbiAgICByZXR1cm4gZm9ybXMucmVuZGVyRmllbGRHcm91cEhUTUwoZWwsIFtmb3Jtcy5hZGRJbnB1dChlbCwgeyB0aW1lOiAnJywgZm9ybWF0OiAndGltZScgfSldKTtcclxuICB9LFxyXG4gIHNwbGl0KGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgcmV0dXJuIGZvcm1zLnJlbmRlckZpZWxkR3JvdXBIVE1MKGVsLCBbXHJcbiAgICAgICc8ZGl2IGNsYXNzPVwic3BsaXRcIiBzdHlsZT1cIndpZHRoOjUwJVwiPicgKyBmb3Jtcy5hZGRJbnB1dChlbC5pdGVtc1swXSwgeyB0eXBlOiBlbC5pdGVtc1swXS50eXBlIH0pICsgJzwvZGl2PicsXHJcbiAgICAgICc8ZGl2IGNsYXNzPVwic3BsaXRcIiBzdHlsZT1cIndpZHRoOjUwJVwiPicgKyBmb3Jtcy5hZGRJbnB1dChlbC5pdGVtc1sxXSwgeyB0eXBlOiBlbC5pdGVtc1sxXS50eXBlIH0pICsgJzwvZGl2PicsXHJcbiAgICBdKTtcclxuICB9LFxyXG4gIFwiZGF0ZS10aW1lXCI6IGZ1bmN0aW9uIChmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIHZhciBkYXRlRWwgPSBPYmplY3QuYXNzaWduKHt9LCBlbCk7XHJcbiAgICB2YXIgdGltZUVsID0gT2JqZWN0LmFzc2lnbih7fSwgZWwpO1xyXG5cclxuICAgIGRhdGVFbC5fbmFtZSArPSBcIl9kYXRlXCI7XHJcbiAgICBkYXRlRWwuaWNvbiA9IFwiZmFyIGZhLWNhbGVuZGFyLWFsdFwiO1xyXG4gICAgdGltZUVsLl9uYW1lICs9IFwiX3RpbWVcIjtcclxuICAgIHRpbWVFbC5pY29uID0gXCJmYXIgZmEtY2xvY2tcIjtcclxuXHJcbiAgICB2YXIgZGF0ZVRpbWUgPSBPYmplY3RzLmdldFByb3BlcnR5QnlQYXRoKGZvcm1zLmRhdGEsIGVsLl9uYW1lKTtcclxuICAgIE9iamVjdHMuc2V0UHJvcGVydHlCeVBhdGgoZm9ybXMuZGF0YSwgZGF0ZUVsLl9uYW1lLCBkYXRlVGltZSk7XHJcbiAgICBPYmplY3RzLnNldFByb3BlcnR5QnlQYXRoKGZvcm1zLmRhdGEsIHRpbWVFbC5fbmFtZSwgZGF0ZVRpbWUpO1xyXG5cclxuICAgIHJldHVybiBmb3Jtcy5yZW5kZXJGaWVsZEdyb3VwSFRNTChlbCwgW1xyXG4gICAgICAvKmh0bWwqL2A8ZGl2IHN0eWxlPVwiZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvd1wiPmAsXHJcbiAgICAgIC8qaHRtbCovYDxkaXYgY2xhc3M9XCJzcGxpdFwiIHN0eWxlPVwid2lkdGg6NjAlXCI+YCArIGZvcm1zLmFkZElucHV0KGRhdGVFbCwgeyBkYXRlOiAnJywgZm9ybWF0OiAnZGF0ZScsIG9uY2hhbmdlOiBcInRoaXMuX2Zvcm1hdFNwbGl0RGF0ZUZpZWxkKCRldmVudCwnXCIgKyBlbC5fbmFtZSArIFwiJyxmYWxzZSlcIiB9KSArICc8L2Rpdj4nLFxyXG4gICAgICAvKmh0bWwqL2A8ZGl2IGNsYXNzPVwic3BsaXRcIiBzdHlsZT1cIndpZHRoOjQwJVwiPmAgKyBmb3Jtcy5hZGRJbnB1dCh0aW1lRWwsIHsgdGltZTogJycsIGZvcm1hdDogJ3RpbWUnLCBvbmNoYW5nZTogXCJ0aGlzLl9mb3JtYXRTcGxpdERhdGVGaWVsZCgkZXZlbnQsJ1wiICsgZWwuX25hbWUgKyBcIicsdHJ1ZSlcIiB9KSArICc8L2Rpdj4nLFxyXG4gICAgICAvKmh0bWwqL2A8L2Rpdj5gXHJcbiAgICBdKTtcclxuICB9LFxyXG4gIG51bWJlcihmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIGZvcm1zLmFzc2VydFZhbGlkYXRlUnVsZUhhcyhlbCwgXCJudW1lcmljXCIpO1xyXG4gICAgdmFyIGZvcm1hdCA9IGVsLmF0dHJpYnV0ZXMgJiYgZWwuYXR0cmlidXRlcy5mb3JtYXQgPyB1bmRlZmluZWQgOiBcIm51bWJlcjoyXCI7XHJcbiAgICByZXR1cm4gZm9ybXMucmVuZGVyRmllbGRHcm91cEhUTUwoZWwsIFtmb3Jtcy5hZGRJbnB1dChlbCwgeyB0eXBlOiAndGV4dCcsIG51bWJlcjogXCJcIiwgZm9ybWF0OiBmb3JtYXQsIHBhdHRlcm46IFwiWzAtOV0qXCIsIG5vdmFsaWRhdGU6IHRydWUgfSldKTtcclxuICB9LFxyXG4gIHBhc3N3b3JkKGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgcmV0dXJuIGZvcm1zLnJlbmRlckZpZWxkR3JvdXBIVE1MKGVsLCBbZm9ybXMuYWRkUGFzc3dvcmQoZWwsIG51bGwpXSk7XHJcbiAgfSxcclxuICBwaG9uZShmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIHJldHVybiBmb3Jtcy5yZW5kZXJGaWVsZEdyb3VwSFRNTChlbCwgW2Zvcm1zLmFkZElucHV0KGVsLCB7IHR5cGU6ICd0ZWwnLCBvbmlucHV0OiBcInRoaXMuX2Zvcm1hdFBob25lTnVtYmVyKCRldmVudClcIiB9KV0pO1xyXG4gIH0sXHJcbiAgaGlkZGVuKGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgcmV0dXJuIFwiXCI7XHJcbiAgfSxcclxuICB0ZXh0YXJlYShmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIHJldHVybiBmb3Jtcy5yZW5kZXJGaWVsZEdyb3VwSFRNTChlbCwgW2Zvcm1zLmFkZFRleHRBcmVhKGVsLCBudWxsKV0pO1xyXG4gIH0sXHJcbiAgY2hlY2tib3goZm9ybXMsIGVsLCBwYXJlbnRQYXRoKSB7XHJcbiAgICB2YXIgZWxfY2ggPSBPYmplY3RzLmNvcHkoZWwpO1xyXG4gICAgZWxfY2gudGl0bGUgPSBcIlwiO1xyXG4gICAgcmV0dXJuIGZvcm1zLnJlbmRlckZpZWxkR3JvdXBIVE1MKGVsX2NoLCBbZm9ybXMuYWRkQ2hlY2soZWwsIG51bGwpXSwgdHJ1ZSk7XHJcbiAgfSxcclxuICByYWRpbyhmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIHJldHVybiBmb3Jtcy5yZW5kZXJGaWVsZEdyb3VwSFRNTChlbCwgW2Zvcm1zLmFkZFJhZGlvKGVsLCBudWxsKV0pO1xyXG4gIH0sXHJcbiAgc2VsZWN0KGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgcmV0dXJuIGZvcm1zLmFkZFNlbGVjdChlbCwgbnVsbCwgcGFyZW50UGF0aCk7XHJcbiAgfSxcclxuICBsYWJlbChmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIHJldHVybiBmb3Jtcy5yZW5kZXJGaWVsZEdyb3VwSFRNTChlbCwgW2Zvcm1zLmFkZExhYmVsKGVsKV0sIG51bGwsIHRydWUpO1xyXG4gIH0sXHJcbiAgbGluayhmb3JtcywgZWwsIHBhcmVudFBhdGgpIHtcclxuICAgIHJldHVybiBmb3Jtcy5yZW5kZXJGaWVsZEdyb3VwSFRNTChlbCwgW2Zvcm1zLmFkZExpbmsoZWwpXSwgbnVsbCwgdHJ1ZSk7XHJcbiAgfSxcclxuICBidXR0b24oZm9ybXMsIGVsLCBwYXJlbnRQYXRoKSB7XHJcbiAgICByZXR1cm4gZm9ybXMucmVuZGVyRmllbGRHcm91cEhUTUwoZWwsIFtmb3Jtcy5hZGRCdXR0b24oZWwpXSk7XHJcbiAgfSxcclxuICBidXR0b25zKGZvcm1zLCBlbCwgcGFyZW50UGF0aCkge1xyXG4gICAgcmV0dXJuIGZvcm1zLnJlbmRlckZpZWxkR3JvdXBIVE1MKGVsLCBbZm9ybXMuYWRkQnV0dG9ucyhlbCldKTtcclxuICB9LFxyXG4gIGh0bWwoZm9ybXMsIGVsLCBwYXJlbnRQYXRoKSB7XHJcbiAgICByZXR1cm4gZm9ybXMuYWRkSHRtbChlbCk7XHJcbiAgfVxyXG59OyIsImltcG9ydCB7IGVtcHR5LCB0cnlDYWxsLCBudW1iZXJGcm9tTG9jYWxlU3RyaW5nLCBpc09iakxpdGVyYWwgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XHJcbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9CYXNlQ29tcG9uZW50XCI7XHJcbmltcG9ydCB7IGlzT2JqZWN0LCBpc1N0cmluZywgaXNCb29sZWFuIH0gZnJvbSBcInV0aWxcIjtcclxuXHJcbmltcG9ydCB7IGlzU2tpcFVwZGF0ZSB9IGZyb20gXCIuL1dhdGNoZXJcIjtcclxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tIFwiLi9EYXRlVGltZVwiO1xyXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSBcInV0aWxcIjtcclxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCJ1dGlsXCI7XHJcbmltcG9ydCB7IE9iamVjdHMgfSBmcm9tIFwiLi9PYmplY3RzXCI7XHJcbmltcG9ydCB7IERPTSB9IGZyb20gXCIuL0RPTVwiO1xyXG5cclxudmFyIGh0bWxwYXJzZXIgPSByZXF1aXJlKFwiaHRtbHBhcnNlcjJcIik7XHJcblxyXG4vKiogXHJcbiAqIEBjb25zdHJ1Y3RvciBcclxuICogQHBhcmFtIHsqfSBjb250ZXh0XHJcbiAqL1xyXG5leHBvcnQgdmFyIEJpbmRlciA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgdmFyIGdldHRlckNhc2hlID0ge307XHJcbiAgLyoqIEB0eXBlIHtCaW5kZXJ9ICovXHJcbiAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gIC8qKiBAdHlwZSB7dkRvbX0gKi9cclxuICB0aGlzLnZkb20gPSBudWxsO1xyXG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQgfHwgdGhpcztcclxuICAvKiogQHR5cGUge3tba2V5OnN0cmluZ106YW55fX0gKi9cclxuICB0aGlzLmluamVjdFZhcnMgPSB7fTtcclxuXHJcbiAgdmFyIEVBdHRyUmVzdWx0ID0ge1xyXG4gICAgTm9uZTogdW5kZWZpbmVkLFxyXG4gICAgTm9kZUNoYW5nZWQ6IDEsXHJcbiAgICBTa2lwQ2hpbGRyZW46IDIsXHJcbiAgICBOb2RlQ2hhbmdlZFNraXBDaGlsZHJlbjogMyxcclxuICB9O1xyXG5cclxuICB0aGlzLmV2ZW50Q2FsbGJhY2tzID0geyBjaGFuZ2U6IG51bGwsIGZvY3VzOiBudWxsLCBpbnB1dDogbnVsbCwgY2xpY2s6IG51bGwgfTtcclxuXHJcbiAgZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcclxuICAgIHJlZmVyZW5jZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbnNlcnRBZnRlcihuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XHJcbiAgICByZWZlcmVuY2VOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUubmV4dFNpYmxpbmcpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBJbnNlcnQgdkRvbSBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4gYWZ0ZXIgcmVmZXJlbmNlIE5vZGVcclxuICAgKiBAcGFyYW0ge3ZEb219IHZEb20gXHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlTm9kZSBcclxuICAgKi9cclxuICBmdW5jdGlvbiBpbnNlcnRWRG9tRWxlbWVudEFmdGVyKHZEb20sIHJlZmVyZW5jZU5vZGUpIHtcclxuICAgIGluc2VydEFmdGVyKHZEb20uZWxlbSwgcmVmZXJlbmNlTm9kZSk7XHJcbiAgICBpZiAodkRvbS5lbGVtIGluc3RhbmNlb2YgQ29tbWVudCkge1xyXG4gICAgICBpbnNlcnRWRG9tSXRlbXNBZnRlcih2RG9tLml0ZW1zLCB2RG9tLmVsZW0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW5zZXJ0VkRvbUl0ZW1zQWZ0ZXIoaXRlbXMsIHJlZmVyZW5jZU5vZGUpIHtcclxuICAgIGlmIChpc0FycmF5KGl0ZW1zKSkge1xyXG4gICAgICB2YXIgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgICAgT2JqZWN0cy5mb3JFYWNoKGl0ZW1zLCBpdGVtID0+IHtcclxuICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGl0ZW0uZWxlbSk7XHJcbiAgICAgICAgaWYgKGl0ZW0uZWxlbSBpbnN0YW5jZW9mIENvbW1lbnQpIHtcclxuICAgICAgICAgIGluc2VydFZEb21JdGVtc0FmdGVyKGl0ZW0uaXRlbXMsIGl0ZW0uZWxlbSk7XHJcbiAgICAgICAgICAvL2lmIGl0ZW0gaXMgYSBjb21wb25lbmV0LCByZS1pbnNlcnQgaXRzIGNoaWxkcmVuIHRvby5cclxuICAgICAgICAgIGlmIChpdGVtLmdldHRlcnMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBpdGVtLmdldHRlcnMuY29tcG9uZW50KHNlbGYsIHt9KTtcclxuICAgICAgICAgICAgaW5zZXJ0VkRvbUVsZW1lbnRBZnRlcihjb21wb25lbnQuYmluZGVyLnZkb20sIGl0ZW0uZWxlbSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgaW5zZXJ0QWZ0ZXIoZnJhZywgcmVmZXJlbmNlTm9kZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBcclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtIFxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2tlZXBFdmVudHNdIC0gZGVmYXVsdCBmYWxzZVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWxlbSwga2VlcEV2ZW50cykge1xyXG4gICAgaWYgKGtlZXBFdmVudHMgPT09IHRydWUpIHtcclxuICAgICAgaWYgKGVsZW0ucGFyZW50Tm9kZSkge1xyXG4gICAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVtb3ZlRE9NRWxlbWVudChlbGVtKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZVZEb21JdGVtcyhpdGVtcywga2VlcEV2ZW50cykge1xyXG4gICAgaWYgKGlzQXJyYXkoaXRlbXMpKSB7XHJcbiAgICAgIE9iamVjdHMuZm9yRWFjaChpdGVtcywgaXRlbSA9PiB7XHJcbiAgICAgICAgcmVtb3ZlRWxlbWVudChpdGVtLmVsZW0sIGtlZXBFdmVudHMpO1xyXG4gICAgICAgIC8vaWYgaXRlbSBpcyBhIGNvbW1lbnQsIHJlbW92ZSBpdHMgaXRlbXMgdG9vXHJcbiAgICAgICAgaWYgKGl0ZW0uZWxlbSBpbnN0YW5jZW9mIENvbW1lbnQpIHtcclxuICAgICAgICAgIHJlbW92ZVZEb21JdGVtcyhpdGVtLml0ZW1zLCBrZWVwRXZlbnRzKTtcclxuICAgICAgICAgIC8vaWYgaXRlbSBpcyBhIGNvbXBvbmVuZXQsIHJlbW92ZSBpdHMgdkRPTSBlbGVtZW50IHRvby5cclxuICAgICAgICAgIGlmIChpdGVtLmdldHRlcnMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBpdGVtLmdldHRlcnMuY29tcG9uZW50KHNlbGYsIHt9KTtcclxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudC5iaW5kZXIpIHtcclxuICAgICAgICAgICAgICByZW1vdmVFbGVtZW50KGNvbXBvbmVudC5iaW5kZXIudmRvbS5lbGVtLCBrZWVwRXZlbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZXBsYWNlRWxlbWVudChuZXdOb2RlLCBvbGROb2RlKSB7XHJcbiAgICBpbnNlcnRCZWZvcmUobmV3Tm9kZSwgb2xkTm9kZSk7XHJcbiAgICByZW1vdmVFbGVtZW50KG9sZE5vZGUpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICByZXR1cm4gc2VsZjtcclxuICB9O1xyXG4gIC8qKlxyXG4gICAqIEluamVjdCBWYXJpYWJsZXMgaW50byB0aGUgc2NvcGUgb2YgdGhlIGJpbmRlclxyXG4gICAqIEBwYXJhbSB7e1t2YXJOYW1lOnN0cmluZ106YW55fX0gdmFycyBcclxuICAgKi9cclxuICB0aGlzLnNldEluamVjdFZhcnMgPSBmdW5jdGlvbiAodmFycykge1xyXG4gICAgc2VsZi5pbmplY3RWYXJzID0gdmFycztcclxuICAgIHJldHVybiBzZWxmO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEJpbmQgRE9NIGVsZW1lbnRzIHRoYXQgaGF2ZSBcImJpbmRcIiBhdHRyaWJ1dGUgd2l0aCBtb2RlbFxyXG4gICAqIEBldmVudENhbGxiYWNrcyBPYmplY3QsIGNvbW1vbiBldmVudCBoYW5kbGVyICwge2NoYW5nZTpmdW5jdGlvbihldmVudCl7fSwgZm9jdXM6ZnVuY3Rpb24oZXZlbnQpe319XHJcbiAgICovXHJcbiAgdGhpcy5iaW5kRWxlbWVudHMgPSBmdW5jdGlvbiAoZXZlbnRDYWxsYmFja3MsIHRlbXBsYXRlKSB7XHJcbiAgICAvL2lmIGNhbGxiYWNrcyBpcyBhIGZ1bmN0aW9uIHRoZW4gaXQgaXMgY2hhbmdlIGJ5IGRlZmF1bHRcclxuICAgIGlmICh0eXBlb2YgZXZlbnRDYWxsYmFja3MgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgc2VsZi5ldmVudENhbGxiYWNrcy5jaGFuZ2UgPSBldmVudENhbGxiYWNrcztcclxuICAgIGVsc2UgaWYgKHR5cGVvZiBldmVudENhbGxiYWNrcyA9PT0gXCJvYmplY3RcIilcclxuICAgICAgc2VsZi5ldmVudENhbGxiYWNrcyA9IE9iamVjdC5hc3NpZ24oc2VsZi5ldmVudENhbGxiYWNrcywgZXZlbnRDYWxsYmFja3MpO1xyXG5cclxuICAgIGlmICghc2VsZi5jb250ZXh0LmluamVjdFZhcnMpIHtcclxuICAgICAgY29udGV4dC5pbmplY3RWYXJzID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHZkb20gPSBleGVjdXRlU291cmNlKHBhcnNlRWxlbWVudCh0ZW1wbGF0ZSksIHNlbGYuaW5qZWN0VmFycyk7XHJcbiAgICBzZWxmLnZkb20gPSB2ZG9tO1xyXG5cclxuICAgIHJldHVybiBzZWxmO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIERlc3Ryb3kgdGhlIHJvb3QgRE9NIGFuZCB2RE9NIGVsZW1lbnRzIGFuZCBBTEwgSG9va3NcclxuICAgKi9cclxuICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoc2VsZi52ZG9tKSB7XHJcbiAgICAgIHJlbW92ZVZET01FbGVtZW50KHNlbGYudmRvbSk7XHJcbiAgICAgIHNlbGYudmRvbSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy9lc2NhcGUgYXR0cmlidXRlIHZhbHVlXHJcbiAgZnVuY3Rpb24gZXNjYXBlQXR0cmlidXRlKGF0dHJWYWx1ZSkge1xyXG4gICAgcmV0dXJuIGF0dHJWYWx1ZS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJykuXHJcbiAgICAgIHJlcGxhY2UoL1wiL2csICdcXFxcXCInKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlRWxlbWVudCh0ZW1wbGF0ZSkge1xyXG5cclxuICAgIHZhciBoYW5kbGVyID0gbmV3IGh0bWxwYXJzZXIuRG9tSGFuZGxlcihmdW5jdGlvbiAoZXJyb3IsIGRvbSkge1xyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHZhciBwYXJzZXIgPSBuZXcgaHRtbHBhcnNlci5QYXJzZXIoaGFuZGxlciwgeyBsb3dlckNhc2VBdHRyaWJ1dGVOYW1lczogZmFsc2UsIGRlY29kZUVudGl0aWVzOiB0cnVlIH0pO1xyXG4gICAgcGFyc2VyLnBhcnNlQ29tcGxldGUodGVtcGxhdGUpO1xyXG4gICAgLy9jb25zb2xlLmxvZyhoYW5kbGVyLmRvbSk7XHJcbiAgICB2YXIgcm9vdGVsZW1lbnRzID0gT2JqZWN0cy5maWx0ZXIoaGFuZGxlci5kb20sIGVsID0+IGVsLnR5cGUgPT0gJ3RhZycpO1xyXG4gICAgaWYgKHJvb3RlbGVtZW50cy5sZW5ndGggIT0gMSkge1xyXG4gICAgICAvL3Rocm93IEVycm9yKFwiRXJyb3I6IFRlbXBsYXRlIG11c3QgY29udGFpbiBleGFjdGx5IG9uZSByb290IGVsZW1lbnQ6IFwiK3RlbXBsYXRlKTtcclxuICAgICAgLy93cmFwIGVsZW1lbnRzIGluIGZyYWdtZW50XHRcdFx0XHJcbiAgICAgIHJldHVybiBwYXJzZUFTVCh7XHJcbiAgICAgICAgZGF0YTogJ2RpdicsXHJcbiAgICAgICAgdHlwZTogJ3RhZycsXHJcbiAgICAgICAgbmFtZTogJ2RpdicsXHJcbiAgICAgICAgYXR0cmliczogeyBmcmFnbWVudDogXCJcIiB9LFxyXG4gICAgICAgIGNoaWxkcmVuOiByb290ZWxlbWVudHNcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFyc2VBU1Qocm9vdGVsZW1lbnRzWzBdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFR1cm4gdGVtcGxhdGUgSFRNTCBpbnRvIGEgY3JlYXRlRG9tRWxlbWVudCBmdW5jdGlvblxyXG4gICAqIEBwYXJhbSB7QVNUT2JqZWN0fSBvYmpcclxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gcGFyc2VBU1Qob2JqKSB7XHJcbiAgICB2YXIgdGhpc1NvcnVyY2UgPSBcIlwiO1xyXG4gICAgdmFyIHdyYXBEaXJlY3RpdmUgPSBcIlwiO1xyXG4gICAgaWYgKG9iai50eXBlID09ICd0ZXh0Jykge1xyXG4gICAgICB2YXIgZXNjYXBlZCA9IGVzY2FwZUF0dHJpYnV0ZShvYmouZGF0YSk7XHJcbiAgICAgIC8vcGFyc2Uge3ttb3VzdGFjaGV9fSB0ZW1wbGF0ZSB3aXRoaW4gdGhlIHRleHQgbm9kZVxyXG4gICAgICB2YXIgYml0cyA9IGVzY2FwZWQuc3BsaXQoLyh7e1tee31dKn19KS9nbWkpO1xyXG4gICAgICB2YXIgc3BsaXROb2RlcyA9IFtdO1xyXG4gICAgICBPYmplY3RzLmZvckVhY2goYml0cywgZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgdmFyIHJldCA9IG51bGw7XHJcbiAgICAgICAgZWwucmVwbGFjZSgve3soW157fV0rKX19fCguKikvZywgZnVuY3Rpb24gKGEsIHAxLCBwMiwgZCkge1xyXG4gICAgICAgICAgaWYgKHAxKSB7XHJcbiAgICAgICAgICAgIHNwbGl0Tm9kZXMucHVzaCgnY3JlYXRlRWxlbWVudChcIiN0ZXh0XCIse2JpbmQ6XCInICsgcDEgKyAnXCJ9LFtdLCBpbmplY3QpJyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHAyKSB7XHJcbiAgICAgICAgICAgIHNwbGl0Tm9kZXMucHVzaCgnY3JlYXRlRWxlbWVudChcIiN0ZXh0XCIse30sXCInICsgcDIgKyAnXCIsIGluamVjdCknKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXNTb3J1cmNlID0gc3BsaXROb2Rlcy5qb2luKCcsJyk7XHJcbiAgICB9IGVsc2UgaWYgKG9iai50eXBlID09ICdjb21tZW50Jykge1xyXG4gICAgICAvL3NraXAgY29tbWVudHNcclxuICAgICAgdGhpc1NvcnVyY2UgPSBudWxsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpc1NvcnVyY2UgPSBcImNyZWF0ZUVsZW1lbnQoXCI7XHJcbiAgICAgIHZhciB0YWcgPSBvYmoubmFtZTtcclxuXHJcbiAgICAgIHZhciBjb21wb25lbmV0ID0gdHJ5R2V0Q29tcG9uZW5ldCh0YWcpO1xyXG4gICAgICAvL2FkZCAnW2NvbXBvbmVudF0nIGF0dHJpYnV0ZSBvbmx5IGlmIHRhZyBuYW1lIGlzIHJlZ2lzdGVyZWQgYW5kIGN1cnJlbnQgY29udGV4dCBpcyBOT1QgdGhlIGluc3RhbmNlIG9mIHRoYXQgc2FtZSBjb21wb25lbnQgY2xhc3MgKGF2b2lkIGNhbGxzdGFjayBleGNlcHRpb24gaWYgc2FtZSB0YWcgbmFtZSBpcyB1c2VkIGluc2lkZSB0aGUgY29tcG9uZW50Lmh0bWwpXHJcbiAgICAgIGlmIChjb21wb25lbmV0ICYmICEoc2VsZi5jb250ZXh0IGluc3RhbmNlb2YgY29tcG9uZW5ldCkpIHtcclxuICAgICAgICBvYmouYXR0cmlic1snW2NvbXBvbmVudF0nXSA9IGBSZWdpc3RlcmVkKCcke3RhZ30nKWA7XHJcbiAgICAgICAgZGVsZXRlIG9iai5hdHRyaWJzWydbZGlyZWN0aXZlXSddO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvL3ZhciBhdHRyVGV4dCA9IFwie1wiO1xyXG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICBpZiAob2JqLmF0dHJpYnMpIHtcclxuICAgICAgICBPYmplY3RzLmZvckVhY2gob2JqLmF0dHJpYnMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAvL3ZhbHVlID0gZXNjYXBlQXR0cmlidXRlKHZhbHVlKTtcclxuICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ1tmb3JlYWNoXSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ1t0cmFuc2l0aW9uXSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ1tkaXJlY3RpdmVdJzpcclxuICAgICAgICAgICAgY2FzZSAnW2NvbXBvbmVudF0nOlxyXG4gICAgICAgICAgICBjYXNlICdbaWZdJzpcclxuICAgICAgICAgICAgICB3cmFwRGlyZWN0aXZlID0gYFwiJHtrZXl9XCI6XCIke3ZhbHVlfVwiYDtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgLy9hdHRyVGV4dCArPVwifVwiXHJcbiAgICAgIHRoaXNTb3J1cmNlICs9IFwiJ1wiICsgdGFnICsgXCInLCBcIiArIEpTT04uc3RyaW5naWZ5KGF0dHJpYnV0ZXMpICsgXCJcIjtcclxuICAgICAgdGhpc1NvcnVyY2UgKz0gXCIsW1wiO1xyXG5cclxuICAgICAgaWYgKG9iai5jaGlsZHJlbiAmJiBvYmouY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iai5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcclxuICAgICAgICAgIHRoaXNTb3J1cmNlICs9IHBhcnNlQVNUKGNoaWxkKTtcclxuICAgICAgICAgIHRoaXNTb3J1cmNlICs9IFwiLFwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXNTb3J1cmNlICs9IFwiXSwgaW5qZWN0KVwiO1xyXG5cclxuICAgICAgaWYgKCFlbXB0eSh3cmFwRGlyZWN0aXZlKSkge1xyXG4gICAgICAgIHRoaXNTb3J1cmNlID0gXCJjcmVhdGVEaXJlY3RpdmVFbGVtZW50KCdcIiArIHRhZyArIFwiJyx7XCIgKyB3cmFwRGlyZWN0aXZlICsgXCJ9LCBmdW5jdGlvbihpbmplY3QpeyByZXR1cm4gWyBcIiArIHRoaXNTb3J1cmNlICsgXCJdfSxpbmplY3QpXCI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpc1NvcnVyY2U7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRIdG1sRnJvbVJlbmRlcih0YWcsIGF0dHJzKSB7XHJcbiAgICB2YXIgYXR0cnNfc3RyID0gW1wiXCJdO1xyXG4gICAgT2JqZWN0cy5mb3JFYWNoKGF0dHJzLCAoYXRyLCBrZXkpID0+IHsgYXR0cnNfc3RyLnB1c2goYCR7a2V5fT1cIiR7YXRyfVwiYCk7IH0pO1xyXG4gICAgcmV0dXJuIGA8JHt0YWd9JHthdHRyc19zdHIuam9pbignICcpfT48LyR7dGFnfT5gO1xyXG4gIH1cclxuXHJcbiAgdGhpcy52ZG9tID0gbnVsbDtcclxuICAvKipcclxuICAgKiBAcmV0dXJuIHt2RG9tfVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGV4ZWN1dGVTb3VyY2UocGFyc2VkU291cmNlLCBpbmopIHtcclxuXHJcbiAgICAvL3ZhciB2ZG9tID0gW107XHJcbiAgICB2YXIgc2NvcGUgPSB7XHJcbiAgICAgIC8qKiBBbnkga2luZCBvZiBlbGVtZW50IHRoYXQgY3JlYXRlcyBpdCdzIG93biBzY29wZSBBTkQgcmV0dXJucyB2RE9NIHdpdGggZnJhZ21lbnQgYW5kIGl0ZW1CdWlsZGVyICAqL1xyXG4gICAgICBjcmVhdGVEaXJlY3RpdmVFbGVtZW50OiBmdW5jdGlvbiAodGFnLCBhdHRyaWJ1dGVzLCBjcmVhdGVFbGVtZW50cywgaW5qZWN0KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIC8vY3JlYXRlIGRpcmVjdGl2ZSBmcmFnbWVudCBlbGVtZW50LCBpbnRvIHdoaWNoIHRoZSBkZWlyZWN0aXZlIGNvbnRlbnRzIHdpbGwgYmUgYXBwZW5kZWRcclxuICAgICAgICAgIHZhciBkaXJlY3RpdmVGcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgICAgICAgICB2YXIgYXR0cktleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKTtcclxuICAgICAgICAgIHZhciBnZXR0ZXJzID0ge307XHJcblxyXG4gICAgICAgICAgdmFyIGF0dHJOYW1lID0gYXR0cktleXNbMF07XHJcbiAgICAgICAgICB2YXIgYmluZEV4cHJlc3Npb24gPSBhdHRyaWJ1dGVzW2F0dHJOYW1lXTtcclxuXHJcbiAgICAgICAgICAvL2NyZWF0ZSBjb21tZW50IGVsZW1lbnQgdGhhdCB3aWxsIGJlY29tZSB0aGUgYW5jaG9yIGZvciB0aGUgZGlyZWN0aXZlLlxyXG4gICAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KGF0dHJOYW1lICsgXCI9XCIgKyBiaW5kRXhwcmVzc2lvbiArIFwiIFwiKTtcclxuICAgICAgICAgIGRpcmVjdGl2ZUZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW0pO1xyXG5cclxuICAgICAgICAgIHZhciByVHlwZSA9IGdldFJlYWN0aXZpdHlUeXBlKGF0dHJOYW1lKTtcclxuICAgICAgICAgIHZhciBrZXkgPSByVHlwZS5rZXk7XHJcblxyXG4gICAgICAgICAgaWYgKGJpbmRFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT0gXCJmb3JlYWNoXCIpIHtcclxuICAgICAgICAgICAgICAvL3NwZWNpYWwgaGFuZGxpbmcgZm9yIGZvcmVhY2guIGJlY2F1c2UgZ2V0dGVyIGNhbiBub3QgYmUgY3JlYXRlZCBmcm9tIGZvcmVhY2ggYXR0cmlidXRlIFtmb3JlYWNoXSA9IFwiaW5kZXggaW4gdGhpcy5pdGVtcyBhcyBpdGVtXCJcclxuICAgICAgICAgICAgICBnZXR0ZXJzW2tleV0gPSBnZXRGb3JlYWNoQXR0clBhcnRzKGJpbmRFeHByZXNzaW9uKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAvL2ZvciBhbGwgb3RoZXIgYXR0cmlidXRlcyBsaWtlIFtpZl0gPSBcInRoaXMuaXNWaXNpYmxlXCIgY3JlYXRlIGdldHRlciBmb3IgdGhlIGF0dHJpYnV0ZSB2YWx1ZVxyXG4gICAgICAgICAgICAgIGdldHRlcnNba2V5XSA9IGNyZWF0ZUdldHRlcihiaW5kRXhwcmVzc2lvbiwgaW5qZWN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy9iZWNhdXNlIGRpcmVjdGl2ZSBjaGlsZHJlbiBhcmUgbGlrZWx5IHRvIGJlIHJlLXJlbmRlcmVkLCBkbyBub3QgaW1tZWRpYXRlbHkgcmVuZGVyIHRoZW0uIGNyZWF0ZSBpdGVtQnVpbGRlciBmdW5jdGlvblxyXG4gICAgICAgICAgdmFyIGl0ZW1CdWlsZGVyID0gZnVuY3Rpb24gKGluamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBjcmVhdGVFbGVtZW50cyhpbmplY3QpO1xyXG4gICAgICAgICAgICBpZiAoaXRlbXNbMF0gJiYgaXRlbXNbMF0uZWxlbS5nZXRBdHRyaWJ1dGUgJiYgaXRlbXNbMF0uZWxlbS5nZXRBdHRyaWJ1dGUoXCJmcmFnbWVudFwiKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIHZhciBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgICAgICAgIERPTShmcmFnKS5hcHBlbmQoaXRlbXNbMF0uZWxlbS5jaGlsZE5vZGVzKTtcclxuICAgICAgICAgICAgICBpdGVtc1swXS5lbGVtID0gZnJhZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpdGVtc1swXS5JTkpFQ1QgPSBpbmplY3Q7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtc1swXTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICB2YXIgdmRvbSA9IHsgdmFsdWVzOiB7fSwgZ2V0dGVyczogZ2V0dGVycywgc2V0dGVyczoge30sIGNhbGxlcnM6IHt9LCBmcmFnbWVudDogZGlyZWN0aXZlRnJhZ21lbnQsIGVsZW06IGVsZW0sIGl0ZW1zOiBbXSwgaXRlbUJ1aWxkZXI6IGl0ZW1CdWlsZGVyIH07XHJcbiAgICAgICAgICBleGVjdXRlQXR0cmlidXRlKGtleSwgdmRvbSwgaW5qZWN0KTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gdmRvbTtcclxuICAgICAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihleC5tZXNzYWdlICsgXCJcXG4gQXQgXCIgKyBnZXRIdG1sRnJvbVJlbmRlcih0YWcsIGF0dHJpYnV0ZXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDcmVhdGUgZWxlbWVudFxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IGF0dHJpYnV0ZXNcclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8dkRvbVtdfSBjcmVhdGVFbGVtZW50c1xyXG4gICAgICAgKiBAcGFyYW0ge2FueX0gaW5qZWN0XHJcbiAgICAgICAqL1xyXG4gICAgICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbiAodGFnLCBhdHRyaWJ1dGVzLCBjcmVhdGVFbGVtZW50cywgaW5qZWN0KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGluamVjdCA9IGluamVjdCB8fCB7fTtcclxuICAgICAgICAgIHZhciB2ZG9tSXRlbXMgPSBbXTtcclxuICAgICAgICAgIHZhciBlbGVtO1xyXG4gICAgICAgICAgdmFyIGF0dHJLZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICB2YXIgZ2V0dGVycyA9IHt9O1xyXG4gICAgICAgICAgdmFyIHNldHRlcnMgPSB7fTtcclxuICAgICAgICAgIHZhciBjYWxsZXJzID0ge307XHJcbiAgICAgICAgICB2YXIgcGxhaW5BdHRycyA9IHt9O1xyXG4gICAgICAgICAgdmFyIHJlbmRlckltbWVkaWF0ZWx5ID0gW107XHJcblxyXG4gICAgICAgICAgaWYgKHRhZyA9PSBcIiN0ZXh0XCIpIHtcclxuICAgICAgICAgICAgaWYgKGlzU3RyaW5nKGNyZWF0ZUVsZW1lbnRzKSkge1xyXG4gICAgICAgICAgICAgIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjcmVhdGVFbGVtZW50cyk7XHJcbiAgICAgICAgICAgICAgdmFyIHZkb20gPSB7IHZhbHVlczoge30sIHZhbHVlc0Q6IHt9LCBnZXR0ZXJzOiBnZXR0ZXJzLCBzZXR0ZXJzOiBzZXR0ZXJzLCBmcmFnbWVudDogbnVsbCwgZWxlbTogZWxlbSwgaXRlbXM6IHZkb21JdGVtcywgaXRlbUJ1aWxkZXI6IG51bGwsIGNvbnRleHQ6IHNlbGYuY29udGV4dCB9O1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBlbGVtID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7XHJcbiAgICAgICAgICAgICAgZ2V0dGVycyA9IHsgJ2JpbmQnOiBjcmVhdGVHZXR0ZXIoYXR0cmlidXRlc1snYmluZCddLCBpbmplY3QpIH07XHJcbiAgICAgICAgICAgICAgdmFyIHZkb20gPSB7IHZhbHVlczoge30sIHZhbHVlc0Q6IHt9LCBnZXR0ZXJzOiBnZXR0ZXJzLCBzZXR0ZXJzOiBzZXR0ZXJzLCBmcmFnbWVudDogbnVsbCwgZWxlbTogZWxlbSwgaXRlbXM6IHZkb21JdGVtcywgaXRlbUJ1aWxkZXI6IG51bGwsIGNvbnRleHQ6IHNlbGYuY29udGV4dCB9O1xyXG4gICAgICAgICAgICAgIGV4ZWN1dGVBdHRyaWJ1dGUoJ2JpbmQnLCB2ZG9tLCBpbmplY3QpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmRvbTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xyXG5cclxuICAgICAgICAgIGZvciAodmFyIGkgaW4gYXR0cktleXMpIHtcclxuICAgICAgICAgICAgdmFyIGJpbmRFeHByZXNzaW9uID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHZhciBhdHRyTmFtZSA9IGF0dHJLZXlzW2ldO1xyXG4gICAgICAgICAgICBiaW5kRXhwcmVzc2lvbiA9IGF0dHJpYnV0ZXNbYXR0ck5hbWVdO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJUeXBlID0gZ2V0UmVhY3Rpdml0eVR5cGUoYXR0ck5hbWUpO1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gclR5cGUua2V5O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFiaW5kRXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICAgIHBsYWluQXR0cnNba2V5XSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHJUeXBlLnR5cGUpIHtcclxuICAgICAgICAgICAgICBjYXNlICdnZXQtc2V0JzpcclxuICAgICAgICAgICAgICAgIGdldHRlcnNba2V5XSA9IGNyZWF0ZUdldHRlcihiaW5kRXhwcmVzc2lvbiwgaW5qZWN0KTtcclxuICAgICAgICAgICAgICAgIHNldHRlcnNba2V5XSA9IGNyZWF0ZVNldHRlcihiaW5kRXhwcmVzc2lvbiwgaW5qZWN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2lmIGVsZW1lbnQgaXMgZGlyZWN0bHkgc2V0dGluZywgdGhlbiBhcHBseSBhbGwgY2hhbmdlIGFuZCBpbnB1dCBjYWxsYmFja3NcclxuICAgICAgICAgICAgICAgIGlmIChpc0VsZW1lbnRTZXR0aW5nKGVsZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgIGFwcGx5Q2FsbGJhY2tzKGVsZW0sIHNlbGYuY29udGV4dCwgc2VsZi5ldmVudENhbGxiYWNrcyk7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChpbmplY3QuY29tcG9uZW50ICYmIGluamVjdC5jb21wb25lbnQuZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlDYWxsYmFja3MoZWxlbSwgaW5qZWN0LmNvbXBvbmVudCwgaW5qZWN0LmNvbXBvbmVudC5ldmVudHMpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbW1lZGlhdGVseS5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlICdnZXQnOlxyXG4gICAgICAgICAgICAgICAgZ2V0dGVyc1trZXldID0gY3JlYXRlR2V0dGVyKGJpbmRFeHByZXNzaW9uLCBpbmplY3QpO1xyXG4gICAgICAgICAgICAgICAgcmVuZGVySW1tZWRpYXRlbHkucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAnY2FsbCc6XHJcbiAgICAgICAgICAgICAgICBjYWxsZXJzW2tleV0gPSBjcmVhdGVDYWxsZXIoYmluZEV4cHJlc3Npb24sIGluamVjdCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgLy9ub3JtYWwgYXR0cmlidXRlXHJcbiAgICAgICAgICAgICAgICAvL2FkZCBpdCB0byB0aGUgbGlzdCBvZiBwbGFpbiBzdHJpbmctb25seSBhdHRyaWJ1dGVzIC0gd2lsbCBiZSB1c2VkIGluIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgcGxhaW5BdHRyc1trZXldID0gYmluZEV4cHJlc3Npb247XHJcbiAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vaWYgZWxlbWVudCBoYXMgYW4gYXR0cmlidXRlIFwiZnJhZ21lbnRcIiB0aGVuIG1ha2UgdGhlIGVsZW1lbnQgYSBmcmFnbWVudCBzbyBpdHMgY2hpbGRyZW4gY2FuIGJlIGFkZGVkIGRpcmVjdGx5XHJcbiAgICAgICAgICBpZiAocGxhaW5BdHRyc1snZnJhZ21lbnQnXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGNyZWF0ZUVsZW1lbnRzLmxlbmd0aDsgaWkrKykge1xyXG4gICAgICAgICAgICBpZiAoaXNPYmplY3QoY3JlYXRlRWxlbWVudHNbaWldKSkge1xyXG4gICAgICAgICAgICAgIGlmIChpc0FycmF5KGNyZWF0ZUVsZW1lbnRzW2lpXSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjcmVhdGVFbGVtZW50c1tpaV0ubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudHNbaWldLm1hcChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwudmRvbSlcclxuICAgICAgICAgICAgICAgICAgICAgIHZkb21JdGVtcy5wdXNoKGVsLnZkb20pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoZWwuZnJhZ21lbnQgfHwgZWwuZWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3JlYXRlRWxlbWVudHNbaWldKVxyXG4gICAgICAgICAgICAgICAgICB2ZG9tSXRlbXMucHVzaChjcmVhdGVFbGVtZW50c1tpaV0pO1xyXG4gICAgICAgICAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50c1tpaV0uZnJhZ21lbnQgfHwgY3JlYXRlRWxlbWVudHNbaWldLmVsZW0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKGNyZWF0ZUVsZW1lbnRzW2lpXSkpIHtcclxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdGVtIG11c3QgYmUgYW4gdkRvbSBvYmplY3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB2YXIgdmRvbSA9IHsgdmFsdWVzOiB7fSwgdmFsdWVzRDoge30sIGdldHRlcnM6IGdldHRlcnMsIHNldHRlcnM6IHNldHRlcnMsIGNhbGxlcnM6IGNhbGxlcnMsIHBsYWluQXR0cnM6IHBsYWluQXR0cnMsIGZyYWdtZW50OiBudWxsLCBlbGVtOiBlbGVtLCBpdGVtczogdmRvbUl0ZW1zLCBpdGVtQnVpbGRlcjogbnVsbCwgY29udGV4dDogc2VsZi5jb250ZXh0IH07XHJcbiAgICAgICAgICBlbGVtWydWRE9NJ10gPSB2ZG9tO1xyXG5cclxuICAgICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCByZW5kZXJJbW1lZGlhdGVseS5sZW5ndGg7IGlpKyspIHtcclxuICAgICAgICAgICAgZXhlY3V0ZUF0dHJpYnV0ZShyZW5kZXJJbW1lZGlhdGVseVtpaV0sIHZkb20sIGluamVjdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAocGxhaW5BdHRyc1snZnJhZ21lbnQnXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGJpbmRFdmVudHNUb0NvbnRleHQoZWxlbSwgaW5qZWN0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB2ZG9tO1xyXG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGV4Lm1lc3NhZ2UgKyBcIlxcbiBBdCBcIiArIGdldEh0bWxGcm9tUmVuZGVyKHRhZywgYXR0cmlidXRlcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZXhlYyA9IG5ldyBGdW5jdGlvbignY3JlYXRlRWxlbWVudCcsICdjcmVhdGVEaXJlY3RpdmVFbGVtZW50JywgJ2NvbnRleHQnLCAnaW5qZWN0JyxcclxuICAgICAgYHJldHVybiAoZnVuY3Rpb24oY3JlYXRlRWxlbWVudCxjb250ZXh0LGluamVjdCl7cmV0dXJuICR7cGFyc2VkU291cmNlfX0pLmNhbGwoY29udGV4dCxjcmVhdGVFbGVtZW50LGNvbnRleHQsIGluamVjdCk7YFxyXG4gICAgKTtcclxuICAgIHZhciByZXQgPSBleGVjKHNjb3BlLmNyZWF0ZUVsZW1lbnQsIHNjb3BlLmNyZWF0ZURpcmVjdGl2ZUVsZW1lbnQsIHNlbGYuY29udGV4dCwgaW5qKTtcclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJWYWx1ZSBcclxuICAgKi9cclxuICBmdW5jdGlvbiBpc1JlYWN0aXZlR2V0dGVyKGF0dHJWYWx1ZSkge1xyXG4gICAgdmFyIG1hdGNoZXMgPSBhdHRyVmFsdWUubWF0Y2goL15cXFsoLiopXFxdJC8pO1xyXG4gICAgaWYgKG1hdGNoZXMpIHtcclxuICAgICAgcmV0dXJuIG1hdGNoZXNbMV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyTmFtZSBcclxuICAgKiBAcmV0dXJuIHt7dHlwZTonZ2V0J3wnZ2V0LXNldCd8J2NhbGwnfG51bGwsa2V5OnN0cmluZ319XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gZ2V0UmVhY3Rpdml0eVR5cGUoYXR0ck5hbWUpIHtcclxuICAgIGlmIChhdHRyTmFtZSA9PSAnYmluZCcpIHtcclxuICAgICAgcmV0dXJuIHsgdHlwZTogJ2dldC1zZXQnLCBrZXk6IGF0dHJOYW1lIH07XHJcbiAgICB9XHJcbiAgICAvLyBbKCldXHJcbiAgICB2YXIgbWF0Y2hlcyA9IGF0dHJOYW1lLm1hdGNoKC9eXFxbXFwoKC4qKVxcKVxcXSQvKTtcclxuICAgIGlmIChtYXRjaGVzKSB7XHJcbiAgICAgIHJldHVybiB7IHR5cGU6ICdnZXQtc2V0Jywga2V5OiBtYXRjaGVzWzFdIH07XHJcbiAgICB9XHJcbiAgICAvLyAoKVxyXG4gICAgdmFyIG1hdGNoZXMgPSBhdHRyTmFtZS5tYXRjaCgvXlxcKCguKilcXCkkLyk7XHJcbiAgICBpZiAobWF0Y2hlcykge1xyXG4gICAgICByZXR1cm4geyB0eXBlOiAnY2FsbCcsIGtleTogbWF0Y2hlc1sxXSB9O1xyXG4gICAgfVxyXG4gICAgLy8gW11cclxuICAgIHZhciBtYXRjaGVzID0gYXR0ck5hbWUubWF0Y2goL15cXFsoLiopXFxdJC8pO1xyXG4gICAgaWYgKG1hdGNoZXMpIHtcclxuICAgICAgcmV0dXJuIHsgdHlwZTogJ2dldCcsIGtleTogbWF0Y2hlc1sxXSB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgdHlwZTogbnVsbCwga2V5OiBhdHRyTmFtZSB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHt2RG9tfSBvbiBcclxuICAgKi9cclxuICBmdW5jdGlvbiB2RG9tQ3JlYXRlSXRlbXMob24sIGluaikge1xyXG5cclxuICAgIHZhciB2ZG9tID0gb24uaXRlbUJ1aWxkZXIoaW5qKTtcclxuICAgIGlmICh2ZG9tLmVsZW0gaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XHJcbiAgICAgIG9uLml0ZW1zID0gdmRvbS5pdGVtcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9uLml0ZW1zLnB1c2godmRvbSk7XHJcbiAgICB9XHJcbiAgICBpbnNlcnRBZnRlcih2ZG9tLmVsZW0sIG9uLmVsZW0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQmluZCBlbGVtZW50J3MgZXZlbnRzIHRvIGNvbnRleHRcclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fEVsZW1lbnR9IGVsZW1cclxuICAgKi9cclxuICBmdW5jdGlvbiBiaW5kRXZlbnRzVG9Db250ZXh0KGVsZW0sIGluamVjdCkge1xyXG4gICAgT2JqZWN0cy5mb3JFYWNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGVsZW0uYXR0cmlidXRlcyksIGZ1bmN0aW9uIChhdHRyKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgZWxlbVthdHRyLm5hbWVdID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAvL3ZhciBpbmplY3QgPSBzZWxmLmluamVjdFZhcnM7XHJcbiAgICAgICAgZWxlbVthdHRyLm5hbWVdID0gbnVsbDtcclxuXHJcbiAgICAgICAgbGV0IHNfbmFtZSA9IGF0dHIubmFtZS5zdWJzdHIoMik7XHJcblxyXG4gICAgICAgIGxldCBoYW5kbGVyID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgdXBkYXRlQm91bmRDb250ZXh0UHJvcGVydHkoZXZ0LnRhcmdldCk7XHJcbiAgICAgICAgICB2YXIgaW5qID0gT2JqZWN0LmFzc2lnbih7fSwgc2VsZi5pbmplY3RWYXJzLCB7ICckZXZlbnQnOiBldnQgfSwgaW5qZWN0LCBmaW5kRWxlbUluamVjdChlbGVtKSk7XHJcbiAgICAgICAgICB2YXIgYyA9IGNyZWF0ZUNhbGxlcihhdHRyLnZhbHVlLCBpbmopO1xyXG4gICAgICAgICAgYyhpbmopO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIERPTShlbGVtKS5hZGRFdmVudExpc3RlbmVyKHNfbmFtZSwgaGFuZGxlcik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBGaW5kIGNsb3Nlc3QgZWxlbWVudCB3aXRoIElOSkVDVFxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8RWxlbWVudHxOb2RlfSBlbGVtXHJcbiAgICovXHJcblxyXG4gIGZ1bmN0aW9uIGZpbmRFbGVtSW5qZWN0KGVsZW0pIHtcclxuICAgIGlmIChlbGVtLlZET00gJiYgZWxlbS5WRE9NLklOSkVDVCkge1xyXG4gICAgICByZXR1cm4gZWxlbS5WRE9NLklOSkVDVDtcclxuICAgIH1cclxuICAgIGlmIChlbGVtLnBhcmVudE5vZGUpIHtcclxuICAgICAgcmV0dXJuIGZpbmRFbGVtSW5qZWN0KGVsZW0ucGFyZW50Tm9kZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSBET00gZWxlbWVudHMgYWNjb3JkaW5nIHRvIGJpbmRpbmdzXHJcbiAgICovXHJcbiAgdGhpcy51cGRhdGVFbGVtZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHNlbGYuY29udGV4dFtpc1NraXBVcGRhdGVdID0gdHJ1ZTtcclxuICAgIGNoZWNrVkRvbU5vZGUoc2VsZi52ZG9tLCBzZWxmLmluamVjdFZhcnMpO1xyXG4gICAgc2VsZi5jb250ZXh0W2lzU2tpcFVwZGF0ZV0gPSBmYWxzZTtcclxuICAgIHJldHVybiBzZWxmO1xyXG4gIH07XHJcblxyXG4gIC8qKiBcclxuICAgKiBAcGFyYW0ge3ZEb219IG9uICBcclxuICAgKi9cclxuICBmdW5jdGlvbiBjaGVja1ZEb21Ob2RlKG9uLCBpbmplY3QpIHtcclxuICAgIC8vY29uc29sZS5sb2cob24pO1xyXG4gICAgdmFyIG5vZGVDaGFuZ2VkID0gRUF0dHJSZXN1bHQuTm9uZTtcclxuICAgIGlmIChvbiAmJiBvbi5nZXR0ZXJzKSB7XHJcbiAgICAgIGZvciAodmFyIGtleSBpbiBvbi5nZXR0ZXJzKSB7XHJcbiAgICAgICAgaWYgKCFvbi5nZXR0ZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGRpclJlc3VsdCA9IGV4ZWN1dGVBdHRyaWJ1dGUoa2V5LCBvbiwgaW5qZWN0KTtcclxuICAgICAgICAvL2lmIGRpcmVjdGl2ZXNba2V5XShvbiwgaW5qZWN0KSByZXR1cm5zIGZhbHNlLCBtZWFucyByZXR1cm4gcmlnaHQgYXdheVxyXG4gICAgICAgIGlmIChkaXJSZXN1bHQgPT09IEVBdHRyUmVzdWx0LlNraXBDaGlsZHJlbilcclxuICAgICAgICAgIHJldHVybiBFQXR0clJlc3VsdC5Ta2lwQ2hpbGRyZW47XHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKHZhciBpIGluIG9uLml0ZW1zKSB7XHJcbiAgICAgICAgaWYgKCFvbi5pdGVtcy5oYXNPd25Qcm9wZXJ0eShpKSlcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmIChjaGVja1ZEb21Ob2RlKG9uLml0ZW1zW2ldLCBpbmplY3QpID09PSBFQXR0clJlc3VsdC5Ob2RlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgbm9kZUNoYW5nZWQgPSBFQXR0clJlc3VsdC5Ob2RlQ2hhbmdlZDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoIW9uKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiQUFBQVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBub2RlQ2hhbmdlZDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGV4ZWN1dGVBdHRyaWJ1dGUoYXR0cmlidXRlLCBvbiwgaW5qZWN0KSB7XHJcbiAgICB2YXIgb2xkID0gb24udmFsdWVzW2F0dHJpYnV0ZV07XHJcbiAgICAvL3RyeXtcclxuICAgIC8vaWYgYSBidWlsdC1pbiBhdHRyaWJ1dGVcclxuICAgIGlmIChhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pIHtcclxuICAgICAgdmFyIHJldCA9IGF0dHJpYnV0ZXNbYXR0cmlidXRlXShvbiwgaW5qZWN0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vYXR0cmlidXRlIGlzIG5vdCBpbiB0aGUgc3RhbmRhcmQgYXR0cmlidXRlIGxpc3RcclxuICAgICAgaWYgKG9uLmdldHRlcnNbYXR0cmlidXRlXSkge1xyXG4gICAgICAgIC8vZ2V0dGVyIGV4aXN0c1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IG9uLmdldHRlcnNbYXR0cmlidXRlXShpbmplY3QpO1xyXG4gICAgICAgIC8vLS0tLS0tLS0tLS1CZWxvdyBjb2RlIHVzZWQgdG8gc2V0IHRoZSBwcm9wZXJ0eSBvZiB0aGUgY29tcG9uZW5ldCB0byB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgdGhlIGdldHRlci4gSSBkb250IGtub3cgd2h5LiBNYXliZSByZW1vdGhlIHRoZSB3aG9sZSB0aGluZy4gYW5kIGRvIG5vdGhpbmcgd2l0aCBjdXN0b20gZ2V0dGVycy4uLi5cclxuICAgICAgICBpZiAoc2VsZi5jb250ZXh0IGluc3RhbmNlb2YgQmFzZUNvbXBvbmVudCkge1xyXG4gICAgICAgICAgc2VsZi5jb250ZXh0W2F0dHJpYnV0ZV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9zZXQgYXR0cmlidXRlIG9mIHRoZSBIVE1MIGVsZW1lbnQgdG8gdGhlIHZhbHVlO1xyXG4gICAgICAgIGlmIChvbi5lbGVtKSB7XHJcbiAgICAgICAgICBvbi5lbGVtW2F0dHJpYnV0ZV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8qfWNhdGNoKGV4KXtcclxuICBjb25zb2xlLndhcm4oZXgpO1xyXG59LyoqL1xyXG4gICAgaWYgKG9sZCAhPT0gb24udmFsdWVzW2F0dHJpYnV0ZV0gJiYgcmV0ICE9PSBFQXR0clJlc3VsdC5Ta2lwQ2hpbGRyZW4pIHtcclxuICAgICAgcmV0ID0gRUF0dHJSZXN1bHQuTm9kZUNoYW5nZWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3VzdG9tIGF0dHJpYnV0ZSBoYW5kbGluZyBnb2VzIGhlcmVcclxuICAgKi9cclxuICB2YXIgYXR0cmlidXRlcyA9IHtcclxuICAgICdpZic6IGZ1bmN0aW9uIChvbiwgaW5qZWN0KSB7XHJcbiAgICAgIHZhciBrZXkgPSBcImlmXCI7XHJcbiAgICAgIHZhciBnZXR0ZXIgPSBvbi5nZXR0ZXJzW2tleV07XHJcbiAgICAgIHZhciBpc1RydWU7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgaXNUcnVlID0gZ2V0dGVyKGluamVjdCk7XHJcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgaXNUcnVlID0gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChvbi52YWx1ZXNba2V5XSAhPT0gaXNUcnVlKSB7XHJcbiAgICAgICAgb24udmFsdWVzW2tleV0gPSBpc1RydWU7XHJcbiAgICAgICAgaWYgKGlzVHJ1ZSkge1xyXG4gICAgICAgICAgaWYgKG9uLml0ZW1zLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIC8vaWYgaWYgZGlyZWN0aXZlIGRvZXMgbm90IGhhdmUgYW55IGNoaWxkcmVuLCBjcmVhdGUgdGhlbVxyXG4gICAgICAgICAgICB2RG9tQ3JlYXRlSXRlbXMob24sIGluamVjdCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL2lmIChvbi5pdGVtc1swXSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpXHJcbiAgICAgICAgICAgIGluc2VydFZEb21JdGVtc0FmdGVyKG9uLml0ZW1zLCBvbi5lbGVtKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChvbi5pdGVtcy5sZW5ndGggPiAwICYmIG9uLml0ZW1zWzBdLmVsZW0ucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICByZW1vdmVWRG9tSXRlbXMob24uaXRlbXMsIHRydWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIEVBdHRyUmVzdWx0LlNraXBDaGlsZHJlbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgIGlmICghaXNUcnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIEVBdHRyUmVzdWx0LlNraXBDaGlsZHJlbjtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgICd0cmFuc2l0aW9uJzogZnVuY3Rpb24gKG9uLCBpbmplY3QpIHtcclxuICAgICAgdmFyIGtleSA9IFwidHJhbnNpdGlvblwiO1xyXG4gICAgICB2YXIgZ2V0dGVyID0gb24uZ2V0dGVyc1trZXldO1xyXG4gICAgICB2YXIgb3B0aW9ucztcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBvcHRpb25zID0gZ2V0dGVyKGluamVjdCk7XHJcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgdHJpZ2dlcjogbnVsbCxcclxuICAgICAgICBkdXJhdGlvbjogMCxcclxuICAgICAgICBlbnRlcjogJ2VudGVyJyxcclxuICAgICAgICBlbnRlcl9hY3RpdmU6ICdlbnRlcl9hY3RpdmUnLFxyXG4gICAgICAgIGVudGVyX3RvOiAnZW50ZXJfdG8nLFxyXG4gICAgICAgIGxlYXZlOiAnbGVhdmUnLFxyXG4gICAgICAgIGxlYXZlX2FjdGl2ZTogJ2xlYXZlX2FjdGl2ZScsXHJcbiAgICAgICAgbGVhdmVfdG86ICdsZWF2ZV90bydcclxuICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICBpZiAob24udmFsdWVzW2tleV0gIT09IG9wdGlvbnMudHJpZ2dlcikge1xyXG4gICAgICAgIG9uLnZhbHVlc1trZXldID0gb3B0aW9ucy50cmlnZ2VyO1xyXG4gICAgICAgIGlmIChvbi5pdGVtcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgLy9pZiBpZiBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhbnkgY2hpbGRyZW4sIGNyZWF0ZSB0aGVtXHJcbiAgICAgICAgICB2RG9tQ3JlYXRlSXRlbXMob24sIGluamVjdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChvcHRpb25zLmR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHZEb21DcmVhdGVJdGVtcyhvbiwgaW5qZWN0KTtcclxuXHJcbiAgICAgICAgICAgIG9uLml0ZW1zWzFdLmVsZW0uY2xhc3NMaXN0LmFkZChvcHRpb25zLmVudGVyX2FjdGl2ZSk7XHJcbiAgICAgICAgICAgIG9uLml0ZW1zWzBdLmVsZW0uY2xhc3NMaXN0LmFkZChvcHRpb25zLmxlYXZlX2FjdGl2ZSk7XHJcblxyXG4gICAgICAgICAgICBvbi5pdGVtc1sxXS5lbGVtLmNsYXNzTGlzdC5hZGQob3B0aW9ucy5lbnRlcik7XHJcbiAgICAgICAgICAgIG9uLml0ZW1zWzBdLmVsZW0uY2xhc3NMaXN0LmFkZChvcHRpb25zLmxlYXZlKTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIG9uLml0ZW1zWzFdLmVsZW0uY2xhc3NMaXN0LnJlbW92ZShvcHRpb25zLmVudGVyKTtcclxuICAgICAgICAgICAgICBvbi5pdGVtc1swXS5lbGVtLmNsYXNzTGlzdC5yZW1vdmUob3B0aW9ucy5sZWF2ZSk7XHJcblxyXG4gICAgICAgICAgICAgIG9uLml0ZW1zWzFdLmVsZW0uY2xhc3NMaXN0LmFkZChvcHRpb25zLmVudGVyX3RvKTtcclxuICAgICAgICAgICAgICBvbi5pdGVtc1swXS5lbGVtLmNsYXNzTGlzdC5hZGQob3B0aW9ucy5sZWF2ZV90byk7XHJcbiAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAvL2Rpc2NhcmQgdkRvbSBub2RlcyBvZiB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICBvbi5pdGVtc1swXS5pdGVtcyA9IFtdO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBvbi5pdGVtc1sxXS5lbGVtLmNsYXNzTGlzdC5yZW1vdmUob3B0aW9ucy5lbnRlcl9hY3RpdmUpO1xyXG4gICAgICAgICAgICAgIG9uLml0ZW1zWzBdLmVsZW0uY2xhc3NMaXN0LnJlbW92ZShvcHRpb25zLmxlYXZlX2FjdGl2ZSk7XHJcbiAgICAgICAgICAgICAgb24uaXRlbXNbMV0uZWxlbS5jbGFzc0xpc3QucmVtb3ZlKG9wdGlvbnMuZW50ZXJfdG8pO1xyXG4gICAgICAgICAgICAgIG9uLml0ZW1zWzBdLmVsZW0uY2xhc3NMaXN0LnJlbW92ZShvcHRpb25zLmxlYXZlX3RvKTtcclxuXHJcbiAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudChvbi5pdGVtc1swXS5lbGVtKTtcclxuICAgICAgICAgICAgICBvbi5pdGVtcy5zaGlmdCgpO1xyXG4gICAgICAgICAgICB9LCBvcHRpb25zLmR1cmF0aW9uKTtcclxuICAgICAgICAgICAgcmV0dXJuIEVBdHRyUmVzdWx0LlNraXBDaGlsZHJlbjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNoZWNrVkRvbU5vZGUob24uaXRlbXNbMF0sIHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2hlY2tWRG9tTm9kZShvbi5pdGVtc1swXSwge30pO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgJ2JpbmQnOiBmdW5jdGlvbiAob24sIGluamVjdCkge1xyXG4gICAgICB2YXIga2V5ID0gXCJiaW5kXCI7XHJcbiAgICAgIHZhciBnZXR0ZXIgPSBvbi5nZXR0ZXJzW2tleV07XHJcbiAgICAgIHZhciBuZXdWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBuZXdWYWx1ZSA9IGdldHRlcihpbmplY3QpO1xyXG4gICAgICB9IGNhdGNoIChleCkgeyB9XHJcbiAgICAgIG9uLnZhbHVlc1trZXldID0gbmV3VmFsdWU7XHJcbiAgICAgIHVwZGF0ZUJvdW5kRWxlbWVudChvbi5lbGVtLCBuZXdWYWx1ZSk7XHJcblxyXG4gICAgfSxcclxuICAgICdzZWxlY3RlZCc6IGZ1bmN0aW9uIChvbiwgaW5qZWN0KSB7XHJcbiAgICAgIHZhciBrZXkgPSBcInNlbGVjdGVkXCI7XHJcbiAgICAgIHZhciBnZXR0ZXIgPSBvbi5nZXR0ZXJzW2tleV07XHJcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGdldHRlcihpbmplY3QpO1xyXG4gICAgICBpZiAobmV3VmFsdWUpIHtcclxuICAgICAgICBvbi5lbGVtLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCBcIlwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvbi5lbGVtLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgICdzdHlsZSc6IGZ1bmN0aW9uIChvbiwgaW5qZWN0KSB7XHJcbiAgICAgIHZhciBrZXkgPSBcInN0eWxlXCI7XHJcbiAgICAgIHZhciBnZXR0ZXIgPSBvbi5nZXR0ZXJzW2tleV07XHJcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGdldHRlcihpbmplY3QpO1xyXG4gICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgT2JqZWN0cy5mb3JFYWNoKG5ld1ZhbHVlLCBmdW5jdGlvbiAocHJvcCwgaSkge1xyXG4gICAgICAgICAgaWYgKHByb3AgIT09IG51bGwpXHJcbiAgICAgICAgICAgIG9uLmVsZW0uc3R5bGVbaV0gPSBwcm9wO1xyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBvbi5lbGVtLnN0eWxlW2ldID0gJ2F1dG8nO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgJ2F0dHJpYnV0ZSc6IGZ1bmN0aW9uIChvbiwgaW5qZWN0KSB7XHJcbiAgICAgIHZhciBrZXkgPSBcImF0dHJpYnV0ZVwiO1xyXG4gICAgICB2YXIgZ2V0dGVyID0gb24uZ2V0dGVyc1trZXldO1xyXG4gICAgICB2YXIgbmV3VmFsdWUgPSBnZXR0ZXIoaW5qZWN0KTtcclxuICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIE9iamVjdHMuZm9yRWFjaChuZXdWYWx1ZSwgZnVuY3Rpb24gKHByb3AsIGkpIHtcclxuICAgICAgICAgIGlmIChwcm9wICE9PSBudWxsKVxyXG4gICAgICAgICAgICBvbi5lbGVtLnNldEF0dHJpYnV0ZShpLCBwcm9wKTtcclxuICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgb24uZWxlbS5yZW1vdmVBdHRyaWJ1dGUoaSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAnZGlzcGxheSc6IGZ1bmN0aW9uIChvbiwgaW5qZWN0KSB7XHJcbiAgICAgIHZhciBrZXkgPSBcImRpc3BsYXlcIjtcclxuICAgICAgdmFyIGdldHRlciA9IG9uLmdldHRlcnNba2V5XTtcclxuICAgICAgdmFyIG5ld1ZhbHVlID0gZ2V0dGVyKGluamVjdCk7XHJcbiAgICAgIGlmIChvbi52YWx1ZXNba2V5XSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICBvbi52YWx1ZXNba2V5XSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIGlmICghb24udmFsdWVzRC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICBvbi52YWx1ZXNEW2tleV0gPSBvbi5lbGVtLnN0eWxlLmRpc3BsYXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvbi5lbGVtLnN0eWxlLmRpc3BsYXkgPSBuZXdWYWx1ZTtcclxuXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAnc2hvdyc6IGZ1bmN0aW9uIChvbiwgaW5qZWN0KSB7XHJcbiAgICAgIHZhciBrZXkgPSBcInNob3dcIjtcclxuICAgICAgdmFyIGdldHRlciA9IG9uLmdldHRlcnNba2V5XTtcclxuICAgICAgdmFyIG5ld1ZhbHVlID0gZ2V0dGVyKGluamVjdCk7XHJcbiAgICAgIGlmIChvbi52YWx1ZXNba2V5XSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICBvbi52YWx1ZXNba2V5XSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIGlmICghb24udmFsdWVzRC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICBvbi52YWx1ZXNEW2tleV0gPSBvbi5lbGVtLnN0eWxlLmRpc3BsYXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgIG9uLmVsZW0uc3R5bGUuZGlzcGxheSA9IG9uLnZhbHVlc0Rba2V5XTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgb24uZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgICdjbGFzcyc6IGZ1bmN0aW9uIChvbiwgaW5qZWN0KSB7XHJcbiAgICAgIHZhciBrZXkgPSBcImNsYXNzXCI7XHJcbiAgICAgIHZhciBnZXR0ZXIgPSBvbi5nZXR0ZXJzW2tleV07XHJcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGdldHRlcihpbmplY3QpO1xyXG4gICAgICBpZiAob24udmFsdWVzW2tleV0gIT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgb24udmFsdWVzW2tleV0gPSBuZXdWYWx1ZTtcclxuICAgICAgICBpZiAoIW9uLnZhbHVlc0QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgb24udmFsdWVzRFtrZXldID0gb24uZWxlbS5jbGFzc05hbWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG9uLmVsZW0uY2xhc3NOYW1lID0gb24udmFsdWVzRFtrZXldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFlbXB0eShuZXdWYWx1ZSkgJiYgb24uZWxlbS5jbGFzc05hbWUuaW5kZXhPZihuZXdWYWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICBvbi5lbGVtLmNsYXNzTmFtZSArPSAob24uZWxlbS5jbGFzc05hbWUgPyBcIiBcIiA6IFwiXCIpICsgbmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgJ2lubmVyaHRtbCc6IGZ1bmN0aW9uIChvbiwgaW5qZWN0KSB7XHJcbiAgICAgIHZhciBrZXkgPSBcImlubmVyaHRtbFwiO1xyXG4gICAgICB2YXIgZ2V0dGVyID0gb24uZ2V0dGVyc1trZXldO1xyXG4gICAgICB2YXIgbmV3VmFsdWUgPSBnZXR0ZXIoaW5qZWN0KTtcclxuICAgICAgaWYgKG9uLnZhbHVlc1trZXldICE9PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgIG9uLnZhbHVlc1trZXldID0gbmV3VmFsdWU7XHJcbiAgICAgICAgb24uZWxlbS5pbm5lckhUTUwgPSBuZXdWYWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge3ZEb219IG9uIFxyXG4gICAgICogQHBhcmFtIHsqfSBpbmplY3QgXHJcbiAgICAgKi9cclxuICAgICdmb3JlYWNoJzogZnVuY3Rpb24gKG9uLCBpbmplY3QpIHtcclxuICAgICAgdmFyIGtleSA9IFwiZm9yZWFjaFwiO1xyXG4gICAgICB2YXIgZ2V0dGVyID0gb24uZ2V0dGVyc1trZXldO1xyXG4gICAgICAvKiogQHR5cGUge3tkYXRhOnN0cmluZyxpbmRleDpzdHJpbmcsaXRlbTpzdHJpbmd9fSovXHJcbiAgICAgIHZhciBwYXJ0cyA9IGdldHRlcjtcclxuICAgICAgdmFyIGRhdGEgPSBjcmVhdGVHZXR0ZXIocGFydHMuZGF0YSwgaW5qZWN0KShpbmplY3QpIHx8IFtdO1xyXG5cclxuICAgICAgdmFyIGZvID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuICAgICAgdmFyIGZvMSA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcblxyXG4gICAgICB2YXIgdG91Y2hlZEtleXMgPSB7fTtcclxuICAgICAgLy92YXIgdG91Y2hlZE9iamVjdHMgPSBbXTtcclxuICAgICAgLy9yZW1vdmUgYWxsIGl0ZW1zIHRlbXBvcmFyZWx5IChub3QgcmlnaHQgYXdheSlcclxuICAgICAgZnVuY3Rpb24gbW92ZUFsbFRvRnJhZ21lbnQoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gb24uaXRlbXMpIHtcclxuICAgICAgICAgIGlmICghb24uaXRlbXMuaGFzT3duUHJvcGVydHkoaW5kZXgpKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIGZvLmFwcGVuZENoaWxkKG9uLml0ZW1zW2luZGV4XS5lbGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vY3JlYXRlIGEgbmV3IGZyYWdtZW50IGZvciBuZXcvdXBkYXRlZCBpdGVtc1xyXG4gICAgICB2YXIgaGFzTmV3ID0gZmFsc2U7XHJcbiAgICAgIHZhciBoYXNEZWxldGVkID0gZmFsc2U7XHJcbiAgICAgIHZhciBoYXNDaGFuZ2VzID0gMDtcclxuXHJcbiAgICAgIGZvciAodmFyIGluZGV4IGluIGRhdGEpIHtcclxuICAgICAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoaW5kZXgpKVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgdmFyIGl0ZW0gPSBkYXRhW2luZGV4XTtcclxuICAgICAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgdG91Y2hlZEtleXNbaW5kZXhdID0gbnVsbDtcclxuICAgICAgICB2YXIgaW5qID0ge307XHJcbiAgICAgICAgaW5qW3BhcnRzLmluZGV4XSA9IGluZGV4O1xyXG4gICAgICAgIGlualtwYXJ0cy5pdGVtXSA9IGl0ZW07XHJcbiAgICAgICAgaW5qID0gT2JqZWN0LmFzc2lnbih7fSwgaW5qZWN0LCBpbmopO1xyXG5cclxuICAgICAgICBpZiAob24uaXRlbXNbaW5kZXhdICYmIGlzT2JqZWN0KGl0ZW0pICYmICFpc09iakxpdGVyYWwoaXRlbSkpIHtcclxuICAgICAgICAgIC8vaXQgaXMgc29tZSBzb3J0IG9mIGNvbXBsZXggb2JqZWN0LiBIYW5kbGUgaXQgZGlmZmVyZW50bHlcclxuICAgICAgICAgIGlmIChvbi5pdGVtc1tpbmRleF0uSU5KRUNUW3BhcnRzLml0ZW1dICE9IGl0ZW0pIHtcclxuICAgICAgICAgICAgLy9lbGVtZW50J3MgaW5qZWN0ZWQgaXRlbSBpcyBub3QgdGhlIHNhbWUgYXMgY3VycmVudCBpdGVtIChjYW4gbm90IGhvdC1zd2FwIGNvbXBsZXggaW5zdGFuY2VzISlcclxuICAgICAgICAgICAgLy9kZWxldGUgb2JqZWN0XHJcbiAgICAgICAgICAgIGhhc0RlbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAob24uaXRlbXNbaW5kZXhdLmVsZW0gPT0gbnVsbCB8fCBvbi5pdGVtc1tpbmRleF0uZWxlbSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgICByZW1vdmVWRG9tSXRlbXMob24uaXRlbXNbaW5kZXhdLml0ZW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZW1vdmVFbGVtZW50KG9uLml0ZW1zW2luZGV4XS5lbGVtKTtcclxuICAgICAgICAgICAgZGVsZXRlIG9uLml0ZW1zW2luZGV4XTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghb24uaXRlbXMuaGFzT3duUHJvcGVydHkoaW5kZXgpXHJcbiAgICAgICAgICAvKnx8XHJcbm9uLml0ZW1zW2luZGV4XS5JTkpFQ1RbcGFydHMuaXRlbV0gIT0gaXRlbSovXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAvL2EgbmV3IGl0ZW0gYXBwZWFyZWRcclxuICAgICAgICAgIGlmICghaGFzTmV3KSB7XHJcbiAgICAgICAgICAgIGhhc05ldyA9IHRydWU7XHJcbiAgICAgICAgICAgIG1vdmVBbGxUb0ZyYWdtZW50KCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIHZkb20gPSBvbi5pdGVtQnVpbGRlcihpbmopO1xyXG4gICAgICAgICAgb24uaXRlbXNbaW5kZXhdID0gdmRvbTtcclxuICAgICAgICAgIGZvMS5hcHBlbmRDaGlsZChvbi5pdGVtc1tpbmRleF0uZnJhZ21lbnQgfHwgb24uaXRlbXNbaW5kZXhdLmVsZW0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoIW9uLml0ZW1zW2luZGV4XS5lbGVtLnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy9JdGVtcyBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIERPTVxyXG4gICAgICAgICAgICByZXR1cm4gRUF0dHJSZXN1bHQuU2tpcENoaWxkcmVuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgb24uaXRlbXNbaW5kZXhdLklOSkVDVCA9IGluajtcclxuICAgICAgICAgIGluc2VydEJlZm9yZShmbzEsIG9uLml0ZW1zW2luZGV4XS5lbGVtKTtcclxuICAgICAgICAgIGlmIChjaGVja1ZEb21Ob2RlKG9uLml0ZW1zW2luZGV4XSwgaW5qKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBoYXNDaGFuZ2VzKys7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vZGVsZXRlIHZkb20uaXRlbXMgdGhhdCB3ZXJlIG5vdCBpbiB0aGUgZGF0YSBvYmplY3RcclxuICAgICAgZm9yICh2YXIgaW5kZXggaW4gb24uaXRlbXMpIHtcclxuXHJcbiAgICAgICAgLy9pZiAoIWlzT2JqZWN0KG9uLml0ZW1zW2luZGV4XS5JTkpFQ1QpKXtcclxuICAgICAgICBpZiAoIW9uLml0ZW1zLmhhc093blByb3BlcnR5KGluZGV4KSlcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmICh0b3VjaGVkS2V5cy5oYXNPd25Qcm9wZXJ0eShpbmRleCkpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgaGFzRGVsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKG9uLml0ZW1zW2luZGV4XS5lbGVtID09IG51bGwgfHwgb24uaXRlbXNbaW5kZXhdLmVsZW0gaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XHJcbiAgICAgICAgICByZW1vdmVWRG9tSXRlbXMob24uaXRlbXNbaW5kZXhdLml0ZW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVtb3ZlRWxlbWVudChvbi5pdGVtc1tpbmRleF0uZWxlbSk7XHJcblxyXG4gICAgICAgIGRlbGV0ZSBvbi5pdGVtc1tpbmRleF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvLmFwcGVuZENoaWxkKGZvMSk7XHJcblxyXG4gICAgICBpZiAob24uZWxlbS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgLy9pZiBuZXcgb3IgZGVsZXRlZCBlbGVtZW50cywgcmVtb3ZlIHRoZSBvbGQgZnJhZyBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lXHJcbiAgICAgICAgaWYgKGhhc05ldykge1xyXG4gICAgICAgICAgaW5zZXJ0QWZ0ZXIoZm8sIG9uLmVsZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJbRm9yRWFjaF06IGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhIHBhcmVudCFcIiwgb24uZWxlbSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBFQXR0clJlc3VsdC5Ta2lwQ2hpbGRyZW47XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3ZEb219IG9uICBcclxuICAgICAqIEBwYXJhbSB7Kn0gaW5qZWN0IFxyXG4gICAgICovXHJcbiAgICAnZGlyZWN0aXZlJzogZnVuY3Rpb24gKG9uLCBpbmplY3QpIHtcclxuICAgICAgdmFyIGtleSA9IFwiZGlyZWN0aXZlXCI7XHJcbiAgICAgIHZhciBnZXR0ZXIgPSBvbi5nZXR0ZXJzW2tleV07XHJcbiAgICAgIHZhciBodG1sID0gZ2V0dGVyKGluamVjdCk7XHJcblxyXG4gICAgICBpZiAoaHRtbCBpbnN0YW5jZW9mIEJhc2VDb21wb25lbnQpIHtcclxuICAgICAgICBvbi5nZXR0ZXJzW1wiY29tcG9uZW50XCJdID0gZ2V0dGVyO1xyXG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzW1wiY29tcG9uZW50XCJdKG9uLCBpbmplY3QpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob24udmFsdWVzW2tleV0gIT09IGh0bWwpIHtcclxuICAgICAgICBvbi52YWx1ZXNba2V5XSA9IGh0bWw7XHJcblxyXG4gICAgICAgIC8vY2xlYXIgYW55IHByZXZpb3VzIGNvbXBvbmVudCBlbGVtZW50c1xyXG4gICAgICAgIHJlbW92ZVZEb21JdGVtcyhvbi5pdGVtcyk7XHJcblxyXG4gICAgICAgIC8qKiBAdHlwZSB7dkRvbX0gKi9cclxuICAgICAgICB2YXIgY192RG9tID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKGh0bWwpIHtcclxuICAgICAgICAgIGlmIChodG1sIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xyXG4gICAgICAgICAgICBjX3ZEb20gPSB7IGVsZW06IGh0bWwsIGZyYWdtZW50OiBudWxsLCBpdGVtczogW10sIHZhbHVlczoge30sIHZhbHVlc0Q6IHt9LCBnZXR0ZXJzOiB7fSwgc2V0dGVyczoge30sIGl0ZW1CdWlsZGVyOiBudWxsLCBpbmplY3Q6IHt9IH07XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjX3ZEb20gPSBleGVjdXRlU291cmNlKHBhcnNlRWxlbWVudChodG1sKSwgaW5qZWN0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNfdkRvbSkge1xyXG4gICAgICAgICAgdmFyIHBfdkRvbSA9IG9uLml0ZW1CdWlsZGVyKGluamVjdCk7XHJcbiAgICAgICAgICBpZiAoIShjX3ZEb20uZWxlbSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpKSB7XHJcbiAgICAgICAgICAgIE9iamVjdHMuZm9yRWFjaChwX3ZEb20uZ2V0dGVycywgKGdldHRlciwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgY192RG9tLmdldHRlcnNba2V5XSA9IGdldHRlcjtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2NvcHkgaHRtbCBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGlmIChjX3ZEb20uZWxlbS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHBfdkRvbS5lbGVtLmF0dHJpYnV0ZXMubGVuZ3RoOyBpaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IHBfdkRvbS5lbGVtLmF0dHJpYnV0ZXNbaWldO1xyXG4gICAgICAgICAgICAgICAgLy9vbmx5IG92ZXJ3cml0ZSBub24tZXhpc3RpbmcgY2xpbGQgYXR0cnNcclxuICAgICAgICAgICAgICAgIGlmICghY192RG9tLmVsZW0uZ2V0QXR0cmlidXRlKGF0dHIubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgY192RG9tLmVsZW0uc2V0QXR0cmlidXRlKGF0dHIubmFtZSwgYXR0ci52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBjX3ZEb20uZWxlbS5zZXRBdHRyaWJ1dGUoYXR0ci5uYW1lLCBjX3ZEb20uZWxlbS5nZXRBdHRyaWJ1dGUoYXR0ci5uYW1lKSArIFwiIFwiICsgYXR0ci52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9uLml0ZW1zID0gW2NfdkRvbV07XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvbi5pdGVtcyA9IGNfdkRvbS5pdGVtcztcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpbnNlcnRWRG9tRWxlbWVudEFmdGVyKGNfdkRvbSwgb24uZWxlbSk7XHJcblxyXG4gICAgICAgICAgZm9yICh2YXIgaSBpbiBvbi5pdGVtcykge1xyXG4gICAgICAgICAgICBpZiAoIW9uLml0ZW1zLmhhc093blByb3BlcnR5KGkpKVxyXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjaGVja1ZEb21Ob2RlKG9uLml0ZW1zW2ldLCBpbmplY3QpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvL2p1c3QgdXBkYXRlIGl0cyBpdGVtc1xyXG4gICAgICAgIGZvciAodmFyIGkgaW4gb24uaXRlbXMpIHtcclxuICAgICAgICAgIGlmICghb24uaXRlbXMuaGFzT3duUHJvcGVydHkoaSkpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgY2hlY2tWRG9tTm9kZShvbi5pdGVtc1tpXSwgaW5qZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBFQXR0clJlc3VsdC5Ta2lwQ2hpbGRyZW47XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7dkRvbX0gb24gIFxyXG4gICAgICogQHBhcmFtIHsqfSBpbmplY3QgXHJcbiAgICAgKi9cclxuICAgICdjb21wb25lbnQnOiBmdW5jdGlvbiAob24sIGluamVjdCkge1xyXG4gICAgICB2YXIga2V5ID0gXCJjb21wb25lbnRcIjtcclxuICAgICAgdmFyIGdldHRlciA9IG9uLmdldHRlcnNba2V5XTtcclxuICAgICAgLyoqIEB0eXBlIHtCYXNlQ29tcG9uZW50fSAqL1xyXG4gICAgICB2YXIgY29tcG9uZW50ID0gZ2V0dGVyKGluamVjdCk7XHJcblxyXG4gICAgICAvL2lmIGNvbXBvbmVudCBpcyBhY3R1YWxseSBhIGNsYXNzIGFuZCBjb21wb25lbnQgdmFsdWUgaXMgbm90IHlldCBzZXQsIHRoZW4gaW5zdGFudGlhdGUgdGhlIGNvbnN0cnVjdG9yXHJcbiAgICAgIGlmICghb24udmFsdWVzW2tleV0gJiYgY29tcG9uZW50ICYmIGNvbXBvbmVudC5wcm90b3R5cGUgaW5zdGFuY2VvZiBCYXNlQ29tcG9uZW50KSB7XHJcbiAgICAgICAgY29tcG9uZW50ID0gbmV3IGNvbXBvbmVudDtcclxuICAgICAgfSBlbHNlIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50LnByb3RvdHlwZSBpbnN0YW5jZW9mIEJhc2VDb21wb25lbnQpIHtcclxuICAgICAgICAvL2lmIHNhbWUgY29tcG9uZW50IHR5cGUsIHRoZW4gZG8gbm90IGNoZWNrIGV4YWN0IG1hdGNoLlxyXG4gICAgICAgIGNvbXBvbmVudCA9IG9uLnZhbHVlc1trZXldO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob24udmFsdWVzW2tleV0gIT09IGNvbXBvbmVudCkge1xyXG4gICAgICAgIC8vY2xlYXIgYW55IHByZXZpb3VzIGNvbXBvbmVudCBlbGVtZW50c1xyXG4gICAgICAgIHJlbW92ZVZEb21JdGVtcyhvbi5pdGVtcyk7XHJcbiAgICAgICAgaWYgKG9uLnZhbHVlc1trZXldICYmIG9uLnZhbHVlc1trZXldLmJpbmRlcikge1xyXG4gICAgICAgICAgcmVtb3ZlRWxlbWVudChvbi52YWx1ZXNba2V5XS5iaW5kZXIudmRvbS5lbGVtKTtcclxuICAgICAgICAgIHJlbW92ZVZEb21JdGVtcyhvbi52YWx1ZXNba2V5XS5iaW5kZXIudmRvbS5pdGVtcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvbi52YWx1ZXNba2V5XSA9IGNvbXBvbmVudDtcclxuXHJcbiAgICAgICAgaWYgKCEoY29tcG9uZW50IGluc3RhbmNlb2YgQmFzZUNvbXBvbmVudCkpIHtcclxuICAgICAgICAgIHJldHVybiBFQXR0clJlc3VsdC5Ta2lwQ2hpbGRyZW47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdmFyIGluaiA9IE9iamVjdC5hc3NpZ24oe30sIGluamVjdCk7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudC50ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgb24udmFsdWVzW2tleV0gPSBjb21wb25lbnQ7XHJcbiAgICAgICAgICAvL2J1aWxkIHBhcmVudCB2RG9tIGluIHRoZSBwYXJlbnQgc2NvcGVcclxuICAgICAgICAgIC8qKiBAdHlwZSB7dkRvbX0gKi9cclxuICAgICAgICAgIHZhciBwX3ZEb20gPSBvbi5pdGVtQnVpbGRlcihpbmplY3QpO1xyXG4gICAgICAgICAgaWYgKHBfdkRvbSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDb21wb25lbnQgY29udGFpbmVyIFwiICsgSlNPTi5zdHJpbmdpZnkob24uZWxlbSkgKyBcIiBjYW4gbm90IGJlIGEgZnJhZ21lbnQhXCIpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbXBvbmVudC5iaW5kZXIgPSBuZXcgQmluZGVyKGNvbXBvbmVudCkuc2V0SW5qZWN0VmFycyhpbmopLmJpbmRFbGVtZW50cyhjb21wb25lbnQuZXZlbnRzLCBjb21wb25lbnQudGVtcGxhdGUpO1xyXG4gICAgICAgICAgdmFyIGNfdkRvbSA9IGNvbXBvbmVudC5iaW5kZXIudmRvbTtcclxuXHJcbiAgICAgICAgICAvL2xpbmsgY29tcG9uZW5ldCBwcm9wZXJ0aWVzIHRvIGdldHRlciB2YWx1ZXNcclxuICAgICAgICAgIE9iamVjdHMuZm9yRWFjaChwX3ZEb20uZ2V0dGVycywgKGdldHRlciwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGNfdkRvbS5nZXR0ZXJzW2tleV0gPSBnZXR0ZXI7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudFtrZXldID0gZ2V0dGVyKGluamVjdCk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB2YXIgZHluYW1pY0V2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgIC8vQ29weSBvdmVyIHNldHRlcnMgaW50byB0aGUgY29tcG9uZW5ldFxyXG4gICAgICAgICAgLy9Db3B5IG92ZXIgMldheSBiaW5kaW5nIGNhbGxiYWNrcyBpbnRvIHRoZSBjb21wb25lbmV0XHJcbiAgICAgICAgICBPYmplY3RzLmZvckVhY2gocF92RG9tLnNldHRlcnMsIChzZXR0ZXIsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICBjX3ZEb20uc2V0dGVyc1trZXldID0gc2V0dGVyO1xyXG4gICAgICAgICAgICAvL2FkZCBjaGFuZ2UgbGlzdGVuZXIgdG8gdGhlIGNvbnRleHRcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29tcG9uZW50W2tleSArICdDaGFuZ2VfMiddKSkge1xyXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29tcG9uZW50IGNhbiBub3QgaGF2ZSBtZXRob2QgJHtrZXkgKyAnQ2hhbmdlXzInfSBpdCBpcyB1c2VkIGV4Y3VzaXZlbHkgZm9yIDItd2F5IGRhdGEgYmluZGluZyB3aXRoICR7a2V5fWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGR5bmFtaWNFdmVudHMucHVzaChrZXkgKyAnQ2hhbmdlXzInKTtcclxuICAgICAgICAgICAgY29tcG9uZW50W2tleSArICdDaGFuZ2VfMiddID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBjX3ZEb20uc2V0dGVyc1trZXldKGluamVjdCwgdmFsKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvL0NvcHkgb3ZlciBjYWxsZXJzIGludG8gdGhlIGNvbXBvbmVuZXRcclxuICAgICAgICAgIE9iamVjdHMuZm9yRWFjaChwX3ZEb20uY2FsbGVycywgKGNhbGxlciwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkeW5hbWljRXZlbnRzLmluZGV4T2Yoa2V5KSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnQgJHtjb21wb25lbnQuY29uc3RydWN0b3IubmFtZX0gY2FuIG5vdCBvdmVycmlkZSAyLXdheSBldmVudCAoJHtrZXl9KSFgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjX3ZEb20uY2FsbGVyc1trZXldID0gY29tcG9uZW50W2tleV0gPSBjYWxsZXI7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvL2NvcHkgaHRtbCBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICBpZiAoIShjX3ZEb20uZWxlbSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpICYmICEoY192RG9tLmVsZW0gaW5zdGFuY2VvZiBDb21tZW50KSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgcF92RG9tLmVsZW0uYXR0cmlidXRlcy5sZW5ndGg7IGlpKyspIHtcclxuICAgICAgICAgICAgICB2YXIgYXR0ciA9IHBfdkRvbS5lbGVtLmF0dHJpYnV0ZXNbaWldO1xyXG4gICAgICAgICAgICAgIC8vb25seSBvdmVyd3JpdGUgbm9uLWV4aXN0aW5nIGNsaWxkIGF0dHJzXHJcbiAgICAgICAgICAgICAgaWYgKCFjX3ZEb20uZWxlbS5nZXRBdHRyaWJ1dGUoYXR0ci5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgY192RG9tLmVsZW0uc2V0QXR0cmlidXRlKGF0dHIubmFtZSwgYXR0ci52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNfdkRvbS5lbGVtLnNldEF0dHJpYnV0ZShhdHRyLm5hbWUsIGNfdkRvbS5lbGVtLmdldEF0dHJpYnV0ZShhdHRyLm5hbWUpICsgXCIgXCIgKyBhdHRyLnZhbHVlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vc2V0IHBsYWluQXR0cnMgYXMgcHJvcGVydGllcyBvZiBvdXIgY29tcG9uZW50IGluc3RhbmNlXHJcbiAgICAgICAgICBPYmplY3RzLmZvckVhY2gocF92RG9tLnBsYWluQXR0cnMsICh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vb25seSBjcmVhdGUgcHJvcGVydHkgaWYgdmFsdWUgaXMgbm90IG51bGw6IGF0dHJpYnV0ZSBoYXMgdGhlIHZhbHVlIHBhcnRcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgY29tcG9uZW50W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICBjb21wb25lbnQuYXR0cmlidXRlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHZhciBwX2ZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblxyXG4gICAgICAgICAgLy9tb3ZlIGhvc3QgY2hpbGRyZW4gdG8gdGVtcCBmcmFnbWVudFxyXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgRE9NKHBfZnJhZykuYXBwZW5kKHBfdkRvbS5lbGVtLmNoaWxkTm9kZXMpO1xyXG5cclxuXHJcbiAgICAgICAgICBjb21wb25lbnQucGFyZW50UGFnZSA9IHNlbGYuY29udGV4dDtcclxuICAgICAgICAgIC8vbGV0IGNvbXBvbmVudCBkZWNpZGUgd2hlcmUgdG8gcHV0IHBhcmVudCdzIGNoaWxkcmVuXHJcbiAgICAgICAgICBjb21wb25lbnQudGVtcGxhdGVGcmFnbWVudCA9IHBfZnJhZztcclxuICAgICAgICAgIGNvbXBvbmVudC50ZW1wbGF0ZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY2hlY2tWRG9tTm9kZShvbiwgaW5qZWN0KTtcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgb24uaXRlbXMgPSBbcF92RG9tXTtcclxuXHJcbiAgICAgICAgICAvL25vIHJlYWwgbmVlZCB0byBjYWxsIF9pbml0IFxyXG4gICAgICAgICAgLy90cnlDYWxsKGNvbXBvbmVudCxjb21wb25lbnQuX2luaXQpO1x0XHJcblxyXG4gICAgICAgICAgLy9pbnNlcnQgY29tcG9uZW50IHZEb20gd2l0aCBuZXcgY2hpbGRyZW4gYWZ0ZXIgdGhlIFtjb21wb25lbnRdIHZEb20gZWxlbWVudFxyXG4gICAgICAgICAgaW5zZXJ0VkRvbUVsZW1lbnRBZnRlcihjX3ZEb20sIG9uLmVsZW0pO1xyXG5cclxuICAgICAgICAgIC8vY2FsbCBvbkluaXQgbWV0aG9kIGluIHRoZSBuZXh0IGZyYW1lXHJcbiAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgIGlmICghKGNfdkRvbS5lbGVtIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkpIHtcclxuICAgICAgICAgICAgdHJ5Q2FsbChjb21wb25lbnQsIGNvbXBvbmVudC5fb25Jbml0LCBjX3ZEb20uZWxlbSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vY29tcG9uZW50IGRvZXMgbm90IGhhdmUgb3duIHRlbXBsYXRlLiBSZW5kZXIgaG9zdCB0ZW1wbGF0ZVxyXG4gICAgICAgICAgcF92RG9tID0gb24uaXRlbUJ1aWxkZXIoaW5qZWN0KTtcclxuICAgICAgICAgIG9uLml0ZW1zWzBdID0gcF92RG9tO1xyXG5cclxuICAgICAgICAgIC8vaW5zZXJ0IHBhcmVudCB2RG9tIHdpdGggbmV3IGNoaWxkcmVuIGFmdGVyIHRoZSBbY29tcG9uZW50XSB2RG9tIGVsZW1lbnRcclxuICAgICAgICAgIGluc2VydEFmdGVyKHBfdkRvbS5lbGVtLCBvbi5lbGVtKTtcclxuXHJcbiAgICAgICAgICAvL2NhbGwgb25Jbml0IG1ldGhvZCBpbiB0aGUgbmV4dCBmcmFtZVxyXG4gICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICB0cnlDYWxsKGNvbXBvbmVudCwgY29tcG9uZW50Ll9vbkluaXQsIHBfdkRvbS5lbGVtKTtcclxuICAgICAgICAgIC8vfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vcGFyZW50IHZEb20gaXRlbXMgc3RpbGwgYmVsb25nIHRvIHRoZSBkaXJlY3RpdmUgdkRvbSBub2RlXHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vc2FtZSBjb21wb25lbnQuIEp1c3QgdXBkYXRlIG93biBwYXJlbnQgZWxlbSB2RG9tIGl0ZW1zXHJcbiAgICAgICAgLy9jb21wb25lbnQgaXRlbXMgZG8gbm90IGdldCB1cGRhdGVkIGJ5IHRoaXMhXHJcbiAgICAgICAgZm9yICh2YXIgaSBpbiBvbi5pdGVtcykge1xyXG4gICAgICAgICAgaWYgKCFvbi5pdGVtcy5oYXNPd25Qcm9wZXJ0eShpKSlcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICBjaGVja1ZEb21Ob2RlKG9uLml0ZW1zW2ldLCBpbmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWNvbXBvbmVudC5jb250YWluZXIpIHtcclxuICAgICAgICAgIHRyeUNhbGwoY29tcG9uZW50LCBjb21wb25lbnQuX29uSW5pdCwgb24uZWxlbS5wYXJlbnRFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQuYmluZGVyKSB7XHJcbiAgICAgICAgICB0cnlDYWxsKGNvbXBvbmVudCwgY29tcG9uZW50LnVwZGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gRUF0dHJSZXN1bHQuU2tpcENoaWxkcmVuO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGFwcGx5Q2FsbEJhY2soZWxlbSwgY29udGV4dCwgZXZOYW1lLCBjYWxsYmFjaywgY2FuY2VsVUlVcGRhdGUpIHtcclxuICAgIERPTShlbGVtKS5hZGRFdmVudExpc3RlbmVyKGV2TmFtZSwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgIHVwZGF0ZUJvdW5kQ29udGV4dFByb3BlcnR5KGV2ZW50LnRhcmdldCwgY2FuY2VsVUlVcGRhdGUpOyAvL3NraXAgZm9ybWF0dGluZyBmb3IgaW5wdXQgZXZlbnRcclxuICAgICAgaWYgKGNhbGxiYWNrICYmIHRyeUNhbGwoY29udGV4dCwgY2FsbGJhY2ssIGV2ZW50KSAmJiBldmVudC50YXJnZXRbJ3BhcmVudE5vZGUnXSlcclxuICAgICAgICByZXBhaW50KGV2ZW50LnRhcmdldFsncGFyZW50Tm9kZSddKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXBwbHlDYWxsYmFja3MoZWxlbSwgY29udGV4dCwgY2FsbGJhY2tzKSB7XHJcbiAgICBmb3IgKHZhciBrIGluIGNhbGxiYWNrcykge1xyXG4gICAgICAvL3NraXAgaWYgY3VzdG9tIGNhbGxiYWNrIGlzIGVtcHR5IG9yIGlucHV0IG9yIGNoYW5nZVxyXG4gICAgICBpZiAoZW1wdHkoY2FsbGJhY2tzW2tdKSB8fCBrID09ICdjaGFuZ2UnIHx8IGsgPT0gJ2lucHV0JylcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgYXBwbHlDYWxsQmFjayhlbGVtLCBjb250ZXh0LCBrLCBjYWxsYmFja3Nba10pO1xyXG4gICAgfVxyXG4gICAgLy9jaGFuZ2Ugb3IgaW5wdXQgYXJlIGFkZGVkIHNlcGFyYXRlbHkgaWYgZWxlbWVudCBpcyBzZXR0aW5nXHJcbiAgICBpZiAoaXNFbGVtZW50U2V0dGluZyhlbGVtKSkge1xyXG4gICAgICBpZiAoaXNFbGVtZW50U2V0dGluZ09uSW5wdXQoZWxlbSkpIHtcclxuICAgICAgICBhcHBseUNhbGxCYWNrKGVsZW0sIGNvbnRleHQsICdpbnB1dCcsIGNhbGxiYWNrc1snaW5wdXQnXSwgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgYXBwbHlDYWxsQmFjayhlbGVtLCBjb250ZXh0LCAnY2hhbmdlJywgY2FsbGJhY2tzWydjaGFuZ2UnXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVFeGVjdXRlRWxlbUF0dHJHZXR0ZXIoZWxlbSwgYXR0ck5hbWUsIGF0dHJWYWx1ZSkge1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHZhciBpbmogPSBmaW5kRWxlbUluamVjdChlbGVtKTtcclxuICAgICAgaWYgKGVtcHR5KGVsZW0uVkRPTS5nZXR0ZXJzW2F0dHJOYW1lXSkpXHJcbiAgICAgICAgZWxlbS5WRE9NLmdldHRlcnNbYXR0ck5hbWVdID0gY3JlYXRlR2V0dGVyKGF0dHJWYWx1ZSwgaW5qKTtcclxuICAgICAgdmFyIHJlc3VsdCA9IGVsZW0uVkRPTS5nZXR0ZXJzW2F0dHJOYW1lXShzZWxmLCBpbmopO1xyXG4gICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlQm91bmRFbGVtZW50KGVsZW0sIHYpIHtcclxuICAgIHZhciBmb3JtYXQgPSBlbGVtLmdldEF0dHJpYnV0ZSA/IGVsZW0uZ2V0QXR0cmlidXRlKCdmb3JtYXQnKSA6IG51bGw7XHJcbiAgICBpZiAoZm9ybWF0ICE9PSBudWxsKSB7XHJcbiAgICAgIHZhciBmb3JtYXRzID0gZm9ybWF0LnNwbGl0KFwiOlwiKTtcclxuICAgICAgaWYgKGZvcm1hdHMubGVuZ3RoID4gMCAmJiAoZm9ybWF0c1swXSA9PT0gXCJudW1iZXJcIiB8fCBmb3JtYXRzWzBdID09PSBcImxvY2FsZW51bWJlclwiKSkge1xyXG4gICAgICAgIGlmICh2ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICB2ID0gdiAqIDE7XHJcbiAgICAgICAgICBpZiAoaXNOYU4odikpIHYgPSAwO1xyXG4gICAgICAgICAgaWYgKGZvcm1hdHMubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgdmFyIGxuID0gIWlzTmFOKGZvcm1hdHNbMV0pID8gZm9ybWF0c1sxXSA6IGNyZWF0ZUV4ZWN1dGVFbGVtQXR0ckdldHRlcihlbGVtLCAnZm9ybWF0JywgZm9ybWF0c1sxXSk7XHJcblxyXG4gICAgICAgICAgICB2ID0gcm91bmQodiwgcGFyc2VJbnQobG4pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChmb3JtYXRzWzBdID09PSBcImxvY2FsZW51bWJlclwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKCd0eXBlJykgIT0gJ251bWJlcicgJiYgTnVtYmVyKHYpLnRvTG9jYWxlU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHYgPSBOdW1iZXIodikudG9Mb2NhbGVTdHJpbmcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGZvcm1hdHMubGVuZ3RoID4gMCAmJiBmb3JtYXRzWzBdID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgIGlmIChmb3JtYXRzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgdmFyIHRpdGxlcyA9IGZvcm1hdHNbMV0uc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgdiA9IHRpdGxlc1sodiA9PT0gdHJ1ZSA/IDAgOiAxKV07XHJcbiAgICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIlZhbHVlIG9mIGJpbmQgaXMgbm90IHBhcnQgb2YgZm9ybWF0J3MgYm9vbGVhbiBvcHRpb25zXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvL2lmICh2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gXCJudWxsXCIgJiYgdiAhPT0gbnVsbCApe1xyXG4gICAgICBpZiAoZm9ybWF0cy5sZW5ndGggPiAwICYmIGZvcm1hdHNbMF0gPT09IFwiZGF0ZVRpbWVcIikge1xyXG4gICAgICAgIHYgPSBEYXRlVGltZS50b0h1bWFuRGF0ZVRpbWUodik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGZvcm1hdHMubGVuZ3RoID4gMCAmJiBmb3JtYXRzWzBdID09PSBcImRhdGVcIikge1xyXG4gICAgICAgIHYgPSBEYXRlVGltZS50b0h1bWFuRGF0ZSh2KTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZm9ybWF0cy5sZW5ndGggPiAwICYmIGZvcm1hdHNbMF0gPT09IFwidGltZVwiKSB7XHJcbiAgICAgICAgdiA9IERhdGVUaW1lLnRvSHVtYW5UaW1lKHYpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vfVxyXG4gICAgfVxyXG4gICAgc3dpdGNoIChlbGVtLnRhZ05hbWUpIHtcclxuICAgICAgY2FzZSBcIlNFTEVDVFwiOlxyXG4gICAgICAgIC8vRE9NKGVsZW0pLmZpbmQoXCJvcHRpb25cIikuZm9yRWFjaCgoZSk9PntlLnNlbGVjdGVkID0gZmFsc2V9KTtcclxuICAgICAgICAvL3NldFRpbWVvdXQoKCk9PntcclxuICAgICAgICAvKiogQHR5cGUge0hUTUxPcHRpb25FbGVtZW50fSAqL1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBsZXQgZmlyc3RPcHRpb24gPSBET00oZWxlbSkuZmluZChcIm9wdGlvblwiKVswXTtcclxuICAgICAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIC8qKiBAdHlwZSB7SFRNTE9wdGlvbkVsZW1lbnR9ICovXHJcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICBmaXJzdE9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICB2YXIgZlZhbCA9IGZpcnN0T3B0aW9uLnZhbHVlO1xyXG4gICAgICAgICAgaWYgKGZWYWwgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgZWxlbS52YWx1ZSA9IGZWYWw7XHJcbiAgICAgICAgICAgIHVwZGF0ZUJvdW5kQ29udGV4dFByb3BlcnR5KGVsZW0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvKiogQHR5cGUge0hUTUxPcHRpb25FbGVtZW50fSAqL1xyXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgbGV0IHNlbCA9IERPTShlbGVtKS5maW5kKFwib3B0aW9uW3ZhbHVlPSdcIiArIHYgKyBcIiddXCIpWzBdO1xyXG4gICAgICAgICAgaWYgKHNlbCkge1xyXG4gICAgICAgICAgICBzZWwuc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBlbGVtLnZhbHVlID0gdjsgLy90aGlzIGlzIGltcG9ydGFudFxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmlyc3RPcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAvL29wZGF0ZSBkYXRhIHByb3BlcnR5IHRvIGtlZXAgaXQgaW4gc3luYyB3aXRoIGVsZW1lbnQ7IFxyXG4gICAgICAgICAgICB1cGRhdGVCb3VuZENvbnRleHRQcm9wZXJ0eShlbGVtKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy99KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBcIk9QVElPTlwiOlxyXG4gICAgICBjYXNlIFwiSU5QVVRcIjpcclxuICAgICAgICBzd2l0Y2ggKGVsZW0udHlwZSkge1xyXG4gICAgICAgICAgY2FzZSBcInJhZGlvXCI6XHJcbiAgICAgICAgICAgIHZhciBjdiA9IGVsZW0udmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChpc0Jvb2xlYW4odikpIHtcclxuICAgICAgICAgICAgICBjdiA9IGVsZW0udmFsdWUgPT0gXCJ0cnVlXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxlbS5jaGVja2VkID0gKHYgPT0gY3YgfHwgKHYgPT09IG51bGwgJiYgZWxlbS52YWx1ZSA9PSBcIlwiKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XHJcbiAgICAgICAgICAgIGVsZW0uY2hlY2tlZCA9IHY7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBcImZpbGVcIjpcclxuICAgICAgICAgICAgLy9maWxlIHZhbHVlIGNhbiBub3QgYmUgc2V0IHByb2dyYW1tYXRpY2FsbHkhXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgZWxlbS52YWx1ZSA9IHRvSW5wdXRWYWx1ZSh2KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiSU1HXCI6XHJcbiAgICAgICAgaWYgKGVsZW0uc3JjICE9PSB2KVxyXG4gICAgICAgICAgZWxlbS5zcmMgPSB0b0lucHV0VmFsdWUodik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgdW5kZWZpbmVkOiAvL2ZvciB0ZXh0IG5vZGVzXHJcbiAgICAgICAgaWYgKGVsZW0ubm9kZVZhbHVlICE9PSB2KVxyXG4gICAgICAgICAgZWxlbS5ub2RlVmFsdWUgPSB0b0lucHV0VmFsdWUodik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaWYgKGVsZW0uaW5uZXJUZXh0ICE9PSB2KVxyXG4gICAgICAgICAgZWxlbS5pbm5lclRleHQgPSB0b0lucHV0VmFsdWUodik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0b0lucHV0VmFsdWUodmFsKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbCA9PSAndW5kZWZpbmVkJyB8fCB2YWwgPT09IG51bGwpXHJcbiAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgcmV0dXJuIHZhbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGlzRWxlbWVudFNldHRpbmcoZWxlbSkge1xyXG4gICAgc3dpdGNoIChlbGVtLnRhZ05hbWUpIHtcclxuICAgICAgY2FzZSBcIlNFTEVDVFwiOlxyXG4gICAgICBjYXNlIFwiT1BUSU9OXCI6XHJcbiAgICAgIGNhc2UgXCJURVhUQVJFQVwiOlxyXG4gICAgICBjYXNlIFwiSU5QVVRcIjpcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpc0VsZW1lbnRTZXR0aW5nT25JbnB1dChlbGVtKSB7XHJcbiAgICBzd2l0Y2ggKGVsZW0udGFnTmFtZSArIFwiOlwiICsgZWxlbS50eXBlKSB7XHJcbiAgICAgIGNhc2UgXCJJTlBVVDp0ZXh0XCI6XHJcbiAgICAgIGNhc2UgXCJJTlBVVDpwYXNzd29yZFwiOlxyXG4gICAgICBjYXNlIFwiSU5QVVQ6ZW1haWxcIjpcclxuICAgICAgY2FzZSBcIklOUFVUOm51bWJlclwiOlxyXG4gICAgICBjYXNlIFwiSU5QVVQ6c2VhcmNoXCI6XHJcbiAgICAgIGNhc2UgXCJJTlBVVDp3ZWVrXCI6XHJcbiAgICAgIGNhc2UgXCJJTlBVVDp1cmxcIjpcclxuICAgICAgY2FzZSBcIklOUFVUOnRpbWVcIjpcclxuICAgICAgY2FzZSBcIklOUFVUOnRlbFwiOlxyXG4gICAgICBjYXNlIFwiSU5QVVQ6cmFuZ2VcIjpcclxuICAgICAgY2FzZSBcIklOUFVUOm1vbnRoXCI6XHJcbiAgICAgIGNhc2UgXCJJTlBVVDpkYXRldGltZVwiOlxyXG4gICAgICBjYXNlIFwiSU5QVVQ6ZGF0ZVwiOlxyXG4gICAgICBjYXNlIFwiSU5QVVQ6Y29sb3JcIjpcclxuICAgICAgY2FzZSBcIklOUFVUOmZpbGVcIjpcclxuICAgICAgY2FzZSBcIlRFWFRBUkVBXCI6XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlVG9FbGVtKGVsZW0sIHZhbHVlKSB7XHJcbiAgICB2YXIgZm9ybWF0ID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2Zvcm1hdCcpO1xyXG5cclxuICAgIHZhciB2ID0gdmFsdWU7XHJcbiAgICBpZiAoIWVtcHR5KGZvcm1hdCkpIHtcclxuICAgICAgdmFyIGZvcm1hdHMgPSBmb3JtYXQuc3BsaXQoXCI6XCIpO1xyXG4gICAgICBpZiAoZm9ybWF0cy5sZW5ndGggPiAwICYmIChmb3JtYXRzWzBdID09PSBcIm51bWJlclwiIHx8IGZvcm1hdHNbMF0gPT09IFwibG9jYWxlbnVtYmVyXCIpKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKVxyXG4gICAgICAgICAgdiA9IG51bGw7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBpZiAoZm9ybWF0c1swXSA9PT0gXCJsb2NhbGVudW1iZXJcIikge1xyXG4gICAgICAgICAgICB2ID0gbnVtYmVyRnJvbUxvY2FsZVN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2ID0gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvL3YgPSB2YWx1ZSAqIDE7XHJcbiAgICAgICAgICBpZiAoaXNOYU4odikpIHYgPSAwO1xyXG4gICAgICAgICAgaWYgKGZvcm1hdHMubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgdmFyIGxuID0gIWlzTmFOKGZvcm1hdHNbMV0pID8gZm9ybWF0c1sxXSA6IGNyZWF0ZUV4ZWN1dGVFbGVtQXR0ckdldHRlcihlbGVtLCAnZm9ybWF0JywgZm9ybWF0c1sxXSk7XHJcblxyXG4gICAgICAgICAgICB2ID0gcm91bmQodiwgcGFyc2VJbnQobG4pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGZvcm1hdHMubGVuZ3RoID4gMCAmJiBmb3JtYXRzWzBdID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgIGlmIChmb3JtYXRzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgdmFyIHRpdGxlcyA9IGZvcm1hdHNbMV0uc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgaWYgKHRpdGxlcy5sZW5ndGggPj0gMSlcclxuICAgICAgICAgICAgdiA9IHZhbHVlID09PSB0aXRsZXNbMF07XHJcbiAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHYgPSBwYXJzZUludCh2YWx1ZSkgIT0gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKHZhbHVlID09IFwidHJ1ZVwiKVxyXG4gICAgICAgICAgICB2ID0gdHJ1ZTtcclxuICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09IFwiZmFsc2VcIilcclxuICAgICAgICAgICAgdiA9IGZhbHNlO1xyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB2ID0gcGFyc2VJbnQodmFsdWUpICE9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChmb3JtYXRzLmxlbmd0aCA+IDAgJiYgZm9ybWF0c1swXSA9PT0gXCJkYXRlVGltZVwiKSB7XHJcbiAgICAgICAgaWYgKGZvcm1hdHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIHYgPSBEYXRlVGltZS5mcm9tSHVtYW5EYXRlVGltZSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChmb3JtYXRzLmxlbmd0aCA+IDAgJiYgZm9ybWF0c1swXSA9PSBcImRhdGVcIikge1xyXG4gICAgICAgIGlmIChmb3JtYXRzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICB2ID0gRGF0ZVRpbWUuZnJvbUh1bWFuRGF0ZSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChmb3JtYXRzLmxlbmd0aCA+IDAgJiYgZm9ybWF0c1swXSA9PSBcInRpbWVcIikge1xyXG4gICAgICAgIGlmIChmb3JtYXRzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICB2ID0gRGF0ZVRpbWUuZnJvbUh1bWFuVGltZSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2ID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHVwZGF0ZUJvdW5kQ29udGV4dFByb3BlcnR5KGVsZW0sIHNraXBVcGRhdGUpIHtcclxuXHJcblxyXG4gICAgaWYgKCFpc0VsZW1lbnRTZXR0aW5nKGVsZW0pIHx8IGVtcHR5KGVsZW1bJ1ZET00nXSkgfHwgZW1wdHkoZWxlbVsnVkRPTSddLnNldHRlcnMpIHx8IGVtcHR5KGVsZW1bJ1ZET00nXS5zZXR0ZXJzLmJpbmQpKVxyXG4gICAgICByZXR1cm47XHJcbiAgICB2YXIgdjtcclxuXHJcbiAgICB2YXIgZm9ybWF0ID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2Zvcm1hdCcpO1xyXG4gICAgdmFyIHR5cGUgPSBlbGVtLmdldEF0dHJpYnV0ZSgndHlwZScpO1xyXG5cclxuICAgIHN3aXRjaCAoZWxlbS50YWdOYW1lKSB7XHJcbiAgICAgIGNhc2UgXCJTRUxFQ1RcIjpcclxuICAgICAgICBsZXQgc2VsID0gRE9NKGVsZW0pLmZpbmQoXCJvcHRpb246Y2hlY2tlZFwiKVswXTtcclxuICAgICAgICBpZiAoc2VsKSB7XHJcbiAgICAgICAgICB2ID0gZm9ybWF0VmFsdWVUb0VsZW0oZWxlbSwgc2VsLmdldEF0dHJpYnV0ZSgndmFsdWUnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiT1BUSU9OXCI6XHJcbiAgICAgIGNhc2UgXCJJTlBVVFwiOlxyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxyXG4gICAgICAgICAgICB2ID0gZWxlbS5jaGVja2VkO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ2ZpbGUnOlxyXG4gICAgICAgICAgICB2ID0gZWxlbS52YWx1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB2ID0gZm9ybWF0VmFsdWVUb0VsZW0oZWxlbSwgZWxlbS52YWx1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB2ID0gZWxlbS52YWx1ZTtcclxuICAgIH1cclxuICAgIHZhciBpbmogPSBPYmplY3QuYXNzaWduKHt9LCBzZWxmLmluamVjdFZhcnMsIGZpbmRFbGVtSW5qZWN0KGVsZW0pKTtcclxuXHJcbiAgICB2YXIgZG9tRWxWYWwgPSBlbGVtWydWRE9NJ10uZ2V0dGVycy5iaW5kKGluaik7XHJcbiAgICB2YXIgdkRvbWRvbUVsVmFsID0gZWxlbVsnVkRPTSddLnZhbHVlcy5iaW5kO1xyXG4gICAgaWYgKGRvbUVsVmFsICE9PSB2IHx8IHYgIT09IHZEb21kb21FbFZhbCkge1xyXG5cclxuICAgICAgaWYgKHNraXBVcGRhdGUgJiYgc2VsZi5jb250ZXh0W2lzU2tpcFVwZGF0ZV0gPT09IGZhbHNlKSB7XHJcbiAgICAgICAgc2VsZi5jb250ZXh0W2lzU2tpcFVwZGF0ZV0gPSB0cnVlO1xyXG4gICAgICAgIGVsZW1bJ1ZET00nXS5zZXR0ZXJzLmJpbmQoaW5qLCB2KTtcclxuICAgICAgICBzZWxmLmNvbnRleHRbaXNTa2lwVXBkYXRlXSA9IGZhbHNlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vYmVjYXVzZSB1cG9uIGNoYW5nZSB0aGUgdmFsdWUgaXMgbGlrZWx5IHRvIGJlIHRoZSBzYW1lLCBidXQgd2Ugc3RpbGwgd2FudCB0byB0cmlnZ2VyIHRoZSB1cGRhdGUsIHNldCB2IHRvIGlzU2tpcFVwZGF0ZSAodGhhdCB3aWxsIG5vdCB0cmlnZ2VyIGFueXRoaW5nKSBmaXJzdCBhbmQgdGhlbiByZS1zZXQgaXQgYmFja1xyXG4gICAgICAgIGVsZW1bJ1ZET00nXS5zZXR0ZXJzLmJpbmQoaW5qLCBpc1NraXBVcGRhdGUpO1xyXG4gICAgICAgIC8vdGhlbiBpbW1lZGlhdGVseSBzZXQgdGhlIHByb3BlciB2YWx1ZVxyXG4gICAgICAgIGVsZW1bJ1ZET00nXS5zZXR0ZXJzLmJpbmQoaW5qLCB2KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0Rm9yZWFjaEF0dHJQYXJ0cyhhdHRyVmFsdWUpIHtcclxuICAgIGlmIChlbXB0eShhdHRyVmFsdWUpKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIC8qKiBAdHlwZSB7c3RyaW5nW119Ki9cclxuICAgIHZhciBwYXJ0cyA9IGF0dHJWYWx1ZS5zcGxpdCgvIChpbnxhc3x3aGVyZSkgL2cpO1xyXG4gICAgdmFyIHAgPSB7XHJcbiAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgIGluZGV4OiAnaW5kZXgnLFxyXG4gICAgICBpdGVtOiAnaXRlbScsXHJcbiAgICAgIHdoZXJlOiBudWxsXHJcbiAgICB9O1xyXG4gICAgdmFyIHBfbmFtZSA9ICdkYXRhJztcclxuICAgIE9iamVjdHMuZm9yRWFjaChwYXJ0cywgKHBhcnQpID0+IHtcclxuICAgICAgc3dpdGNoIChwYXJ0KSB7XHJcbiAgICAgICAgY2FzZSAnaW4nOlxyXG4gICAgICAgICAgcC5pbmRleCA9IHAuZGF0YTsgLy9maXJzdCBpdGVtIG11c3QgaGF2ZSBiZWVuIGluZGV4XHJcbiAgICAgICAgICBwX25hbWUgPSAnZGF0YSc7IC8vc2V0IGRhdGEgbmV4dFxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYXMnOlxyXG4gICAgICAgICAgcF9uYW1lID0gJ2l0ZW0nOyAvL3NldCBpdGVtIG5leHRcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3doZXJlJzpcclxuICAgICAgICAgIHBfbmFtZSA9ICd3aGVyZSc7IC8vc2V0IHdoZXJlIG5leHRcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBwW3BfbmFtZV0gPSBwYXJ0O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBcclxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbigqKX0gY2FsbGJhY2tcclxuICAgKi9cclxuICBmdW5jdGlvbiBjcmVhdGVHZXR0ZXIoZXhwcmVzc2lvbiwgaW5qZWN0KSB7XHJcbiAgICB2YXIgaW5qID0gY3JlYXRlSW5qZWN0VmFyVGV4dChpbmplY3QpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgdmFyIGNhc2hlID0gaW5qICsgZXhwcmVzc2lvbjtcclxuICAgICAgaWYgKGdldHRlckNhc2hlLmhhc093blByb3BlcnR5KGNhc2hlKSlcclxuICAgICAgICByZXR1cm4gZ2V0dGVyQ2FzaGVbY2FzaGVdO1xyXG5cclxuICAgICAgdmFyIGdldHRlciA9IG5ldyBGdW5jdGlvbignaW5qZWN0JyxcclxuICAgICAgICBgJHtpbmp9OyByZXR1cm4gJHtleHByZXNzaW9ufTtgXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiBnZXR0ZXJDYXNoZVtjYXNoZV0gPSBnZXR0ZXIuYmluZChzZWxmLmNvbnRleHQpO1xyXG4gICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBjYWxsZXIgdGhhdCBkb2VzIG5vdCByZXR1cm4gYW55IHZhbHVlLiBDYW4gZXhlY3V0ZSBhbnkgbnVtYmVyIG9mIG1ldGhvZHMuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gXHJcbiAgICogQHJldHVybiB7ZnVuY3Rpb24oKil9IGNhbGxiYWNrXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gY3JlYXRlQ2FsbGVyKGV4cHJlc3Npb24sIGluamVjdCkge1xyXG4gICAgdmFyIGluaiA9IGNyZWF0ZUluamVjdFZhclRleHQoaW5qZWN0KTtcclxuICAgIHRyeSB7XHJcbiAgICAgIHZhciBjYXNoZSA9IGluaiArIGV4cHJlc3Npb247XHJcbiAgICAgIGlmIChnZXR0ZXJDYXNoZS5oYXNPd25Qcm9wZXJ0eShjYXNoZSkpXHJcbiAgICAgICAgcmV0dXJuIGdldHRlckNhc2hlW2Nhc2hlXTtcclxuXHJcbiAgICAgIHZhciBnZXR0ZXIgPSBuZXcgRnVuY3Rpb24oJ2luamVjdCcsXHJcbiAgICAgICAgYCR7aW5qfTsgJHtleHByZXNzaW9ufTtgXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiBnZXR0ZXIuYmluZChzZWxmLmNvbnRleHQpO1xyXG4gICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RcclxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbigqLCopfSBjYWxsYmFja1xyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNyZWF0ZVNldHRlcihleHByZXNzaW9uLCBpbmplY3QpIHtcclxuICAgIHZhciBpbmogPSBjcmVhdGVJbmplY3RWYXJUZXh0KGluamVjdCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICB2YXIgc2V0dGVyID0gbmV3IEZ1bmN0aW9uKCdpbmplY3QnLCAndmFsdWUnLFxyXG4gICAgICAgIGAke2luan07IHJldHVybiAke2V4cHJlc3Npb259ID0gdmFsdWU7YFxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gc2V0dGVyLmJpbmQoc2VsZi5jb250ZXh0KTtcclxuICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlSW5qZWN0VmFyVGV4dCh2YXJzKSB7XHJcbiAgICB2YXIgaW5qID0gXCJcIjtcclxuICAgIGlmICghZW1wdHkodmFycykpIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiB2YXJzKSB7XHJcbiAgICAgICAgaWYgKCF2YXJzLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcclxuICAgICAgICBpbmogKz0gXCJ2YXIgXCIgKyBpICsgXCI9IGluamVjdFsnXCIgKyBpICsgXCInXTtcXG5cIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluajtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlcGFpbnQoZWxlbWVudCkge1xyXG4gICAgLy8gaW4gcGxhaW4ganNcclxuICAgIHZhciBvbGQgPSBlbGVtZW50LnN0eWxlLmRpc3BsYXk7XHJcbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBvbGQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByb3VuZChudW0sIGRlY2ltYWxzKSB7XHJcbiAgICBkZWNpbWFscyA9IGRlY2ltYWxzIHx8IDA7XHJcbiAgICB2YXIgc2NhbGUgPSBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQobnVtICogc2NhbGUpIC8gc2NhbGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cnlHZXRDb21wb25lbmV0KHRhZ05hbWUpIHtcclxuICAgIHJldHVybiB3aW5kb3dbJ0xFRVRfUkVHSVNURVInXSA/IHdpbmRvd1snTEVFVF9SRUdJU1RFUiddW3RhZ05hbWVdIDogbnVsbDtcclxuICB9XHJcbn07XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZURPTUVsZW1lbnQoZWxlbSkge1xyXG4gIGlmIChlbGVtLnBhcmVudE5vZGUpIHtcclxuICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcclxuICB9XHJcbn1cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3ZEb219IGVuIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVZET01FbGVtZW50KGVuKSB7XHJcbiAgaWYgKGVuLml0ZW1zICYmIGVuLml0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgIGZvciAodmFyIGkgaW4gZW4uaXRlbXMpIHtcclxuICAgICAgaWYgKCFlbi5pdGVtcy5oYXNPd25Qcm9wZXJ0eShpKSkgY29udGludWU7XHJcbiAgICAgIHJlbW92ZVZET01FbGVtZW50KGVuLml0ZW1zW2ldKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSBlbi5pdGVtcztcclxuICB9XHJcblxyXG4gIGlmIChlbi5lbGVtKSB7XHJcbiAgICBkZWxldGUgZW4uZWxlbS5WRE9NO1xyXG4gICAgcmVtb3ZlRE9NRWxlbWVudChlbi5lbGVtKTtcclxuICAgIGRlbGV0ZSBlbi5lbGVtO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlIGVuLmZyYWdtZW50O1xyXG4gIGRlbGV0ZSBlbi5nZXR0ZXJzO1xyXG4gIGRlbGV0ZSBlbi5zZXR0ZXJzO1xyXG4gIGRlbGV0ZSBlbi5jYWxsZXJzO1xyXG4gIGRlbGV0ZSBlbi5pdGVtQnVpbGRlcjtcclxuXHJcbiAgZGVsZXRlIGVuLnZhbHVlcztcclxuICBkZWxldGUgZW4udmFsdWVzRDtcclxufSIsImltcG9ydCB7IGlzT2JqZWN0LCBpc0FycmF5LCBpc0Z1bmN0aW9uLCBpc1N5bWJvbCwgaXNEYXRlIH0gZnJvbSBcInV0aWxcIjtcclxuXHJcbmltcG9ydCB7IFdhdGNoZXIsIGlzU2tpcFVwZGF0ZSB9IGZyb20gJy4vV2F0Y2hlci5qcyc7XHJcblxyXG5jb25zdCBwcm9wQ2hhbmdlSGFubGVyID0gU3ltYm9sKCdwcm9wQ2hhbmdlSGFubGVyJyk7XHJcbmNvbnN0IG9iamVjdENoYW5nZUhhbmxlciA9IFN5bWJvbCgnb2JqZWN0Q2hhbmdlSGFubGVyJyk7XHJcbmV4cG9ydCBjbGFzcyBDaGFuZ2VXYXRjaGVyIHtcclxuICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgdGhpc1tXYXRjaGVyLnNraXBdID0gdHJ1ZTtcclxuXHJcblxyXG4gICAgLy92YXIgdXBkYXRlUmVxdWVzdGVkID0gZmFsc2U7XHJcbiAgICB0aGlzW3Byb3BDaGFuZ2VIYW5sZXJdID0gKHRhcmdldCxwcm9wZXJ0eSx2YWx1ZSk9PntcclxuICAgICAgaWYgKHRhcmdldD09PXRoaXMpe1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbcHJvcGVydHkrXCJDaGFuZ2VfMlwiXSkpIHtcclxuICAgICAgICAgIHRoaXNbcHJvcGVydHkrXCJDaGFuZ2VfMlwiXSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbcHJvcGVydHkrXCJDaGFuZ2VcIl0pKSB7XHJcbiAgICAgICAgICB0aGlzW3Byb3BlcnR5K1wiQ2hhbmdlXCJdKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpc1tvYmplY3RDaGFuZ2VIYW5sZXJdID0gKCk9PntcclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG9iamVjdCA9IFdhdGNoZXIub24odGhpcywgdGhpc1twcm9wQ2hhbmdlSGFubGVyXSx0aGlzW29iamVjdENoYW5nZUhhbmxlcl0sIFsnaW5qZWN0VmFycyddKTtcclxuXHJcbiAgICAvL29iamVjdCA9IFdhdGNoZXIub25PYmplY3RDaGFuZ2Uob2JqZWN0LCB0aGlzW29iamVjdENoYW5nZUhhbmxlcl0sIFsnaW5qZWN0VmFycyddKTtcclxuXHJcbiAgICByZXR1cm4gb2JqZWN0O1xyXG4gIH1cclxuXHJcbiAgc3RhcnRXYXRjaCgpe1xyXG4gICAgdGhpc1tXYXRjaGVyLnNraXBdID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBzdG9wV2F0Y2goKXtcclxuICAgIFdhdGNoZXIub2ZmKHRoaXMsIHRoaXNbcHJvcENoYW5nZUhhbmxlcl0pO1xyXG4gICAgV2F0Y2hlci5vZmYodGhpcywgdGhpc1tvYmplY3RDaGFuZ2VIYW5sZXJdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG5cdCAqIENhbGxlZCB3aGVuIHRoZSBiaW5kZXIgY2FuIGZpbmFsbHkgYmUgdXBkYXRlZFxyXG5cdCAqIENoaWxkcmVuIG11c3Qgb3ZlcnJpZGUgdGhpcyBtZXRob2RcclxuXHQgKiAqKipPdmVycmlkZSoqKiBcclxuXHQgKiBAYWJzdHJhY3RcclxuXHQgKi9cclxuICB1cGRhdGUoKXtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgT3ZlcnJpZGVcIik7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4vaGVscGVycyc7XHJcblxyXG5cclxuY29uc3QgaWRlbnRpdHlTeW1ib2wgPSBTeW1ib2woJ2lkZW50aXR5U3ltYm9sJyk7XHJcbi8vV2luZG93fEhUTUxFbGVtZW50fERvY3VtZW50RnJhZ21lbnR8RWxlbWVudHxzdHJpbmdcclxuLyoqXHJcbiAqIGpRdWVyeSByZXBsYWNlbWVudFxyXG4gKiBAcGFyYW0ge2FueX0gZWxlbU9yUXVlcnkgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRE9NKGVsZW1PclF1ZXJ5KSB7XHJcblxyXG4gIC8qKlxyXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBjaGlsZHJlbiBcclxuXHQgKiBAcmV0dXJuIHtvYmplY3RbXX1cclxuXHQgKi9cclxuICBmdW5jdGlvbiBnZXRBcnJheShjaGlsZHJlbikge1xyXG4gICAgaWYgKGlzSXRlcmFibGUoY2hpbGRyZW4pICYmICEoY2hpbGRyZW4gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcclxuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGNoaWxkcmVuKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBbY2hpbGRyZW5dO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVMaW5lKHAxLCBwMiwgc3RlcHMsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgTiA9IHN0ZXBzO1xyXG4gICAgdmFyIHN0ZXAgPSAwO1xyXG4gICAgdmFyIGFudW1hdGVUb0Rlc3QgPSAoKSA9PiB7XHJcbiAgICAgIGlmIChzdGVwIDwgTikge1xyXG4gICAgICAgIHN0ZXArKztcclxuICAgICAgICB2YXIgdCA9IHN0ZXAgLyBOO1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW51bWF0ZVRvRGVzdCk7XHJcbiAgICAgICAgdmFyIHkgPSBsZXJwKHAxLnksIHAyLnksIHQpO1xyXG4gICAgICAgIHZhciB4ID0gbGVycChwMS54LCBwMi54LCB0KTtcclxuICAgICAgICBjYWxsYmFjayh7IHgsIHkgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBhbnVtYXRlVG9EZXN0KCk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGxlcnAoc3RhcnQsIGVuZCwgdCkge1xyXG4gICAgcmV0dXJuIHN0YXJ0ICsgdCAqIChlbmQgLSBzdGFydCk7XHJcbiAgfVxyXG5cclxuICB2YXIgcHhSZXF1aXJlZEtleXMgPSBbJ3RvcCcsICdsZWZ0JywgJ2hlaWdodCcsICd3aWR0aCcsICdyaWdodCcsICdib3R0b20nXTtcclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlKGVsZW0pIHtcclxuICAgIC8vcmVtb3ZlIGNoaWxkcmVuXHJcbiAgICAvKmlmIChlbGVtLmNoaWxkcmVuKSB7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gZWxlbS5jaGlsZHJlbikge1xyXG4gICAgICAgIGlmICghZWxlbS5jaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShpKSkgY29udGludWU7XHJcbiAgICAgICAgcmVtb3ZlKGVsZW0uY2hpbGRyZW5baV0pO1xyXG4gICAgICB9XHJcbiAgICB9Ki9cclxuXHJcbiAgICBpZiAoZWxlbS5wYXJlbnROb2RlKSB7XHJcbiAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcclxuICAgICAgLy9yZW1vdmVBbGxFdmVudExpc3RlbmVycyhlbGVtKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzKGVsZW0pIHtcclxuICAgIHZhciBoYW5kbGVycyA9IGVsZW1bXCJfX0VWRU5UU19fXCJdO1xyXG4gICAgaWYgKCFoYW5kbGVycykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBldmVudCBpbiBoYW5kbGVycykge1xyXG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKGVsZW0sIGV2ZW50KTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSBlbGVtW1wiX19FVkVOVFNfX1wiXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlbSwgZXZlbnRzLCByZW1vdmVIYW5kbGVyID0gbnVsbCkge1xyXG4gICAgdmFyIGFyID0gZXZlbnRzLnNwbGl0KCcgJyk7XHJcbiAgICBmb3IgKHZhciBqIGluIGFyKSB7XHJcbiAgICAgIGlmICghYXIuaGFzT3duUHJvcGVydHkoaikpIGNvbnRpbnVlO1xyXG4gICAgICB2YXIgZXZlbnQgPSBhcltqXTtcclxuXHJcbiAgICAgIHZhciBldmVudEhhbmRsZXJzID0gZWxlbVtcIl9fRVZFTlRTX19cIl1bZXZlbnRdO1xyXG4gICAgICBpZiAoIWV2ZW50SGFuZGxlcnMpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAodmFyIGkgaW4gZXZlbnRIYW5kbGVycykge1xyXG4gICAgICAgIHZhciBoYW5kbGVyID0gZXZlbnRIYW5kbGVyc1tpXTtcclxuICAgICAgICBpZiAocmVtb3ZlSGFuZGxlciAmJiBoYW5kbGVyWzBdID09IHJlbW92ZUhhbmRsZXIpIHtcclxuICAgICAgICAgIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudC5zcGxpdChcIi5cIilbMF0sIGhhbmRsZXJbMF0sIGhhbmRsZXJbMV0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIXJlbW92ZUhhbmRsZXIpIHtcclxuICAgICAgICAgIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudC5zcGxpdChcIi5cIilbMF0sIGhhbmRsZXJbMF0sIGhhbmRsZXJbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZGVsZXRlIGVsZW1bXCJfX0VWRU5UU19fXCJdW2V2ZW50XTtcclxuICAgIH07XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIGFkZFB4KHZhbHVlLCBrZXlOYW1lKSB7XHJcbiAgICBpZiAoaXNOYU4odmFsdWUpKVxyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICBpZiAoa2V5TmFtZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKHB4UmVxdWlyZWRLZXlzLmluZGV4T2Yoa2V5TmFtZSkgPj0gMClcclxuICAgICAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSArIFwiXCIpLnJlcGxhY2UoL3B4LywgXCJcIikgKyBcInB4XCI7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUgKyBcIlwiKS5yZXBsYWNlKC9weC8sIFwiXCIpICsgXCJweFwiO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2VsZiA9IHtcclxuICAgIGlkZW50aXR5OiBpZGVudGl0eVN5bWJvbCxcclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZSBvdmUgcmVhY2ggZWxlbWVudCBvZiB0aGUgc2V0XHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEhUTUxFbGVtZW50KTp2b2lkfSBjYWxsYmFjayBcclxuICAgICAqL1xyXG4gICAgZWFjaChjYWxsYmFjaykge1xyXG4gICAgICBmb3IgKHZhciBpIGluIGVsZW1BcnJheSkge1xyXG4gICAgICAgIGlmIChlbGVtQXJyYXkuaGFzT3duUHJvcGVydHkoaSkpXHJcbiAgICAgICAgICBjYWxsYmFjayhlbGVtQXJyYXlbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZ2V0KGluZGV4KSB7XHJcbiAgICAgIHJldHVybiBlbGVtQXJyYXlbaW5kZXhdO1xyXG4gICAgfSxcclxuICAgIGZpcnN0KCkge1xyXG4gICAgICByZXR1cm4gZWxlbUFycmF5WzBdO1xyXG4gICAgfSxcclxuICAgIGF0dHIoa2V5LCB2YWx1ZSA9IHVuZGVmaW5lZCkge1xyXG4gICAgICBpZiAoZWxlbUFycmF5WzBdID09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XHJcbiAgICAgIC8vcmVtb3ZlIGNoaWxkcmVuXHJcbiAgICAgIGlmICh2YWx1ZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbUFycmF5WzBdLmdldEF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICB9XHJcbiAgICAgIGZvciAodmFyIGkgaW4gZWxlbUFycmF5KSB7XHJcbiAgICAgICAgaWYgKGVsZW1BcnJheS5oYXNPd25Qcm9wZXJ0eShpKSlcclxuICAgICAgICAgIGVsZW1BcnJheVtpXS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlQXR0cihrZXkpIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiBlbGVtQXJyYXkpIHtcclxuICAgICAgICBpZiAoZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGkpKVxyXG4gICAgICAgICAgZWxlbUFycmF5W2ldLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBDU1MgcnVsZSB0byBhbGwgZWxlbWVudHNcclxuICAgICAqIEBwYXJhbSB7e1trZXk6c3RyaW5nXTpzdHJpbmd9fHN0cmluZ1tdfHN0cmluZ30gc3R5bGVzIC0gaWYgc3R5bGVzIGlzIGFycmF5LCByZXR1cm4gdGhlIHNwZWNpZmllZCBjc3MgcHJvcGVydGllc1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt2YWx1ZV1cclxuICAgICAqL1xyXG4gICAgY3NzKHN0eWxlcywgdmFsdWUpIHtcclxuICAgICAgaWYgKGVsZW1BcnJheVswXSA9PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgaWYgKGVtcHR5KHN0eWxlcykpIHtcclxuICAgICAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtQXJyYXlbMF0pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2Ygc3R5bGVzID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsZW1BcnJheVswXSlbc3R5bGVzXTtcclxuXHJcbiAgICAgICAgZWxlbUFycmF5WzBdLnN0eWxlW3N0eWxlc10gPSBhZGRQeCh2YWx1ZSwgc3R5bGVzKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGVzKSkge1xyXG4gICAgICAgIHZhciByZXQgPSB7fTtcclxuICAgICAgICB2YXIgZWxTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1BcnJheVswXSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSBpbiBzdHlsZXMpIHtcclxuICAgICAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcclxuICAgICAgICAgIHZhciBwcm9wID0gc3R5bGVzW2ldO1xyXG4gICAgICAgICAgcmV0W3Byb3BdID0gZWxTdHlsZXNbcHJvcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yICh2YXIgaiBpbiBlbGVtQXJyYXkpIHtcclxuICAgICAgICAgIGlmICghZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGopKSBjb250aW51ZTtcclxuICAgICAgICAgIHZhciBlbGVtID0gZWxlbUFycmF5W2pdO1xyXG5cclxuICAgICAgICAgIGZvciAodmFyIGkgaW4gc3R5bGVzKSB7XHJcbiAgICAgICAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgdmFyIHByb3AgPSBzdHlsZXNbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAocHJvcCAhPT0gbnVsbClcclxuICAgICAgICAgICAgICBlbGVtLnN0eWxlW2ldID0gYWRkUHgocHJvcCwgaSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICBlbGVtLnN0eWxlW2ldID0gJ2F1dG8nO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBhZGRDbGFzcyhjbGFzc05hbWUpIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiBlbGVtQXJyYXkpIHtcclxuICAgICAgICBpZiAoZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGkpKVxyXG4gICAgICAgICAgZWxlbUFycmF5W2ldLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICByZW1vdmVDbGFzcyhjbGFzc05hbWUpIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiBlbGVtQXJyYXkpIHtcclxuICAgICAgICBpZiAoZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGkpKVxyXG4gICAgICAgICAgZWxlbUFycmF5W2ldLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHtcclxuICAgICAgZm9yICh2YXIgaSBpbiBlbGVtQXJyYXkpIHtcclxuICAgICAgICBpZiAoZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGkpKVxyXG4gICAgICAgICAgZWxlbUFycmF5W2ldLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lKTtcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBlbGVtZW50IGFuZCB0aGVpciBjaGlsZHJlbiBmcm9tIERPTVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihIVE1MRWxlbWVudHxFbGVtZW50KTogdm9pZH0gW29uUmVtb3ZlRWxlbWVudF0gXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZShvblJlbW92ZUVsZW1lbnQpIHtcclxuICAgICAgLy9yZW1vdmUgY2hpbGRyZW5cclxuICAgICAgZm9yICh2YXIgaSBpbiBlbGVtQXJyYXkpIHtcclxuICAgICAgICBpZiAoIWVsZW1BcnJheS5oYXNPd25Qcm9wZXJ0eShpKSkgY29udGludWU7XHJcbiAgICAgICAgdmFyIGVsZW0gPSBlbGVtQXJyYXlbaV07XHJcblxyXG4gICAgICAgIHJlbW92ZShlbGVtKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBvblJlbW92ZUVsZW1lbnQgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICBvblJlbW92ZUVsZW1lbnQoZWxlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGVuZCBjaGlsZHJlbiB0byBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0geyp9IGNoaWxkT3JDaGlsZHJlbiBcclxuICAgICAqL1xyXG4gICAgYXBwZW5kKGNoaWxkT3JDaGlsZHJlbikge1xyXG4gICAgICB2YXIgY2hBcnJheSA9IGdldEFycmF5KGNoaWxkT3JDaGlsZHJlbik7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gZWxlbUFycmF5KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtQXJyYXkuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xyXG4gICAgICAgIHZhciBlbGVtID0gZWxlbUFycmF5W2ldO1xyXG4gICAgICAgIGZvciAobGV0IGsgaW4gY2hBcnJheSkge1xyXG4gICAgICAgICAgaWYgKCFjaEFycmF5Lmhhc093blByb3BlcnR5KGspKSBjb250aW51ZTtcclxuICAgICAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoY2hBcnJheVtrXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluc2VydCB0aGUgZmlyc3QgZWxlbWVudCBvZiBjb2xsZWN0aW9uIEFmdGVyIHRoZSByZWZlcmVuY2UgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmQ2hpbGQgXHJcbiAgICAgKi9cclxuICAgIGluc2VydEFmdGVyKHJlZkNoaWxkKSB7XHJcbiAgICAgIGlmIChyZWZDaGlsZC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcclxuICAgICAgICBmb3IgKHZhciBpIGluIGVsZW1BcnJheSkge1xyXG4gICAgICAgICAgaWYgKCFlbGVtQXJyYXkuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgdmFyIGVsZW0gPSBlbGVtQXJyYXlbaV07XHJcbiAgICAgICAgICByZWZDaGlsZC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShlbGVtLCByZWZDaGlsZC5uZXh0RWxlbWVudFNpYmxpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKHZhciBpIGluIGVsZW1BcnJheSkge1xyXG4gICAgICAgICAgaWYgKCFlbGVtQXJyYXkuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgdmFyIGVsZW0gPSBlbGVtQXJyYXlbaV07XHJcbiAgICAgICAgICByZWZDaGlsZC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGVsZW0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnNlcnQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgY29sbGVjdGlvbiBCZWZvcmUgdGhlIHJlZmVyZW5jZSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZDaGlsZCBcclxuICAgICAqL1xyXG4gICAgaW5zZXJ0QmVmb3JlKHJlZkNoaWxkKSB7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gZWxlbUFycmF5KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtQXJyYXkuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xyXG4gICAgICAgIHZhciBlbGVtID0gZWxlbUFycmF5W2ldO1xyXG4gICAgICAgIHJlZkNoaWxkLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsZW0sIHJlZkNoaWxkKTtcclxuICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXBsYWNlIGZpcnN0IGVsZW1lbnQgb2YgY29sbGVjdGlvbiB3aXRoIG5ldyBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBuZXdFbGVtZW50IFxyXG4gICAgICovXHJcbiAgICByZXBsYWNlV2l0aChuZXdFbGVtZW50KSB7XHJcbiAgICAgIERPTShuZXdFbGVtZW50KS5pbnNlcnRBZnRlcihlbGVtQXJyYXlbMF0pO1xyXG4gICAgICBET00oZWxlbUFycmF5KS5yZW1vdmUoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHdCBQYXJlbnQgb2YgZWFjaCBlbGVtZW50IGluIHNlcXVlbmNlXHJcbiAgICAgKi9cclxuICAgIHBhcmVudCgpIHtcclxuICAgICAgdmFyIHJldCA9IFtdO1xyXG4gICAgICBmb3IgKHZhciBpIGluIGVsZW1BcnJheSkge1xyXG4gICAgICAgIGlmICghZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcclxuICAgICAgICB2YXIgZWxlbSA9IGVsZW1BcnJheVtpXTtcclxuICAgICAgICByZXQucHVzaChlbGVtLnBhcmVudEVsZW1lbnQpO1xyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gRE9NKHJldCk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgZXZlbnQgbGlzdGVuZXIgdG8gZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50cyBcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXZlbnQpfSBoYW5kbGVyXHJcbiAgICAgKiBAcGFyYW0ge2FueX0gW2NhcHR1cmVdXHJcbiAgICAgKi9cclxuICAgIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLCBoYW5kbGVyLCBjYXB0dXJlKSB7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gZWxlbUFycmF5KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtQXJyYXkuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xyXG4gICAgICAgIHZhciBlbGVtID0gZWxlbUFycmF5W2ldO1xyXG5cclxuICAgICAgICB2YXIgYXIgPSBldmVudHMuc3BsaXQoJyAnKTtcclxuICAgICAgICBmb3IgKHZhciBpaSBpbiBhcikge1xyXG4gICAgICAgICAgaWYgKCFhci5oYXNPd25Qcm9wZXJ0eShpaSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgdmFyIGV2ZW50ID0gYXJbaWldO1xyXG4gICAgICAgICAgaWYgKCFlbGVtW1wiX19FVkVOVFNfX1wiXSkge1xyXG4gICAgICAgICAgICBlbGVtW1wiX19FVkVOVFNfX1wiXSA9IHt9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCEoZXZlbnQgaW4gZWxlbVtcIl9fRVZFTlRTX19cIl0pKSB7XHJcbiAgICAgICAgICAgIC8vIGVhY2ggZW50cnkgY29udGFpbnMgYW5vdGhlciBlbnRyeSBmb3IgZWFjaCBldmVudCB0eXBlXHJcbiAgICAgICAgICAgIGVsZW1bXCJfX0VWRU5UU19fXCJdW2V2ZW50XSA9IFtdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gY2FwdHVyZSByZWZlcmVuY2VcclxuICAgICAgICAgIGVsZW1bXCJfX0VWRU5UU19fXCJdW2V2ZW50XS5wdXNoKFtoYW5kbGVyLCBjYXB0dXJlXSk7XHJcbiAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQuc3BsaXQoXCIuXCIpWzBdLCBoYW5kbGVyLCBjYXB0dXJlKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIEV2ZW50IExpc3RlbmVyXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRzIFxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBbcmVtb3ZlSGFuZGxlcl0gLSBzcGVjaWZpYyBoYW5kbGVyIHRvIHJlbW92ZS4gQnkgZGVmYXVsdCByZW1vdmVzIGFsbCBldmVudHMgZm9yIHNwZWNpZmllZCBldmVudCBuYW1lXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLCByZW1vdmVIYW5kbGVyID0gbnVsbCkge1xyXG4gICAgICBmb3IgKHZhciBpIGluIGVsZW1BcnJheSkge1xyXG4gICAgICAgIGlmICghZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcclxuICAgICAgICB2YXIgZWxlbSA9IGVsZW1BcnJheVtpXTtcclxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKGVsZW0sIGV2ZW50cywgcmVtb3ZlSGFuZGxlcik7XHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIEFsbCBFdmVudCBMaXN0ZW5lcnNcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gZWxlbUFycmF5KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtQXJyYXkuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xyXG4gICAgICAgIHZhciBlbGVtID0gZWxlbUFycmF5W2ldO1xyXG5cclxuICAgICAgICByZW1vdmVBbGxFdmVudExpc3RlbmVycyhlbGVtKTtcclxuXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIG9uKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGYub25DaGlsZChldmVudCwgaGFuZGxlciwgY2FwdHVyZSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgY2FwdHVyZSk7XHJcbiAgICB9LFxyXG4gICAgb2ZmKGV2ZW50LCBoYW5kbGVyKSB7XHJcbiAgICAgIHJldHVybiBzZWxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNoaWxkKGV2ZW50LCBxdWVyeSwgaGFuZGxlcikge1xyXG4gICAgICByZXR1cm4gc2VsZi5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgKGV2ZW50LnRhcmdldC5tYXRjaGVzID8gZXZlbnQudGFyZ2V0Lm1hdGNoZXMocXVlcnkpIDogZXZlbnQudGFyZ2V0Lm1zTWF0Y2hlc1NlbGVjdG9yKHF1ZXJ5KSkpIHtcclxuICAgICAgICAgIGhhbmRsZXIoZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgdHJ1ZSk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlcGFpbnQgZWxlbWVudFxyXG4gICAgICovXHJcbiAgICByZXBhaW50KCkge1xyXG4gICAgICAvLyBpbiBwbGFpbiBqc1xyXG4gICAgICBmb3IgKHZhciBpIGluIGVsZW1BcnJheSkge1xyXG4gICAgICAgIGlmICghZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcclxuICAgICAgICB2YXIgZWxlbSA9IGVsZW1BcnJheVtpXTtcclxuXHJcbiAgICAgICAgdmFyIG9sZCA9IGVsZW0uc3R5bGUuZGlzcGxheTtcclxuICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gb2xkO1xyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaW5kIGEgcGFyZW50IGJ5IHF1ZXJ5XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgXHJcbiAgICAgKiAvL0B2dnJldHVybiB7SFRNTEVsZW1lbnRbXXxIVE1MT3B0aW9uRWxlbWVudFtdfEVsZW1lbnRbXX1cclxuICAgICAqL1xyXG4gICAgY2xvc2VzdChxdWVyeSkge1xyXG4gICAgICBpZiAoZWxlbUFycmF5WzBdID09IHVuZGVmaW5lZCkgcmV0dXJuIERPTShbXSk7XHJcbiAgICAgIHZhciBlbGVtZW50cyA9IFtlbGVtQXJyYXlbMF0uY2xvc2VzdChxdWVyeSldO1xyXG4gICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgIHJldHVybiBET00oZWxlbWVudHMpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogRmluZCBjaGlsZHJlbiBieSBxdWVyeVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFxyXG4gICAgICogLy9AdnZyZXR1cm4ge0hUTUxFbGVtZW50W118SFRNTE9wdGlvbkVsZW1lbnRbXXxFbGVtZW50W119XHJcbiAgICAgKi9cclxuICAgIGZpbmQocXVlcnkpIHtcclxuICAgICAgaWYgKGVsZW1BcnJheVswXSA9PSB1bmRlZmluZWQpIHJldHVybiBET00oW10pO1xyXG4gICAgICB2YXIgZWxlbXMgPSBBcnJheS5mcm9tKGVsZW1BcnJheVswXS5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSk7XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgcmV0dXJuIERPTShlbGVtcyk7XHJcbiAgICB9LFxyXG4gICAgd2lkdGgodmFsdWUgPSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKGVsZW1BcnJheVswXSA9PSB1bmRlZmluZWQpIHJldHVybiAwO1xyXG4gICAgICAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqL1xyXG4gICAgICB2YXIgZWxlbSA9IGVsZW1BcnJheVswXTtcclxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGg7XHJcbiAgICAgIGVsZW0uc3R5bGUud2lkdGggPSBhZGRQeCh2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgaGVpZ2h0KHZhbHVlID0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGlmIChlbGVtQXJyYXlbMF0gPT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcclxuICAgICAgLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi9cclxuICAgICAgdmFyIGVsZW0gPSBlbGVtQXJyYXlbMF07XHJcblxyXG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm4gZWxlbS5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgICBlbGVtLnN0eWxlLmhlaWdodCA9IGFkZFB4KHZhbHVlKTtcclxuICAgIH0sXHJcblxyXG4gICAgcG9zaXRpb24oKSB7XHJcbiAgICAgIGlmIChlbGVtQXJyYXlbMF0gPT0gdW5kZWZpbmVkKSByZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0b3A6IGVsZW1BcnJheVswXS5vZmZzZXRUb3AsXHJcbiAgICAgICAgbGVmdDogZWxlbUFycmF5WzBdLm9mZnNldExlZnQsXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgb2Zmc2V0KCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHRvcDogc2VsZi5vZmZzZXRUb3AoKSxcclxuICAgICAgICBsZWZ0OiBzZWxmLm9mZnNldExlZnQoKSxcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBpbm5lckhlaWdodCgpIHtcclxuICAgICAgaWYgKGVsZW1BcnJheVswXSA9PSB1bmRlZmluZWQpIHJldHVybiAwO1xyXG5cclxuICAgICAgLy8gUmV0dXJuIG91ciBkaXN0YW5jZVxyXG4gICAgICByZXR1cm4gZWxlbUFycmF5WzBdLmNsaWVudEhlaWdodDtcclxuICAgIH0sXHJcbiAgICBpbm5lcldpZHRoKCkge1xyXG4gICAgICBpZiAoZWxlbUFycmF5WzBdID09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XHJcblxyXG4gICAgICAvLyBSZXR1cm4gb3VyIGRpc3RhbmNlXHJcbiAgICAgIHJldHVybiBlbGVtQXJyYXlbMF0uY2xpZW50V2lkdGg7XHJcbiAgICB9LFxyXG4gICAgb2Zmc2V0VG9wKCkge1xyXG4gICAgICBpZiAoZWxlbUFycmF5WzBdID09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XHJcbiAgICAgIC8vIFNldCBvdXIgZGlzdGFuY2UgcGxhY2Vob2xkZXJcclxuICAgICAgdmFyIGRpc3RhbmNlID0gMDtcclxuICAgICAgdmFyIGVsZW0gPSBlbGVtQXJyYXlbMF07XHJcbiAgICAgIC8vIExvb3AgdXAgdGhlIERPTVxyXG4gICAgICBpZiAoZWxlbS5vZmZzZXRQYXJlbnQpIHtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICBkaXN0YW5jZSArPSBlbGVtLm9mZnNldFRvcDtcclxuICAgICAgICAgIGVsZW0gPSBlbGVtLm9mZnNldFBhcmVudDtcclxuICAgICAgICB9IHdoaWxlIChlbGVtKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmV0dXJuIG91ciBkaXN0YW5jZVxyXG4gICAgICByZXR1cm4gZGlzdGFuY2UgPCAwID8gMCA6IGRpc3RhbmNlO1xyXG4gICAgfSxcclxuICAgIG9mZnNldExlZnQoKSB7XHJcbiAgICAgIGlmIChlbGVtQXJyYXlbMF0gPT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcclxuICAgICAgLy8gU2V0IG91ciBkaXN0YW5jZSBwbGFjZWhvbGRlclxyXG4gICAgICB2YXIgZGlzdGFuY2UgPSAwO1xyXG4gICAgICB2YXIgZWxlbSA9IGVsZW1BcnJheVswXTtcclxuICAgICAgLy8gTG9vcCB1cCB0aGUgRE9NXHJcbiAgICAgIGlmIChlbGVtLm9mZnNldFBhcmVudCkge1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgIGRpc3RhbmNlICs9IGVsZW0ub2Zmc2V0TGVmdDtcclxuICAgICAgICAgIGVsZW0gPSBlbGVtLm9mZnNldFBhcmVudDtcclxuICAgICAgICB9IHdoaWxlIChlbGVtKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmV0dXJuIG91ciBkaXN0YW5jZVxyXG4gICAgICByZXR1cm4gZGlzdGFuY2UgPCAwID8gMCA6IGRpc3RhbmNlO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogU2Nyb2xsIEVsZW1lbnQgY29udGVudHNcclxuICAgICAqIEBwYXJhbSB7e2JlaGF2aW9yPzonYXV0byd8J3Ntb290aCcsIHRvcD86IG51bWJlciwgbGVmdD86bnVtYmVyfX0gb3B0aW9ucyBcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsVG8ob3B0aW9ucykge1xyXG4gICAgICBpZiAoZWxlbUFycmF5WzBdID09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XHJcblxyXG4gICAgICBpZiAoZWxlbUFycmF5WzBdLnNjcm9sbFRvKSB7XHJcbiAgICAgICAgZWxlbUFycmF5WzBdLnNjcm9sbFRvKG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGVsID0gZWxlbUFycmF5WzBdO1xyXG4gICAgICBpbnRlcnBvbGF0ZUxpbmUoe1xyXG4gICAgICAgIHg6IGVsLnNjcm9sbExlZnQsXHJcbiAgICAgICAgeTogZWwuc2Nyb2xsVG9wXHJcbiAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgeDogb3B0aW9ucy5sZWZ0ICE9IHVuZGVmaW5lZCA/IG9wdGlvbnMubGVmdCA6IGVsLnNjcm9sbExlZnQsXHJcbiAgICAgICAgICB5OiBvcHRpb25zLnRvcCAhPSB1bmRlZmluZWQgPyBvcHRpb25zLnRvcCA6IGVsLnNjcm9sbFRvcFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3B0aW9ucy5iZWhhdmlvciA9PSBcInNtb290aFwiID8gMjUgOiAxLFxyXG4gICAgICAgIChwKSA9PiB7XHJcbiAgICAgICAgICBlbC5zY3JvbGxUb3AgPSBwLnk7XHJcbiAgICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gcC54O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTY3JvbGwgRWxlbWVudCBjb250ZW50c1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRdXHJcbiAgICAgKiBAcGFyYW0geydhdXRvJ3wnc21vb3RoJ30gW2JlaGF2aW9yXSBcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsTGVmdChvZmZzZXQsIGJlaGF2aW9yKSB7XHJcbiAgICAgIGlmIChlbGVtQXJyYXlbMF0gPT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcclxuICAgICAgaWYgKG9mZnNldCA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbUFycmF5WzBdLnNjcm9sbExlZnQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi5zY3JvbGxUbyh7IGxlZnQ6IG9mZnNldCwgYmVoYXZpb3I6IGJlaGF2aW9yIH0pO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBTY3JvbGwgRWxlbWVudCBjb250ZW50c1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRdXHJcbiAgICAgKiBAcGFyYW0geydhdXRvJ3wnc21vb3RoJ30gW2JlaGF2aW9yXSBcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsVG9wKG9mZnNldCwgYmVoYXZpb3IpIHtcclxuICAgICAgaWYgKGVsZW1BcnJheVswXSA9PSB1bmRlZmluZWQpIHJldHVybiAwO1xyXG4gICAgICBpZiAob2Zmc2V0ID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtQXJyYXlbMF0uc2Nyb2xsVG9wO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuc2Nyb2xsVG8oeyB0b3A6IG9mZnNldCwgYmVoYXZpb3I6IGJlaGF2aW9yIH0pO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHZhbCh2YWx1ZSkge1xyXG4gICAgICBpZiAoZWxlbUFycmF5WzBdID09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtQXJyYXlbMF0udmFsdWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSBpbiBlbGVtQXJyYXkpIHtcclxuICAgICAgICAgIGlmICghZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcclxuICAgICAgICAgIHZhciBlbGVtID0gZWxlbUFycmF5W2ldO1xyXG5cclxuICAgICAgICAgIGVsZW0udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2hvdyh2YWx1ZSkge1xyXG4gICAgICBmb3IgKHZhciBpIGluIGVsZW1BcnJheSkge1xyXG4gICAgICAgIGlmICghZWxlbUFycmF5Lmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcclxuICAgICAgICB2YXIgZWwgPSBlbGVtQXJyYXlbaV07XHJcblxyXG4gICAgICAgIGlmICghZWwuX0RPTV9vbGRTdHlsZSlcclxuICAgICAgICAgIGVsLl9ET01fb2xkU3R5bGUgPSB7fTtcclxuICAgICAgICBpZiAoIWVsLl9ET01fb2xkU3R5bGUuZGlzcGxheSlcclxuICAgICAgICAgIGVsLl9ET01fb2xkU3R5bGUuZGlzcGxheSA9IERPTShlbCkuY3NzKCdkaXNwbGF5Jyk7XHJcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9ET01fb2xkU3R5bGUuZGlzcGxheTtcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBoaWRlKHZhbHVlKSB7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gZWxlbUFycmF5KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtQXJyYXkuaGFzT3duUHJvcGVydHkoaSkpIGNvbnRpbnVlO1xyXG4gICAgICAgIHZhciBlbCA9IGVsZW1BcnJheVtpXTtcclxuXHJcbiAgICAgICAgaWYgKCFlbC5fRE9NX29sZFN0eWxlKVxyXG4gICAgICAgICAgZWwuX0RPTV9vbGRTdHlsZSA9IHt9O1xyXG4gICAgICAgIGlmICghZWwuX0RPTV9vbGRTdHlsZS5kaXNwbGF5KVxyXG4gICAgICAgICAgZWwuX0RPTV9vbGRTdHlsZS5kaXNwbGF5ID0gRE9NKGVsKS5jc3MoJ2Rpc3BsYXknKTtcclxuXHJcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGZvY3VzKCkge1xyXG4gICAgICBpZiAoZWxlbUFycmF5WzBdID09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgZm9yICh2YXIgaSBpbiBlbGVtQXJyYXkpIHtcclxuICAgICAgICBpZiAoIWVsZW1BcnJheS5oYXNPd25Qcm9wZXJ0eShpKSkgY29udGludWU7XHJcbiAgICAgICAgdmFyIGVsID0gZWxlbUFycmF5W2ldO1xyXG5cclxuICAgICAgICBlbC5mb2N1cygpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICB9O1xyXG5cclxuICBpZiAoZWxlbU9yUXVlcnkgPT0gbnVsbCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZWxlbU9yUXVlcnkgY2FuIG5vdCBiZSBlbXB0eSFcIik7XHJcbiAgfVxyXG5cclxuICAvKiogQHR5cGUge0hUTUxFbGVtZW50W119ICovXHJcbiAgdmFyIGVsZW1BcnJheSA9IFtdO1xyXG5cclxuICBpZiAodHlwZW9mIGVsZW1PclF1ZXJ5ID09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGVsZW1PclF1ZXJ5ID09IFwibnVtYmVyXCIpIHtcclxuICAgIGVsZW1BcnJheSA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtT3JRdWVyeSkpO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1PclF1ZXJ5ID09IFwib2JqZWN0XCIpIHtcclxuICAgIC8vaWYgcGFzc2VkIGVsZW1lbnQgaXMgYWxyZWFkeSBET00gb2JqZWN0LCB0aGVuIHJldHVybiBpdCBhcy1pc1xyXG4gICAgaWYgKGVsZW1PclF1ZXJ5LmlkZW50aXR5ID09IGlkZW50aXR5U3ltYm9sKSB7XHJcbiAgICAgIC8qKiBAdHlwZSB7c2VsZn0gKi9cclxuICAgICAgdmFyIHJldCA9IGVsZW1PclF1ZXJ5O1xyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgZWxlbUFycmF5ID0gZ2V0QXJyYXkoZWxlbU9yUXVlcnkpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgSW1wbGVtZW50ZWRcIik7XHJcbiAgfVxyXG5cclxuICAvKiogQHR5cGUge3NlbGZ9ICovXHJcbiAgdmFyIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShzZWxmKTtcclxuXHJcbiAgaW5zdGFuY2UubGVuZ3RoID0gZWxlbUFycmF5Lmxlbmd0aDtcclxuXHJcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oaW5zdGFuY2UsIGVsZW1BcnJheSk7XHJcbn0iLCJpbXBvcnQgKiBhcyBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGUgfSBmcm9tIFwiLi9UcmFuc2xhdGVcIjtcclxuXHJcbmV4cG9ydCB2YXIgRGF0ZVRpbWUgPSB7XHJcbiAgLyoqXHJcblx0ICogUmV0dXJuIGRhdGUgaW4gcHJvZ3Jlc3NpdmUgc3RyaW5nIGZvcm1hdC4gVXNlZCBmb3IgZGlzcGxheSBwdXJwb3NlcyBPTkxZXHJcblx0ICogQHBhcmFtIHtzdHJpbmd8RGF0ZX0gW3ZhbHVlXSBhIERhdGUgb2JqZWN0IG9yIHBhcnNlYWJsZSBzdHJpbmcsIFxyXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW291dHB1dE9mZnNldF0gLSBzcGVjaWZ5IHdoZXRoZXIgKFVUQy14eDp4eCkgdGltZXpvbmUgb2Zmc2V0IHdpbGwgYmUgb3V0cHV0LiBEZWZhdWx0cyB0byBmYWxzZVxyXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9XHJcblx0ICovXHJcbiAgc21hcnRGb3JtYXQodmFsdWUsIG91dHB1dE9mZnNldCApIHtcclxuICAgIG91dHB1dE9mZnNldCA9IG91dHB1dE9mZnNldCB8fCBmYWxzZTtcclxuICAgIGlmIChlbXB0eSh2YWx1ZSkpXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgLy9tb21lbnQubG9jYWxlKHRoaXMuR1VzZXIuc2V0dGluZ3MubGFuZ3VhZ2UpO1xyXG5cdFx0XHJcbiAgICB2YXIgbm93ID0gbW9tZW50KCk7XHJcblxyXG4gICAgdmFyIGRhdGUgPSBtb21lbnQodmFsdWUpO1xyXG4gICAgdmFyIG9mZnNldCA9IG1vbWVudC5wYXJzZVpvbmUodmFsdWUpLnV0Y09mZnNldCgpO1xyXG4gICAgdmFyIGhhc1pvbmUgPSB0eXBlb2YgZGF0ZS5fdHptICE9PSd1bmRlZmluZWQnO1xyXG5cclxuICAgIHZhciBzYW1lWm9uZSA9ICFoYXNab25lIHx8ICAoaGFzWm9uZSAmJiBub3cudXRjT2Zmc2V0KCkgPT09IGRhdGUudXRjT2Zmc2V0KCkpO1xyXG5cclxuICAgIHZhciBmID1cIlwiO1xyXG5cdFx0XHJcbiAgICAvL0V2ZXJ5dGhpbmcgaXMgdGhlIHNhbWUgLSBzaG93IHRpbWUgb25seVx0XHJcbiAgICBpZiAoXHJcbiAgICAgIG5vdy55ZWFyKCkgPT0gZGF0ZS55ZWFyKCkgJiZcclxuXHRcdFx0bm93Lm1vbnRoKCkgPT0gZGF0ZS5tb250aCgpICYmXHJcblx0XHRcdG5vdy53ZWVrKCkgPT0gZGF0ZS53ZWVrKCkgJiZcclxuXHRcdFx0bm93LmRheSgpID09IGRhdGUuZGF5KClcclxuICAgIClcclxuICAgICAgZiA9IFwiW1wiKyBUcmFuc2xhdGUoXCJUb2RheVwiKSArXCJdIExUXCI7XHJcblx0XHRcclxuICAgIC8vT25seSBEYXkgb2Ygd2VlayBpcyBkaWZmZXJlbnRcdC0gc2hvdyBkYXkgb2Ygd2VlayBhbmQgdGltZVxyXG4gICAgaWYgKFxyXG4gICAgICBub3cueWVhcigpID09IGRhdGUueWVhcigpICYmXHJcblx0XHRcdG5vdy5tb250aCgpID09IGRhdGUubW9udGgoKSAmJlxyXG5cdFx0XHRub3cud2VlaygpID09IGRhdGUud2VlaygpICYmXHJcblx0XHRcdG5vdy5kYXkoKSAhPSBkYXRlLmRheSgpXHJcbiAgICApXHJcbiAgICAgIGYgPSBcImRkZGQgTFRcIjtcclxuXHJcbiAgICAvL3dlZWsgaXMgZGlmZmVyZW50IC0gc2hvdyBtb250aCBhbmQgZGF0ZSBhbmQgdGltZVxyXG4gICAgaWYgKFxyXG4gICAgICBub3cueWVhcigpID09IGRhdGUueWVhcigpICYmXHJcblx0XHRcdG5vdy5tb250aCgpID09IGRhdGUubW9udGgoKSAmJlxyXG5cdFx0XHRub3cud2VlaygpICE9IGRhdGUud2VlaygpXHJcbiAgICApXHJcbiAgICAgIGYgPSBcIk1NTSBEIExUXCI7XHJcblxyXG4gICAgLy9tb250aCBpcyBkaWZmZXJlbnQgLSBzaG93IG1vbnRoIGFuZCBkYXRlIGFuZCB0aW1lXHJcbiAgICBpZiAoXHJcbiAgICAgIG5vdy55ZWFyKCkgPT0gZGF0ZS55ZWFyKCkgJiZcclxuXHRcdFx0bm93Lm1vbnRoKCkgIT0gZGF0ZS5tb250aCgpXHJcbiAgICApXHJcbiAgICAgIGYgPSBcIk1NTSBEIExUXCI7XHJcblxyXG4gICAgLy95ZWFyIGlzIGRpZmZlcmVudCAtIHNob3cgeWVhciBhbmQgbW9udGggYW5kIGRhdGUgYW5kIHRpbWVcclxuICAgIGlmIChcclxuICAgICAgbm93LnllYXIoKSAhPSBkYXRlLnllYXIoKVxyXG4gICAgKVxyXG4gICAgICBmID0gXCJNTU0gRCwgWVlZWSBMVFwiO1xyXG5cclxuICAgIGlmICggb3V0cHV0T2Zmc2V0ICYmXHJcblx0XHRcdGhhc1pvbmVcclxuICAgIClcclxuICAgICAgZiArPSBcIiBbKFVUQ11aWyldXCI7XHJcblx0XHJcbiAgICB2YXIgcmV0ID0gbnVsbDtcclxuICAgIGlmICggaGFzWm9uZSAmJiAhc2FtZVpvbmUgKVx0XHRcdFx0XHJcbiAgICAgIHJldCA9IG1vbWVudCh2YWx1ZSkudXRjT2Zmc2V0KG9mZnNldCkuZm9ybWF0KGYpO1xyXG4gICAgZWxzZVx0XHJcbiAgICAgIHJldCA9IG1vbWVudCh2YWx1ZSkuZm9ybWF0KGYpO1xyXG5cdFx0XHRcclxuICAgIHJldHVybiByZXQ7XHRcclxuICB9LFxyXG4gIC8qKlxyXG5cdCAqIFJldHVybiBkYXRlIGluIGxvY2FsIHN0cmluZyBmb3JtYXQ6IFlZWVktTU0tREQgSEg6bW06c3MuIFVzZWQgZm9yIGRhdGEgdHJhbnNmZXIuXHJcblx0ICogQHBhcmFtIHtzdHJpbmd8RGF0ZX0gX19kYXRlIGEgRGF0ZSBvYmplY3Qgb3IgcGFyc2VhYmxlIHN0cmluZywgXHJcblx0ICogQHJldHVybnMge3N0cmluZ31cclxuXHQgKi9cclxuICBmb3JtYXRMb2NhbERhdGU6IGZ1bmN0aW9uKF9fZGF0ZSkge1xyXG4gICAgaWYgKF9fZGF0ZSA9PSB1bmRlZmluZWQgfHwgIW1vbWVudChfX2RhdGUpLmlzVmFsaWQoKSlcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICByZXR1cm4gbW9tZW50KF9fZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XHJcbiAgfSxcclxuICAvKipcclxuXHQgKiBSZXR1cm4gZGF0ZSBpbiBsb2NhbCBzdHJpbmcgZm9ybWF0OiBZWVlZLU1NLUREIEhIOm1tOnNzLiBVc2VkIGZvciBkYXRhIHRyYW5zZmVyLlxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfERhdGV9IF9fZGF0ZSBhIERhdGUgb2JqZWN0IG9yIHBhcnNlYWJsZSBzdHJpbmcsIFxyXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9XHJcblx0ICovXHJcbiAgZnJvbUxvY2FsRGF0ZTogZnVuY3Rpb24oX19kYXRlKSB7XHJcbiAgICBpZiAoX19kYXRlID09IHVuZGVmaW5lZCB8fCAhbW9tZW50KF9fZGF0ZSkuaXNWYWxpZCgpKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIHJldHVybiBtb21lbnQoX19kYXRlLCdZWVlZLU1NLUREIEhIOm1tOnNzJykudG9JU09TdHJpbmcoKTtcclxuICB9LFxyXG4gIC8qKlxyXG5cdCAqIFJldHVybiBkYXRlIGluIGh1bWFuLSByZWFkYWJsZSBmb3JtYXQuXHJcblx0ICogQHBhcmFtIHtzdHJpbmd8RGF0ZX0gX19kYXRlIGEgRGF0ZSBvYmplY3Qgb3IgcGFyc2VhYmxlIHN0cmluZywgXHJcblx0ICogQHJldHVybnMge3N0cmluZ31cclxuXHQgKi9cclxuICB0b0h1bWFuRGF0ZTogZnVuY3Rpb24oX19kYXRlKSB7XHJcbiAgICBpZiAoX19kYXRlID09IHVuZGVmaW5lZCB8fCAhbW9tZW50KF9fZGF0ZSkuaXNWYWxpZCgpKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuXHRcdFxyXG4gICAgcmV0dXJuIG1vbWVudChfX2RhdGUpLmZvcm1hdCgnTEwnKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuXHQgKiBjb252ZXJ0IGRhdGUgZnJvbSBodW1hbiBmb3JtYXQgdG8gZGF0ZS5cclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gX19kYXRlIGEgcGFyc2VhYmxlIHN0cmluZywgXHJcblx0ICogQHJldHVybnMge0RhdGV9XHJcblx0ICovXHJcbiAgZnJvbUh1bWFuRGF0ZTogZnVuY3Rpb24oX19kYXRlKSB7XHJcbiAgICBpZiAoX19kYXRlID09IHVuZGVmaW5lZCB8fCAhbW9tZW50KF9fZGF0ZSwgRGF0ZVRpbWUuX2h1bWFuRGF0ZSkuaXNWYWxpZCgpKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIHJldHVybiBtb21lbnQoX19kYXRlLCBEYXRlVGltZS5faHVtYW5EYXRlKS50b0RhdGUoKTtcclxuICB9LFxyXG4gIC8qKlxyXG5cdCAqIFJldHVybiB0aW1lIGluIGh1bWFuLSByZWFkYWJsZSBmb3JtYXQuXHJcblx0ICogQHBhcmFtIHtzdHJpbmd8RGF0ZX0gX19kYXRlIGEgRGF0ZSBvYmplY3Qgb3IgcGFyc2VhYmxlIHN0cmluZywgXHJcblx0ICogQHJldHVybnMge3N0cmluZ31cclxuXHQgKi9cclxuICB0b0h1bWFuVGltZTogZnVuY3Rpb24oX19kYXRlKSB7XHJcbiAgICBpZiAoX19kYXRlID09IHVuZGVmaW5lZCB8fCAhbW9tZW50KF9fZGF0ZSkuaXNWYWxpZCgpKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuXHRcdFxyXG4gICAgcmV0dXJuIG1vbWVudChfX2RhdGUpLmZvcm1hdChEYXRlVGltZS5faHVtYW5UaW1lKTtcclxuICB9LFxyXG4gIC8qKlxyXG5cdCAqIFJldHVybiBjb252ZXJ0IHJlYWRhYmxlIGZvcm1hdCB0byBkYXRlXHJcblx0ICogQHBhcmFtIHtzdHJpbmd8RGF0ZX0gX19kYXRlIGEgRGF0ZSBvYmplY3Qgb3IgcGFyc2VhYmxlIHN0cmluZywgXHJcblx0ICogQHJldHVybnMge0RhdGV9XHJcblx0ICovXHJcbiAgZnJvbUh1bWFuVGltZTogZnVuY3Rpb24oX19kYXRlKSB7XHJcbiAgICBpZiAoX19kYXRlID09IHVuZGVmaW5lZCB8fCAhbW9tZW50KF9fZGF0ZSwgRGF0ZVRpbWUuX2h1bWFuVGltZSkuaXNWYWxpZCgpKVxyXG4gICAgICByZXR1cm4gbnVsbDtcdFxyXG4gICAgcmV0dXJuIG1vbWVudChfX2RhdGUsIERhdGVUaW1lLl9odW1hblRpbWUpLnRvRGF0ZSgpO1xyXG4gIH0sXHJcblx0XHJcbiAgLyoqXHJcblx0ICogY29udmVydCBkYXRlIGZyb20gaHVtYW4gZm9ybWF0IHRvIGRhdGUuXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IF9fZGF0ZSBhIHBhcnNlYWJsZSBzdHJpbmcsIFxyXG5cdCAqIEByZXR1cm5zIHtEYXRlfVxyXG5cdCAqL1xyXG4gIGZyb21IdW1hbkRhdGVUaW1lOiBmdW5jdGlvbihfX2RhdGUpIHtcclxuICAgIGlmIChfX2RhdGUgPT0gdW5kZWZpbmVkIHx8ICFtb21lbnQoX19kYXRlLERhdGVUaW1lLl9odW1hbkRhdGVUaW1lKS5pc1ZhbGlkKCkpXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgcmV0dXJuIG1vbWVudChfX2RhdGUsRGF0ZVRpbWUuX2h1bWFuRGF0ZVRpbWUpLnRvRGF0ZSgpO1xyXG4gIH0sXHJcbiAgLyoqXHJcblx0ICogUmV0dXJuIGRhdGUgaW4gaHVtYW4tIHJlYWRhYmxlIGZvcm1hdC5cclxuXHQgKiBAcGFyYW0ge3N0cmluZ3xEYXRlfSBfX2RhdGUgYSBEYXRlIG9iamVjdCBvciBwYXJzZWFibGUgc3RyaW5nLCBcclxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG5cdCAqL1xyXG4gIHRvSHVtYW5EYXRlVGltZTogZnVuY3Rpb24oX19kYXRlKSB7XHJcbiAgICBpZiAoX19kYXRlID09IHVuZGVmaW5lZCB8fCAhbW9tZW50KF9fZGF0ZSkuaXNWYWxpZCgpKVxyXG4gICAgICByZXR1cm4gbnVsbDtcdFxyXG4gICAgcmV0dXJuIG1vbWVudChfX2RhdGUpLmZvcm1hdChEYXRlVGltZS5faHVtYW5EYXRlVGltZSk7XHJcbiAgfSxcclxuXHRcclxuICAvKipcclxuXHQgKiBSZXR1cm4gZGF0ZSBpbiBzcGVjaWZpZWQgZm9ybWF0XHJcblx0ICogQHBhcmFtIHtzdHJpbmd8RGF0ZX0gX19kYXRlIGEgRGF0ZSBvYmplY3Qgb3IgcGFyc2VhYmxlIHN0cmluZywgXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtmb3JtYXRdIC0gZGVmYXVsdHMgdG8gTU0vREQvWVlZWVxyXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9XHJcblx0ICovXHJcbiAgdG9Gb3JtYXQoX19kYXRlLCBmb3JtYXQpe1xyXG4gICAgZm9ybWF0ID0gZm9ybWF0IHx8IERhdGVUaW1lLl9odW1hbk1NRERZWVlZO1xyXG4gICAgaWYgKF9fZGF0ZSA9PSB1bmRlZmluZWQgfHwgIW1vbWVudChfX2RhdGUpLmlzVmFsaWQoKSlcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICByZXR1cm4gbW9tZW50KF9fZGF0ZSkuZm9ybWF0KGZvcm1hdCk7XHJcbiAgfSxcclxuXHJcblxyXG4gIG1vbWVudDogbW9tZW50LFxyXG5cclxuICB0b0pTT05EYXRlOiBmdW5jdGlvbihfX2RhdGUpe1xyXG4gICAgaWYgKF9fZGF0ZSA9PSB1bmRlZmluZWQgfHwgIW1vbWVudChfX2RhdGUpLmlzVmFsaWQoKSlcclxuICAgICAgcmV0dXJuIG51bGw7XHJcblx0XHRcclxuICAgIHJldHVybiBtb21lbnQoX19kYXRlKS5mb3JtYXQoRGF0ZVRpbWUuX0pTT05EYXRlKTtcclxuICB9LFxyXG5cclxuICBmcm9tSlNPTkRhdGU6IGZ1bmN0aW9uKF9fZGF0ZSl7XHJcbiAgICBpZiAoX19kYXRlID09IHVuZGVmaW5lZCB8fCAhbW9tZW50KF9fZGF0ZSkuaXNWYWxpZCgpKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIHJldHVybiBtb21lbnQoX19kYXRlLERhdGVUaW1lLl9KU09ORGF0ZSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcblx0ICogUmV0dXJuIERldmljZSBEYXRlLVRpbWVcclxuXHQgKi9cclxuICBmcm9tSlNPTkRldmljZURhdGU6IGZ1bmN0aW9uKF9fZGF0ZSl7XHJcbiAgICBpZiAoX19kYXRlID09IHVuZGVmaW5lZCB8fCAhbW9tZW50KF9fZGF0ZSkuaXNWYWxpZCgpKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIHZhciB2ID0gbW9tZW50KF9fZGF0ZSxEYXRlVGltZS5fSlNPTkRhdGUpLnBhcnNlWm9uZSgpLmZvcm1hdCgnTExMTCcpO1x0XHJcbiAgICB2YXIgdjI9IG1vbWVudCh2LCdMTExMJyk7XHJcbiAgICByZXR1cm4gdjI7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcblx0ICogXHJcblx0ICogQHBhcmFtIHtEYXRlfSBkYXRlIFxyXG5cdCAqIEBwYXJhbSB7RGF0ZX0gdGltZSBcclxuXHQgKi9cclxuICBjb21iaW5lRGF0ZVRpbWUoZGF0ZSwgdGltZSl7XHJcbiAgICB2YXIgdGltZV9tID0gbW9tZW50KHRpbWUpO1xyXG4gICAgdmFyIGNIID0gdGltZV9tLmhvdXIoKTtcclxuICAgIHZhciBjTSA9IHRpbWVfbS5taW51dGUoKTtcclxuICAgIHZhciBjUyA9IHRpbWVfbS5zZWNvbmQoKTtcclxuXHJcbiAgICB2YXIgZGF0ZV9tID0gbW9tZW50KGRhdGUpO1xyXG4gICAgZGF0ZV9tLnNldCgnaG91cicsY0gpO1xyXG4gICAgZGF0ZV9tLnNldCgnbWludXRlJyxjTSk7XHJcbiAgICBkYXRlX20uc2V0KCdzZWNvbmQnLGNTKTtcclxuXHJcbiAgICByZXR1cm4gZGF0ZV9tLnRvRGF0ZSgpO1xyXG4gIH0sXHJcblxyXG4gIHNldExvY2FsZShsYW5nKXtcclxuICAgIG1vbWVudC5sb2NhbGUobGFuZyk7XHJcbiAgfSxcclxuXHJcbiAgX2h1bWFuVGltZTpcIkxUXCIsXHJcbiAgX2h1bWFuRGF0ZVRpbWU6XCJMTExMXCIsXHJcbiAgX2h1bWFuRGF0ZTpcIkxMXCIsXHJcbiAgX0pTT05EYXRlOidZWVlZLU1NLUREW1RdSEg6bW06c3NaJyxcclxuICBfaHVtYW5NTUREWVlZWTpcIk1NL0REL1lZWVlcIixcclxufTsiLCJleHBvcnQgY2xhc3MgRmlsZUFjY2VzcyB7XHJcblxyXG4gIC8qKiBDaGVjayBpcyBmaWxlIHJlYWRpbmcgaXMgc3VwcG9ydGVkICovXHJcbiAgc3RhdGljIGdldCBpc1N1cHBvcnRlZCgpe1xyXG4gICAgcmV0dXJuICEhKHdpbmRvdy5GaWxlICYmIHdpbmRvdy5GaWxlUmVhZGVyICYmIHdpbmRvdy5Gb3JtRGF0YSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuXHQgKiBSZWFkIGZpbGUgYmxvYiBmcm9tIGZpbGVGaWVsZC5maWxlc1swXVxyXG5cdCAqIEBwYXJhbSB7RmlsZX0gZmlsZUJsb2IgXHJcblx0ICovXHJcbiAgc3RhdGljIFJlYWRGaWxlKGZpbGVCbG9iKSB7XHJcbiAgICAvKipcclxuXHRcdCAqIFxyXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbihGaWxlUmVhZGVyKTphbnl9IHJlYWRlckNhbGxiYWNrIFxyXG5cdFx0ICovXHJcbiAgICBmdW5jdGlvbiBnZXRSZWFkZXJQcm9taXNlKHJlYWRlckNhbGxiYWNrKXtcclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3Qpe1xyXG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG5cdFx0XHRcclxuICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcclxuICAgICAgICB9O1xyXG5cdFx0XHRcclxuICAgICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgIH07XHJcblx0XHRcdFxyXG4gICAgICAgIHJlYWRlckNhbGxiYWNrKHJlYWRlcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8qKlxyXG5cdFx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxyXG5cdFx0XHQgKi9cclxuICAgICAgRGF0YVVSTCgpe1xyXG4gICAgICAgIHJldHVybiBnZXRSZWFkZXJQcm9taXNlKChyZWFkZXIpPT57cmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZUJsb2IpO30pO1xyXG4gICAgICB9LFxyXG4gICAgICAvKipcclxuXHRcdFx0ICogQHJldHVybnMge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxyXG5cdFx0XHQgKi9cclxuICAgICAgQXJyYXlCdWZmZXIoKXtcclxuICAgICAgICByZXR1cm4gZ2V0UmVhZGVyUHJvbWlzZSgocmVhZGVyKT0+e3JlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlQmxvYik7fSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIC8qKlxyXG5cdFx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxyXG5cdFx0XHQgKi9cclxuICAgICAgQmluYXJ5U3RyaW5nKCl7XHJcbiAgICAgICAgcmV0dXJuIGdldFJlYWRlclByb21pc2UoKHJlYWRlcik9PntyZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nKGZpbGVCbG9iKTt9KTtcclxuICAgICAgfSxcclxuICAgICAgLyoqXHJcblx0XHRcdCAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcblx0XHRcdCAqL1xyXG4gICAgICBUZXh0KCl7XHJcbiAgICAgICAgcmV0dXJuIGdldFJlYWRlclByb21pc2UoKHJlYWRlcik9PntyZWFkZXIucmVhZEFzVGV4dChmaWxlQmxvYik7fSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgTmF2Q29udHJvbGxlciB9IGZyb20gXCIuL05hdkNvbnRyb2xsZXJcIjtcclxuXHJcbi8vcG9vciBtYW4ncyBkZXBlbmRlbmN5IGluamVjdGlvblxyXG4vL1xyXG4vKipcclxuICogSW1wb3J0IHRoaXMgaW50byB0aGUgaW5kZXguanMgYW5kIGluamVjdCB5b3VyIG9iamVjdHMgaW50byBpdFxyXG4gKiB2YXIgSW5qZWN0ID0gSW5qZWN0b3IuaW1wbGVtZW50KEluamVjdFRlbXBsYXRlKVxyXG5cdEluamVjdC5Db25maWcgPSBDb25maWcgO1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEluamVjdG9yID0ge1xyXG4gIGltcGxlbWVudDogKEluamVjdFRlbXBsYXRlICk9PntyZXR1cm4gSW5qZWN0b3I7fVxyXG59O1xyXG5cclxuIiwiaW1wb3J0IHsgdHJ5Q2FsbCwgYXJndW1lbnRzVG9BcnJheSB9IGZyb20gXCIuL2hlbHBlcnNcIjtcclxuaW1wb3J0IHsgQmFzZVBhZ2UgfSBmcm9tIFwiLi4vcGFnZXMvQmFzZVBhZ2VcIjtcclxuaW1wb3J0IHsgaXNTa2lwVXBkYXRlIH0gZnJvbSBcIi4vV2F0Y2hlclwiO1xyXG5pbXBvcnQgeyBPYmplY3RzIH0gZnJvbSBcIi4vT2JqZWN0c1wiO1xyXG5pbXBvcnQgeyBET00gfSBmcm9tIFwiLi9ET01cIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBOYXZDb250cm9sbGVyKCkge1xyXG4gIC8qKiBAdHlwZSB7TmF2Q29udHJvbGxlcn0gKi9cclxuICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gIC8qKlxyXG5cdCAqIEB0eXBlZGVmIFBhZ2VcclxuXHQgKiBAcHJvcCBuYW1lXHJcblx0ICovXHJcblxyXG4gIC8qKlxyXG5cdCAqIEB0eXBlZGVmIFBhZ2VGcmFtZVxyXG5cdCAqIEBwcm9wIHtzdHJpbmd9IG5hbWVcclxuXHQgKiBAcHJvcCB7SlF1ZXJ5PEVsZW1lbnQ+fSBlbGVtZW50XHJcblx0ICogQHByb3Age29iamVjdH0gcGFnZVxyXG5cdCAqL1xyXG4gIC8qKiBAdHlwZSB7UGFnZUZyYW1lW119ICovXHJcbiAgdmFyIHN0YWNrID0gW107XHJcblxyXG4gIHZhciB3aW5kb3dTaXplID0geyB3aWR0aDogbnVsbCwgaGVpZ2h0OiBudWxsIH07XHJcblxyXG4gIHZhciBiYWNrVGltZW91dCA9IDMwMDtcclxuICB2YXIgYmFja1RpbWVvdXRSdW5uaW5nID0gZmFsc2U7XHJcblxyXG4gIHZhciB0cmFuc2l0aW9uVGltZSA9IDQwMDtcclxuXHJcbiAgdmFyIHBhZ2VDb250YWluZXIgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuICAvKipcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXJcclxuXHQgKi9cclxuICB0aGlzLnNldENvbnRhaW5lciA9IGZ1bmN0aW9uIChjb250YWluZXIsIGxpc3RlblRvYkJhY2tCdXR0b24gPSBmYWxzZSkge1xyXG4gICAgcGFnZUNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIC8vaWYgY29udGFpbmVyIGlzIG5vdCBkb2N1bWVudCwgcmVtb3ZlIHRoZSBiYWNrIGJ1dHRvbiBoYW5kbGVyXHJcbiAgICBpZiAocGFnZUNvbnRhaW5lciAhPSBkb2N1bWVudC5ib2R5ICYmICFsaXN0ZW5Ub2JCYWNrQnV0dG9uKSB7XHJcbiAgICAgIERPTShkb2N1bWVudCkub2ZmKCdiYWNrYnV0dG9uJywgZG9jdW1lbnRCYWNrQnV0dG9uSGFuZGxlcik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcblx0ICogUmVtb3ZlIGFsbCBwYWdlcyBhbmQgbG9hZCBwYXNzZWQgcGFnZSBDb25zdHJ1Y3RvciBhcyBSb290XHJcblx0ICogQHBhcmFtIHtvYmplY3R9IHBhZ2VDb25zdHJ1Y3RvclxyXG5cdCAqIEBwYXJhbSB7Li4uYW55fSBbcGFyYW1ldGVyc10gXHJcblx0ICogQHJldHVybiB7QmFzZVBhZ2V9XHJcblx0ICovXHJcbiAgdGhpcy5zZXRSb290ID0gZnVuY3Rpb24gKHBhZ2VDb25zdHJ1Y3RvciwgcGFyYW1ldGVycykge1xyXG4gICAgcmVtb3ZlQWxsRnJhbWVzKCk7XHJcbiAgICAvL3NlbGYub25QYWdlTmF2aWdhdGVUbyhwYWdlQ29uc3RydWN0b3IubmFtZSk7XHJcbiAgICB2YXIgcGFnZSA9IGNyZWF0ZVBhZ2UocGFnZUNvbnRhaW5lciwgcGFnZUNvbnN0cnVjdG9yLCBhcmd1bWVudHNUb0FycmF5KGFyZ3VtZW50cywgMSkpO1xyXG4gICAgLy9zZWxmLm9uUGFnZUNyZWF0ZWQocGFnZSk7XHJcbiAgICByZXR1cm4gcGFnZTtcclxuICB9O1xyXG4gIC8qKlxyXG5cdCAqIFJlbW92ZSBBbGwgUGFnZXNcclxuXHQgKi9cclxuICB0aGlzLnJlbW92ZUFsbCA9IHJlbW92ZUFsbEZyYW1lcztcclxuICAvKipcclxuXHQgKiBQdXNoIGEgcGFnZSBvbiB0b3Agb2Ygc3RhY2suXHJcblx0ICogQHBhcmFtIHtvYmplY3R9IHBhZ2VDb25zdHJ1Y3RvciBcclxuXHQgKiBAcGFyYW0gey4uLmFueX0gW3BhcmFtZXRlcnNdICBcclxuXHQgKi9cclxuICB0aGlzLnB1c2ggPSBmdW5jdGlvbiAocGFnZUNvbnN0cnVjdG9yLCBwYXJhbWV0ZXJzKSB7XHJcbiAgICBpZiAoY3VycmVudEZyYW1lKCkpXHJcbiAgICAgIHRyeUNhbGwoY3VycmVudEZyYW1lKCkucGFnZSwgY3VycmVudEZyYW1lKCkucGFnZS5vbkxlYXZlKTtcclxuICAgIC8vc2VsZi5vblBhZ2VOYXZpZ2F0ZVRvKHBhZ2VDb25zdHJ1Y3Rvci5uYW1lKTtcclxuICAgIHZhciBwYWdlID0gY3JlYXRlUGFnZShwYWdlQ29udGFpbmVyLCBwYWdlQ29uc3RydWN0b3IsIGFyZ3VtZW50c1RvQXJyYXkoYXJndW1lbnRzLCAxKSk7XHJcbiAgICAvL3NlbGYub25QYWdlQ3JlYXRlZChwYWdlKTtcclxuICAgIC8vcHVzaFN0YXRlKHBhZ2VDb25zdHJ1Y3Rvci5uYW1lKTtcclxuICAgIHJldHVybiBwYWdlO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG5cdCAqIFB1c2ggYSBwYWdlIG9uIHRvcCBvZiBzdGFjayBJTlRPIGEgc3BlY2lmaWVkIGVsZW1lbnRcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXJcclxuXHQgKiBAcGFyYW0ge29iamVjdH0gcGFnZUNvbnN0cnVjdG9yIFxyXG5cdCAqIEBwYXJhbSB7Li4uYW55fSBbcGFyYW1ldGVyc10gIFxyXG5cdCAqL1xyXG4gIHRoaXMucHVzaEludG8gPSBmdW5jdGlvbiAoY29udGFpbmVyLCBwYWdlQ29uc3RydWN0b3IsIHBhcmFtZXRlcnMpIHtcclxuICAgIGlmIChjdXJyZW50RnJhbWUoKSlcclxuICAgICAgdHJ5Q2FsbChjdXJyZW50RnJhbWUoKS5wYWdlLCBjdXJyZW50RnJhbWUoKS5wYWdlLm9uTGVhdmUpO1xyXG4gICAgLy9zZWxmLm9uUGFnZU5hdmlnYXRlVG8ocGFnZUNvbnN0cnVjdG9yLm5hbWUpO1xyXG4gICAgdmFyIHBhZ2UgPSBjcmVhdGVQYWdlKGNvbnRhaW5lciwgcGFnZUNvbnN0cnVjdG9yLCBhcmd1bWVudHNUb0FycmF5KGFyZ3VtZW50cywgMikpO1xyXG4gICAgLy9zZWxmLm9uUGFnZUNyZWF0ZWQocGFnZSk7XHJcbiAgICByZXR1cm4gcGFnZTtcclxuICB9O1xyXG4gIC8qKlxyXG5cdCAqIE5hdmlnYXRlIEJhY2tcclxuXHQgKiBSZXR1cm5zIHRydWUgaWYgc3VjY2VzcywgbnVsbCBpZiBsYXN0IHBhZ2UgYW5kIGNhbiBub3QgZ28gYmFja1xyXG5cdCAqIEByZXR1cm4ge251bGx8Ym9vbGVhbn0gXHJcblx0ICovXHJcbiAgdGhpcy5iYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHN0YWNrLmxlbmd0aCA+IDEpIHtcclxuICAgICAgaWYgKGJhY2tUaW1lb3V0UnVubmluZykgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBiYWNrVGltZW91dFJ1bm5pbmcgPSB0cnVlO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgYmFja1RpbWVvdXRSdW5uaW5nID0gZmFsc2U7IH0sIGJhY2tUaW1lb3V0KTtcclxuXHJcbiAgICAgIHJlbW92ZUxhc3RGcmFtZSgpO1xyXG4gICAgICBzZWxmLm9uUGFnZU5hdmlnYXRlQmFjayhjdXJyZW50RnJhbWUoKS5uYW1lKTtcclxuICAgICAgcmVzZXRQYWdlc1Zpc2liaWxpdHkoKTtcclxuXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfTtcclxuICAvKipcclxuXHQgKiBSZW11dmUgcGFnZSBmcm9tIHN0YWNrXHJcblx0ICogQHBhcmFtIHtQYWdlfSBwYWdlT2JqZWN0IFxyXG5cdCAqL1xyXG4gIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKHBhZ2VPYmplY3QpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHN0YWNrW2ldLnBhZ2UgPT09IHBhZ2VPYmplY3QpIHtcclxuICAgICAgICByZW1vdmVGcmFtZU4oaSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJlc2V0UGFnZXNWaXNpYmlsaXR5KCk7XHJcbiAgfTtcclxuICAvKipcclxuXHQgKiBHZXQgYSBsaXN0IG9mIGRpc3BsYXllZCBwYWdlc1xyXG5cdCAqIEByZXR1cm4ge3N0cmluZ1tdfVxyXG5cdCAqL1xyXG4gIHRoaXMuZ2V0UGFnZU5hbWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHJldCA9IFtdO1xyXG4gICAgT2JqZWN0cy5mb3JFYWNoKHN0YWNrLCBmdW5jdGlvbiAoKSB7IHJldC5wdXNoKHRoaXMubmFtZSk7IH0pO1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9O1xyXG5cclxuICAvKipcclxuXHQgKiBHZXQgUGFnZXMgU3RhY2tcclxuXHQgKiBAcmV0dXJuIHtQYWdlRnJhbWVbXX1cclxuXHQgKi9cclxuICB0aGlzLmdldFBhZ2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHJldCA9IFtdO1xyXG4gICAgcmV0dXJuIHN0YWNrO1xyXG4gIH07XHJcbiAgLyoqXHJcblx0ICogQ3JlYXRlIHBhZ2UgXHJcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyXHJcblx0ICogQHBhcmFtIHthbnl9IHBhZ2VDb25zdHJ1Y3RvciBcclxuXHQgKiBAcGFyYW0ge2FueVtdfSBhcmdzIC0gYXJyYXkgb2YgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIHBhZ2UgY29uc3RydWN0b3JcclxuXHQgKiBAcmV0dXJuIHtCYXNlUGFnZXxQcm9taXNlfSBcclxuXHQgKi9cclxuICBmdW5jdGlvbiBjcmVhdGVQYWdlKGNvbnRhaW5lciwgcGFnZUNvbnN0cnVjdG9yLCBhcmdzKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gaW5zZXJ0SW50b0RPTShwYWdlT2JqZWN0KSB7XHJcbiAgICAgIHNlbGYub25QYWdlTmF2aWdhdGVUbyhwYWdlT2JqZWN0Lm5hbWUsIGFyZ3MpO1xyXG4gICAgICBpZiAoc3RhY2subGVuZ3RoID09IDApIHtcclxuICAgICAgICAvL2hpc3Rvcnkuc2V0Um9vdChudWxsLCBwYWdlT2JqZWN0Lm5hbWUsIFwiI1wiICsgcGFnZU9iamVjdC5uYW1lICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy9oaXN0b3J5LnB1c2gobnVsbCwgcGFnZU9iamVjdC5uYW1lLCBcIiNcIiArIHBhZ2VPYmplY3QubmFtZSApO1xyXG4gICAgICB9XHJcbiAgICAgIC8vaWYgcGJqZWN0IGlzIHZ1ZSwgbW91bnQgaXQgZmlyc3RcclxuICAgICAgaWYgKHBhZ2VPYmplY3QuX2lzVnVlKSB7XHJcbiAgICAgICAgdmFyIG5ld0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG5ld0VsKTtcclxuICAgICAgICBwYWdlT2JqZWN0LiRhcmdzID0gYXJncztcclxuICAgICAgICBwYWdlT2JqZWN0LiRtb3VudChuZXdFbCk7XHJcbiAgICAgICAgdmFyIHAgPSBwYWdlT2JqZWN0LiRlbDtcclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgdHJ5Q2FsbChwYWdlT2JqZWN0LCBwYWdlT2JqZWN0Ll9pbml0KTtcclxuICAgICAgICB2YXIgcCA9IHBhZ2VPYmplY3QucGFnZTtcclxuICAgICAgICBwLnNldEF0dHJpYnV0ZSgnaWQnLCBwYWdlT2JqZWN0LnNlbGVjdG9yKTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBhZ2VPYmplY3QuTmF2ID0gc2VsZjtcclxuICAgICAgcGFnZU9iamVjdC5zdHlsZS56SW5kZXggPSBnZXRNYXhTdGFja1pJbmRleCgpICsgMTAwO1xyXG5cclxuICAgICAgdmFyIGNsYXNzZXMgPSAhZW1wdHkocGFnZU9iamVjdC5jbGFzc05hbWUpID8gKHBhZ2VPYmplY3QuY2xhc3NOYW1lKS5zcGxpdChcIiBcIikgOiBbXTtcclxuICAgICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSk7XHJcbiAgICAgIHBhZ2VPYmplY3QuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCcgJyk7XHJcblxyXG4gICAgICBzZWxmLm9uUGFnZUNyZWF0ZWQocGFnZU9iamVjdCk7XHJcbiAgICAgIHN0YWNrLnB1c2goeyBuYW1lOiBwYWdlT2JqZWN0Lm5hbWUsIGVsZW1lbnQ6IHAsIHBhZ2U6IHBhZ2VPYmplY3QgfSk7XHJcbiAgICAgIHJlc2V0UGFnZXNWaXNpYmlsaXR5KCk7XHJcblxyXG4gICAgICB0cnlDYWxsKHBhZ2VPYmplY3QsIHBhZ2VPYmplY3Qub25Jbml0LCBwKTtcclxuXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRyeUNhbGwocGFnZU9iamVjdCwgcGFnZU9iamVjdC5vbkxvYWRlZCk7XHJcbiAgICAgIH0sIDEpO1xyXG5cclxuICAgICAgcmV0dXJuIHBhZ2VPYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBhZ2VDb25zdHJ1Y3RvciBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgLy9jb25zdHJ1Y3RvciBpcyBhIHByb21pc2UuXHJcbiAgICAgIC8vUmVzb2x2ZSBpdCFcclxuICAgICAgcmV0dXJuIHBhZ2VDb25zdHJ1Y3Rvci50aGVuKF9wYWdlQ29uc3RydWN0b3IgPT4ge1xyXG4gICAgICAgIC8vY2FsbCBpdCBhZ2FpblxyXG4gICAgICAgIHJldHVybiBjcmVhdGVQYWdlKGNvbnRhaW5lciwgX3BhZ2VDb25zdHJ1Y3RvciwgYXJncyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGFnZUNvbnN0cnVjdG9yID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICB2YXIgc2VsZWN0b3IgPSBwYWdlQ29uc3RydWN0b3Iuc2VsZWN0b3IgPyBwYWdlQ29uc3RydWN0b3Iuc2VsZWN0b3IgOiAncGFnZS0nICsgcGFnZUNvbnN0cnVjdG9yLm5hbWU7XHJcbiAgICAgIHZhciBjbGFzc05hbWUgPSBwYWdlQ29uc3RydWN0b3IuY2xhc3NOYW1lID8gcGFnZUNvbnN0cnVjdG9yLmNsYXNzTmFtZSA6IFwiXCI7XHJcblxyXG4gICAgICAvL2NyZWF0ZSBwYWdlIG9iamVjdCBpbiBhIG5ldyBzY29wZVxyXG4gICAgICAvKiogQHR5cGUge0Jhc2VQYWdlfSAqL1xyXG4gICAgICB2YXIgcGFnZU9iamVjdCA9IGNyZWF0ZVBhZ2VJbnN0YW5jZShwYWdlQ29uc3RydWN0b3IsIGFyZ3MpO1xyXG4gICAgICAvL3BhZ2VPYmplY3QudmlzaWJsZVBhcmVudCA9IHBhZ2VPYmplY3QudmlzaWJsZVBhcmVudD09PW51bGwgPyBwYWdlQ29uc3RydWN0b3IudmlzaWJsZVBhcmVudCA6IHBhZ2VPYmplY3QudmlzaWJsZVBhcmVudDtcclxuICAgICAgcGFnZU9iamVjdC5uYW1lID0gcGFnZUNvbnN0cnVjdG9yLm5hbWU7XHJcbiAgICAgIC8vZW1wdHkocGFnZU9iamVjdC5jbGFzc05hbWUpID8gcGFnZU9iamVjdC5jbGFzc05hbWUgPSBjbGFzc05hbWUgOiBudWxsO1xyXG4gICAgICBwYWdlT2JqZWN0LnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcbiAgICAgIHJldHVybiBpbnNlcnRJbnRvRE9NKHBhZ2VPYmplY3QpO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vY3JlYXRlIHBhZ2Ugb2JqZWN0IGluIGEgbmV3IHNjb3BlXHJcbiAgICAgIC8qKiBAdHlwZSB7QmFzZVBhZ2V9ICovXHJcbiAgICAgIHZhciBwYWdlT2JqZWN0ID0gcGFnZUNvbnN0cnVjdG9yO1xyXG4gICAgICBwYWdlQ29uc3RydWN0b3IgPSBwYWdlT2JqZWN0LmNvbnN0cnVjdG9yO1xyXG5cclxuICAgICAgdmFyIG5hbWUgPSAocGFnZUNvbnN0cnVjdG9yLm5hbWUgKyBcIlwiKS5yZXBsYWNlKC9ib3VuZCAvZywgXCJcIik7XHJcblxyXG4gICAgICAvL3ZhciBzZWxlY3RvciA9IHBhZ2VDb25zdHJ1Y3Rvci5zZWxlY3RvciA/IHBhZ2VDb25zdHJ1Y3Rvci5zZWxlY3RvciA6ICdwYWdlLScgKyBuYW1lO1xyXG4gICAgICB2YXIgY2xhc3NOYW1lID0gcGFnZUNvbnN0cnVjdG9yLmNsYXNzTmFtZSA/IHBhZ2VDb25zdHJ1Y3Rvci5jbGFzc05hbWUgOiBcIlwiO1xyXG5cclxuICAgICAgcGFnZU9iamVjdC5uYW1lID0gbmFtZTtcclxuICAgICAgLy9lbXB0eShwYWdlT2JqZWN0LmNsYXNzTmFtZSkgPyBwYWdlT2JqZWN0LmNsYXNzTmFtZSA9IGNsYXNzTmFtZSA6IG51bGw7XHJcbiAgICAgIC8vcGFnZU9iamVjdC5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG4gICAgICByZXR1cm4gaW5zZXJ0SW50b0RPTShwYWdlT2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRNYXhTdGFja1pJbmRleCgpIHtcclxuICAgIHZhciBtYXhaID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGZyYW1lID0gc3RhY2tbaV07XHJcbiAgICAgIG1heFogPSBNYXRoLm1heChtYXhaLCBmcmFtZS5wYWdlLnN0eWxlLnpJbmRleCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF4WjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSB7YW55fSBwYWdlQ29uc3RydWN0b3IgXHJcblx0ICogQHBhcmFtIHthbnlbXX0gYXJncyBcclxuXHQgKi9cclxuICBmdW5jdGlvbiBjcmVhdGVQYWdlSW5zdGFuY2UocGFnZUNvbnN0cnVjdG9yLCBhcmdzKSB7XHJcbiAgICAvKnZhciBwYWdlID0gT2JqZWN0LmNyZWF0ZShwYWdlQ29uc3RydWN0b3IucHJvdG90eXBlKTtcclxuXHRcdHZhciByZXQgPSBwYWdlQ29uc3RydWN0b3IuYXBwbHkocGFnZSwgYXJncyk7XHJcblx0XHRyZXR1cm4gcmV0ID8gcmV0IDogcGFnZTsqL1xyXG4gICAgcmV0dXJuIG5ldyBwYWdlQ29uc3RydWN0b3IoLi4uYXJncyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZW1vdmVGcmFtZU4oZnJhbWVJbmRleCkge1xyXG4gICAgdmFyIGZyYW1lID0gc3RhY2suc3BsaWNlKGZyYW1lSW5kZXgsIDEpWzBdO1xyXG5cclxuICAgIHRyeUNhbGwoZnJhbWUucGFnZSwgZnJhbWUucGFnZS5vbkxlYXZlKTtcclxuICAgIHRyeUNhbGwoZnJhbWUucGFnZSwgZnJhbWUucGFnZS5fb25EZXN0cm95KTtcclxuICAgIGhpZGVQYWdlRWxlbWVudChmcmFtZSwgdHJ1ZSk7XHJcbiAgICAvL2hpc3RvcnkucG9wKCk7XHRcdFxyXG5cclxuICAgIGZyYW1lID0gbnVsbDtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICBmdW5jdGlvbiByZW1vdmVMYXN0RnJhbWUoKSB7XHJcbiAgICBpZiAoc3RhY2subGVuZ3RoID09PSAwKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIHJldHVybiByZW1vdmVGcmFtZU4oc3RhY2subGVuZ3RoIC0gMSk7XHJcbiAgfVxyXG4gIC8qKlxyXG5cdCAqIFJldHVybiBjdXJyZW50IHBhZ2UgZnJhbWVcclxuXHQgKiBAcmV0dXJuIHtQYWdlRnJhbWV9XHJcblx0ICovXHJcbiAgZnVuY3Rpb24gY3VycmVudEZyYW1lKCkge1xyXG4gICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMClcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICByZXR1cm4gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIHJlbW92ZUFsbEZyYW1lcygpIHtcclxuICAgIGlmIChzdGFjay5sZW5ndGggPT09IDApXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgIGlmIChyZW1vdmVMYXN0RnJhbWUoKSlcclxuICAgICAgcmVtb3ZlQWxsRnJhbWVzKCk7XHJcblxyXG4gIH1cclxuICAvKipcclxuXHQgKiBTZXQgUGFnZSBpbnN0YW5jZSBVSSBzdGF0ZSB2YWx1ZVxyXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBwYWdlIFxyXG5cdCAqIEBwYXJhbSB7J2lzRGVsZXRpbmcnfCdpc0NyZWF0aW5nJ3wnaXNIaWRpbmcnfCdpc1Nob3dpbmcnfCdpc1Zpc2libGUnfCdpc0hpZGRlbid9IHN0YXRlIFxyXG5cdCAqL1xyXG4gIGZ1bmN0aW9uIHNldFBhZ2VTdGF0ZShwYWdlLCBzdGF0ZSkge1xyXG4gICAgaWYgKHBhZ2Vbc3RhdGVdID09IHRydWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcGFnZS5pc0RlbGV0aW5nID0gbnVsbDtcclxuICAgIHBhZ2UuaXNDcmVhdGluZyA9IG51bGw7XHJcbiAgICBwYWdlLmlzSGlkaW5nID0gbnVsbDtcclxuICAgIHBhZ2UuaXNIaWRkZW4gPSBudWxsO1xyXG4gICAgcGFnZS5pc1Nob3dpbmcgPSBudWxsO1xyXG4gICAgcGFnZS5pc1Zpc2libGUgPSBudWxsO1xyXG5cclxuICAgIHBhZ2Vbc3RhdGVdID0gdHJ1ZTtcclxuICB9XHJcbiAgLyoqXHJcblx0ICogUmVjYWxjdWxhdGUgcGFnZXMnIHZpc2liaWxpdHlcclxuXHQgKi9cclxuICBmdW5jdGlvbiByZXNldFBhZ2VzVmlzaWJpbGl0eSgpIHtcclxuICAgIHZhciBuID0gMDtcclxuICAgIHZhciBoaWRlQWZ0ZXIgPSAxO1xyXG4gICAgZm9yICh2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgIHZhciBmcmFtZSA9IHN0YWNrW2ldO1xyXG4gICAgICBpZiAoaSA9PSAwKSB7XHJcbiAgICAgICAgZnJhbWUucGFnZS5pc1Jvb3QgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZyYW1lLnBhZ2UuaXNSb290ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWVtcHR5KGZyYW1lLnBhZ2UudmlzaWJsZVBhcmVudCkpXHJcbiAgICAgICAgaGlkZUFmdGVyKys7XHJcbiAgICAgIGlmIChoaWRlQWZ0ZXIgPiBuKSB7XHJcbiAgICAgICAgc2hvd1BhZ2VFbGVtZW50KGZyYW1lLCBpIDwgc3RhY2subGVuZ3RoIC0gMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaGlkZVBhZ2VFbGVtZW50KGZyYW1lKTtcclxuICAgICAgfVxyXG4gICAgICBuKys7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuXHQgKiBTaG93IHBhcnRpY3VsYXIgcGFnZSBET00gZWxlbWVudFxyXG5cdCAqIEBwYXJhbSB7UGFnZUZyYW1lfSBmcmFtZSAtIHBhZ2UgdG8gc2hvd1xyXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luYWN0aXZlXSBcclxuXHQgKi9cclxuICBmdW5jdGlvbiBzaG93UGFnZUVsZW1lbnQoZnJhbWUsIGluYWN0aXZlKSB7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKGZyYW1lLnBhZ2UuaXNEZWxldGluZykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGZyYW1lLnBhZ2UuaXNIaWRkZW4pIHtcclxuICAgICAgICBzZXRQYWdlU3RhdGUoZnJhbWUucGFnZSwgJ2lzU2hvd2luZycpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdHJ5Q2FsbChmcmFtZS5wYWdlLCBmcmFtZS5wYWdlLm9uRW50ZXIpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICB9IGVsc2UgaWYgKCFmcmFtZS5wYWdlLmlzSGlkZGVuICYmICFmcmFtZS5wYWdlLmlzSGlkaW5nICYmICFmcmFtZS5wYWdlLmlzVmlzaWJsZSkge1xyXG4gICAgICAgIC8vaWYgcGFnZSBpcyBub3QgeWV0IGhhdmUgYW55IGF0dHJpYnV0ZXNcclxuICAgICAgICBzZXRQYWdlU3RhdGUoZnJhbWUucGFnZSwgJ2lzQ3JlYXRpbmcnKTtcclxuXHJcbiAgICAgICAgLy9BZGQgY3JlYXRpbmcgYXR0cmlidXRlIEFMTU9TVCBpbW1lZGFpdGVseSBmb3Igc21vb3RoIGFwcGVhcmFuY2VcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHRyeUNhbGwoZnJhbWUucGFnZSwgZnJhbWUucGFnZS5yZXNpemUsIHdpbmRvd1NpemUpO1xyXG4gICAgICAgIH0sIDApO1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHRyeUNhbGwoZnJhbWUucGFnZSwgZnJhbWUucGFnZS5vbkVudGVyKTtcclxuICAgICAgICB9LCAwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGluYWN0aXZlKSB7XHJcbiAgICAgICAgZnJhbWUucGFnZS5pc0luYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmcmFtZS5wYWdlLmlzSW5hY3RpdmUgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvL1NldCB0byBmdWxseSB2aXNpYmxlIGFmdGVyIDUwMG1zIGRlbGF5XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChmcmFtZS5wYWdlLmlzRGVsZXRpbmcpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghZnJhbWUucGFnZS5pc1Zpc2libGUpIHtcclxuICAgICAgICAgIHNldFBhZ2VTdGF0ZShmcmFtZS5wYWdlLCAnaXNWaXNpYmxlJyk7XHJcbiAgICAgICAgICB0cnlDYWxsKGZyYW1lLnBhZ2UsIGZyYW1lLnBhZ2UuX29uVmlzaWJsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfSwgdHJhbnNpdGlvblRpbWUpO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcblx0ICogSGlkZSBwYXJ0aWN1bGFyIHBhZ2UgRE9NIGVsZW1lbnRcclxuXHQgKiBAcGFyYW0ge1BhZ2VGcmFtZX0gZnJhbWUgLSBwYWdlIHRvIHNob3dcclxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlbGV0aW5nXSAtIHRydWUgaWYgcGFnZSBpcyBiZWluZyBkZWxldGVkXHJcblx0ICovXHJcbiAgZnVuY3Rpb24gaGlkZVBhZ2VFbGVtZW50KGZyYW1lLCBpc0RlbGV0aW5nKSB7XHJcbiAgICB2YXIgZWxlbWVudCA9IGZyYW1lLmVsZW1lbnQ7XHJcbiAgICBpc0RlbGV0aW5nID0gaXNEZWxldGluZyB8fCBmYWxzZTtcclxuXHJcbiAgICBpZiAoZnJhbWUucGFnZS5pc0RlbGV0aW5nKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBmdW5jdGlvbiBkb0hpZGVFbGVtKGlzRGVsZXRpbmcpIHtcclxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2V0UGFnZVN0YXRlKGZyYW1lLnBhZ2UsICdpc0hpZGRlbicpO1xyXG4gICAgICAgIGlmIChpc0RlbGV0aW5nKSB7XHJcbiAgICAgICAgICBmcmFtZS5wYWdlW2lzU2tpcFVwZGF0ZV0gPSB0cnVlO1xyXG4gICAgICAgICAgZnJhbWUucGFnZS5OYXYgPSBudWxsO1xyXG4gICAgICAgICAgZnJhbWUucGFnZS5kZXN0cm95KHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzRGVsZXRpbmcgJiYgZnJhbWUucGFnZS5pc0hpZGRlbikge1xyXG4gICAgICBkb0hpZGVFbGVtKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoaXNEZWxldGluZykge1xyXG4gICAgICAgIHNldFBhZ2VTdGF0ZShmcmFtZS5wYWdlLCAnaXNEZWxldGluZycpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNldFBhZ2VTdGF0ZShmcmFtZS5wYWdlLCAnaXNIaWRpbmcnKTtcclxuICAgICAgfVxyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBkb0hpZGVFbGVtKGlzRGVsZXRpbmcpO1xyXG4gICAgICB9LCBpc0RlbGV0aW5nID8gdHJhbnNpdGlvblRpbWUgOiB0cmFuc2l0aW9uVGltZSArIDEwMCk7XHQvL2hpZGluZyB0YWtlcyAxMDAgbXMgbG9uZ2VyIHRoYW4gZGVsZXRpbmdcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vU2V0IGRlZmF1bHQgd2luZG93IHNpemUgY2FzaGVcclxuICB3aW5kb3dTaXplLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgd2luZG93U2l6ZS5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgLy9hZGQgT05FIGxpc3RlbmVyIHRoYXQgd2lsbCBmaXJlIG9uUmVzaXplIG9uIGFsbCBwYWdlcztcclxuICBET00od2luZG93KS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB3aW5kb3dSZXNpemVIYW5kbGVyKTtcclxuICBmdW5jdGlvbiB3aW5kb3dSZXNpemVIYW5kbGVyKGV2KSB7XHJcbiAgICB3aW5kb3dTaXplLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICB3aW5kb3dTaXplLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIC8vcmVjYWxjQ29udGVudEhlaWdodChzdGFja1tpXS5lbGVtZW50KTtcclxuICAgICAgdHJ5Q2FsbChzdGFja1tpXS5wYWdlLCBzdGFja1tpXS5wYWdlLnJlc2l6ZSwgd2luZG93U2l6ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBET00oZG9jdW1lbnQpLmFkZEV2ZW50TGlzdGVuZXIoXCJiYWNrYnV0dG9uXCIsIGRvY3VtZW50QmFja0J1dHRvbkhhbmRsZXIpO1xyXG4gIGZ1bmN0aW9uIGRvY3VtZW50QmFja0J1dHRvbkhhbmRsZXIoZSkge1xyXG4gICAgdmFyIGNmID0gY3VycmVudEZyYW1lKCk7XHJcbiAgICBpZiAoY2YgJiYgdHJ5Q2FsbChjZi5wYWdlLCBjZi5wYWdlLm9uQmFja05hdmlnYXRlKSAhPT0gZmFsc2UgJiYgdHJ5Q2FsbChjZi5wYWdlLCBjZi5wYWdlLm9uQmVmb3JlRGVzdHJveSkgIT09IGZhbHNlICYmIHNlbGYuYmFjaygpID09PSBudWxsKSB7XHJcbiAgICAgIHNlbGYub25Sb290UGFnZUJhY2tQcmVzc2VkKGNmLm5hbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcblx0ICogRGVsZXRlIEV2ZW50IGhhbmRsZXJzIHRoYXQgd2VyZSBjcmVhdGVkIGJ5IHRoZSBOYXYgaW5zdGFuY2VcclxuXHQgKi9cclxuICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBET00od2luZG93KS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLyosd2luZG93UmVzaXplSGFuZGxlciovKTtcclxuICAgIERPTShkb2N1bWVudCkucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmFja2J1dHRvbicvKixkb2N1bWVudEJhY2tCdXR0b25IYW5kbGVyKi8pO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqXHJcblx0ICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBCYWNrIGJ1dHRvbiBpcyBjbGlja2VkIG9uIExBU1QgcGFnZSBvZiB0aGUgYXBwIFxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcblx0ICovXHJcbiAgdGhpcy5vblJvb3RQYWdlQmFja1ByZXNzZWQgPSBmdW5jdGlvbiAobmFtZSkgeyB9O1xyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqXHJcblx0ICogQ2FsbGJhY2sgZmlyZWQgb24gcGFnZSBmb3J3YXJkXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXHJcblx0ICogQHBhcmFtIHthbnlbXX0gYXJnc1xyXG5cdCAqL1xyXG4gIHRoaXMub25QYWdlTmF2aWdhdGVUbyA9IGZ1bmN0aW9uIChuYW1lLCBhcmdzKSB7IH07XHJcblxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqXHJcblx0ICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBwYWdlIGlzIGNyZWF0ZWRcclxuXHQgKi9cclxuICB0aGlzLm9uUGFnZUNyZWF0ZWQgPSBmdW5jdGlvbiAocGFnZSkgeyB9O1xyXG4gIC8qKlxyXG5cdCAqIENhbGxiYWNrIGZpcmVkIHdoZW4gcGFnZSBpcyBuYXZpZ2F0ZWQgXCJiYWNrXCIgdG9cclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcclxuXHQgKi9cclxuICB0aGlzLm9uUGFnZU5hdmlnYXRlQmFjayA9IGZ1bmN0aW9uIChuYW1lKSB7IH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEhpc3RvcnkoKSB7XHJcbiAgdmFyIF9zdGFjayA9IFtdO1xyXG5cclxuICAvL3dpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7aW5pdGlhbGl6ZWQ6dHJ1ZX0sIFwiXCIgKTtcclxuICAvL3dpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBcImluaXRpYWxcIiwgXCIjaW5pdGlhbFwiKTtcclxuXHJcbiAgZnVuY3Rpb24gZ2V0Q3VycmVudFN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlO1xyXG4gIH1cclxuICBmdW5jdGlvbiBwdXNoKHN0YXRlLCB0aXRsZSwgdXJsKSB7XHJcbiAgICBfc3RhY2sucHVzaCh7IHN0YXRlLCB0aXRsZSwgdXJsIH0pO1xyXG4gICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCB0aXRsZSwgdXJsKTtcclxuICB9XHJcbiAgZnVuY3Rpb24gcG9wKCkge1xyXG4gICAgX3N0YWNrLnBvcCgpO1xyXG4gICAgaWYgKF9zdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHdpbmRvdy5oaXN0b3J5LmdvKC0xKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlc2V0SGlzdG9yeSgpIHtcclxuICAgIGlmIChfc3RhY2subGVuZ3RoID4gMSkge1xyXG4gICAgICB3aW5kb3cuaGlzdG9yeS5nbygtX3N0YWNrLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBfc3RhY2sgPSBbXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldFJvb3Qoc3RhdGUsIHRpdGxlLCB1cmwpIHtcclxuICAgIHJlc2V0SGlzdG9yeSgpO1xyXG4gICAgLy9wdXNoKHN0YXRlLCB0aXRsZSwgdXJsKTtcclxuICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgdGl0bGUsIHVybCk7XHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICBwdXNoLFxyXG4gICAgc2V0Um9vdCxcclxuICAgIHBvcFxyXG4gIH07XHJcbn1cclxudmFyIGhpc3RvcnkgPSBIaXN0b3J5KCk7XHJcbiIsImltcG9ydCB7IGlzT2JqZWN0LCBpc1N0cmluZyB9IGZyb20gXCJ1dGlsXCI7XHJcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tIFwidXRpbFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IE9iamVjdHMgPSB7XHJcbiAgZmlsdGVyOiBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcclxuICAgIHZhciByZXQ7XHJcbiAgICBpZiAoaXNPYmplY3QoZGF0YSkgJiYgIWlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgcmV0ID0ge307IC8vbmV3IGRhdGEuY29uc3RydWN0b3I7XHJcbiAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlO1xyXG4gICAgICAgIC8vY2hlY2sgaWYgb3V0IHJvdyB1c2luZyBjYWxsYmFja1xyXG4gICAgICAgIHZhciBlbGVtID0gZGF0YVtrZXldO1xyXG4gICAgICAgIGlmIChlbGVtICE9IG51bGwgJiYgY2FsbGJhY2soZWxlbSwga2V5KSkge1xyXG4gICAgICAgICAgLy9jb3B5IGFsbCBmaWVsZHMgaW50byBvdXIgYXJyYXlcclxuICAgICAgICAgIHJldFtrZXldID0gZWxlbTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xyXG4gICAgICByZXQgPSBbXTtcclxuICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcclxuICAgICAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWU7XHJcbiAgICAgICAgLy9jaGVjayBpZiBvdXQgcm93IHVzaW5nIGNhbGxiYWNrXHJcbiAgICAgICAgdmFyIGVsZW0gPSBkYXRhW2tleV07XHJcbiAgICAgICAgaWYgKGVsZW0gIT0gbnVsbCAmJiBjYWxsYmFjayhlbGVtLCBrZXkpKSB7XHJcbiAgICAgICAgICAvL2NvcHkgYWxsIGZpZWxkcyBpbnRvIG91ciBhcnJheVxyXG4gICAgICAgICAgcmV0LnB1c2goZWxlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH0sXHJcbiAgbWFwOiBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcclxuICAgIHZhciByZXQ7XHJcbiAgICBpZiAoaXNPYmplY3QoZGF0YSkgJiYgIWlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgcmV0ID0ge307IC8vbmV3IGRhdGEuY29uc3RydWN0b3I7XHJcbiAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlO1xyXG4gICAgICAgIC8vY2hlY2sgaWYgb3V0IHJvdyB1c2luZyBjYWxsYmFja1xyXG4gICAgICAgIHZhciBlbGVtID0gZGF0YVtrZXldO1xyXG4gICAgICAgIGlmIChlbGVtICE9IG51bGwpIHtcclxuICAgICAgICAgIC8vY29weSBhbGwgZmllbGRzIGludG8gb3VyIGFycmF5XHJcbiAgICAgICAgICByZXRba2V5XSA9IGNhbGxiYWNrKGVsZW0sIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgcmV0ID0gW107XHJcbiAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlO1xyXG4gICAgICAgIC8vY2hlY2sgaWYgb3V0IHJvdyB1c2luZyBjYWxsYmFja1xyXG4gICAgICAgIHZhciBlbGVtID0gZGF0YVtrZXldO1xyXG4gICAgICAgIGlmIChlbGVtICE9IG51bGwpIHtcclxuICAgICAgICAgIC8vY29weSBhbGwgZmllbGRzIGludG8gb3VyIGFycmF5XHJcbiAgICAgICAgICByZXQucHVzaChjYWxsYmFjayhlbGVtLCBrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfSxcclxuICBmaW5kOiBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcclxuICAgICAgLy9jaGVjayBpZiBvdXQgcm93IHVzaW5nIGNhbGxiYWNrXHJcbiAgICAgIHZhciBlbGVtID0gZGF0YVtrZXldO1xyXG4gICAgICBpZiAoZWxlbSAhPSBudWxsICYmIGNhbGxiYWNrKGVsZW0sIGtleSkpIHtcclxuICAgICAgICAvL2NvcHkgYWxsIGZpZWxkcyBpbnRvIG91ciBhcnJheVxyXG4gICAgICAgIHJldHVybiBlbGVtO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICAvKipcclxuXHQgKiBjeWNsZSB0aHJvdWdoIG9iamVjdHMgaW4gYW4gYXJyYXlcclxuXHQgKi9cclxuICBmb3JFYWNoOiBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcclxuXHJcbiAgICBpZiAoaXNBcnJheShkYXRhKSkge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoY2FsbGJhY2soZGF0YVtpXSwgaSkgPT09IGZhbHNlKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xyXG4gICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcclxuICAgICAgICAvL2NoZWNrIGlmIG91dCByb3cgdXNpbmcgY2FsbGJhY2tcclxuICAgICAgICBpZiAoY2FsbGJhY2soZGF0YVtrZXldLCBrZXkpID09PSBmYWxzZSlcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGtleUJ5OiBmdW5jdGlvbiAoYXJyYXksIGNvbHVtbk5hbWUsIGNvbHVtbk5hbWVzKSB7XHJcbiAgICB2YXIgcmV0ID0ge307XHJcbiAgICBmb3IgKHZhciBrIGluIGFycmF5KSB7XHJcbiAgICAgIGlmICghYXJyYXkuaGFzT3duUHJvcGVydHkoaykpIGNvbnRpbnVlO1xyXG4gICAgICBpZiAoIWNvbHVtbk5hbWVzKVxyXG4gICAgICAgIHJldFthcnJheVtrXVtjb2x1bW5OYW1lXV0gPSBhcnJheVtrXTtcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKGNvbHVtbk5hbWVzKSkge1xyXG4gICAgICAgICAgcmV0W2FycmF5W2tdW2NvbHVtbk5hbWVdXSA9IGFycmF5W2tdW2NvbHVtbk5hbWVzXTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoY29sdW1uTmFtZXMpKSB7XHJcbiAgICAgICAgICB2YXIgciA9IHt9O1xyXG4gICAgICAgICAgT2JqZWN0cy5mb3JFYWNoKGNvbHVtbk5hbWVzLCBmdW5jdGlvbiAoY24pIHtcclxuICAgICAgICAgICAgcltjbl0gPSBhcnJheVtrXVtjbl07XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldFthcnJheVtrXVtjb2x1bW5OYW1lXV0gPSByO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcblx0ICogU2V0IE9iamVjdCBwcm9wZXJ0aWVzIHRvIG51bGwuIFxyXG5cdCAqIEBwYXJhbSB7Kn0gb2JqIFxyXG5cdCAqL1xyXG4gIGNsZWFyOiBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICBpZiAoaXNPYmplY3Qob2JqKSkge1xyXG4gICAgICBPYmplY3RzLmZvckVhY2gob2JqLCAoZWwsIGkpID0+IHtcclxuICAgICAgICBpZiAoIWlzT2JqZWN0KGVsKSlcclxuICAgICAgICAgIG9ialtpXSA9IG51bGw7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgT2JqZWN0cy5jbGVhcihlbCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb2JqID0gbnVsbDtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvKipcclxuXHQgKiBvd2Vyd3JpdGUgb2JqZWN0LCBwcmVzZXJ2aW5nIHJlZmVyZW5jZSBcclxuXHQgKiBAcGFyYW0geyp9IG9iaiBcclxuXHQgKi9cclxuICBvdmVyd3JpdGU6IGZ1bmN0aW9uIChvYmosIHNyYykge1xyXG4gICAgaWYgKCFpc09iamVjdChvYmopKSB7XHJcbiAgICAgIHJldHVybiBzcmM7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYmplY3Qoc3JjKSkge1xyXG4gICAgICBpZiAoIWlzT2JqZWN0KG9iaikpIHtcclxuICAgICAgICBvYmogPSBzcmM7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgIG9iaiA9IHNyYztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGlzQXJyYXkoc3JjKSAmJiBpc0FycmF5KG9iaikpIHtcclxuICAgICAgICAgICAgLy9pZiBib3RoIGFyZSBhcnJheXM6IG1ha2UgdGhlbSB0aGUgc2FtZSBsZW5ndGhcclxuICAgICAgICAgICAgb2JqLmxlbmd0aCA9IHNyYy5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9pZiBvbmUgb3IgYm90aCBhcmUgbm90IGFycmF5cywgcmVtb3ZlIGtleXMgZnJvbSB0YXJnZXQgdGhhdCBhcmUgbm90IGluIHNvdXJjZVxyXG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIHNyYykge1xyXG4gICAgICAgICAgICAgIGtleXMucHVzaChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIG9iaikge1xyXG4gICAgICAgICAgICAgIGlmIChrZXlzLmluZGV4T2YoaSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgb2JqW2ldO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImRlbGV0ZSBrZXlcIiwgaSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yICh2YXIgaSBpbiBzcmMpIHtcclxuICAgICAgICAgICAgLy9PTkxZIGFzc2lnbiBzaGFsbG93OiB0aGF0IGlzIGVub3VnaCBmb3IgY2hhbmdlIGRldGVjdGlvbiFcclxuICAgICAgICAgICAgb2JqW2ldID0gc3JjW2ldO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9iaiA9IHNyYztcclxuICAgIH1cclxuICAgIHJldHVybiBvYmo7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcblx0ICogQ29weSBvYmplY3QsIGJyZWFraW5nIHJlZmVyZW5jZSBcclxuXHQgKiBAcGFyYW0geyp9IG9iaiBcclxuXHQgKi9cclxuICBjb3B5OiBmdW5jdGlvbiAoc3JjKSB7XHJcbiAgICBpZiAoIWlzT2JqZWN0KHNyYykpIHtcclxuICAgICAgcmV0dXJuIHNyYztcclxuICAgIH1cclxuICAgIHZhciBvYmo7XHJcbiAgICBpZiAoc3JjIGluc3RhbmNlb2YgRGF0ZSlcclxuICAgICAgcmV0dXJuIG5ldyBEYXRlKHNyYy5nZXRUaW1lKCkpO1xyXG4gICAgZWxzZSB7XHJcbiAgICAgIGlmIChpc0FycmF5KHNyYykpXHJcbiAgICAgICAgb2JqID0gW107XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBvYmogPSB7fTtcclxuXHJcbiAgICAgIGZvciAodmFyIGkgaW4gc3JjKSB7XHJcbiAgICAgICAgb2JqW2ldID0gT2JqZWN0cy5jb3B5KHNyY1tpXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvYmo7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcblx0ICogV2FsayBvYmplY3QgY2FsbGluZyBjYWxsYmFjayBvbiBldmVyeSBub2RlXHJcblx0ICogQHBhcmFtIHtvYmplY3R9IG9iajEgXHJcblx0ICogQHBhcmFtIHtvYmplY3R9IG9iajIgXHJcblx0ICogQHBhcmFtIHtmdW5jdGlvbihvYmplY3Qsc3RyaW5nKTpib29sZWFufSBjYWxsYmFjayAtIHdoZXJlIGZpcnN0IHBhcmFtZXRlciBpcyB0aGUgY3VycmVudCBub2RlIGFuZCBzZWNvbmQgaXMgdGhlIGtleSBpbiB0aGUgbm9kZS4gUmV0dXJuIEZhbHNlIHRvIHN0b3Agd2Fsa2luZyB0aGUgY2hpbGRyZW4gb2YgdGhlIGN1cnJlbnQgbm9kZVxyXG5cdCAqL1xyXG4gIHdhbGs6IGZ1bmN0aW9uIChvYmoxLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKGlzT2JqZWN0KG9iajEpICYmIGNhbGxiYWNrKG9iajEsIGkpICE9PSBmYWxzZSkge1xyXG4gICAgICBmb3IgKHZhciBpIGluIG9iajEpIHtcclxuICAgICAgICBpZiAob2JqMS5oYXNPd25Qcm9wZXJ0eShpKSAmJiBpc09iamVjdChvYmoxW2ldKSkge1xyXG4gICAgICAgICAgT2JqZWN0cy53YWxrKG9iajFbaV0sIGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvKipcclxuXHQgKiBXYWxrIDIgb2JqZWN0cyBzaWRlIGJ5IHNpZGVcclxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqMSBcclxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqMiBcclxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKG9iamVjdCxvYmplY3Qsc3RyaW5nKTphbnl9IGNhbGxiYWNrICB3aGVyZSBmaXJzdCBwYXJhbWV0ZXIgaXMgdGhlIGN1cnJlbnQgbm9kZSwgc2Vjb25kIHBhcmFtZXRlciBpcyBhbm90aGVyIG9iamVjdHMgbm9kZSBhbmQgdGhpcmQgb25lIGlzIHRoZSBrZXkgaW4gdGhlIGZpcnN0IG5vZGVcclxuXHQgKi9cclxuICB3YWxrMjogZnVuY3Rpb24gKG9iajEsIG9iajIsIGNhbGxiYWNrKSB7XHJcbiAgICBpZiAoaXNPYmplY3Qob2JqMSkpIHtcclxuICAgICAgY2FsbGJhY2sob2JqMSwgb2JqMiwgaSk7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gb2JqMSkge1xyXG4gICAgICAgIGlmIChvYmoxLmhhc093blByb3BlcnR5KGkpKSB7XHJcblxyXG5cclxuICAgICAgICAgIGlmIChpc09iamVjdChvYmoxW2ldKSkge1xyXG4gICAgICAgICAgICBPYmplY3RzLndhbGsyKG9iajFbaV0sIGlzT2JqZWN0KG9iajIpID8gb2JqMltpXSA6IHVuZGVmaW5lZCwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG5cdCAqIEdldCBvYmplY3QgcHJvcGVydHkgdXNpbmcgcGF0aFxyXG5cdCAqIEBwYXJhbSB7Kn0gb2JqIFxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nW118c3RyaW5nfSBwYXRoQXJyYXkgXHJcblx0ICogQHJldHVybiB7YW55fVxyXG5cdCAqL1xyXG4gIGdldFByb3BlcnR5QnlQYXRoKG9iaiwgcGF0aEFycmF5KSB7XHJcbiAgICBpZiAocGF0aEFycmF5ID09PSBcIlwiIHx8IHBhdGhBcnJheSA9PT0gbnVsbCB8fCBwYXRoQXJyYXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb3BlcnR5IHBhdGggaW4gb2JqZWN0ICR7SlNPTi5zdHJpbmdpZnkob2JqKX0gY2FuIG5vdCBiZSBlbXB0eSFgKTtcclxuICAgIH1cclxuICAgIGlmICghQXJyYXkuaXNBcnJheShwYXRoQXJyYXkpKSB7XHJcbiAgICAgIHBhdGhBcnJheSA9IChcIlwiICsgcGF0aEFycmF5KS5yZXBsYWNlKC9cXF0uL2csICcuJykucmVwbGFjZSgvXFxdL2csICcuJykucmVwbGFjZSgvXFxbL2csICcuJyk7XHJcbiAgICAgIHBhdGhBcnJheSA9IHBhdGhBcnJheS5zcGxpdCgnLicpO1xyXG4gICAgICBpZiAocGF0aEFycmF5W3BhdGhBcnJheS5sZW5ndGggLSAxXSA9PT0gJycpIHtcclxuICAgICAgICBwYXRoQXJyYXkucG9wKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHBhdGhBcnJheS5sZW5ndGggPiAxKSB7XHJcbiAgICAgIGxldCBjVmFsID0gb2JqW3BhdGhBcnJheS5zaGlmdCgpXTtcclxuICAgICAgaWYgKGNWYWwgPT0gdW5kZWZpbmVkKSByZXR1cm4gY1ZhbDtcclxuICAgICAgcmV0dXJuIE9iamVjdHMuZ2V0UHJvcGVydHlCeVBhdGgoY1ZhbCwgcGF0aEFycmF5KTtcclxuICAgIH0gZWxzZVxyXG4gICAgICByZXR1cm4gb2JqW3BhdGhBcnJheS5zaGlmdCgpXTtcclxuICB9LFxyXG4gIC8qKlxyXG5cdCAqIEdldCBvYmplY3QgcHJvcGVydHkgdXNpbmcgcGF0aFxyXG5cdCAqIEBwYXJhbSB7Kn0gb2JqIFxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nW118c3RyaW5nfSBwYXRoQXJyYXkgXHJcblx0ICogQHBhcmFtIHthbnl9IHZhbHVlXHJcblx0ICovXHJcbiAgc2V0UHJvcGVydHlCeVBhdGgob2JqLCBwYXRoQXJyYXksIHZhbHVlKSB7XHJcbiAgICBpZiAocGF0aEFycmF5ID09PSBcIlwiIHx8IHBhdGhBcnJheSA9PT0gbnVsbCB8fCBwYXRoQXJyYXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb3BlcnR5IHBhdGggaW4gb2JqZWN0ICR7SlNPTi5zdHJpbmdpZnkob2JqKX0gY2FuIG5vdCBiZSBlbXB0eSFgKTtcclxuICAgIH1cclxuICAgIGlmICghQXJyYXkuaXNBcnJheShwYXRoQXJyYXkpKSB7XHJcbiAgICAgIHBhdGhBcnJheSA9IChcIlwiICsgcGF0aEFycmF5KS5yZXBsYWNlKC9cXF0uL2csICcuJykucmVwbGFjZSgvXFxdL2csICcuJykucmVwbGFjZSgvXFxbL2csICcuJyk7XHJcbiAgICAgIHBhdGhBcnJheSA9IHBhdGhBcnJheS5zcGxpdCgnLicpO1xyXG4gICAgICBpZiAocGF0aEFycmF5W3BhdGhBcnJheS5sZW5ndGggLSAxXSA9PT0gJycpIHtcclxuICAgICAgICBwYXRoQXJyYXkucG9wKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAocGF0aEFycmF5Lmxlbmd0aCA+IDEpIHtcclxuICAgICAgdmFyIHNoZnQgPSBwYXRoQXJyYXkuc2hpZnQoKTtcclxuICAgICAgaWYgKCFpc09iamVjdChvYmpbc2hmdF0pKSB7XHJcbiAgICAgICAgb2JqW3NoZnRdID0ge307XHJcbiAgICAgIH1cclxuICAgICAgT2JqZWN0cy5zZXRQcm9wZXJ0eUJ5UGF0aChvYmpbc2hmdF0sIHBhdGhBcnJheSwgdmFsdWUpO1xyXG4gICAgfSBlbHNlXHJcbiAgICAgIG9ialtwYXRoQXJyYXkuc2hpZnQoKV0gPSB2YWx1ZTtcclxuICB9LFxyXG4gIC8qKlxyXG5cdCAqIEdldCBvYmplY3QgcHJvcGVydHkgdXNpbmcgcGF0aFxyXG5cdCAqIEBwYXJhbSB7Kn0gb2JqIFxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nW118c3RyaW5nfSBwYXRoQXJyYXkgXHJcblx0ICogQHBhcmFtIHthbnl9IHZhbHVlXHJcblx0ICovXHJcbiAgZGVsZXRlUHJvcGVydHlCeVBhdGgob2JqLCBwYXRoQXJyYXkpIHtcclxuICAgIGlmIChwYXRoQXJyYXkgPT09IFwiXCIgfHwgcGF0aEFycmF5ID09PSBudWxsIHx8IHBhdGhBcnJheSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvcGVydHkgcGF0aCBpbiBvYmplY3QgJHtKU09OLnN0cmluZ2lmeShvYmopfSBjYW4gbm90IGJlIGVtcHR5IWApO1xyXG4gICAgfVxyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBhdGhBcnJheSkpIHtcclxuICAgICAgcGF0aEFycmF5ID0gKFwiXCIgKyBwYXRoQXJyYXkpLnNwbGl0KCcuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBhdGhBcnJheS5sZW5ndGggPiAxKVxyXG4gICAgICBPYmplY3RzLmRlbGV0ZVByb3BlcnR5QnlQYXRoKG9ialtwYXRoQXJyYXkuc2hpZnQoKV0sIHBhdGhBcnJheSk7XHJcbiAgICBlbHNlXHJcbiAgICAgIGRlbGV0ZSBvYmpbcGF0aEFycmF5LnNoaWZ0KCldO1xyXG4gIH0sXHJcblxyXG4gIGdldE1ldGhvZHMob2JqZWN0KSB7XHJcbiAgICB2YXIgbWV0aG9kcyA9IFtdO1xyXG4gICAgdmFyIGlPYmogPSBvYmplY3Q7XHJcbiAgICBkbyB7XHJcbiAgICAgIG1ldGhvZHMgPSBtZXRob2RzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpT2JqKSk7XHJcbiAgICB9IHdoaWxlICgoaU9iaiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihpT2JqKSkgJiYgaU9iaiAhPSBPYmplY3QucHJvdG90eXBlKTtcclxuXHJcbiAgICBtZXRob2RzID0gT2JqZWN0cy5maWx0ZXIobWV0aG9kcywga2V5ID0+IHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJyk7XHJcblxyXG4gICAgcmV0dXJuIG1ldGhvZHM7XHJcbiAgfSxcclxuICBnZXRQcm9wZXJ0aWVzKG9iamVjdCkge1xyXG4gICAgdmFyIHByb3BlcnRpZXMgPSBbXTtcclxuICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgIHByb3BlcnRpZXMucHVzaChrZXkpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcHJvcGVydGllcztcclxuICB9LFxyXG4gIGJpbmRNZXRob2RzKGNvbnRleHQpIHtcclxuICAgIHZhciBtZXRob2RzID0gT2JqZWN0cy5nZXRNZXRob2RzKGNvbnRleHQpO1xyXG4gICAgbWV0aG9kcy5mb3JFYWNoKChuYW1lKSA9PiB7XHJcbiAgICAgIGNvbnRleHRbbmFtZV0gPSBjb250ZXh0W25hbWVdLmJpbmQoY29udGV4dCk7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIHN0cmlwKG9iamVjdCkge1xyXG4gICAgLy9kZXN0cm95IGFsbCBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLCBzbyB0aGV5IGNhbiBubyBsb25nZXIgYmUgcmVmZXJlbmNlZFxyXG4gICAgT2JqZWN0cy5nZXRNZXRob2RzKG9iamVjdCkuZm9yRWFjaCgoaSkgPT4ge1xyXG4gICAgICBkZWxldGUgb2JqZWN0W2ldO1xyXG4gICAgfSk7XHJcbiAgICBPYmplY3RzLmdldFByb3BlcnRpZXMob2JqZWN0KS5mb3JFYWNoKChpKSA9PiB7XHJcbiAgICAgIGRlbGV0ZSBvYmplY3RbaV07XHJcbiAgICB9KTtcclxuICB9XHJcbn07IiwiaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tIFwiLi9JbmplY3RvclwiO1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCJ1dGlsXCI7XHJcbmltcG9ydCB7IGFyZ3VtZW50c1RvQXJyYXkgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XHJcblxyXG5jb25zdCBJbmplY3QgPSBJbmplY3RvcjtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIHJlcGxhY2VzIHsxfSx7Mn0sezN9LCBpbiBMYW5nQ29uc3RUZXh0IHdpdGggY29ycmVzcG9uZGluZyByZXBsYWNlVmFsdWVzXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBMYW5nQ29uc3RUZXh0IFxyXG4gKiBAcGFyYW0gey4uLnN0cmluZ3xudW1iZXJ9IFtyZXBsYWNlVmFsdWVzXVxyXG4gKi9cclxuZXhwb3J0IHZhciBSZXBsYWNlVmFsdWVzID0gZnVuY3Rpb24oTGFuZ0NvbnN0VGV4dCwgcmVwbGFjZVZhbHVlcyl7XHJcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgaWYgKGFyZ3MubGVuZ3RoPT0xKVxyXG4gICAgcmV0dXJuIExhbmdDb25zdFRleHQ7XHJcbiAgcmV0dXJuIExhbmdDb25zdFRleHQucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csIGZ1bmN0aW9uKG1hdGNoLCBjb250ZW50cywgb2Zmc2V0LCBpbnB1dF9zdHJpbmcpe1xyXG4gICAgcmV0dXJuIGFyZ3NbY29udGVudHNdO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5T3JUZXh0IFxyXG4gKiBAcGFyYW0gey4uLnN0cmluZ3xudW1iZXJ9IFtyZXBsYWNlVmFsdWVzXSB0ZXh0IGl0ZW1zIHRoYXQgcmVwbGFjZSB7MX0sezJ9LHszfSBwbGFjZWhvbGRlcnMgaW4gdGhlIHRyYW5zbGF0ZWQgdGV4dC5cclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zbGF0ZShrZXlPclRleHQsIHJlcGxhY2VWYWx1ZXMpe1xyXG4gIGlmICghSW5qZWN0WydMTkcnXSlcclxuICAgIHJldHVybiBrZXlPclRleHQ7XHJcblxyXG4gIHZhciByZXQgPSBJbmplY3RbJ0xORyddW2tleU9yVGV4dF0gPyBJbmplY3RbJ0xORyddW2tleU9yVGV4dF0gOiBrZXlPclRleHQ7XHJcbiAgaWYgKHJlcGxhY2VWYWx1ZXMgJiYgaXNTdHJpbmcocmV0KSl7XHJcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50c1RvQXJyYXkoYXJndW1lbnRzKTtcclxuICAgIGFyZ3NbMF0gPSByZXQ7XHJcbiAgICByZXR1cm4gUmVwbGFjZVZhbHVlcy5hcHBseShudWxsLGFyZ3MpO1xyXG5cdFx0XHJcbiAgfVxyXG4gIHJldHVybiByZXQ7XHJcbn0iLCJpbXBvcnQgeyBpc09iamVjdCwgaXNBcnJheSwgaXNTeW1ib2wsIGlzRGF0ZSB9IGZyb20gXCJ1dGlsXCI7XHJcblxyXG5sZXQgaXNQcm94eSA9IFN5bWJvbChcImlzUHJveHlcIik7XHJcbmxldCBpc1dhdGNoZWQgPSBTeW1ib2woXCJpc1dhdGNoZWRcIik7XHJcblxyXG5sZXQgcHJvcGVydHlDaGFuZ2VDYWxsYmFja3MgPSBTeW1ib2woXCJwcm9wZXJ0eUNoYW5nZUNhbGxiYWNrc1wiKTtcclxubGV0IG9iamVjdENoYW5nZUNhbGxiYWNrcyA9IFN5bWJvbChcIm9iamVjdENoYW5nZUNhbGxiYWNrc1wiKTtcclxuLy93aW5kb3dbJ1Byb3h5J10gPSBudWxsOyAvL2NvbW1lbnQgb3V0IHRvIHRlc3QgZGlydHkgY2hlY2tpbmcgb24gY2hyb21lXHJcblxyXG5leHBvcnQgdmFyIGlzU2tpcFVwZGF0ZSA9IFN5bWJvbChcImlzU2tpcFVwZGF0ZVwiKTtcclxuLyoqXHJcbiAqIFRoZSB3YXRjaCBmdW5jdGlvbiBjcmVhdGVzIHByb3h5IGZyb20gYW55IG9iamVjdCBhbmQgd2F0Y2hlcyBpdHMgY2hhbmdlcy4gVHJpZ2dlcnMgb25seSB3aGVuIG93biBwcm9wZXJ0aWVzIGNoYW5nZSBvciBwcm9wZXJ0aWVzIG9mIGl0cyBzaW1wbGUgcHJvcGVydGllc1xyXG4gKiBcclxuICovXHJcbmV4cG9ydCB2YXIgV2F0Y2hlcj17XHJcbiAgc2tpcDogaXNTa2lwVXBkYXRlLFxyXG4gIHdhdGNoZWQ6IGlzV2F0Y2hlZCxcclxuXHJcbiAgLyoqXHJcbiAgICogV2F0Y2ggZm9yIG9iamVjdCBjaGFuZ2VzLiBcclxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0IC0gb2JqZWN0IHRvIHdhdGNoIGZvciBjaGFuZ2VzXHJcblx0ICogQHBhcmFtIHtmdW5jdGlvbihvYmplY3QsIHN0cmluZywgYW55KTp2b2lkfSBbb25Qcm9wZXJ0eUNoYW5nZUNhbGxiYWNrXSAtIGNhbGxlZCBmb3IgZWFjaCBjaGFuZ2VkIHByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpOnZvaWR9IFtvbk9iamVjdENoYW5nZUNhbGxiYWNrXSAtIHRpbWVvdXQgMCBkZS1ib3VuY2VkIGNhbGxiYWNrLiBjYWxsZWQgb24gdGhlIG5leHQgZnJhbWUgYWZ0ZXIgYWxsIG9uUHJvcGVydHlDaGFuZ2VDYWxsYmFja3MgYXJlIGV4ZWN1dGVkXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2lnbm9yZVByb3BlcnRpZXNdXHJcblx0ICovXHJcbiAgb24ob2JqZWN0LCBvblByb3BlcnR5Q2hhbmdlQ2FsbGJhY2ssIG9uT2JqZWN0Q2hhbmdlQ2FsbGJhY2ssIGlnbm9yZVByb3BlcnRpZXMgKXtcclxuICAgIFxyXG4gICAgb2JqZWN0W2lzV2F0Y2hlZF0gPSB0cnVlO1xyXG5cclxuICAgIGlmICghb2JqZWN0W3Byb3BlcnR5Q2hhbmdlQ2FsbGJhY2tzXSl7XHJcbiAgICAgIG9iamVjdFtwcm9wZXJ0eUNoYW5nZUNhbGxiYWNrc10gPSBbXTtcclxuICAgIH1cclxuICAgIG9iamVjdFtwcm9wZXJ0eUNoYW5nZUNhbGxiYWNrc10ucHVzaChvblByb3BlcnR5Q2hhbmdlQ2FsbGJhY2spO1xyXG4gICBcclxuICAgIGlmIChvbk9iamVjdENoYW5nZUNhbGxiYWNrKXtcclxuICAgICAgaWYgKCFvYmplY3Rbb2JqZWN0Q2hhbmdlQ2FsbGJhY2tzXSl7XHJcbiAgICAgICAgb2JqZWN0W29iamVjdENoYW5nZUNhbGxiYWNrc10gPSBbXTtcclxuICAgICAgfVxyXG4gICAgICBvYmplY3Rbb2JqZWN0Q2hhbmdlQ2FsbGJhY2tzXS5wdXNoKG9uT2JqZWN0Q2hhbmdlQ2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByb3BlcnR5Q2hhbmdlSGFuZGxlcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSApe1xyXG4gICAgICBpZiAoLy92YWx1ZSA9PT0gaXNTa2lwVXBkYXRlIHx8XHJcbiAgICAgICAgdGFyZ2V0W3Byb3BlcnR5XSA9PT0gdmFsdWUgfHxcclxuICAgICAgICBpc1N5bWJvbChwcm9wZXJ0eSkgfHxcclxuICAgICAgICAvL3Byb3BlcnR5ID09PSBpc1NraXBVcGRhdGUgfHxcclxuICAgICAgICAhb2JqZWN0W2lzV2F0Y2hlZF0pe1xyXG5cclxuICAgICAgICByZXR1cm47IFxyXG4gICAgICB9XHJcbiAgICAgIGxldCBpc1NraXAgPSBvYmplY3RbaXNTa2lwVXBkYXRlXTtcclxuICAgICAgLy9za2lwIGFueSBzdWJzZXF1ZW50IHVwZGF0ZXMgdHJpZ2dlcmVkIGJ5IGFsbCBvbkNoYW5nZSBDYWxsYmFja3NcclxuICAgICAgb2JqZWN0W2lzU2tpcFVwZGF0ZV0gPSB0cnVlO1xyXG4gICAgICBvYmplY3RbcHJvcGVydHlDaGFuZ2VDYWxsYmFja3NdLmZvckVhY2goZnVuY3Rpb24ob25Qcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKXtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgb25Qcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKTtcclxuICAgICAgICB9IGNhdGNoIChleCl7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIG9iamVjdFtpc1NraXBVcGRhdGVdID0gaXNTa2lwO1xyXG5cclxuICAgICAgaWYgKHRhcmdldCAhPT0gb2JqZWN0ICYmIHRhcmdldFtwcm9wZXJ0eUNoYW5nZUNhbGxiYWNrc10gJiYgdGFyZ2V0W2lzV2F0Y2hlZF0pe1xyXG4gICAgICAgIGxldCBpc1NraXAyID0gdGFyZ2V0W2lzU2tpcFVwZGF0ZV07XHJcbiAgICAgICAgdGFyZ2V0W2lzU2tpcFVwZGF0ZV0gPSB0cnVlO1xyXG4gICAgICAgIHRhcmdldFtwcm9wZXJ0eUNoYW5nZUNhbGxiYWNrc10uZm9yRWFjaChmdW5jdGlvbihvblByb3BlcnR5Q2hhbmdlQ2FsbGJhY2spe1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgb25Qcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGV4KXtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGV4KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0YXJnZXRbaXNTa2lwVXBkYXRlXSA9IGlzU2tpcDI7XHJcbiAgICAgIH1cclxuICAgICAgc2NoZWR1bGVUYXJnZXRDYWxsYmFjayh0YXJnZXQpO1xyXG4gICAgICBzY2hlZHVsZUNhbGxiYWNrKCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrKCl7XHJcbiAgICAgIGlmIChvYmplY3RbaXNTa2lwVXBkYXRlXSB8fCAhb2JqZWN0W2lzV2F0Y2hlZF0pe1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgb2JqZWN0W2lzU2tpcFVwZGF0ZV0gPSB0cnVlO1xyXG4gICAgXHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gc2NoZWR1bGVkVXBkYXRlKCl7XHJcbiAgICAgICAgaWYgKCFvYmplY3RbaXNXYXRjaGVkXSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIC8vcHJldmVudCBjaGFuZ2VzIGluIG9iamVjdCBmcm9tIGNhbGxpbmcgb3RoZXIgdXBkYXRlcyB3aGlsZSBvblVwZGF0ZUNhbGxiYWNrIGlzIGV4ZWN1dGluZ1xyXG4gICAgICAgIG9iamVjdFtpc1NraXBVcGRhdGVdID0gdHJ1ZTtcclxuICAgICAgICBvYmplY3Rbb2JqZWN0Q2hhbmdlQ2FsbGJhY2tzXS5mb3JFYWNoKGZ1bmN0aW9uKG9uVXBkYXRlQ2FsbGJhY2spe1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgb25VcGRhdGVDYWxsYmFjaygpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZXgpe1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZXgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG9iamVjdFtpc1NraXBVcGRhdGVdID0gZmFsc2U7XHJcbiAgICAgIH0sMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2NoZWR1bGVUYXJnZXRDYWxsYmFjayh0YXJnZXQpe1xyXG4gICAgICBpZiAodGFyZ2V0ID09IG9iamVjdCl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGFyZ2V0W2lzU2tpcFVwZGF0ZV0gfHwgIXRhcmdldFtpc1dhdGNoZWRdIHx8ICF0YXJnZXRbb2JqZWN0Q2hhbmdlQ2FsbGJhY2tzXSl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0YXJnZXRbaXNTa2lwVXBkYXRlXSA9IHRydWU7XHJcbiAgICBcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiBzY2hlZHVsZWRVcGRhdGUoKXtcclxuICAgICAgICBpZiAoIXRhcmdldFtpc1dhdGNoZWRdKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgLy9wcmV2ZW50IGNoYW5nZXMgaW4gb2JqZWN0IGZyb20gY2FsbGluZyBvdGhlciB1cGRhdGVzIHdoaWxlIG9uVXBkYXRlQ2FsbGJhY2sgaXMgZXhlY3V0aW5nXHJcbiAgICAgICAgdGFyZ2V0W2lzU2tpcFVwZGF0ZV0gPSB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0YXJnZXRbb2JqZWN0Q2hhbmdlQ2FsbGJhY2tzXSl7XHJcblxyXG4gICAgICAgICAgdGFyZ2V0W29iamVjdENoYW5nZUNhbGxiYWNrc10uZm9yRWFjaChmdW5jdGlvbihvblVwZGF0ZUNhbGxiYWNrKXtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBvblVwZGF0ZUNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KXtcclxuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0W2lzU2tpcFVwZGF0ZV0gPSBmYWxzZTtcclxuICAgICAgfSwwKTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZXRXYXRjaGVkT2JqZWN0KG9iamVjdCwgcHJvcGVydHlDaGFuZ2VIYW5kbGVyLCBpZ25vcmVQcm9wZXJ0aWVzKTtcclxuICB9LFxyXG4gIG9mZjogZnVuY3Rpb24oIG9iamVjdCwgaGFuZGxlciApe1xyXG4gICAgaWYgKCFoYW5kbGVyKSB7XHJcbiAgICAgIGRlbGV0ZSBvYmplY3RbaXNXYXRjaGVkXTtcclxuICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eUNoYW5nZUNhbGxiYWNrc107XHJcbiAgICAgIGRlbGV0ZSBvYmplY3Rbb2JqZWN0Q2hhbmdlQ2FsbGJhY2tzXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZvciAobGV0IGkgaW4gb2JqZWN0W3Byb3BlcnR5Q2hhbmdlQ2FsbGJhY2tzXSkge1xyXG4gICAgICAgIGlmIChvYmplY3RbcHJvcGVydHlDaGFuZ2VDYWxsYmFja3NdW2ldKVxyXG4gICAgICAgICAgb2JqZWN0W3Byb3BlcnR5Q2hhbmdlQ2FsbGJhY2tzXS5zcGxpY2UoaSwxKTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKGxldCBpIGluIG9iamVjdFtvYmplY3RDaGFuZ2VDYWxsYmFja3NdKSB7XHJcbiAgICAgICAgaWYgKG9iamVjdFtvYmplY3RDaGFuZ2VDYWxsYmFja3NdW2ldKVxyXG4gICAgICAgICAgb2JqZWN0W29iamVjdENoYW5nZUNhbGxiYWNrc10uc3BsaWNlKGksMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRXYXRjaGVkT2JqZWN0KG9iamVjdCwgb25Qcm9wZXJ0eUNoYW5nZSwgaWdub3JlUHJvcGVydGllcyl7XHJcbiAgaWdub3JlUHJvcGVydGllcyA9IGlnbm9yZVByb3BlcnRpZXMgfHwgW107XHJcbiAgaWYgKHdpbmRvd1snUHJveHknXSAmJiB3aW5kb3dbJ1JlZmxlY3QnXSl7XHJcbiAgICBjb25zdCBoYW5kbGVyID0ge1xyXG4gICAgICBnZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcclxuICAgICAgICBpZiAocHJvcGVydHkgPT0gaXNQcm94eSlcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICBjb25zdCB2YWx1ZSA9IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKTtcclxuXHJcbiAgICAgICAgLy9yZXR1cm4gYXMtaXMgaWYgaXRzIGEgcHJpbWl0aXZlXHRcclxuICAgICAgICBpZiAoISBpc09iamVjdCh2YWx1ZSkpXHJcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgaWYgKHZhbHVlICYmIGlzT2JqZWN0KHZhbHVlKSAmJiB2YWx1ZVtpc1Byb3h5XSlcclxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgLy9yZXR1cm4gbm9uLW1vZGlmaWFibGUgb2JqZWN0cyBhcy1pc1xyXG4gICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHkpO1xyXG4gICAgICAgIGlmIChkZXNjICYmICFkZXNjLndyaXRhYmxlICYmICFkZXNjLmNvbmZpZ3VyYWJsZSkgcmV0dXJuIHZhbHVlO1xyXG5cclxuICAgICAgICAvL3JldHVybiBvYmplY3RzLCBpbnN0YW50aWF0ZWQgd2l0aCBgbmV3YCBhcy1pc1xyXG4gICAgICAgIGlmICghIGlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0KHZhbHVlKSAmJiAhaXNPYmpMaXRlcmFsKHZhbHVlKSlcclxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICBcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXRbcHJvcGVydHldLCBoYW5kbGVyKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKGlnbm9yZVByb3BlcnRpZXMuaW5kZXhPZihwcm9wZXJ0eSkgPCAwKVxyXG4gICAgICAgICAgb25Qcm9wZXJ0eUNoYW5nZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSApO1xyXG4gICAgIFxyXG4gICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHtcclxuICAgICAgICBpZiAoaWdub3JlUHJvcGVydGllcy5pbmRleE9mKHByb3BlcnR5KSA8IDApXHJcbiAgICAgICAgICBvblByb3BlcnR5Q2hhbmdlKHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IgKTtcclxuICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjcmlwdG9yKTtcclxuICAgICAgfSxcclxuICAgICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xyXG4gICAgICAgIGlmIChpZ25vcmVQcm9wZXJ0aWVzLmluZGV4T2YocHJvcGVydHkpIDwgMClcclxuICAgICAgICAgIG9uUHJvcGVydHlDaGFuZ2UodGFyZ2V0LCBwcm9wZXJ0eSwgdW5kZWZpbmVkICk7XHJcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHJldHVybiBuZXcgUHJveHkob2JqZWN0LCBoYW5kbGVyKTtcclxuICB9ZWxzZXtcclxuICAgIG9uT2JqZWN0RGlydHlDaGFuZ2Uob2JqZWN0ICxcclxuICAgICAgKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKT0+eyAvL3Byb3BlcnR5IGNoYW5nZWQgY2FsbGJhY2tcclxuICAgICAgICBvblByb3BlcnR5Q2hhbmdlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlICk7XHJcbiAgICAgIH0sIGlnbm9yZVByb3BlcnRpZXNcclxuICAgICk7XHJcbiAgICByZXR1cm4gb2JqZWN0O1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNPYmpMaXRlcmFsKF9vYmopIHtcclxuICB2YXIgX3Rlc3QgID0gX29iajtcclxuICByZXR1cm4gKFxyXG4gICAgdHlwZW9mIF9vYmogIT09ICdvYmplY3QnIHx8IF9vYmogPT09IG51bGwgP1xyXG4gICAgICBmYWxzZSA6ICBcclxuICAgICAgKFxyXG4gICAgICAgIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB3aGlsZSAoIWZhbHNlKSB7XHJcbiAgICAgICAgICAgIF90ZXN0ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKF90ZXN0KTtcclxuICAgICAgICAgICAgaWYgKCBfdGVzdCA9PT0gbnVsbCB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoX3Rlc3QpID09PSBudWxsICkge1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9ICAgICAgICBcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoX29iaikgPT09IF90ZXN0O1xyXG4gICAgICAgIH0pKClcclxuICAgICAgKVxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXJ0eS1MaXN0ZW4gdG8gb2JqZWN0IGNoYW5nZXMgXHJcbiAqIENhbGxiYWNrIGlzIGZpcmVkIGZvciBldmVyeSBjaGFuZ2VkIHByb3BlcnR5XHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3QgXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24ob2JqZWN0LCBzdHJpbmcsIGFueSk6dm9pZH0gb25Qcm9wZXJ0eUNoYW5nZUNhbGxiYWNrIFxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbaWdub3JlUHJvcGVydGllc11cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBvbk9iamVjdERpcnR5Q2hhbmdlKG9iamVjdCwgb25Qcm9wZXJ0eUNoYW5nZUNhbGxiYWNrLCBpZ25vcmVQcm9wZXJ0aWVzKXtcclxuICBpZ25vcmVQcm9wZXJ0aWVzID0gaWdub3JlUHJvcGVydGllcyB8fCBbXTtcclxuXHJcbiAgdmFyIHJlZk9iamVjdCA9IHt9OyAvL3JlZmVyZW5jZSBjcHkgb2YgdGhlIG9iamVjdCB3ZSBhcmUgd2F0Y2hpbmdcclxuICB2YXIgY2hlY2tIYXNoID0gZnVuY3Rpb24oKXtcdFxyXG4gICAgLy90aHJvdHRsZSB0aGUgcmVxdWVzdCBhbmltYXRpb24gdG8gNTBtc1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICB2YXIgY2hlY2tlZCA9IG9iamVjdENsb25lQ29tcGFyZShyZWZPYmplY3QsIG9iamVjdCwgb25Qcm9wZXJ0eUNoYW5nZUNhbGxiYWNrLCBpZ25vcmVQcm9wZXJ0aWVzKTtcclxuXHRcdFx0XHJcbiAgICAgIGlmIChvYmplY3RbaXNXYXRjaGVkXSl7XHJcbiAgICAgICAgcmVmT2JqZWN0ID0gY2hlY2tlZDtcclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNoZWNrSGFzaCk7XHJcbiAgICAgIH1cclxuICAgIH0sNTApO1xyXG4gIH07XHJcbiAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjaGVja0hhc2gpO1xyXG59XHJcblxyXG4vKipcclxuICogQ29tcGFyZXMgb2xkIG9iamVjdCBhbmQgbmV3IG9iamVjdC4gXHJcbiAqIERvZXMgbm90IGNsb25lIGNsYXNzZXMgb3IgZnVuY3Rpb25zLiB0aGV5IGFyZSBjb21wYXJlZCBieSByZWZlcmVuY2Ugb25seS5cclxuICogQ2FsbGJhY2sgaXMgZmlyZWQgZm9yIGV2ZXJ5IGNoYW5nZWQgcHJvcGVydHkuXHJcbiAqIFJldHVybnMgdGhlIGNsb25lZCBjb3B5IG9mIHRoZSBuZXcgb2JqZWN0IGZvciBzdWJzZXF1ZW50IGNoYW5nZSBjaGVja2luZ1xyXG4gKiBAcGFyYW0ge29iamVjdH0gb2xkT2JqIFxyXG4gKiBAcGFyYW0ge29iamVjdH0gbmV3T2JqIFxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG9iamVjdCwgc3RyaW5nLCBhbnkpOnZvaWR9IG9uUHJvcGVydHlDaGFuZ2VDYWxsYmFjayBcclxuICogQHBhcmFtIHtzdHJpbmdbXX0gW2lnbm9yZVByb3BlcnRpZXNdXHJcbiAqIEByZXR1cm4ge29iamVjdH1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBvYmplY3RDbG9uZUNvbXBhcmUob2xkT2JqLCBuZXdPYmosIG9uUHJvcGVydHlDaGFuZ2VDYWxsYmFjaywgaWdub3JlUHJvcGVydGllcyl7XHJcbiAgaWdub3JlUHJvcGVydGllcyA9IGlnbm9yZVByb3BlcnRpZXMgfHwgW107XHJcbiAgdmFyIG9sZEtleXMgPSBnZXRPYmpLZXlzKG9sZE9iaik7XHJcbiAgdmFyIG5ld0tleXMgPSBnZXRPYmpLZXlzKG5ld09iaik7XHJcbiAgdmFyIG5ld0NoZWNrZWQgPSBbXTtcclxuICB2YXIgcmV0ID0gaXNBcnJheShuZXdPYmopID8gW10gOiB7fTtcclxuXHJcbiAgZm9yIChsZXQgaSBpbiBvbGRLZXlzKXtcclxuICAgIGxldCBrID0gb2xkS2V5c1tpXTtcclxuICAgIGlmIChuZXdPYmpba10gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAvL25ldyBvYmplY3QgaGFzIHRoZSBvbGQga2V5XHJcbiAgICAgIGlmIChpZ25vcmVQcm9wZXJ0aWVzLmluZGV4T2YoaykgPCAwKSB7XHJcbiAgICAgICAgLy9pZiBrZXkgaXMgbm90IGluIHRoZSBpZ25pb3JlIGFycmF5XHJcblxyXG4gICAgICAgIGlmIChpc0RhdGUob2xkT2JqW2tdKSAmJiBpc0RhdGUobmV3T2JqW2tdKSkge1xyXG4gICAgICAgICAgaWYgKG9sZE9ialtrXS5nZXRUaW1lKCkgIT09IG5ld09ialtrXS5nZXRUaW1lKCkpIHtcclxuICAgICAgICAgICAgb25Qcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKG5ld09iaiwgaywgbmV3T2JqW2tdKTtcclxuICAgICAgICAgICAgb2xkT2JqW2tdID0gbmV3IERhdGUobmV3T2JqW2tdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICBpZiAoaXNPYmplY3Qob2xkT2JqW2tdKSAmJiBpc09iamVjdChuZXdPYmpba10pKSB7XHJcbiAgICAgICAgICBpZiAoaXNBcnJheShuZXdPYmpba10pIHx8IGlzT2JqTGl0ZXJhbChuZXdPYmpba10pKSB7XHJcbiAgICAgICAgICAgIGlmIChvbGRPYmpba10ubGVuZ3RoICE9PSBuZXdPYmpba10ubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgIG9uUHJvcGVydHlDaGFuZ2VDYWxsYmFjayhuZXdPYmosIGssIG5ld09ialtrXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0W2tdID0gb2JqZWN0Q2xvbmVDb21wYXJlKG9sZE9ialtrXSwgbmV3T2JqW2tdLCBvblByb3BlcnR5Q2hhbmdlQ2FsbGJhY2ssIGlnbm9yZVByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9uZXcgb2JqZWN0IGlzIG5vdCBhbiBhcnJheSBhbmQgaXMgYSBjb21wbGV4IG9iamVjdFxyXG4gICAgICAgICAgICBpZiAob2xkT2JqW2tdICE9PSBuZXdPYmpba10pe1xyXG4gICAgICAgICAgICAgIC8vY2hlY2sgdGhlbSBieSByZWZlcmVuY2VcclxuICAgICAgICAgICAgICBvblByb3BlcnR5Q2hhbmdlQ2FsbGJhY2sobmV3T2JqLCBrLCBuZXdPYmpba10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vZG8gbm90IHNjYW4gY29tcGxleCBjaGlsZHJlblxyXG4gICAgICAgICAgICByZXRba10gPSBuZXdPYmpba107XHJcbiAgICAgICAgICB9IFxyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgIGlmIChpc09iamVjdChvbGRPYmpba10pICE9PSBpc09iamVjdChuZXdPYmpba10pKSB7XHJcbiAgICAgICAgICAvL29sZCBpc09iamVjdCBpcyBub3QgdGhlIHNhbWUgYXMgbmV3IGlzT2JqZWN0XHJcbiAgICAgICAgICBvblByb3BlcnR5Q2hhbmdlQ2FsbGJhY2sobmV3T2JqLCBrLCBuZXdPYmpba10pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvL2luIHRoZSBlbmQgY29tcGFyZSB2YWx1ZXMgdGhlIG5vcm1hbCB3YXlcclxuICAgICAgICAgIGlmIChvbGRPYmpba10gIT09IG5ld09ialtrXSl7XHJcbiAgICAgICAgICAgIG9uUHJvcGVydHlDaGFuZ2VDYWxsYmFjayhuZXdPYmosIGssIG5ld09ialtrXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXRba10gPSBuZXdPYmpba107XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChyZXRba109PXVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldFtrXSA9IG5ld09ialtrXTtcdFxyXG4gICAgICB9XHJcbiAgICAgIC8vZGVsZXRlIG5ld0tleVxyXG4gICAgICBuZXdDaGVja2VkLnB1c2goayk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvL2tleSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbmV3IG9iamVjdFxyXG4gICAgICBpZiAob2xkT2JqW2tdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBvblByb3BlcnR5Q2hhbmdlQ2FsbGJhY2sobmV3T2JqLCBrLCB1bmRlZmluZWQpO1xyXG4gICAgICB9IGVsc2V7XHJcbiAgICAgICAgLy9ib3RoIG9sZCBhbmQgbmV3IG9iamVjdHMgcHJvcGVydGllcyBhcmUgdW5kZWZpbmVkXHJcbiAgICAgICAgbmV3Q2hlY2tlZC5wdXNoKGspO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vaXRlcmF0ZSBvdmVyIGtleXMgdGhhdCBhcmUgTk9UIGluIHRoZSBvbGQgb2JqZWN0XHJcbiAgZm9yIChsZXQgaSBpbiBuZXdLZXlzKXtcclxuICAgIGxldCBrID0gbmV3S2V5c1tpXTtcclxuICAgIGlmIChuZXdPYmpba10gPT09IHVuZGVmaW5lZCB8fCBuZXdDaGVja2VkLmluZGV4T2YoaykgPj0gMCB8fCBpZ25vcmVQcm9wZXJ0aWVzLmluZGV4T2YoaykgPj0gMCApIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblx0XHRcclxuICAgIG9uUHJvcGVydHlDaGFuZ2VDYWxsYmFjayhuZXdPYmosIGssIG5ld09ialtrXSk7XHJcbiAgICByZXRba10gPSB7fTtcclxuICAgIGlmICghaXNBcnJheShuZXdPYmopICYmICFpc09iakxpdGVyYWwobmV3T2JqKSkge1xyXG4gICAgICByZXRba10gPSBuZXdPYmpba107XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXRba10gPSBvYmplY3RDbG9uZUNvbXBhcmUoe30sIG5ld09ialtrXSwgb25Qcm9wZXJ0eUNoYW5nZUNhbGxiYWNrLCBpZ25vcmVQcm9wZXJ0aWVzKTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKCFpc09iamVjdChuZXdPYmopKSB7XHJcbiAgICByZXR1cm4gbmV3T2JqO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJldDtcclxufSBcclxuXHJcbmZ1bmN0aW9uIGdldE9iaktleXMob2JqKXtcclxuICBpZiAoaXNPYmplY3Qob2JqKSkge1xyXG4gICAgaWYgKGlzQXJyYXkob2JqKSl7XHJcbiAgICAgIHJldHVybiBBcnJheS5hcHBseShudWxsLCBBcnJheShvYmoubGVuZ3RoKSkubWFwKGZ1bmN0aW9uKHYsIGkpe3JldHVybiBpO30pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaik7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBbXTtcclxufSIsImltcG9ydCB7IGlzQm9vbGVhbiwgaXNPYmplY3QsIGlzQXJyYXksIGlzU3RyaW5nIH0gZnJvbSBcInV0aWxcIjtcclxuaW1wb3J0IHsgT2JqZWN0cyB9IGZyb20gXCIuL09iamVjdHNcIjtcclxuaW1wb3J0IHsgZW1wdHksIHRyeUNhbGwsIHJvdW5kIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGUgfSBmcm9tIFwiLi9UcmFuc2xhdGVcIjtcclxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSAnZXhwci1ldmFsJztcclxuaW1wb3J0IHsgaXNEYXRlIH0gZnJvbSBcInV0aWxcIjtcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gXCIuL3RleHRcIjtcclxuXHJcbmNvbnN0IGR5bmFtaWNJbmRleFN5bWJvbCA9IFN5bWJvbChcImR5bmFtaWNJbmRleFN5bWJvbFwiKTtcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZSBkYXRhIGFycmF5IGFjY29yZGluZyB0byB2YWxpZGF0aW5nIHJ1bGVzLCBkZWZpbmVkIGluIHRlbXBsYXRlIG9iamVjdCwgZXJyb3JzIHdpbGwgYmUgd3JpdHRlbCBpbiBlcnJvcnMgb2JqZWN0IGFuZCB2aXNpYnVpbGl0eSBmbGFncyB3cml0dGVuIGluIGF0dHJpYnV0ZXMgb2JqZWN0IFxyXG4gKiBAcGFyYW0ge3tba2V5OnN0cmluZ106YW55fX0gW2RhdGFdIFxyXG4gKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGVbXX0gW3RlbXBsYXRlXSBcclxuICogQHBhcmFtIHt7W2tleTpzdHJpbmddOmFueX19IFtlcnJvcnNdIFxyXG4gKiBAcGFyYW0ge3tuZXN0ZWREYXRhPzpib29sZWFufX0gW29wdGlvbnNdXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRm9ybVZhbGlkYXRvcihkYXRhLCB0ZW1wbGF0ZSwgZXJyb3JzLCBvcHRpb25zKSB7XHJcbiAgLyoqIEB0eXBlIHtGb3JtVmFsaWRhdG9yfSAqL1xyXG4gIHZhciBzZWxmID0gdGhpcztcclxuICB2YXIgX2RhdGEgPSBkYXRhIHx8IG51bGw7XHJcbiAgdmFyIF90ZW1wbGF0ZSA9IHRlbXBsYXRlIHx8IG51bGw7XHJcbiAgdmFyIF9lcnJvcnMgPSBlcnJvcnMgfHwge307XHJcblxyXG4gIHZhciB1c2VkID0gW107XHJcbiAgdmFyIHRvdWNoZWQgPSBbXTtcclxuXHJcbiAgdmFyIF9tZXNzYWdlcyA9IEZvcm1WYWxpZGF0b3IubWVzc2FnZXM7XHJcblxyXG4gIHZhciBfb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHsgbmVzdGVkRGF0YTogZmFsc2UgfSwgb3B0aW9ucyk7XHJcblxyXG4gIGlmIChUcmFuc2xhdGUoJ2Zvcm1fdmFsaWRhdG9yJykgIT09ICdmb3JtX3ZhbGlkYXRvcicgJiYgaXNPYmplY3QoVHJhbnNsYXRlKCdmb3JtX3ZhbGlkYXRvcicpKSkge1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgc2V0TWVzc2FnZXMoVHJhbnNsYXRlKCdmb3JtX3ZhbGlkYXRvcicpKTtcclxuICB9XHJcblxyXG4gIHZhciBfcnVsZXMgPSBGb3JtVmFsaWRhdG9yLnJ1bGVzO1xyXG5cclxuXHJcbiAgdmFyIGlzVmFsaWQgPSBudWxsO1xyXG4gIHRoaXMuaXNWYWxpZCA9IG51bGw7XHJcbiAgdGhpcy5fX2RlZmluZUdldHRlcl9fKFwiaXNWYWxpZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBpc1ZhbGlkID0gc2VsZi52YWxpZGF0ZShmYWxzZSk7XHJcblxyXG4gICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBmaWVsZHMgPSB0aGlzLmZpZWxkcyA9IEZvcm1XYWxrZXIuc2V0X25hbWVzKF90ZW1wbGF0ZSk7XHJcblxyXG4gIC8qT2JqZWN0cy5mb3JFYWNoKGZpZWxkcywgKF8sIGtleSk9PiB7XHJcbiAgICBpZiAoT2JqZWN0cy5nZXRQcm9wZXJ0eUJ5UGF0aChkYXRhLCBrZXkpID09IHVuZGVmaW5lZClcclxuICAgICAgT2JqZWN0cy5zZXRQcm9wZXJ0eUJ5UGF0aChkYXRhLCBrZXksIG51bGwpO1xyXG4gIH0pOyovXHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBfbmFtZSBwcm9wZXJ0aWVzIGluIHRoZSB0ZW1wbGF0ZVxyXG4gICAqIEBwYXJhbSB7Kn0gb2JqIFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXRoXVxyXG4gICAqL1xyXG4gIHRoaXMud2Fsa0VsZW1lbnRzID0gd2Fsa0VsZW1lbnRzO1xyXG5cclxuICBmdW5jdGlvbiB3YWxrRWxlbWVudHMob2JqLCBjYWxsYmFjaywgcGF0aCkge1xyXG4gICAgaWYgKCFwYXRoKSB7XHJcbiAgICAgIHBhdGggPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNBcnJheShvYmopKSB7XHJcbiAgICAgIE9iamVjdHMuZm9yRWFjaChvYmosIChlbCkgPT4ge1xyXG4gICAgICAgIGlmIChlbC5uYW1lKSB7XHJcbiAgICAgICAgICB2YXIgbnBhdGggPSBwYXRoLnNsaWNlKCk7XHJcbiAgICAgICAgICBucGF0aC5wdXNoKGVsLm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAod2Fsa0VsZW1lbnRzKGVsLCBjYWxsYmFjaywgbnBhdGgpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNPYmplY3Qob2JqKSAmJiBvYmoubmFtZSkge1xyXG4gICAgICBpZiAodHJ5Q2FsbChudWxsLCBjYWxsYmFjaywgb2JqLCBwYXRoLnNsaWNlKCkpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc09iamVjdChvYmopICYmIG9iai50eXBlID09ICdzZWxlY3QnKSB7XHJcbiAgICAgIHBhdGgucG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzT2JqZWN0KG9iaikgJiYgb2JqLml0ZW1zKSB7XHJcbiAgICAgIGlmICh3YWxrRWxlbWVudHMob2JqLml0ZW1zLCBjYWxsYmFjaywgcGF0aC5zbGljZSgpKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoaXMuZ2V0VmlzaWJsZURhdGEgPSBnZXRWaXNpYmxlRGF0YTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB2aXNpYmxlIGRhdGEgYWNjb3JkaW5nIHRvIGRpc3BsYXlSaWxlLCBhbmQgaGllcmFyY2h5IHJ1bGVzLlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGdldFZpc2libGVEYXRhKCkge1xyXG4gICAgdmFyIG9iaiA9IHt9O1xyXG5cclxuICAgIE9iamVjdHMud2Fsayh0ZW1wbGF0ZSwgZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgIGlmIChlbCAmJiBlbC5fbmFtZSlcclxuICAgICAgICBpZiAoIWVsLmF0dHJpYnV0ZXMgfHwgKCFlbC5hdHRyaWJ1dGVzLmhpZGRlbiAmJiBlbC5hdHRyaWJ1dGVzLmRhdGEgIT09IGZhbHNlKSkge1xyXG4gICAgICAgICAgaWYgKGVsLm5hbWUgJiYgKGVsLnR5cGUgIT0gXCJmb3JtXCIgJiYgZWwudHlwZSAhPSBcImxhYmVsXCIgJiYgZWwudHlwZSAhPSBcImxpbmtcIiAmJiBlbC50eXBlICE9IFwiYnV0dG9uXCIpKVxyXG4gICAgICAgICAgICBPYmplY3RzLnNldFByb3BlcnR5QnlQYXRoKG9iaiwgZWwuX25hbWUsIE9iamVjdHMuZ2V0UHJvcGVydHlCeVBhdGgoZGF0YSwgZWwuX25hbWUpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGVsLmF0dHJpYnV0ZXMgJiYgKGVsLmF0dHJpYnV0ZXMuaGlkZGVuIHx8IGVsLmF0dHJpYnV0ZXMuZGF0YSA9PT0gZmFsc2UpKSB7XHJcbiAgICAgICAgICAvL1RoaXMgZWxlbWVudCBpcyBoaWRkZW4uIERvIG5vdCBpbmNsdWRlIGl0cyBwb3NzaWJsZSBjaGlsZHJlbiFcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdGUgZGF0YSBhcnJheSBhY2NvcmRpbmcgdG8gdmFsaWRhdGluZyBydWxlcywgZGVmaW5lZCBpbiB0ZW1wbGF0ZSBvYmplY3QsIGVycm9ycyB3aWxsIGJlIHdyaXR0ZW4gaW4gZXJyb3JzIG9iamVjdCBhbmQgdmlzaWJpbGl0eSBmbGFncyB3cml0dGVuIGluIGF0dHJpYnV0ZXMgb2JqZWN0IFxyXG4gICAqIEBwYXJhbSB7e1trZXk6c3RyaW5nXTphbnl9fSBkYXRhIFxyXG4gICAqIEBwYXJhbSB7RmllbGRUZW1wbGF0ZVtdfSB0ZW1wbGF0ZSBcclxuICAgKiBAcGFyYW0ge3tba2V5OnN0cmluZ106YW55fX0gZXJyb3JzIFxyXG4gICAqIEByZXR1cm4ge0Zvcm1WYWxpZGF0b3J9XHJcbiAgICovXHJcbiAgdGhpcy5zZXQgPSBmdW5jdGlvbiAoZGF0YSwgdGVtcGxhdGUsIGVycm9ycykge1xyXG4gICAgX2RhdGEgPSBkYXRhO1xyXG4gICAgX3RlbXBsYXRlID0gdGVtcGxhdGU7XHJcbiAgICBfZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgcmV0dXJuIHNlbGY7XHJcbiAgfTtcclxuICB0aGlzLnNldERhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgX2RhdGEgPSBudWxsO1xyXG5cclxuICAgIHJldHVybiBzZWxmO1xyXG4gIH07XHJcbiAgdGhpcy5zZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uICh0ZW1wbGF0ZSkge1xyXG4gICAgX3RlbXBsYXRlID0gbnVsbDtcclxuXHJcbiAgICByZXR1cm4gc2VsZjtcclxuICB9O1xyXG4gIHRoaXMuc2V0RXJyb3JzID0gZnVuY3Rpb24gKGVycm9ycykge1xyXG4gICAgX2Vycm9ycyA9IG51bGw7XHJcbiAgICByZXR1cm4gc2VsZjtcclxuICB9O1xyXG4gIC8qKlxyXG4gICAqIE1lc3NhZ2VzIGNhbiBVc2UgOmF0dHJpYnV0ZSA6b3RoZXIgOm1pbiA6bWF4IDpkYXRlIHBsYWNlaG9sZGVyc1xyXG4gICAqIEBwYXJhbSB7e1tydWxlOnN0cmluZ106c3RyaW5nfX0gbWVzc2FnZXNcclxuICAgKi9cclxuICBmdW5jdGlvbiBzZXRNZXNzYWdlcyhtZXNzYWdlcykge1xyXG4gICAgX21lc3NhZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgRm9ybVZhbGlkYXRvci5tZXNzYWdlcywgbWVzc2FnZXMpO1xyXG4gICAgcmV0dXJuIHNlbGY7XHJcbiAgfVxyXG4gIHRoaXMuc2V0TWVzc2FnZXMgPSBzZXRNZXNzYWdlcztcclxuICAvKipcclxuICAgKiAgQHBhcmFtIHt7W3J1bGU6c3RyaW5nXTpmdW5jdGlvbihhbnksICdzdHJpbmcnfCdhcnJheSd8J251bWVyaWMnfCdzZWxlY3QnLCBzdHJpbmdbXSwgRm9ybVZhbGlkYXRvcik6Ym9vbGVhbn19IHJ1bGVzXHJcbiAgICovXHJcbiAgdGhpcy5zZXRSdWxlcyA9IGZ1bmN0aW9uIChydWxlcykge1xyXG4gICAgX3J1bGVzID0gT2JqZWN0LmFzc2lnbih7fSwgRm9ybVZhbGlkYXRvci5ydWxlcywgcnVsZXMpO1xyXG4gICAgcmV0dXJuIHNlbGY7XHJcbiAgfTtcclxuICAvKipcclxuICAgKiBcclxuICAgKi9cclxuICB0aGlzLmdldE1lc3NhZ2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIF9tZXNzYWdlcztcclxuICB9O1xyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRlIGRhdGEgYXJyYXkgYWNjb3JkaW5nIHRvIHZhbGlkYXRpbmcgcnVsZXMsIGRlZmluZWQgaW4gdGVtcGxhdGUgb2JqZWN0LCBlcnJvcnMgd2lsbCBiZSB3cml0dGVsIGluIGVycm9ycyBvYmplY3QgYW5kIHZpc2lidWlsaXR5IGZsYWdzIHdyaXR0ZW4gaW4gYXR0cmlidXRlcyBvYmplY3QgXHJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgKi9cclxuICB0aGlzLnZhbGlkYXRlID0gZnVuY3Rpb24gKHNob3dFcnJvcnMgPSB0cnVlKSB7XHJcbiAgICB1c2VkID0gW107XHJcbiAgICBpc1ZhbGlkID0gdHJ1ZTtcclxuICAgIC8vT2JqZWN0cy5mb3JFYWNoKGZpZWxkcywgZmllbGQgPT4ge1xyXG4gICAgLy8gIGlmICh2YWxpZGF0ZV9vYmplY3QoZmllbGQsIHNob3dFcnJvcnMpID4gMCkge1xyXG4gICAgLy8gICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgLy8gIH1cclxuICAgIC8vfSk7XHJcbiAgICBpZiAodmFsaWRhdGVfb2JqZWN0KHRlbXBsYXRlLCBzaG93RXJyb3JzKSA+IDApIHtcclxuICAgICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jbGVhckVycm9ycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHVzZWQgPSBbXTtcclxuICAgIE9iamVjdHMuY2xlYXIoX2Vycm9ycyk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVmFsaWRhdGUgYSBzaW5nbGUgZmllbGQgaW4gZGF0YSBhcnJheSBhY2NvcmRpbmcgdG8gdmFsaWRhdGluZyBydWxlcywgZGVmaW5lZCBpbiB0ZW1wbGF0ZSBvYmplY3QsIGVycm9ycyB3aWxsIGJlIHdyaXR0ZWwgaW4gZXJyb3JzIG9iamVjdCBhbmQgdmlzaWJ1aWxpdHkgZmxhZ3Mgd3JpdHRlbiBpbiBhdHRyaWJ1dGVzIG9iamVjdCBcclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAqL1xyXG4gIHRoaXMudmFsaWRhdGVGaWVsZCA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcblxyXG4gICAgaWYgKHRvdWNoZWQuaW5kZXhPZihuYW1lKSA8IDApIHtcclxuICAgICAgdG91Y2hlZC5wdXNoKG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciByID0gMDtcclxuICAgIHRvdWNoZWQuZm9yRWFjaCgobikgPT4ge1xyXG4gICAgICByICs9IHZhbGlkYXRlX2ZpZWxkKGdldFRlbXBsYXRlVmFsdWUobikpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFsaWRhdGVfdmlzaWJpbGl0eSh0ZW1wbGF0ZSk7XHJcbiAgICBleGVjdXRlX2ZpZWxkX2FjdGlvbihnZXRUZW1wbGF0ZVZhbHVlKG5hbWUpLCAnc2V0RmllbGQnKTtcclxuICAgIGlzVmFsaWQgPSByID09IDA7XHJcbiAgICByZXR1cm4gaXNWYWxpZDtcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBwYXJ0cyhuYW1lKSB7XHJcbiAgICB2YXIgcCA9IG5hbWUuc3BsaXQoJy4nKTtcclxuICAgIGlmIChwLmxlbmd0aCA+IDEpIHtcclxuICAgICAgcmV0dXJuIHsgZm9ybTogcFswXSwgbmFtZTogcFsxXSB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgZm9ybTogbnVsbCwgbmFtZTogcFswXSB9O1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBlbGVtZW50IHZpc2liaWxpdHkgYWNjb3JkaW5nIHRvIGRpc3BsYXlSdWxlXHJcbiAgICovXHJcbiAgdGhpcy52YWxpZGF0ZVZpc2liaWxpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YWxpZGF0ZV92aXNpYmlsaXR5KHRlbXBsYXRlKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBcclxuICAgKiBAcGFyYW0ge0ZpZWxkVGVtcGxhdGV8RmllbGRUZW1wbGF0ZVtdfSBvYmogLSBGaWVsZFRlbXBsYXRlIG9yIGFycmF5IHRvIHZhbGlkYXRlXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gW3BhdGhdXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gdmFsaWRhdGVfb2JqZWN0KG9iaiwgc2hvd0Vycm9ycyA9IHRydWUpIHtcclxuICAgIHZhciBlID0gMDtcclxuICAgIGlmICghaXNBcnJheShvYmopICYmICFpc09iamVjdChvYmopKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vb2JqZWN0IGlzIEZpZWxkVGVtcGxhdGVcclxuICAgIGlmIChpc09iamVjdChvYmopICYmICFpc0FycmF5KG9iaikpIHtcclxuICAgICAgaWYgKG9iai52YWxpZGF0ZVJ1bGUpIHtcclxuICAgICAgICBlICs9IHZhbGlkYXRlX2ZpZWxkKG9iaiwgc2hvd0Vycm9ycyk7XHJcbiAgICAgIH1cclxuICAgICAgLy9pdGVtcyBvZiBhIGZvcm1cclxuICAgICAgaWYgKG9iai50eXBlID09IFwiZm9ybVwiICYmIG9iai5pdGVtcykge1xyXG5cclxuICAgICAgICB2YXIgdmlzaWJsZSA9IGlzX2ZpZWxkX3Zpc2libGUob2JqKTtcclxuICAgICAgICBpZiAodmlzaWJsZSkge1xyXG4gICAgICAgICAgZSArPSB2YWxpZGF0ZV9vYmplY3Qob2JqLml0ZW1zLCBzaG93RXJyb3JzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vaXRlbXMgb2YgdGhlIHNlbGVjdCBib3hcclxuICAgICAgaWYgKG9iai50eXBlID09IFwic2VsZWN0XCIgJiYgb2JqLml0ZW1zKSB7XHJcbiAgICAgICAgdmFyIHYgPSBPYmplY3RzLmdldFByb3BlcnR5QnlQYXRoKF9kYXRhLCBvYmoubmFtZSk7XHJcbiAgICAgICAgT2JqZWN0cy5mb3JFYWNoKG9iai5pdGVtcywgKGVsKSA9PiB7XHJcbiAgICAgICAgICAvL29ubHkgdmFsaWRhdGUgaXRlbXMgb2YgdGhlIHNlbGVjdGVkIGl0ZW0hXHJcbiAgICAgICAgICBpZiAoZWwudmFsdWUgPT0gdikge1xyXG4gICAgICAgICAgICBlICs9IHZhbGlkYXRlX29iamVjdChlbC5pdGVtcywgc2hvd0Vycm9ycyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgLy9pdGVtcyBvZiB0aGUgc2VsZWN0ZWQgaXRlbVxyXG4gICAgICBpZiAob2JqLnR5cGUgPT0gdW5kZWZpbmVkICYmIG9iai5pdGVtcykge1xyXG4gICAgICAgIGUgKz0gdmFsaWRhdGVfb2JqZWN0KG9iai5pdGVtcywgc2hvd0Vycm9ycyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vT2JqZWN0IGlzIGFuIGFycmF5IEZpZWxkVGVtcGxhdGVbXVxyXG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xyXG4gICAgICBPYmplY3RzLmZvckVhY2gob2JqLCAoZWwpID0+IHtcclxuICAgICAgICBlICs9IHZhbGlkYXRlX29iamVjdChlbCwgc2hvd0Vycm9ycyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRlIGRhdGEgYXJyYXkgYWNjb3JkaW5nIHRvIHZhbGlkYXRpbmcgcnVsZXMsIGRlZmluZWQgaW4gdGVtcGxhdGUgb2JqZWN0LCBlcnJvcnMgd2lsbCBiZSB3cml0dGVsIGluIGVycm9ycyBvYmplY3QgYW5kIHZpc2lidWlsaXR5IGZsYWdzIHdyaXR0ZW4gaW4gYXR0cmlidXRlcyBvYmplY3QgXHJcbiAgICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlfSB0IFxyXG4gICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgKi9cclxuICBmdW5jdGlvbiB2YWxpZGF0ZV9maWVsZCh0LCBzaG93RXJyb3JzID0gdHJ1ZSkge1xyXG4gICAgdmFyIGUgPSAwO1xyXG5cclxuICAgIGlmICghZW1wdHkodCkpIHtcclxuICAgICAgcHJlcEZpZWxkKHQuX25hbWUpO1xyXG4gICAgICB2YXIgdmlzaWJsZSA9IGlzX2ZpZWxkX3Zpc2libGUodCk7XHJcblxyXG4gICAgICBpZiAodC52YWxpZGF0ZVJ1bGUgJiYgdmlzaWJsZSkge1xyXG4gICAgICAgIHZhciBlcnIgPSBpc19maWVsZF9pbnZhbGlkKHQsICd2YWxpZGF0ZVJ1bGUnKTtcclxuICAgICAgICBpZiAoIWVtcHR5KGVycikpIHtcclxuICAgICAgICAgIGlmIChzaG93RXJyb3JzKVxyXG4gICAgICAgICAgICBzZXRWYWx1ZShfZXJyb3JzLCB0Ll9uYW1lLCBlcnIpO1xyXG4gICAgICAgICAgZSsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZXRWYWx1ZShfZXJyb3JzLCB0Ll9uYW1lLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKCF0Lm5hbWUubWF0Y2goL1xcLy4qXFwvLykpIHtcclxuICAgICAgICAgIHNldFZhbHVlKF9lcnJvcnMsIHQuX25hbWUsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy9pZiBlbGVtZW50IGlzIHZpc2libGUgYW5kIGl0IGhhcyBpdGVtcyBcIml0cyBhIHNlbGVjdCBib3hcIlxyXG4gICAgICBpZiAodmlzaWJsZSAmJiBpc0FycmF5KHQuaXRlbXMpKSB7XHJcbiAgICAgICAgdmFyIG5ld09uZXMgPSBbXTtcclxuICAgICAgICB2YXIgdmFsdWUgPSBPYmplY3RzLmdldFByb3BlcnR5QnlQYXRoKGRhdGEsIHQuX25hbWUpO1xyXG4gICAgICAgIGlmICh0LnZhbHVlX29sZCAhPSB2YWx1ZSkge1xyXG4gICAgICAgICAgLy9pZiB2YWx1ZSBvZiB0aGUgc2VsZWN0IGhhcyBjaGFuZ2VkLCB0aGVuIGRlbGV0ZSBhbGwgcHJvcGVydGllcyB0aGF0IGl0IGNvdWxkIGhhdmUgcHJvZHVjZWRcclxuICAgICAgICAgIE9iamVjdHMuZm9yRWFjaCh0Lml0ZW1zLCAoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJheShpdGVtLml0ZW1zKSAmJiBpdGVtLnZhbHVlID09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgT2JqZWN0cy5mb3JFYWNoKGl0ZW0uaXRlbXMsIChlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3T25lcy5wdXNoKGVsKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGl0ZW0uaXRlbXMpKSB7XHJcbiAgICAgICAgICAgICAgT2JqZWN0cy5mb3JFYWNoKGl0ZW0uaXRlbXMsIChlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgT2JqZWN0cy5kZWxldGVQcm9wZXJ0eUJ5UGF0aChkYXRhLCBlbC5fbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgIE9iamVjdHMuZGVsZXRlUHJvcGVydHlCeVBhdGgoZXJyb3JzLCBlbC5fbmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvdWNoZWQgPSB0b3VjaGVkLmZpbHRlcihlbDIgPT4gZWwyICE9PSBlbC5fbmFtZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgLy9pbml0aWFsaXplIG5ld2x5LXNob3duIGZpZWxkc1xyXG4gICAgICAgICAgbmV3T25lcy5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZWwudmFsdWUgJiYgIU9iamVjdHMuZ2V0UHJvcGVydHlCeVBhdGgoZGF0YSwgZWwuX25hbWUpKSB7XHJcbiAgICAgICAgICAgICAgc2V0VmFsdWUoX2RhdGEsIGVsLl9uYW1lLCBlbC52YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkoZWwuaXRlbXMpICYmIGVsLml0ZW1zLmxlbmd0aCA+IDAgJiYgIWVsLnBsYWNlaG9sZGVyICYmICFPYmplY3RzLmdldFByb3BlcnR5QnlQYXRoKGRhdGEsIGVsLl9uYW1lKSkge1xyXG4gICAgICAgICAgICAgIHNldFZhbHVlKGRhdGEsIGVsLl9uYW1lLCBlbC5pdGVtc1swXS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3JlbWVtYmVyIHRoZSBvbGQgdmFsdWUgb2YgdGhlIHNlbGVjdCBib3hcclxuICAgICAgICB0LnZhbHVlX29sZCA9IE9iamVjdHMuZ2V0UHJvcGVydHlCeVBhdGgoZGF0YSwgdC5fbmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBlO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBFeGVjdXRlIHJ1bGUgXHJcbiAgICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlfSB0IFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wbmFtZVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGV4ZWN1dGVfZmllbGRfYWN0aW9uKHQsIHByb3BuYW1lKSB7XHJcbiAgICBpZiAoIWlzT2JqZWN0KHQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciB3aG9sZXJ1bGUgPSB0W3Byb3BuYW1lXTtcclxuICAgIGlmIChlbXB0eSh3aG9sZXJ1bGUpIHx8ICFpc1N0cmluZyh3aG9sZXJ1bGUpKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgdmFyIHBhcnRzID0gd2hvbGVydWxlLnNwbGl0KCd8Jyk7XHJcbiAgICB2YXIgZXhwcjtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgIHZhciBhY3Rpb24gPSAnc2V0JztcclxuICAgICAgICB2YXIgZmllbGROYW1lID0gcGFydHNbMF07XHJcbiAgICAgICAgZXhwciA9IGdldFZhbHVlKF9kYXRhLCB0Ll9uYW1lKTtcclxuICAgICAgfSBlbHNlIGlmIChwYXJ0cy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgIHZhciBhY3Rpb24gPSAnc2V0JztcclxuICAgICAgICB2YXIgZmllbGROYW1lID0gcGFydHNbMF07XHJcbiAgICAgICAgZXhwciA9IHBhcnRzWzFdO1xyXG4gICAgICB9IGVsc2UgaWYgKHBhcnRzLmxlbmd0aCA9PSAzKSB7XHJcbiAgICAgICAgdmFyIGFjdGlvbiA9IHBhcnRzWzBdO1xyXG4gICAgICAgIHZhciBmaWVsZE5hbWUgPSBwYXJ0c1sxXTtcclxuICAgICAgICBleHByID0gcGFydHNbMl07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzd2l0Y2ggKGFjdGlvbikge1xyXG4gICAgICAgIGNhc2UgJ21hdGgnOlxyXG4gICAgICAgICAgdmFyIHAgPSBuZXcgUGFyc2VyKCk7XHJcbiAgICAgICAgICB2YXIgcmVzID0gcC5ldmFsdWF0ZShleHByLCBfZGF0YSk7XHJcbiAgICAgICAgICBzZXRWYWx1ZShfZGF0YSwgZmllbGROYW1lLCByZXMpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHNldFZhbHVlKF9kYXRhLCBmaWVsZE5hbWUsIGV4cHIpO1xyXG5cclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJFcnJvciBldmFsdWF0aW5nIFwiICsgd2hvbGVydWxlLCBleCk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICAvKipcclxuICAgKiBWYWxpZGF0ZSBkYXRhIGFycmF5IGFjY29yZGluZyB0byB2YWxpZGF0aW5nIHJ1bGVzLCBkZWZpbmVkIGluIHRlbXBsYXRlIG9iamVjdCwgZXJyb3JzIHdpbGwgYmUgd3JpdHRlbCBpbiBlcnJvcnMgb2JqZWN0IGFuZCB2aXNpYnVpbGl0eSBmbGFncyB3cml0dGVuIGluIGF0dHJpYnV0ZXMgb2JqZWN0IFxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHZhbGlkYXRlX3Zpc2liaWxpdHkob2JqLCBwYXRoKSB7XHJcbiAgICB2YXIgZSA9IDA7XHJcbiAgICBpZiAoIWlzQXJyYXkob2JqKSAmJiAhaXNPYmplY3Qob2JqKSlcclxuICAgICAgcmV0dXJuIDA7XHJcblxyXG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xyXG4gICAgICBPYmplY3RzLmZvckVhY2gob2JqLCAoZWwpID0+IHtcclxuICAgICAgICBlICs9IHZhbGlkYXRlX3Zpc2liaWxpdHkoZWwpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qob2JqKSkge1xyXG4gICAgICB2YXIgdmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIGlmIChvYmouZGlzcGxheVJ1bGUpIHtcclxuICAgICAgICAvL3ByZXBGaWVsZChvYmouX25hbWUpO1xyXG4gICAgICAgIHZpc2libGUgPSBpc19maWVsZF92aXNpYmxlKG9iaik7XHJcbiAgICAgICAgaWYgKCF2aXNpYmxlKSB7XHJcbiAgICAgICAgICAvL29ubHkgcmVzZXQgZGF0YSBhbmQgZXJyb3IgdmFsdWVzIGlmIGZpZWxkIG5hbWUgaXMgbm90IHlldCBoaWRkZW5cclxuICAgICAgICAgIGlmIChlbXB0eShmaWVsZHNbb2JqLl9uYW1lXS5hdHRyaWJ1dGVzLmhpZGRlbikpIHtcclxuICAgICAgICAgICAgc2V0VmFsdWUoX2Vycm9ycywgb2JqLl9uYW1lLCBudWxsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZpZWxkc1tvYmouX25hbWVdLmF0dHJpYnV0ZXMuaGlkZGVuID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZGVsZXRlIGZpZWxkc1tvYmouX25hbWVdLmF0dHJpYnV0ZXMuaGlkZGVuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAodmlzaWJsZSAmJiBvYmouaXRlbXMpIHtcclxuICAgICAgICBlICs9IHZhbGlkYXRlX3Zpc2liaWxpdHkob2JqLml0ZW1zKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcHJlcEZpZWxkKG5hbWUpIHtcclxuICAgIGlmIChuYW1lKSB7XHJcbiAgICAgIGlmIChnZXRWYWx1ZShfZGF0YSwgbmFtZSkgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHNldFZhbHVlKF9kYXRhLCBuYW1lLCBudWxsKTtcclxuICAgICAgaWYgKCFnZXRWYWx1ZShfZXJyb3JzLCBuYW1lKSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgc2V0VmFsdWUoX2RhdGEsIG5hbWUsIG51bGwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlfSBmIFxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGlzX2ZpZWxkX3Zpc2libGUoZikge1xyXG4gICAgaWYgKGVtcHR5KGYuZGlzcGxheVJ1bGUpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBbcnVsZSwgcGFydHNdID0gZi5kaXNwbGF5UnVsZS5zcGxpdCgnOicpO1xyXG4gICAgdmFyIG90aGVyZmllbGRDb21wYXJlVmFsdWVzID0gcGFydHMuc3BsaXQoJywnKTtcclxuICAgIHZhciBvdGhlckZpZWxkTmFtZSA9IG90aGVyZmllbGRDb21wYXJlVmFsdWVzLnNoaWZ0KCk7XHJcblxyXG4gICAgdmFyIG90aGVyRmllbGRWYWx1ZSA9IHNlbGYuZ2V0RGF0YVZhbHVlKG90aGVyRmllbGROYW1lKTtcclxuICAgIGlmIChvdGhlckZpZWxkVmFsdWUgPT09IHVuZGVmaW5lZCB8fCBvdGhlckZpZWxkVmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgb3RoZXJGaWVsZFZhbHVlID0gXCJudWxsXCI7XHJcbiAgICB9XHJcbiAgICBvdGhlckZpZWxkVmFsdWUgPSBcIlwiICsgb3RoZXJGaWVsZFZhbHVlO1xyXG5cclxuICAgIGlmIChydWxlID09IFwidHJ1ZV9pZlwiKSB7XHJcbiAgICAgIGlmIChmaWVsZHNbb3RoZXJGaWVsZE5hbWVdLmF0dHJpYnV0ZXMuaGlkZGVuKSB7XHJcbiAgICAgICAgcmV0dXJuIG90aGVyZmllbGRDb21wYXJlVmFsdWVzLmluZGV4T2YoXCJudWxsXCIpID49IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBvdGhlcmZpZWxkQ29tcGFyZVZhbHVlcy5pbmRleE9mKG90aGVyRmllbGRWYWx1ZSkgPj0gMDtcclxuICAgIH0gZWxzZSBpZiAocnVsZSA9PSBcInRydWVfaWZfbm90XCIpIHtcclxuICAgICAgaWYgKGZpZWxkc1tvdGhlckZpZWxkTmFtZV0uYXR0cmlidXRlcy5oaWRkZW4pIHtcclxuICAgICAgICByZXR1cm4gb3RoZXJmaWVsZENvbXBhcmVWYWx1ZXMuaW5kZXhPZihcIm51bGxcIikgPCAwO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBvdGhlcmZpZWxkQ29tcGFyZVZhbHVlcy5pbmRleE9mKG90aGVyRmllbGRWYWx1ZSkgPCAwO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSB7RmllbGRUZW1wbGF0ZX0gZiBcclxuICAgKi9cclxuICBmdW5jdGlvbiBpc19maWVsZF9pbnZhbGlkKGYsIHByb3BOYW1lKSB7XHJcbiAgICAvL2l0ZXJhdGUgdGhyb3VnaCBtZXNzYWdlcyB0byBzZWUgaWYgYW55IGtleXMgbWF0Y2ggcnVsZSBcInJlcXVpcmVkfG1heFwiXHJcbiAgICB2YXIgcnVsZXMgPSBmW3Byb3BOYW1lXS5zcGxpdChcInxcIik7IC8vc3BsaXQgcnVsZXNcclxuICAgIHZhciBlcnJtc2cgPSBcIlwiO1xyXG4gICAgLy9jaGVjayBpZiBlcnJtc2cgaXMgYW4gYXJyYXkgYW5kIHRoZW4gYXNzaWduIGEgcHJvcGVyIGVycm9ybXNnXHJcbiAgICB2YXIgdHlwZSA9IFwic3RyaW5nXCI7XHJcblxyXG4gICAgaWYgKHJ1bGVzLmluZGV4T2YoJ2FycmF5JykgIT0gLTEpIHtcclxuICAgICAgdHlwZSA9ICdhcnJheSc7XHJcbiAgICB9XHJcbiAgICBpZiAocnVsZXMuaW5kZXhPZignbnVtYmVyJykgIT0gLTEpIHtcclxuICAgICAgdHlwZSA9ICdudW1lcmljJztcclxuICAgIH1cclxuICAgIGlmIChydWxlcy5pbmRleE9mKCdudW1lcmljJykgIT0gLTEpIHtcclxuICAgICAgdHlwZSA9ICdudW1lcmljJztcclxuICAgIH1cclxuICAgIGlmIChydWxlcy5pbmRleE9mKCdpbnRlZ2VyJykgIT0gLTEpIHtcclxuICAgICAgdHlwZSA9ICdudW1lcmljJztcclxuICAgIH1cclxuICAgIGlmIChydWxlcy5pbmRleE9mKCdzdHJpbmcnKSAhPSAtMSkge1xyXG4gICAgICB0eXBlID0gJ3N0cmluZyc7XHJcbiAgICB9XHJcbiAgICBpZiAocnVsZXMuaW5kZXhPZignZGlnaXRzJykgIT0gLTEpIHtcclxuICAgICAgdHlwZSA9ICdzdHJpbmcnO1xyXG4gICAgfVxyXG4gICAgaWYgKHJ1bGVzLmluZGV4T2YoJ2Jvb2xlYW4nKSAhPSAtMSkge1xyXG4gICAgICB0eXBlID0gJ2Jvb2xlYW4nO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAodHlwZSA9PSAnc3RyaW5nJyAmJiAoZi50eXBlID09IFwic2VsZWN0XCIgLyp8fCBmLnR5cGUgPT1cInJhZGlvXCIqLykpIHtcclxuICAgICAgdHlwZSA9ICdzZWxlY3QnO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGUgPT0gJ3N0cmluZycgJiYgKGYudHlwZSA9PSBcImZpbGVcIikpIHtcclxuICAgICAgdHlwZSA9ICdmaWxlJztcclxuICAgIH1cclxuXHJcbiAgICAvL2l0ZXJhdGUgdGhyb3VnaCBydWxlc1xyXG4gICAgZm9yICh2YXIgciBpbiBydWxlcykge1xyXG4gICAgICB2YXIgcnIgPSBydWxlc1tyXS5zcGxpdChcIjpcIik7XHJcbiAgICAgIHZhciBjb25kaXRpb25zID0gXCJcIjtcclxuXHJcbiAgICAgIGVycm1zZyA9IF9tZXNzYWdlc1tyclswXV07XHJcblxyXG4gICAgICBpZiAoIWVycm1zZykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgZm9yIHJ1bGUgXCIgKyByclswXSArIFwiIGlzIG5vdCBwcmVzZW50IGluIHRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzIVwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHJyWzFdICE9IHVuZGVmaW5lZCkgY29uZGl0aW9ucyA9IHJyWzFdO1xyXG5cclxuICAgICAgLy9lcnJtc2cgY2FuIGFsc28gYmUgYW4gYXJyYXkgd2l0aCBkaWZmZXJlbnQgbWVzc2FnZXMgZm9yIGRpZmZlcmVudCBkYXRhIHR5cGVzXHJcbiAgICAgIGVycm1zZyA9IGVycm1zZ1t0eXBlXSB8fCBlcnJtc2c7IC8vc2V0IGRlZmF1bHQgdmFsdWVcclxuICAgICAgaWYgKGlzT2JqZWN0KGVycm1zZykgfHwgZXJybXNnWydzdHJpbmcnXSkge1xyXG4gICAgICAgIGVycm1zZyA9IGVycm1zZ1snc3RyaW5nJ107XHJcbiAgICAgIH1cclxuICAgICAgdmFyIG5hbWUgPSBmLl9uYW1lO1xyXG4gICAgICB2YXIgZFZhbHVlID0gZ2V0VmFsdWUoX2RhdGEsIG5hbWUpO1xyXG4gICAgICAvL29ubHkgdmFsaWRhdGUgZmllbGRzIHRoYXQgYXJlIGVpdGhlciByZXF1aXJlZCwgb3Igbm90IGVtcHR5XHJcbiAgICAgIGlmICghZW1wdHkoZFZhbHVlKSB8fCBydWxlcy5pbmRleE9mKCdhY2NlcHRlZCcpID49IDAgfHwgcnVsZXMuaW5kZXhPZigncmVxdWlyZWQnKSA+PSAwIHx8IHJyWzBdID09PSAncmVxdWlyZWRfaWYnIHx8IHJyWzBdID09PSAndHJ1ZV9pZicgfHwgcnJbMF0gPT09ICd0cnVlX2lmX25vdCcpIHtcclxuXHJcbiAgICAgICAgdmFyIHRpdGxlID0gZi50aXRsZTtcclxuXHJcbiAgICAgICAgaWYgKCF0aXRsZSB8fCAoaXNTdHJpbmcodGl0bGUpICYmIHRpdGxlLmxlbmd0aCA+IDI1KSkge1xyXG4gICAgICAgICAgdGl0bGUgPSBcImZpZWxkXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlcnJtc2cgPSBlcnJtc2cucmVwbGFjZSgnOmF0dHJpYnV0ZScsIHRpdGxlKTtcclxuXHJcbiAgICAgICAgLy9zcGxpdCBjb25kaXRpb25zIGJ5ICwgdXNlIFxcXFwsIHRvIGVzY2FwZSB0aGUgc3BsaXRcclxuICAgICAgICB2YXIgY29uZGl0aW9uc19hcnIgPSBjb25kaXRpb25zLnJlcGxhY2UoL1xcXFwsL2csIFwifjtcIikuc3BsaXQoJywnKS5tYXAoZSA9PiBlLnJlcGxhY2UoL347L2csICcsJykpO1xyXG5cclxuICAgICAgICBpZiAoIWNvbmRpdGlvbnNfYXJyKVxyXG4gICAgICAgICAgY29uZGl0aW9uc19hcnIgPSBbXCJcIl07XHJcblxyXG4gICAgICAgIHZhciBjX25hbWUgPSBjb25kaXRpb25zX2FyclswXTtcclxuXHJcbiAgICAgICAgdmFyIGNfdGVtcGxhdGUgPSBnZXRUZW1wbGF0ZVZhbHVlKHRyeURlZmF1bHRGb3JtKGNfbmFtZSwgbmFtZSkpO1xyXG5cclxuICAgICAgICBpZiAoIWVtcHR5KGNfdGVtcGxhdGUpKSB7XHJcbiAgICAgICAgICBlcnJtc2cgPSBlcnJtc2cucmVwbGFjZSgnOm90aGVyJywgY190ZW1wbGF0ZS50aXRsZSk7XHJcbiAgICAgICAgICB2YXIgb3RoZXJGaWVsZFZhbHVlID0gZ2V0VmFsdWUoX2RhdGEsIHRyeURlZmF1bHRGb3JtKGNfbmFtZSwgbmFtZSkpO1xyXG4gICAgICAgICAgaWYgKGNfdGVtcGxhdGUuaXRlbXMgJiYgY190ZW1wbGF0ZS5pdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBvdGhlckZpZWxkSXRlbSA9IE9iamVjdHMuZmluZChjX3RlbXBsYXRlLml0ZW1zLCAodCkgPT4gdC52YWx1ZSA9PSBvdGhlckZpZWxkVmFsdWUpO1xyXG4gICAgICAgICAgICBlcnJtc2cgPSBlcnJtc2cucmVwbGFjZSgnOnZhbHVlJywgb3RoZXJGaWVsZEl0ZW0gPyBvdGhlckZpZWxkSXRlbS50aXRsZSA6IFwibnVsbFwiKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVycm1zZyA9IGVycm1zZy5yZXBsYWNlKCc6dmFsdWUnLCBvdGhlckZpZWxkVmFsdWUpO1xyXG4gICAgICAgICAgICBlcnJtc2cgPSBlcnJtc2cucmVwbGFjZSgnOm1heCcsIG90aGVyRmllbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGVycm1zZyA9IGVycm1zZy5yZXBsYWNlKCc6bWluJywgb3RoZXJGaWVsZFZhbHVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgaWYgKGVycm1zZy5pbmRleE9mKCc6bWF4JykgPj0gMCAmJiBlcnJtc2cuaW5kZXhPZignOm1heCcpID49IDApIHtcclxuICAgICAgICAgIC8vbWluIGFuZCBtYXggYm90aCBwcmVzZW50IHNvIHNwbGl0IHRoZSBjb25kaXRpb24gc3RyaW5nXHJcbiAgICAgICAgICBpZiAoY29uZGl0aW9uc19hcnIubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgZXJybXNnID0gZXJybXNnLnJlcGxhY2UoJzptaW4nLCBjb25kaXRpb25zX2FyclswXSk7XHJcbiAgICAgICAgICAgIGVycm1zZyA9IGVycm1zZy5yZXBsYWNlKCc6bWF4JywgY29uZGl0aW9uc19hcnJbMV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXJybXNnID0gZXJybXNnLnJlcGxhY2UoJzptYXgnLCBjX25hbWUpO1xyXG4gICAgICAgIGVycm1zZyA9IGVycm1zZy5yZXBsYWNlKCc6bWluJywgY19uYW1lKTtcclxuXHJcbiAgICAgICAgZXJybXNnID0gZXJybXNnLnJlcGxhY2UoJzpkaWdpdHMnLCBjX25hbWUpO1xyXG4gICAgICAgIGVycm1zZyA9IGVycm1zZy5yZXBsYWNlKCc6c2l6ZScsIGNfbmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChlcnJtc2cuaW5kZXhPZignOmRhdGUnKSA+PSAwKSB7XHJcbiAgICAgICAgICB2YXIgb3RoZXJGaWVsZFZhbHVlO1xyXG4gICAgICAgICAgaWYgKCFpc05hTihOdW1iZXIoY19uYW1lKSkpIHtcclxuICAgICAgICAgICAgb3RoZXJGaWVsZFZhbHVlID0gTnVtYmVyKGNfbmFtZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvdGhlckZpZWxkVmFsdWUgPSBnZXRWYWx1ZShfZGF0YSwgdHJ5RGVmYXVsdEZvcm0oY19uYW1lLCBuYW1lKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlcnJtc2cgPSBlcnJtc2cucmVwbGFjZSgnOmRhdGUnLCBuZXcgRGF0ZShvdGhlckZpZWxkVmFsdWUpLnRvTG9jYWxlU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGVycm1zZy5pbmRleE9mKCc6dmFsdWVzJykgPj0gMCkge1xyXG4gICAgICAgICAgZXJybXNnID0gZXJybXNnLnJlcGxhY2UoJzp2YWx1ZXMnLCBjb25kaXRpb25zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSB2YWxpZGF0ZV9pc2ZhaWwobmFtZSwgcnJbMF0sIHR5cGUsIGNvbmRpdGlvbnNfYXJyKTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgdmFyIGVyciA9IHJlc3VsdCA9PT0gdHJ1ZSA/IGVycm1zZyA6IGVycm1zZy5yZXBsYWNlKCc6cmVzdWx0JywgcmVzdWx0KTtcclxuICAgICAgICAgIHJldHVybiBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICAvL3JldHVybiB0cnVlIGlmIGZhaWwgdmFsaWRhdGlvblxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSB7Kn0gbmFtZSBcclxuICAgKiBAcGFyYW0geyp9IGtleSBcclxuICAgKiBAcGFyYW0geyp9IHR5cGUgXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gY29uZGl0aW9ucyBcclxuICAgKi9cclxuICBmdW5jdGlvbiB2YWxpZGF0ZV9pc2ZhaWwobmFtZSwga2V5LCB0eXBlLCBjb25kaXRpb25zKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShfZGF0YSwgbmFtZSk7XHJcbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT0gJ3VuZGVmaW5lZCcpIHZhbHVlID0gbnVsbDtcclxuXHJcbiAgICBpZiAoX3J1bGVzW2tleV0pIHtcclxuICAgICAgdmFyIHJldCA9IF9ydWxlc1trZXldKHZhbHVlLCB0eXBlLCBjb25kaXRpb25zLCBzZWxmLCBuYW1lKTtcclxuICAgICAgaWYgKHJldCA9PT0gZmFsc2UgfHwgcmV0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuICFyZXQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSdWxlIFwiICsga2V5ICsgXCIgaXMgbm90IHByZXNlbnQgaW4gdGhlIHZhbGlkYXRpb24gcnVsZXMhXCIpO1xyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogR2V0IGFkZCBmb3JtIG5hbWUgZnJvbSB0aGUgbmFtZSB0byBjTmFtZSBpZiBpdCBkb2VzIG5vdCBoYXZlIGl0IHlldFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjTmFtZSBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcclxuICAgKi9cclxuICBmdW5jdGlvbiB0cnlEZWZhdWx0Rm9ybShjTmFtZSwgbmFtZSkge1xyXG4gICAgdmFyIHAgPSBwYXJ0cyhjTmFtZSk7XHJcbiAgICBpZiAoIXAuZm9ybSB8fCAhX29wdGlvbnMubmVzdGVkRGF0YSkge1xyXG4gICAgICB2YXIgZiA9IHBhcnRzKG5hbWUpLmZvcm07XHJcbiAgICAgIGlmICghZilcclxuICAgICAgICByZXR1cm4gY05hbWU7XHJcbiAgICAgIHJldHVybiBmICsgXCIuXCIgKyBjTmFtZTtcclxuICAgIH1cclxuICAgIHJldHVybiBjTmFtZTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogR2V0IHZhbHVlIGF0IG5hbWUgb3IgZm9ybS5uYW1lXHJcbiAgICogQHBhcmFtIHsqfSBvYmplY3RcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcclxuICAgKi9cclxuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIG5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBPYmplY3RzLmdldFByb3BlcnR5QnlQYXRoKG9iamVjdCwgbmFtZSk7XHJcbiAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhpcy5nZXREYXRhVmFsdWUgPSBmdW5jdGlvbiAobmFtZSwgY05hbWUgPSBcIlwiKSB7XHJcbiAgICByZXR1cm4gZ2V0VmFsdWUoX2RhdGEsIHRyeURlZmF1bHRGb3JtKG5hbWUsIGNOYW1lKSk7XHJcbiAgfTtcclxuICAvKipcclxuICAgKiBHZXQgdmFsdWUgYXQgbmFtZSBvciBmb3JtLm5hbWVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcclxuICAgKiBAcmV0dXJuIHtGaWVsZFRlbXBsYXRlfVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGdldFRlbXBsYXRlVmFsdWUobmFtZSkge1xyXG4gICAgcmV0dXJuIGZpZWxkc1tuYW1lXTtcclxuICB9XHJcbiAgdGhpcy5zZXRWYWx1ZSA9IHNldFZhbHVlO1xyXG4gIC8qKlxyXG4gICAqIFNldCB2YWx1ZSBhdCBuYW1lIG9yIGZvcm0ubmFtZVxyXG4gICAqIEBwYXJhbSB7Kn0gb2JqZWN0XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXHJcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHNldFZhbHVlKG9iamVjdCwgbmFtZSwgdmFsdWUpIHtcclxuICAgIE9iamVjdHMuc2V0UHJvcGVydHlCeVBhdGgob2JqZWN0LCBuYW1lLCB2YWx1ZSk7XHJcbiAgfVxyXG59XHJcbi8vZGVmYXVsdCBlbmdsaXNoIG1lc3NhZ2VzLiBSdWxlcyBmb3Igc29tZSBvZiB0aGVzZSBhcmUgbm90IHlldCBpbXBsZW1lbnRlZC5cclxuRm9ybVZhbGlkYXRvci5tZXNzYWdlcyA9IHtcclxuICBcImFjY2VwdGVkXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSBhY2NlcHRlZC5cIixcclxuICBcImFjdGl2ZV91cmxcIjogXCJUaGUgOmF0dHJpYnV0ZSBpcyBub3QgYSB2YWxpZCBVUkwuXCIsXHJcbiAgXCJhZnRlclwiOiBcIlRoZSA6YXR0cmlidXRlIG11c3QgYmUgYSBkYXRlIGFmdGVyIDpkYXRlLlwiLFxyXG4gIFwiYWxwaGFcIjogXCJUaGUgOmF0dHJpYnV0ZSBtYXkgb25seSBjb250YWluIGxldHRlcnMuXCIsXHJcbiAgXCJhbHBoYV9kYXNoXCI6IFwiVGhlIDphdHRyaWJ1dGUgbWF5IG9ubHkgY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzLCBhbmQgZGFzaGVzLlwiLFxyXG4gIFwiYWxwaGFfbnVtXCI6IFwiVGhlIDphdHRyaWJ1dGUgbWF5IG9ubHkgY29udGFpbiBsZXR0ZXJzIGFuZCBudW1iZXJzLlwiLFxyXG4gIFwiYXJyYXlcIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIGFuIGFycmF5LlwiLFxyXG4gIFwiYmVmb3JlXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSBhIGRhdGUgYmVmb3JlIDpkYXRlLlwiLFxyXG4gIFwiYmV0d2VlblwiOiB7XHJcbiAgICBcIm51bWJlclwiOiBcIlRoZSA6YXR0cmlidXRlIG11c3QgYmUgYmV0d2VlbiA6bWluIGFuZCA6bWF4LlwiLFxyXG4gICAgXCJudW1lcmljXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSBiZXR3ZWVuIDptaW4gYW5kIDptYXguXCIsXHJcbiAgICBcImZpbGVcIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIGJldHdlZW4gOm1pbiBhbmQgOm1heCBraWxvYnl0ZXMuXCIsXHJcbiAgICBcInN0cmluZ1wiOiBcIlRoZSA6YXR0cmlidXRlIG11c3QgYmUgYmV0d2VlbiA6bWluIGFuZCA6bWF4IGNoYXJhY3RlcnMuXCIsXHJcbiAgICBcImFycmF5XCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBoYXZlIGJldHdlZW4gOm1pbiBhbmQgOm1heCBpdGVtcy5cIlxyXG4gIH0sXHJcbiAgXCJib29sZWFuXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSB0cnVlIG9yIGZhbHNlLlwiLFxyXG4gIFwiY29uZmlybWVkXCI6IFwiVGhlIDphdHRyaWJ1dGUgY29uZmlybWF0aW9uIGRvZXMgbm90IG1hdGNoLlwiLFxyXG4gIFwiZGF0ZVwiOiBcIlRoZSA6YXR0cmlidXRlIGlzIG5vdCBhIHZhbGlkIGRhdGUuXCIsXHJcbiAgXCJkYXRlX2Zvcm1hdFwiOiBcIlRoZSA6YXR0cmlidXRlIGRvZXMgbm90IG1hdGNoIHRoZSBmb3JtYXQgOmZvcm1hdC5cIixcclxuICBcImRpZmZlcmVudFwiOiBcIlRoZSA6YXR0cmlidXRlIGFuZCA6b3RoZXIgbXVzdCBiZSBkaWZmZXJlbnQuXCIsXHJcbiAgXCJkaWdpdHNcIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIDpkaWdpdHMgZGlnaXRzLlwiLFxyXG4gIFwiZGlnaXRzX2JldHdlZW5cIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIGJldHdlZW4gOm1pbiBhbmQgOm1heCBkaWdpdHMuXCIsXHJcbiAgXCJkaXN0aW5jdFwiOiBcIlRoZSA6YXR0cmlidXRlIGhhcyBhIGR1cGxpY2F0ZSB2YWx1ZS5cIixcclxuICBcImVtYWlsXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuXCIsXHJcbiAgXCJleGlzdHNcIjogXCJUaGUgc2VsZWN0ZWQgOmF0dHJpYnV0ZSBpcyBpbnZhbGlkLlwiLFxyXG4gIFwiZmlsbGVkXCI6IFwiVGhlIDphdHRyaWJ1dGUgaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJpbWFnZVwiOiBcIlRoZSA6YXR0cmlidXRlIG11c3QgYmUgYW4gaW1hZ2UuXCIsXHJcbiAgXCJpblwiOiBcIlRoZSBzZWxlY3RlZCA6YXR0cmlidXRlIGlzIGludmFsaWQuXCIsXHJcbiAgXCJpbl9hcnJheVwiOiBcIlRoZSA6YXR0cmlidXRlIGRvZXMgbm90IGV4aXN0IGluIDpvdGhlci5cIixcclxuICBcImludGVnZXJcIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIGFuIGludGVnZXIuXCIsXHJcbiAgXCJpcFwiOiBcIlRoZSA6YXR0cmlidXRlIG11c3QgYmUgYSB2YWxpZCBJUCBhZGRyZXNzLlwiLFxyXG4gIFwianNvblwiOiBcIlRoZSA6YXR0cmlidXRlIG11c3QgYmUgYSB2YWxpZCBKU09OIHN0cmluZy5cIixcclxuICBcIm1heFwiOiB7XHJcbiAgICBcIm51bWJlclwiOiBcIlRoZSA6YXR0cmlidXRlIG1heSBub3QgYmUgZ3JlYXRlciB0aGFuIDptYXguXCIsXHJcbiAgICBcIm51bWVyaWNcIjogXCJUaGUgOmF0dHJpYnV0ZSBtYXkgbm90IGJlIGdyZWF0ZXIgdGhhbiA6bWF4LlwiLFxyXG4gICAgXCJmaWxlXCI6IFwiVGhlIDphdHRyaWJ1dGUgbWF5IG5vdCBiZSBncmVhdGVyIHRoYW4gOm1heCBraWxvYnl0ZXMuXCIsXHJcbiAgICBcInN0cmluZ1wiOiBcIlRoZSA6YXR0cmlidXRlIG1heSBub3QgYmUgZ3JlYXRlciB0aGFuIDptYXggY2hhcmFjdGVycy5cIixcclxuICAgIFwiYXJyYXlcIjogXCJUaGUgOmF0dHJpYnV0ZSBtYXkgbm90IGhhdmUgbW9yZSB0aGFuIDptYXggaXRlbXMuXCJcclxuICB9LFxyXG4gIFwibWltZXNcIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIGEgZmlsZSBvZiB0eXBlOiA6dmFsdWVzLlwiLFxyXG4gIFwibWluXCI6IHtcclxuICAgIFwibnVtYmVyXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSBhdCBsZWFzdCA6bWluLlwiLFxyXG4gICAgXCJudW1lcmljXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSBhdCBsZWFzdCA6bWluLlwiLFxyXG4gICAgXCJmaWxlXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSBhdCBsZWFzdCA6bWluIGtpbG9ieXRlcy5cIixcclxuICAgIFwic3RyaW5nXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSBhdCBsZWFzdCA6bWluIGNoYXJhY3RlcnMuXCIsXHJcbiAgICBcImFycmF5XCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBoYXZlIGF0IGxlYXN0IDptaW4gaXRlbXMuXCJcclxuICB9LFxyXG4gIFwibm90X2luXCI6IFwiVGhlIHNlbGVjdGVkIDphdHRyaWJ1dGUgaXMgaW52YWxpZC5cIixcclxuICBcIm51bWJlclwiOiBcIlRoZSA6YXR0cmlidXRlIG11c3QgYmUgYSBudW1iZXIuXCIsXHJcbiAgXCJudW1lcmljXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSBhIG51bWJlci5cIixcclxuICBcInByZXNlbnRcIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIHByZXNlbnQuXCIsXHJcbiAgXCJyZWdleFwiOiBcIlRoZSA6YXR0cmlidXRlIGlzIG5vdCB2YWxpZC4gOnJlc3VsdFwiLFxyXG5cclxuICBcInJlcXVpcmVkXCI6IFwiVGhlIDphdHRyaWJ1dGUgaXMgcmVxdWlyZWQuXCIsXHJcbiAgXCJyZXF1aXJlZF9pZlwiOiBcIlRoZSA6YXR0cmlidXRlIGlzIHJlcXVpcmVkIHdoZW4gOm90aGVyIGlzIDp2YWx1ZS5cIixcclxuICBcInJlcXVpcmVkX3VubGVzc1wiOiBcIlRoZSA6YXR0cmlidXRlIGlzIHJlcXVpcmVkIHVubGVzcyA6b3RoZXIgaXMgaW4gOnZhbHVlcy5cIixcclxuICBcInJlcXVpcmVkX3dpdGhcIjogXCJUaGUgOmF0dHJpYnV0ZSBpcyByZXF1aXJlZCB3aGVuIDp2YWx1ZXMgaXMgcHJlc2VudC5cIixcclxuICBcInJlcXVpcmVkX3dpdGhfYWxsXCI6IFwiVGhlIDphdHRyaWJ1dGUgaXMgcmVxdWlyZWQgd2hlbiA6dmFsdWVzIGlzIHByZXNlbnQuXCIsXHJcbiAgXCJyZXF1aXJlZF93aXRob3V0XCI6IFwiVGhlIDphdHRyaWJ1dGUgaXMgcmVxdWlyZWQgd2hlbiA6dmFsdWVzIGlzIG5vdCBwcmVzZW50LlwiLFxyXG4gIFwicmVxdWlyZWRfd2l0aG91dF9hbGxcIjogXCJUaGUgOmF0dHJpYnV0ZSBpcyByZXF1aXJlZCB3aGVuIG5vbmUgb2YgOnZhbHVlcyBhcmUgcHJlc2VudC5cIixcclxuICBcInNhbWVcIjogXCJUaGUgOmF0dHJpYnV0ZSBhbmQgOm90aGVyIG11c3QgbWF0Y2guXCIsXHJcbiAgXCJzaXplXCI6IHtcclxuICAgIFwibnVtYmVyXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSA6c2l6ZS5cIixcclxuICAgIFwibnVtZXJpY1wiOiBcIlRoZSA6YXR0cmlidXRlIG11c3QgYmUgOnNpemUuXCIsXHJcbiAgICBcImZpbGVcIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIDpzaXplIGtpbG9ieXRlcy5cIixcclxuICAgIFwic3RyaW5nXCI6IFwiVGhlIDphdHRyaWJ1dGUgbXVzdCBiZSA6c2l6ZSBjaGFyYWN0ZXJzLlwiLFxyXG4gICAgXCJhcnJheVwiOiBcIlRoZSA6YXR0cmlidXRlIG11c3QgY29udGFpbiA6c2l6ZSBpdGVtcy5cIlxyXG4gIH0sXHJcbiAgXCJzdHJpbmdcIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIGEgc3RyaW5nLlwiLFxyXG4gIFwidGltZXpvbmVcIjogXCJUaGUgOmF0dHJpYnV0ZSBtdXN0IGJlIGEgdmFsaWQgem9uZS5cIixcclxuICBcInVuaXF1ZVwiOiBcIlRoZSA6YXR0cmlidXRlIGhhcyBhbHJlYWR5IGJlZW4gdGFrZW4uXCIsXHJcbiAgXCJ1cmxcIjogXCJUaGUgOmF0dHJpYnV0ZSBmb3JtYXQgaXMgaW52YWxpZC5cIixcclxuICBcImlzVmFsaWRcIjogXCJUaGUgOmF0dHJpYnV0ZSBpcyBub3QgaW52YWxpZC5cIlxyXG4gIC8vXCJwaG9uZVwiOlwiVGhlIDphdHRyaWJ1dGUgZm9ybWF0IGlzIGludmFsaWQuXCJcclxufTtcclxuXHJcbi8qKiBAdHlwZSB7e1trZXk6c3RyaW5nXTpmdW5jdGlvbihhbnksICdzdHJpbmcnfCdhcnJheSd8J251bWVyaWMnfCdzZWxlY3QnLCBzdHJpbmdbXSwgRm9ybVZhbGlkYXRvciwgc3RyaW5nKTpib29sZWFufX0gKi9cclxuRm9ybVZhbGlkYXRvci5ydWxlcyA9IHtcclxuICB1bmlxdWUodmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcikge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSxcclxuICBhY2NlcHRlZCh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgIT09IFwiXCIgJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPSBmYWxzZTtcclxuICB9LFxyXG4gIHJlcXVpcmVkKHZhbHVlLCB0eXBlLCBjb25kaXRpb25zLCB2YWxpZGF0b3IsIG5hbWUpIHtcclxuICAgIGlmICh0eXBlID09IFwic2VsZWN0XCIpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGUgPT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZSA9PSBcImZpbGVcIikge1xyXG4gICAgICByZXR1cm4gIWVtcHR5KHZhbHVlKSAmJiAhZW1wdHkodmFsdWUubmFtZSk7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsaWRhdG9yLmZpZWxkc1tuYW1lXS5hdHRyaWJ1dGVzLmlzVmFsaWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIC8vcmV0dXJuIHZhbGlkYXRvci5maWVsZHNbbmFtZV0uYXR0cmlidXRlcy5pc1ZhbGlkXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUgIT09IFwiXCIgJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPSBmYWxzZTtcclxuICB9LFxyXG4gIGZpbGxlZCh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKSB7XHJcbiAgICByZXR1cm4gRm9ybVZhbGlkYXRvci5ydWxlcy5yZXF1aXJlZCh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKTtcclxuICB9LFxyXG4gIGRpZmZlcmVudCh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKSB7XHJcbiAgICBpZiAodmFsdWUgPT0gdmFsaWRhdG9yLmdldERhdGFWYWx1ZShjb25kaXRpb25zWzBdKSlcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0sXHJcbiAgc2FtZSh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKSB7XHJcbiAgICBpZiAodmFsdWUgPT0gdmFsaWRhdG9yLmdldERhdGFWYWx1ZShjb25kaXRpb25zWzBdKSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSxcclxuICByZXF1aXJlZF9pZih2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKSB7XHJcbiAgICB2YXIgb3RoZXJWYWx1ZSA9IHZhbGlkYXRvci5nZXREYXRhVmFsdWUoY29uZGl0aW9uc1swXSk7XHJcbiAgICBjb25kaXRpb25zID0gY29uZGl0aW9ucy5zbGljZSgxKTtcclxuICAgIGlmIChjb25kaXRpb25zLmxlbmd0aCA9PSAwICYmIG90aGVyVmFsdWUpIHtcclxuICAgICAgcmV0dXJuIEZvcm1WYWxpZGF0b3IucnVsZXMucmVxdWlyZWQodmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcik7XHJcbiAgICB9XHJcbiAgICBpZiAoY29uZGl0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGlmIChjb25kaXRpb25zLmluZGV4T2Yob3RoZXJWYWx1ZSkgPj0gMCkge1xyXG4gICAgICAgIHJldHVybiBGb3JtVmFsaWRhdG9yLnJ1bGVzLnJlcXVpcmVkKHZhbHVlLCB0eXBlLCBjb25kaXRpb25zLCB2YWxpZGF0b3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSxcclxuICBtaW4odmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcikge1xyXG4gICAgdmFyIG90aGVyVmFsdWU7XHJcbiAgICBpZiAoIWlzTmFOKE51bWJlcihjb25kaXRpb25zWzBdKSkpIHtcclxuICAgICAgb3RoZXJWYWx1ZSA9IE51bWJlcihjb25kaXRpb25zWzBdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG90aGVyVmFsdWUgPSB2YWxpZGF0b3IuZ2V0RGF0YVZhbHVlKGNvbmRpdGlvbnNbMF0pO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgIGNhc2UgJ251bWVyaWMnOlxyXG4gICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpID49IG90aGVyVmFsdWU7XHJcbiAgICAgIGNhc2UgJ2FycmF5JzpcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgY2FzZSAnZmlsZSc6XHJcbiAgICAgICAgcmV0dXJuICghZW1wdHkodmFsdWUpICYmICFlbXB0eSh2YWx1ZS5zaXplKSkgPyByb3VuZChOdW1iZXIodmFsdWUuc2l6ZSkgLyAxMDI0KSA+PSBvdGhlclZhbHVlIDogZmFsc2U7XHJcbiAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuICh2YWx1ZSArIFwiXCIpLmxlbmd0aCA+PSBvdGhlclZhbHVlO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgbWltZXModmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcikge1xyXG4gICAgaWYgKGVtcHR5KHZhbHVlKSB8fCBlbXB0eSh2YWx1ZS5uYW1lKSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB2YXIgY2hWYWwgPSBcIlwiO1xyXG4gICAgaWYgKHR5cGUgPT0gXCJmaWxlXCIpIHtcclxuICAgICAgY2hWYWwgPSBUZXh0LmZpbGVFeHRlbnNpb24odmFsdWUubmFtZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjaFZhbCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb25kaXRpb25zLmluZGV4T2YoY2hWYWwpID49IDA7XHJcblxyXG5cclxuICB9LFxyXG4gIG1heCh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKSB7XHJcbiAgICB2YXIgb3RoZXJWYWx1ZTtcclxuICAgIGlmICghaXNOYU4oTnVtYmVyKGNvbmRpdGlvbnNbMF0pKSkge1xyXG4gICAgICBvdGhlclZhbHVlID0gTnVtYmVyKGNvbmRpdGlvbnNbMF0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3RoZXJWYWx1ZSA9IHZhbGlkYXRvci5nZXREYXRhVmFsdWUoY29uZGl0aW9uc1swXSk7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgY2FzZSAnbnVtZXJpYyc6XHJcbiAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSkgPD0gb3RoZXJWYWx1ZTtcclxuICAgICAgY2FzZSAnYXJyYXknOlxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICBjYXNlICdmaWxlJzpcclxuICAgICAgICByZXR1cm4gKCFlbXB0eSh2YWx1ZSkgJiYgIWVtcHR5KHZhbHVlLnNpemUpKSA/IHJvdW5kKE51bWJlcih2YWx1ZS5zaXplKSAvIDEwMjQpIDw9IG90aGVyVmFsdWUgOiBmYWxzZTtcclxuICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gKHZhbHVlICsgXCJcIikubGVuZ3RoIDw9IG90aGVyVmFsdWU7XHJcbiAgICB9XHJcbiAgfSxcclxuICBzaXplKHZhbHVlLCB0eXBlLCBjb25kaXRpb25zLCB2YWxpZGF0b3IpIHtcclxuICAgIHZhciBvdGhlclZhbHVlID0gTnVtYmVyKGNvbmRpdGlvbnNbMF0pO1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgIGNhc2UgJ251bWVyaWMnOlxyXG4gICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpID09IG90aGVyVmFsdWU7XHJcbiAgICAgIGNhc2UgJ2FycmF5JzpcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgY2FzZSAnZmlsZSc6XHJcbiAgICAgICAgcmV0dXJuICghZW1wdHkodmFsdWUpICYmICFlbXB0eSh2YWx1ZS5zaXplKSkgPyByb3VuZChOdW1iZXIodmFsdWUuc2l6ZSkgLyAxMDI0KSA9PSBvdGhlclZhbHVlIDogZmFsc2U7XHJcbiAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuICh2YWx1ZSArIFwiXCIpLmxlbmd0aCA9PSBvdGhlclZhbHVlO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgYWZ0ZXIodmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcikge1xyXG4gICAgdmFyIG90aGVyVmFsdWU7XHJcbiAgICBpZiAoIWlzTmFOKE51bWJlcihjb25kaXRpb25zWzBdKSkpIHtcclxuICAgICAgb3RoZXJWYWx1ZSA9IE51bWJlcihjb25kaXRpb25zWzBdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG90aGVyVmFsdWUgPSB2YWxpZGF0b3IuZ2V0RGF0YVZhbHVlKGNvbmRpdGlvbnNbMF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbXB0eSh2YWx1ZSkgfHwgbmV3IERhdGUodmFsdWUpID4gbmV3IERhdGUob3RoZXJWYWx1ZSk7XHJcbiAgfSxcclxuICBiZWZvcmUodmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcikge1xyXG4gICAgdmFyIG90aGVyVmFsdWU7XHJcbiAgICBpZiAoIWlzTmFOKE51bWJlcihjb25kaXRpb25zWzBdKSkpIHtcclxuICAgICAgb3RoZXJWYWx1ZSA9IE51bWJlcihjb25kaXRpb25zWzBdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG90aGVyVmFsdWUgPSB2YWxpZGF0b3IuZ2V0RGF0YVZhbHVlKGNvbmRpdGlvbnNbMF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbXB0eSh2YWx1ZSkgfHwgbmV3IERhdGUodmFsdWUpIDwgbmV3IERhdGUob3RoZXJWYWx1ZSk7XHJcbiAgfSxcclxuICBkYXRlKHZhbHVlLCB0eXBlLCBjb25kaXRpb25zLCB2YWxpZGF0b3IpIHtcclxuICAgIHJldHVybiBpc0RhdGUodmFsdWUpO1xyXG4gIH0sXHJcbiAgZGlnaXRzKHZhbHVlLCB0eXBlLCBjb25kaXRpb25zLCB2YWxpZGF0b3IpIHtcclxuICAgIHZhciByZSA9IG5ldyBSZWdFeHAoJ15bMC05XXsnICsgY29uZGl0aW9uc1swXSArICd9JCcpO1xyXG4gICAgcmV0dXJuIHJlLnRlc3QodmFsdWUpO1xyXG4gIH0sXHJcbiAgZGlnaXRzX2JldHdlZW4odmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcikge1xyXG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnXlswLTldeycgKyBjb25kaXRpb25zWzBdICsgJywnICsgY29uZGl0aW9uc1sxXSArICd9JCcpO1xyXG4gICAgcmV0dXJuIHJlLnRlc3QodmFsdWUpO1xyXG4gIH0sXHJcbiAgaW4odmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcikge1xyXG4gICAgcmV0dXJuIGNvbmRpdGlvbnMuaW5kZXhPZih2YWx1ZSkgPj0gMDtcclxuICB9LFxyXG4gIHN0cmluZyh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKSB7XHJcbiAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpO1xyXG4gIH0sXHJcbiAgYm9vbGVhbih2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKSB7XHJcbiAgICByZXR1cm4gaXNCb29sZWFuKHZhbHVlKTtcclxuICB9LFxyXG4gIG51bWVyaWModmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcikge1xyXG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XHJcbiAgfSxcclxuICBpbnRlZ2VyKHZhbHVlLCB0eXBlLCBjb25kaXRpb25zLCB2YWxpZGF0b3IpIHtcclxuICAgIHZhciB4ID0gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICByZXR1cm4gIWlzTmFOKHZhbHVlKSAmJiAoeCB8IDApID09PSB4O1xyXG4gIH0sXHJcbiAgZW1haWwodmFsdWUsIHR5cGUsIGNvbmRpdGlvbnMsIHZhbGlkYXRvcikge1xyXG4gICAgdmFyIHJlID0gL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XHJcbiAgICByZXR1cm4gcmUudGVzdCh2YWx1ZSk7XHJcbiAgfSxcclxuXHJcbiAgaXNWYWxpZCh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yLCBuYW1lKSB7XHJcbiAgICByZXR1cm4gdmFsaWRhdG9yLmZpZWxkc1tuYW1lXS5hdHRyaWJ1dGVzLmlzVmFsaWQ7XHJcbiAgfSxcclxuXHJcbiAgLypwaG9uZSh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKXtcclxuICAgIHZhciByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xyXG4gICAgcmV0dXJuIHJlLnRlc3QodmFsdWUpO1xyXG4gIH0sKi9cclxuICByZWdleCh2YWx1ZSwgdHlwZSwgY29uZGl0aW9ucywgdmFsaWRhdG9yKSB7XHJcbiAgICBpZiAoZW1wdHkodmFsdWUpKSB2YWx1ZSA9IFwiXCI7XHJcbiAgICB2YXIgY29uZGl0aW9uID0gY29uZGl0aW9uc1swXS5yZXBsYWNlKC9eXFwvfFxcLyQvZywgJycpO1xyXG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChjb25kaXRpb24pO1xyXG5cclxuICAgIGlmIChyZS50ZXN0KHZhbHVlKSA9PSBmYWxzZSkge1xyXG4gICAgICByZXR1cm4gY29uZGl0aW9uc1sxXSA/IGNvbmRpdGlvbnNbMV0gOiBcIlwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBGb3JtV2Fsa2VyID0ge1xyXG4gIC8qKlxyXG4gICAqIFdhbGsgdGhlIGZpZWxkVGVtcGxhdGUgYXJyYXkgc2V0dGluZyBmdWxseS1xdWFsaWZpZWQgX25hbWUgcHJvcGVydGllc1xyXG4gICAqIFJldHVybnMgYSBmbGF0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZSB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBiaW5kaW5nIHRvIHRoZSB2aWV3XHJcbiAgICogQHBhcmFtIHtGaWVsZFRlbXBsYXRlW119IG9iaiBcclxuICAgKiBAcmV0dXJuIHt7W2tleTpzdHJpbmddOkZpZWxkVGVtcGxhdGV9fVxyXG4gICAqL1xyXG4gIHNldF9uYW1lcyhvYmopIHtcclxuICAgIHZhciBrZXllZCA9IHt9O1xyXG4gICAgdmFyIGluZGV4ID0gMTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXRfbmFtZXNfaW50KG9iaiwgcGF0aCkge1xyXG4gICAgICB2YXIgaGFzU2V0ID0gZmFsc2U7XHJcbiAgICAgIGlmICghcGF0aCkge1xyXG4gICAgICAgIHBhdGggPSBcIlwiO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNBcnJheShvYmopKSB7XHJcbiAgICAgICAgT2JqZWN0cy5mb3JFYWNoKG9iaiwgZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICBpZiAoc2V0X25hbWVzX2ludChlbCwgcGF0aCkpIHtcclxuICAgICAgICAgICAgaGFzU2V0ID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChvYmopKSB7XHJcbiAgICAgICAgaWYgKCFvYmouX25hbWUgJiYgb2JqLm5hbWUpIHtcclxuICAgICAgICAgIG9iai5fbmFtZSA9IChwYXRoICE9IFwiXCIgPyBwYXRoICsgXCIuXCIgOiBcIlwiKSArIG9iai5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JqLnR5cGUgJiYgIW9iai5fbmFtZSAmJiAob2JqLmRpc3BsYXlSdWxlIHx8IG9iai52YWxpZGF0ZVJ1bGUgfHwgb2JqLnZhbHVlKSkge1xyXG4gICAgICAgICAgb2JqLl9uYW1lID0gXCJfX2R5bmFtaWNfX1wiICsgKGluZGV4KyspOyAvLyBHVUlEKCk7IC8vZm9ybSBhbmQgYXJyYXlzIGRvIG5veXQgZ2V0IHBvc3RhYmxlIGR5bmFtaWMgbmFtZSFcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9iai5fbmFtZSkge1xyXG4gICAgICAgICAga2V5ZWRbb2JqLl9uYW1lXSA9IG9iajtcclxuICAgICAgICAgIGlmICgha2V5ZWRbb2JqLl9uYW1lXS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIGtleWVkW29iai5fbmFtZV0uYXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9iai5pdGVtcyAmJiAhb2JqLnR5cGUgJiYgb2JqLnZhbHVlKSB7XHJcbiAgICAgICAgICAvL2l0IGlzIHNlbGVjdCBvcHRpb24gd2l0aCBpdGVtcyFcclxuXHJcbiAgICAgICAgICBpZiAoc2V0X25hbWVzX2ludChvYmouaXRlbXMsIG9iai52YWx1ZSkpIHtcclxuICAgICAgICAgICAgaGFzU2V0ID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmouaXRlbXMgJiYgb2JqLnR5cGUgPT0gXCJzZWxlY3RcIikge1xyXG4gICAgICAgICAgaWYgKG9iai5pdGVtcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICBPYmplY3RzLmZvckVhY2gob2JqLml0ZW1zLCBmdW5jdGlvbiAob3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pdGVtcyAmJiBvcHRpb24uaXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgLy9naXZlIG9wdGlvbiBhIG5hbWUgbm93XHJcbiAgICAgICAgICAgICAgICBvcHRpb24uX25hbWUgPSBcIl9fZHluYW1pY19fXCIgKyAoaW5kZXgrKyk7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24uZGlzcGxheVJ1bGUgPSBgdHJ1ZV9pZjokeyhwYXRoICE9IFwiXCIgPyBwYXRoICsgXCIuXCIgOiBcIlwiKSArIG9iai5uYW1lfSwke29wdGlvbi52YWx1ZX1gO1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLmF0dHJpYnV0ZXMgPSB7fTtcclxuICAgICAgICAgICAgICAgIGtleWVkW29wdGlvbi5fbmFtZV0gPSBvcHRpb247XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNldF9uYW1lc19pbnQob3B0aW9uLml0ZW1zKSkge1xyXG4gICAgICAgICAgICAgICAgICBoYXNTZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9iai5pdGVtcyAmJiBvYmoudHlwZSA9PSBcImZvcm1cIikge1xyXG4gICAgICAgICAgaWYgKHNldF9uYW1lc19pbnQob2JqLml0ZW1zLCBvYmoubmFtZSkpIHtcclxuICAgICAgICAgICAgaGFzU2V0ID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGhhc1NldDtcclxuICAgIH1cclxuICAgIGluZGV4ID0gb2JqW2R5bmFtaWNJbmRleFN5bWJvbF0gfHwgMTtcclxuICAgIHNldF9uYW1lc19pbnQob2JqKTtcclxuICAgIG9ialtkeW5hbWljSW5kZXhTeW1ib2xdID0gaW5kZXg7XHJcbiAgICByZXR1cm4ga2V5ZWQ7XHJcbiAgfVxyXG59OyIsImltcG9ydCB7IGlzT2JqZWN0LCBpc0FycmF5IH0gZnJvbSBcInV0aWxcIjtcclxuLyoqXHJcbiAqIENoZWNrIGlmIG9iamVjdCBpcyBlbXB0eVxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eSh2YWx1ZSl7XHJcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWx1ZSA9PT0gMCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gZmFsc2U7Ly8gfHwgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSkubGVuZ3RoID09PSAwKSA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3VuZCBudW1lcmljIHZhbHVlIHRvIG4gZGVjaW1hbHNcclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gW25dID0gMFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKHZhbHVlLCBuKSB7XHJcbiAgbiA9IG4gfHwgMDtcclxuICB2YXIgc2NhbGUgPSBNYXRoLnBvdygxMCwgbik7XHJcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBzY2FsZSkvc2NhbGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHN0cmluZyBmb3JtYXR0ZWQgYXMgbG9jYWxlIG51bWJlciB0byBudW1iZXJcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1ZhbHVlIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlckZyb21Mb2NhbGVTdHJpbmcoc3RyaW5nVmFsdWUsIGxvY2FsZSl7XHJcbiAgdmFyIHBhcnRzID0gTnVtYmVyKDExMTEuMTEpLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSkucmVwbGFjZSgvXFxkKy9nLCcnKS5zcGxpdCgnJyk7XHJcbiAgaWYgKHN0cmluZ1ZhbHVlID09PSBudWxsKVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgaWYgKHBhcnRzLmxlbmd0aD09MSkge1xyXG4gICAgcGFydHMudW5zaGlmdCgnJyk7XHJcbiAgfVx0XHJcbiAgcmV0dXJuIE51bWJlcihTdHJpbmcoc3RyaW5nVmFsdWUpLnJlcGxhY2UobmV3IFJlZ0V4cChwYXJ0c1swXS5yZXBsYWNlKC9cXHMvZywnICcpLCdnJyksICcnKS5yZXBsYWNlKHBhcnRzWzFdLFwiLlwiKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcnkgY2FsbGluZyBhIGZ1bmN0aW9uIHVuZGVyIGNvbnRleHQuXHJcbiAqIFNhbWUgYXMgRnVuY3Rpb24uY2FsbCBidXQgd2l0aCBjaGVjayBpZiBjYWxsYmFjayBleGlzdHNcclxuICogQHBhcmFtIHtmdW5jdGlvbigqKX0gY2FsbGJhY2sgXHJcbiAqIEByZXR1cm4ge2FueX1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cnlDYWxsKGNvbnRleHQsIGNhbGxiYWNrKXtcclxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKVxyXG4gICAgcmV0dXJuO1xyXG4gIHJldHVybiBjYWxsYmFjay5hcHBseShjb250ZXh0LCBhcmd1bWVudHNUb0FycmF5KGFyZ3VtZW50cywyKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4qIFB1c2ggZnVuY3Rpb24gYXJndW1lbnRzIGludG8gYXJyYXkgc3RhcnRpbmcgZnJvbSBuU3RhcnRcclxuKiBAcGFyYW0geyp9IGFyZ3MgLSBhcmd1bWVudHNcclxuKiBAcGFyYW0ge251bWJlcn0gW25TdGFydF0gLSBhcmd1bWVudCBudW1iZXIgdG8gc3RhcnQgZnJvbS4gMCBieSBkZWZhdWx0XHJcbiogQHJldHVybiB7YW55W119XHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBhcmd1bWVudHNUb0FycmF5KGFyZ3MsblN0YXJ0KXtcclxuICBuU3RhcnQgPSBuU3RhcnQgfHwgMDtcclxuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykuc2xpY2UoblN0YXJ0KTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBPdmVycmlkZSBGdW5jdGlvbiBvciBhIG1ldGhvZCBcclxuICogQHBhcmFtIHthbnl9IG9yaWdpbmFsQ29udGV4dCAtIGNvbnRleHQgdG8gY2FsbCB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gZnJvbVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcmlnaW5hbEZ1bmN0aW9uIC0gbWV0aG9kIG9yIGZ1bmN0aW9uIHRvIG92ZXJyaWRlXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24sIC4uLmFueSk6YW55fSBvdmVycmlkZUZ1bmN0aW9uIC0gY2FsbGJhY2sgdG8gZXhlY3V0ZSBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi9tZXRob2RcclxuICogQHJldHVybnMgZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBPdmVycmlkZShvcmlnaW5hbENvbnRleHQsIG9yaWdpbmFsRnVuY3Rpb24sIG92ZXJyaWRlRnVuY3Rpb24pe1xyXG4gIHJldHVybiBmdW5jdGlvbigpe1xyXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICB2YXIgYXJnc1dpdGhOZXh0ID0gYXJndW1lbnRzVG9BcnJheShhcmd1bWVudHMpO1xyXG4gICAgYXJnc1dpdGhOZXh0LnVuc2hpZnQoZnVuY3Rpb24oKXtcclxuICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkob3JpZ2luYWxDb250ZXh0LCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50cyA6IGFyZ3MgKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG92ZXJyaWRlRnVuY3Rpb24uYXBwbHkoIG9yaWdpbmFsQ29udGV4dCwgYXJnc1dpdGhOZXh0ICk7XHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHRcclxuICogRXh0ZW5kIENoaWxkIENsYXNzIFdpdGggdGhlIFBhcmVudCAgIFx0XHJcbiAqICoqKnVzYWdlKioqOiAgIFx0XHJcbiAqICAtIGNsYXNzIENoaWxkQ2xhc3NzIGV4dGVuZHMgQmFzZUNsYXNzIHt9ICoqKlNBTUUgQVMqKiogdmFyIENoaWxkQ2xhc3MgPSBleHRlbmQoIEJhc2VDbGFzcywgZnVuY3Rpb24gQ2hpbGRDbGFzcyhwYXJhbXMpe30pOyAgXHRcclxuICogIC0gc3VwZXIoUGFnZSk7ICoqKlNBTUUgQVMqKiogdGhpcy5zdXBlcihQYWdlKTsgIFx0XHJcbiAqIFx0XHJcbiAqIEBwYXJhbSB7Kn0gcGFyZW50Q29uc3RydWN0b3IgXHRcclxuICogQHBhcmFtIHsqfSBjaGlsZENvbnN0cnVjdG9yIFx0XHJcbiAqL1x0XHJcbmV4cG9ydCBmdW5jdGlvbiBFeHRlbmQoIHBhcmVudENvbnN0cnVjdG9yLCBjaGlsZENvbnN0cnVjdG9yICl7XHRcclxuICBjaGlsZENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIHBhcmVudENvbnN0cnVjdG9yLnByb3RvdHlwZSApO1x0XHJcbiAgY2hpbGRDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjaGlsZENvbnN0cnVjdG9yO1x0XHJcbiAgY2hpbGRDb25zdHJ1Y3Rvci5wcm90b3R5cGUuc3VwZXIgPSBmdW5jdGlvbigpe3JldHVybiBwYXJlbnRDb25zdHJ1Y3Rvci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fTtcdFxyXG4gIHJldHVybiBjaGlsZENvbnN0cnVjdG9yO1x0XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBHVUlEKCkge1xyXG4gIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcclxuICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMCwgdiA9IGMgPT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcclxuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqTGl0ZXJhbChfb2JqKSB7XHJcbiAgdmFyIF90ZXN0ICA9IF9vYmo7XHJcbiAgcmV0dXJuICggIHR5cGVvZiBfb2JqICE9PSAnb2JqZWN0JyB8fCBfb2JqID09PSBudWxsID9cclxuICAgIGZhbHNlIDogIFxyXG4gICAgKFxyXG5cdFx0XHRcdCAgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB3aGlsZSAoIWZhbHNlKSB7XHJcblx0XHRcdFx0XHQgIGlmICggIE9iamVjdC5nZXRQcm90b3R5cGVPZiggX3Rlc3QgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoX3Rlc3QpICApID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cdFx0XHRcdFx0ICB9ICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoX29iaikgPT09IF90ZXN0O1xyXG5cdFx0XHRcdCAgfSkoKVxyXG4gICAgKVxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZXJhYmxlKG9iaikge1xyXG4gIC8vIGNoZWNrcyBmb3IgbnVsbCBhbmQgdW5kZWZpbmVkXHJcbiAgaWYgKG9iaiA9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB0eXBlb2Ygb2JqW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XHJcbn0iLCJcclxud2luZG93LmVtcHR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gMCB8fCB2YWx1ZSA9PT0gZmFsc2U7XHJcbn07XHJcblxyXG5pZiAoISgncmVtb3ZlJyBpbiBFbGVtZW50LnByb3RvdHlwZSkpIHtcclxuICBFbGVtZW50LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7XHJcbiAgfTtcclxufVxyXG5cclxuaWYgKCEoJ3JlcGFpbnQnIGluIEVsZW1lbnQucHJvdG90eXBlKSkge1xyXG4gIEVsZW1lbnQucHJvdG90eXBlLnJlcGFpbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZCA9IHRoaXMuc3R5bGUuZGlzcGxheTtcclxuICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIHRoaXMub2Zmc2V0SGVpZ2h0O1xyXG4gICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gZDtcclxuICAgIC8vY29uc29sZS5sb2codGhpcy50YWdOYW1lK1wiLlwiK3RoaXMuY2xhc3NOYW1lICsgXCIgcmVwYWludFwiKTtcclxuICB9O1xyXG59XHJcbmlmICghQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCovKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIGlmICh0aGlzID09IG51bGwpXHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuXHJcbiAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcclxuICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcclxuICAgIGlmIChsZW4gPT09IDApXHJcbiAgICAgIHJldHVybiAtMTtcclxuXHJcbiAgICB2YXIgbiA9IGxlbjtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xyXG4gICAgICBuID0gTnVtYmVyKGFyZ3VtZW50c1sxXSk7XHJcbiAgICAgIGlmIChuICE9IG4pXHJcbiAgICAgICAgbiA9IDA7XHJcbiAgICAgIGVsc2UgaWYgKG4gIT0gMCAmJiBuICE9ICgxIC8gMCkgJiYgbiAhPSAtKDEgLyAwKSlcclxuICAgICAgICBuID0gKG4gPiAwIHx8IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobikpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBrID0gbiA+PSAwXHJcbiAgICAgID8gTWF0aC5taW4obiwgbGVuIC0gMSlcclxuICAgICAgOiBsZW4gLSBNYXRoLmFicyhuKTtcclxuXHJcbiAgICBmb3IgKDsgayA+PSAwOyBrLS0pIHtcclxuICAgICAgaWYgKGsgaW4gdCAmJiB0W2tdID09PSBzZWFyY2hFbGVtZW50KVxyXG4gICAgICAgIHJldHVybiBrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH07XHJcbn1cclxuaWYgKCFTdHJpbmcucHJvdG90eXBlLnJlcGVhdCkge1xyXG4gIFN0cmluZy5wcm90b3R5cGUucmVwZWF0ID0gZnVuY3Rpb24gKGNvdW50KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBpZiAodGhpcyA9PSBudWxsKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhblxcJ3QgY29udmVydCAnICsgdGhpcyArICcgdG8gb2JqZWN0Jyk7XHJcbiAgICB9XHJcbiAgICB2YXIgc3RyID0gJycgKyB0aGlzO1xyXG4gICAgY291bnQgPSArY291bnQ7XHJcbiAgICBpZiAoY291bnQgIT0gY291bnQpIHtcclxuICAgICAgY291bnQgPSAwO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvdW50IDwgMCkge1xyXG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigncmVwZWF0IGNvdW50IG11c3QgYmUgbm9uLW5lZ2F0aXZlJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoY291bnQgPT0gSW5maW5pdHkpIHtcclxuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3JlcGVhdCBjb3VudCBtdXN0IGJlIGxlc3MgdGhhbiBpbmZpbml0eScpO1xyXG4gICAgfVxyXG4gICAgY291bnQgPSBNYXRoLmZsb29yKGNvdW50KTtcclxuICAgIGlmIChzdHIubGVuZ3RoID09IDAgfHwgY291bnQgPT0gMCkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICAvLyBFbnN1cmluZyBjb3VudCBpcyBhIDMxLWJpdCBpbnRlZ2VyIGFsbG93cyB1cyB0byBoZWF2aWx5IG9wdGltaXplIHRoZVxyXG4gICAgLy8gbWFpbiBwYXJ0LiBCdXQgYW55d2F5LCBtb3N0IGN1cnJlbnQgKEF1Z3VzdCAyMDE0KSBicm93c2VycyBjYW4ndCBoYW5kbGVcclxuICAgIC8vIHN0cmluZ3MgMSA8PCAyOCBjaGFycyBvciBsb25nZXIsIHNvOlxyXG4gICAgaWYgKHN0ci5sZW5ndGggKiBjb3VudCA+PSAxIDw8IDI4KSB7XHJcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdyZXBlYXQgY291bnQgbXVzdCBub3Qgb3ZlcmZsb3cgbWF4aW11bSBzdHJpbmcgc2l6ZScpO1xyXG4gICAgfVxyXG4gICAgdmFyIHJwdCA9ICcnO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgIHJwdCArPSBzdHI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcnB0O1xyXG4gIH07XHJcbn1cclxuaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9ICdmdW5jdGlvbicpIHtcclxuICAvLyBNdXN0IGJlIHdyaXRhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdCwgXCJhc3NpZ25cIiwge1xyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHZhckFyZ3MpIHsgLy8gLmxlbmd0aCBvZiBmdW5jdGlvbiBpcyAyXHJcbiAgICAgICd1c2Ugc3RyaWN0JztcclxuICAgICAgaWYgKHRhcmdldCA9PSBudWxsKSB7IC8vIFR5cGVFcnJvciBpZiB1bmRlZmluZWQgb3IgbnVsbFxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcclxuXHJcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xyXG5cclxuICAgICAgICBpZiAobmV4dFNvdXJjZSAhPSBudWxsKSB7IC8vIFNraXAgb3ZlciBpZiB1bmRlZmluZWQgb3IgbnVsbFxyXG4gICAgICAgICAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0U291cmNlKSB7XHJcbiAgICAgICAgICAgIC8vIEF2b2lkIGJ1Z3Mgd2hlbiBoYXNPd25Qcm9wZXJ0eSBpcyBzaGFkb3dlZFxyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5leHRTb3VyY2UsIG5leHRLZXkpKSB7XHJcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0bztcclxuICAgIH0sXHJcbiAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gIH0pO1xyXG59XHJcbmlmICghKFwiY2xhc3NMaXN0XCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgdHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIVE1MRWxlbWVudC5wcm90b3R5cGUsICdjbGFzc0xpc3QnLCB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICBmdW5jdGlvbiB1cGRhdGUoZm4pIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICB2YXIgY2xhc3NlcyA9IHNlbGYuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLyksXHJcbiAgICAgICAgICAgIGluZGV4ID0gY2xhc3Nlcy5pbmRleE9mKHZhbHVlKTtcclxuXHJcbiAgICAgICAgICBmbihjbGFzc2VzLCBpbmRleCwgdmFsdWUpO1xyXG4gICAgICAgICAgc2VsZi5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciByZXQgPSB7XHJcbiAgICAgICAgYWRkOiB1cGRhdGUoZnVuY3Rpb24gKGNsYXNzZXMsIGluZGV4LCB2YWx1ZSkge1xyXG4gICAgICAgICAgfmluZGV4IHx8IGNsYXNzZXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfSksXHJcblxyXG4gICAgICAgIHJlbW92ZTogdXBkYXRlKGZ1bmN0aW9uIChjbGFzc2VzLCBpbmRleCkge1xyXG4gICAgICAgICAgfmluZGV4ICYmIGNsYXNzZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9KSxcclxuXHJcbiAgICAgICAgdG9nZ2xlOiB1cGRhdGUoZnVuY3Rpb24gKGNsYXNzZXMsIGluZGV4LCB2YWx1ZSkge1xyXG4gICAgICAgICAgfmluZGV4ID8gY2xhc3Nlcy5zcGxpY2UoaW5kZXgsIDEpIDogY2xhc3Nlcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9KSxcclxuXHJcbiAgICAgICAgY29udGFpbnM6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgcmV0dXJuICEhfnNlbGYuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykuaW5kZXhPZih2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXRlbTogZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgIHJldHVybiBzZWxmLmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pW2ldIHx8IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJldCwgJ2xlbmd0aCcsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiBzZWxmLmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuaWYgKCF3aW5kb3dbJ2RldmljZSddKSB7XHJcbiAgd2luZG93WydkZXZpY2UnXSA9IHtcclxuICAgIHBsYXRmb3JtOiB3aW5kb3cucGxhdGZvcm0sXHJcbiAgICBtb2RlbDogXCJVbmtub3duXCIsXHJcbiAgfTtcclxufVxyXG5cclxuLy8gaHR0cDovL3BhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cclxuLy8gaHR0cDovL215Lm9wZXJhLmNvbS9lbW9sbGVyL2Jsb2cvMjAxMS8xMi8yMC9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWVyLWFuaW1hdGluZ1xyXG4vLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGwgYnkgRXJpayBNw7ZsbGVyLiBmaXhlcyBmcm9tIFBhdWwgSXJpc2ggYW5kIFRpbm8gWmlqZGVsXHJcbi8vIE1JVCBsaWNlbnNlXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIGxhc3RUaW1lID0gMDtcclxuICB2YXIgdmVuZG9ycyA9IFsnbXMnLCAnbW96JywgJ3dlYmtpdCcsICdvJ107XHJcbiAgZm9yICh2YXIgeCA9IDA7IHggPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKyt4KSB7XHJcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvcnNbeF0gKyAnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XHJcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1t4XSArICdDYW5jZWxBbmltYXRpb25GcmFtZSddXHJcbiAgICAgIHx8IHdpbmRvd1t2ZW5kb3JzW3hdICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO1xyXG4gIH1cclxuXHJcbiAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxyXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZWxlbWVudCkge1xyXG4gICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XHJcbiAgICAgIHZhciBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTsgfSxcclxuICAgICAgICB0aW1lVG9DYWxsKTtcclxuICAgICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XHJcbiAgICAgIHJldHVybiBpZDtcclxuICAgIH07XHJcblxyXG4gIGlmICghd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKVxyXG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChpZCk7XHJcbiAgICB9O1xyXG59KCkpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7IH07IiwiLy9UaGlzIG1vZHVsZSB3cmFwcyBzb21lIHNpbXBsZSBub3RpZmljYXRpb25zXHJcbmltcG9ydCB7IHRyeUNhbGwgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XHJcbmltcG9ydCB7IERpYWxvZyB9IGZyb20gXCIuLi9wYWdlcy9EaWFsb2dQYWdlL0RpYWxvZ1BhZ2VcIjtcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gXCIuL3RleHRcIjtcclxuaW1wb3J0IHsgT2JqZWN0cyB9IGZyb20gXCIuL09iamVjdHNcIjtcclxuXHJcbi8qKlxyXG4gKiBTaG93IFwiQ29uZmlybVwiIGRpYWxvZyB3aXRoIGN1c3RvbSBidXR0b25zXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9tcHQgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIFxyXG4gKiBAcGFyYW0ge3tbYnV0dG9uX25hbWU6c3RyaW5nXTpmdW5jdGlvbigpOmFueX19IGJ1dHRvbnMgXHJcbiAqL1xyXG5leHBvcnQgdmFyIENvbmZpcm1CdXR0b25zID0gZnVuY3Rpb24gKHByb21wdCwgdGl0bGUsIGJ1dHRvbnMpIHtcclxuICB2YXIgcCA9IERpYWxvZyh0aXRsZSk7XHJcbiAgcC5hZGRMYWJlbChudWxsLCBUZXh0LmVzY2FwZUhUTUwocHJvbXB0LCB0cnVlKSk7XHJcbiAgT2JqZWN0cy5mb3JFYWNoKGJ1dHRvbnMsIChidXR0b24sIG5hbWUpID0+IHtcclxuICAgIHAuYWRkQWN0aW9uQnV0dG9uKG5hbWUsIGJ1dHRvbik7XHJcbiAgfSk7XHJcbiAgcC5vbkJhY2tOYXZpZ2F0ZSA9ICgpID0+IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNob3cgc2ltcGxlIENvbmZpcm0gQm94IFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvbXB0IFxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6dm9pZH0gb25Db25maXJtIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSBcclxuICovXHJcbmV4cG9ydCB2YXIgQ29uZmlybSA9IGZ1bmN0aW9uIChwcm9tcHQsIG9uQ29uZmlybSwgdGl0bGUpIHtcclxuICB2YXIgcCA9IERpYWxvZyh0aXRsZSk7XHJcblxyXG4gIHAuYWRkTGFiZWwobnVsbCwgVGV4dC5lc2NhcGVIVE1MKHByb21wdCwgdHJ1ZSkpO1xyXG4gIHAuYWRkQWN0aW9uQnV0dG9uKCdObycsICgpID0+IHsgfSk7XHJcbiAgcC5hZGRBY3Rpb25CdXR0b24oJ1llcycsIG9uQ29uZmlybSk7XHJcbn07XHJcblxyXG4vKipcclxuICogU2hvdyBzaW1wbGUgQ29uZmlybSBCb3ggXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9tcHQgXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTp2b2lkfSBvbkNvbmZpcm0gXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIFxyXG4gKi9cclxuZXhwb3J0IHZhciBDb25maXJtRGFuZ2VyID0gZnVuY3Rpb24gKHByb21wdCwgb25Db25maXJtLCB0aXRsZSkge1xyXG4gIHZhciBwID0gRGlhbG9nKHRpdGxlKTtcclxuXHJcbiAgcC5hZGRMYWJlbChudWxsLCBUZXh0LmVzY2FwZUhUTUwocHJvbXB0LCB0cnVlKSk7XHJcbiAgcC5hZGRBY3Rpb25CdXR0b24oJ1llcycsIG9uQ29uZmlybSk7XHJcbiAgcC5hZGRBY3Rpb25CdXR0b24oJ05vJywgKCkgPT4geyB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTaG93IHNpbXBsZSBQcm9tcHQgQm94IFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvbXB0IFxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZ3xudW1iZXIpOnZvaWR9IG9uQ29uZmlybSBcclxuICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gLSBkaWFsb2cgdGl0bGVcclxuICogQHBhcmFtIHtzdHJpbmd9IFt2YWx1ZV0gLSBkaWFsb2cgaW5pdGlhbCB2YWx1ZVxyXG4gKiBAcGFyYW0ge3RydWV8c3RyaW5nfSBbdmFsaWRhdGVSdWxlXSAtIHZhbGlkYXRlIHJ1bGUgbGlrZSAncmVxdWlyZWR8bWluOjEwfG1heDo1MHxudW1iZXInXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZV0gLSBpbnB1dCB0eXBlLiBEZWZhdWx0IC0gXCJ0ZXh0XCJcclxuICovXHJcbmV4cG9ydCB2YXIgUHJvbXB0ID0gZnVuY3Rpb24gKHByb21wdCwgb25Db25maXJtLCB0aXRsZSwgdmFsdWUsIHZhbGlkYXRlUnVsZSwgdHlwZSkge1xyXG4gIHR5cGUgPSB0eXBlIHx8ICd0ZXh0JztcclxuICB2YXIgcCA9IERpYWxvZyh0aXRsZSk7XHJcbiAgcC5hZGRMYWJlbChudWxsLCBUZXh0LmVzY2FwZUhUTUwocHJvbXB0LCB0cnVlKSk7XHJcbiAgcC5hZGRJbnB1dCgnaW5wdXQnLCAnJywgdHlwZSwgdmFsdWUsIHZhbGlkYXRlUnVsZSk7XHJcbiAgcC5hZGRBY3Rpb25CdXR0b24oJ0NhbmNlbCcsICgpID0+IHsgfSk7XHJcbiAgcC5hZGRBY3Rpb25CdXR0b24oJ09rJywgKCkgPT4ge1xyXG4gICAgaWYgKHAuY29udGVudC52YWxpZGF0b3IudmFsaWRhdGUoKSkge1xyXG4gICAgICB0cnlDYWxsKG51bGwsIG9uQ29uZmlybSwgcC5kYXRhLmlucHV0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTaG93IHNpbXBsZSBBbGVydCBib3hcclxuICogQHBhcmFtIHtzdHJpbmd9IHByb21wdCBcclxuICogQHBhcmFtIHtmdW5jdGlvbigpOmJvb2xlYW58dm9pZH0gW29uQ29uZmlybV1cclxuICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gXHJcbiAqL1xyXG5leHBvcnQgdmFyIEFsZXJ0ID0gZnVuY3Rpb24gKHByb21wdCwgb25Db25maXJtLCB0aXRsZSkge1xyXG4gIHZhciBwID0gRGlhbG9nKHRpdGxlKTtcclxuICBwLmFkZEh0bWwoVGV4dC5lc2NhcGVIVE1MKHByb21wdCwgdHJ1ZSkpO1xyXG4gIHAuYWRkQWN0aW9uQnV0dG9uKCdPaycsIG9uQ29uZmlybSk7XHJcbiAgLy9iYWNrIG5hdmlnYXRpb24gYWxzbyBtZWFucyBjb25maXJtIVxyXG4gIHAub25CYWNrTmF2aWdhdGUgPSBvbkNvbmZpcm07XHJcbn07IiwiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tIFwidXRpbFwiO1xyXG5cclxuZXhwb3J0IHZhciBUZXh0ID0ge1xyXG4gIGVzY2FwZUhUTUw6ZnVuY3Rpb24odW5zYWZlLCBjb252ZXJ0TmV3bGluZXMpIHtcclxuICAgIHVuc2FmZSA9IGlzU3RyaW5nKHVuc2FmZSkgPyB1bnNhZmUgOiBcIlwiO1xyXG4gICAgY29udmVydE5ld2xpbmVzID0gY29udmVydE5ld2xpbmVzIHx8IGZhbHNlO1xyXG4gICAgcmV0dXJuIHVuc2FmZVxyXG5cdFx0XHQgLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKVxyXG5cdFx0XHQgLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpXHJcblx0XHRcdCAucmVwbGFjZSgvPi9nLCBcIiZndDtcIilcclxuXHRcdFx0IC5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKVxyXG5cdFx0XHQgLnJlcGxhY2UoLycvZywgXCImIzAzOTtcIilcclxuXHRcdFx0IC5yZXBsYWNlKC9cXG4vZywgY29udmVydE5ld2xpbmVzID8gXCI8YnIgLz5cIiA6ICcnKTtcclxuICB9LFxyXG4gIC8qKlxyXG5cdCAqIEZvcm1hdCBwaG9uZSBudW1iZXIgd2hpbGUgdHlwaW5nXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBwaG9uZSBudW1iZXIgdG8gZm9ybWF0XHJcblx0ICogQHBhcmFtIHtvYmplY3R9IFttYXNrXSAtIGRlZmF1bHQ6IHsgMDogJygnLCAzOiAnKSAnLCA2OiAnIC0gJywgMTA6ICcgeCAnIH07XHJcblx0ICovXHJcbiAgZm9ybWF0UGhvbmU6IGZ1bmN0aW9uKHRleHQsIG1hc2spIHtcclxuICAgIHZhciBudW1iZXJzID0gdGV4dC5yZXBsYWNlKC9cXEQvZywgJycpO1xyXG4gICAgbWFzayA9IG1hc2sgfHwgeyAwOiAnKCcsIDM6ICcpICcsIDY6ICcgLSAnLCAxMDogJyB4ICcgfTtcclxuICAgIHRleHQgPSAnJztcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB0ZXh0ICs9IChtYXNrW2ldIHx8ICcnKSArIG51bWJlcnNbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGV4dDtcclxuICB9LFxyXG5cclxuICAvKipcclxuXHQgKiBHZXQgRmlsZSBFeHRlbnNpb24gKHdpdGhvdXQgRE9UKVxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBmTmFtZVxyXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cclxuXHQgKi9cclxuICBmaWxlRXh0ZW5zaW9uOiBmdW5jdGlvbihmTmFtZSl7XHJcbiAgICBmTmFtZSA9IGZOYW1lIHx8IFwiXCI7XHJcbiAgICB2YXIgbGkgPSBmTmFtZS5sYXN0SW5kZXhPZignLicpO1xyXG4gICAgaWYgKGxpIDwgMCB8fCBsaSA+PSBmTmFtZS5sZW5ndGgpXHJcbiAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgcmV0dXJuIGZOYW1lLnN1YnN0cihsaSsxKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuXHQgKiBHZXQgRmlsZSBOYW1lLkV4dGVuc2lvblxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBmTmFtZVxyXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cclxuXHQgKi9cclxuICBmaWxlRnVsbE5hbWU6IGZ1bmN0aW9uKGZpbGVOYW1lKXtcclxuICAgIGZpbGVOYW1lID0gZmlsZU5hbWUgfHwgXCJcIjtcclxuICAgIGlmICghZmlsZU5hbWUgfHwgIWlzU3RyaW5nKGZpbGVOYW1lKSl7XHJcbiAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpbGVOYW1lLnNwbGl0KC9cXFxcfFxcLy8pLnBvcCgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG5cdCAqIEdldCBGaWxlIE5hbWUgd2l0aG91dCBFeHRlbnNpb25cclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZk5hbWVcclxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XHJcblx0ICovXHJcbiAgZmlsZU5hbWU6IGZ1bmN0aW9uKGZpbGVOYW1lKXtcclxuICAgIGZpbGVOYW1lID0gZmlsZU5hbWUgfHwgXCJcIjtcclxuICAgIGlmICghZmlsZU5hbWUgfHwgIWlzU3RyaW5nKGZpbGVOYW1lKSl7XHJcbiAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpbGVOYW1lLnNwbGl0KC9cXFxcfFxcLy8pLnBvcCgpLnNwbGl0KCcuJykuc2hpZnQoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuXHQgKiBKb2luIGZpbGUgcGF0aCBiaXRzIG1ha2luZyBzdXJlIHRoZXJlIGlzIC8gYmV0d2VlbiB0aGVtIGFuZCBubyBkdXBsaWNhdGVzXHJcblx0ICogQHBhcmFtIHtzdHJpbmdbXX0gYXJnc1xyXG5cdCAqL1xyXG4gIGpvaW5QYXRoOiBmdW5jdGlvbiguLi5hcmdzKXtcclxuICAgIHZhciBwYXRoID0gXCJcIjtcclxuICAgIGFyZ3MuZm9yRWFjaCgoZWwpPT57XHJcbiAgICAgIGlmIChwYXRoLnNwbGl0KCcnKS5wb3AoKT09Jy8nICYmIGVsLnNwbGl0KCcnKS5zaGlmdCgpPT0nLycpXHJcbiAgICAgICAgcGF0aCA9IHBhdGggKyBlbC5zdWJzdHIoMSk7XHJcbiAgICAgIGVsc2VcdFxyXG4gICAgICAgIHBhdGggPSBwYXRoICsgZWw7XHJcblx0XHRcdFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcGF0aDtcclxuICB9LFxyXG5cclxuICAvKipcclxuXHQgKiBDYXBpdGFsaXplIHRleHRcclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgXHJcblx0ICovXHJcbiAgY2FwaXRhbGl6ZSh2YWx1ZSl7XHJcbiAgICBpZiAoZW1wdHkodmFsdWUpKSByZXR1cm4gXCJcIjtcclxuICAgIHZhbHVlID0gdmFsdWUrXCJcIjtcclxuICAgIHJldHVybiAodmFsdWUudG9Mb3dlckNhc2UoKSkucmVwbGFjZSgvKD86XnxcXHMpXFxTL2csIGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGEudG9VcHBlckNhc2UoKTsgfSk7XHJcbiAgfVxyXG5cclxuXHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiLypcbiAgTW9kdWxlIGRlcGVuZGVuY2llc1xuKi9cbnZhciBFbGVtZW50VHlwZSA9IHJlcXVpcmUoJ2RvbWVsZW1lbnR0eXBlJyk7XG52YXIgZW50aXRpZXMgPSByZXF1aXJlKCdlbnRpdGllcycpO1xuXG52YXIgdW5lbmNvZGVkRWxlbWVudHMgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgc3R5bGU6IHRydWUsXG4gIHNjcmlwdDogdHJ1ZSxcbiAgeG1wOiB0cnVlLFxuICBpZnJhbWU6IHRydWUsXG4gIG5vZW1iZWQ6IHRydWUsXG4gIG5vZnJhbWVzOiB0cnVlLFxuICBwbGFpbnRleHQ6IHRydWUsXG4gIG5vc2NyaXB0OiB0cnVlXG59O1xuXG4vKlxuICBGb3JtYXQgYXR0cmlidXRlc1xuKi9cbmZ1bmN0aW9uIGZvcm1hdEF0dHJzKGF0dHJpYnV0ZXMsIG9wdHMpIHtcbiAgaWYgKCFhdHRyaWJ1dGVzKSByZXR1cm47XG5cbiAgdmFyIG91dHB1dCA9ICcnLFxuICAgICAgdmFsdWU7XG5cbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBhdHRyaWJ1dGVzXG4gIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgdmFsdWUgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgaWYgKG91dHB1dCkge1xuICAgICAgb3V0cHV0ICs9ICcgJztcbiAgICB9XG5cbiAgICBvdXRwdXQgKz0ga2V5O1xuICAgIGlmICgodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09ICcnKSB8fCBvcHRzLnhtbE1vZGUpIHtcbiAgICAgICAgb3V0cHV0ICs9ICc9XCInICsgKG9wdHMuZGVjb2RlRW50aXRpZXMgPyBlbnRpdGllcy5lbmNvZGVYTUwodmFsdWUpIDogdmFsdWUpICsgJ1wiJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG4vKlxuICBTZWxmLWVuY2xvc2luZyB0YWdzIChzdG9sZW4gZnJvbSBub2RlLWh0bWxwYXJzZXIpXG4qL1xudmFyIHNpbmdsZVRhZyA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBhcmVhOiB0cnVlLFxuICBiYXNlOiB0cnVlLFxuICBiYXNlZm9udDogdHJ1ZSxcbiAgYnI6IHRydWUsXG4gIGNvbDogdHJ1ZSxcbiAgY29tbWFuZDogdHJ1ZSxcbiAgZW1iZWQ6IHRydWUsXG4gIGZyYW1lOiB0cnVlLFxuICBocjogdHJ1ZSxcbiAgaW1nOiB0cnVlLFxuICBpbnB1dDogdHJ1ZSxcbiAgaXNpbmRleDogdHJ1ZSxcbiAga2V5Z2VuOiB0cnVlLFxuICBsaW5rOiB0cnVlLFxuICBtZXRhOiB0cnVlLFxuICBwYXJhbTogdHJ1ZSxcbiAgc291cmNlOiB0cnVlLFxuICB0cmFjazogdHJ1ZSxcbiAgd2JyOiB0cnVlLFxufTtcblxuXG52YXIgcmVuZGVyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb20sIG9wdHMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGRvbSkgJiYgIWRvbS5jaGVlcmlvKSBkb20gPSBbZG9tXTtcbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIG91dHB1dCA9ICcnO1xuXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBkb20ubGVuZ3RoOyBpKyspe1xuICAgIHZhciBlbGVtID0gZG9tW2ldO1xuXG4gICAgaWYgKGVsZW0udHlwZSA9PT0gJ3Jvb3QnKVxuICAgICAgb3V0cHV0ICs9IHJlbmRlcihlbGVtLmNoaWxkcmVuLCBvcHRzKTtcbiAgICBlbHNlIGlmIChFbGVtZW50VHlwZS5pc1RhZyhlbGVtKSlcbiAgICAgIG91dHB1dCArPSByZW5kZXJUYWcoZWxlbSwgb3B0cyk7XG4gICAgZWxzZSBpZiAoZWxlbS50eXBlID09PSBFbGVtZW50VHlwZS5EaXJlY3RpdmUpXG4gICAgICBvdXRwdXQgKz0gcmVuZGVyRGlyZWN0aXZlKGVsZW0pO1xuICAgIGVsc2UgaWYgKGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuQ29tbWVudClcbiAgICAgIG91dHB1dCArPSByZW5kZXJDb21tZW50KGVsZW0pO1xuICAgIGVsc2UgaWYgKGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuQ0RBVEEpXG4gICAgICBvdXRwdXQgKz0gcmVuZGVyQ2RhdGEoZWxlbSk7XG4gICAgZWxzZVxuICAgICAgb3V0cHV0ICs9IHJlbmRlclRleHQoZWxlbSwgb3B0cyk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuZnVuY3Rpb24gcmVuZGVyVGFnKGVsZW0sIG9wdHMpIHtcbiAgLy8gSGFuZGxlIFNWR1xuICBpZiAoZWxlbS5uYW1lID09PSBcInN2Z1wiKSBvcHRzID0ge2RlY29kZUVudGl0aWVzOiBvcHRzLmRlY29kZUVudGl0aWVzLCB4bWxNb2RlOiB0cnVlfTtcblxuICB2YXIgdGFnID0gJzwnICsgZWxlbS5uYW1lLFxuICAgICAgYXR0cmlicyA9IGZvcm1hdEF0dHJzKGVsZW0uYXR0cmlicywgb3B0cyk7XG5cbiAgaWYgKGF0dHJpYnMpIHtcbiAgICB0YWcgKz0gJyAnICsgYXR0cmlicztcbiAgfVxuXG4gIGlmIChcbiAgICBvcHRzLnhtbE1vZGVcbiAgICAmJiAoIWVsZW0uY2hpbGRyZW4gfHwgZWxlbS5jaGlsZHJlbi5sZW5ndGggPT09IDApXG4gICkge1xuICAgIHRhZyArPSAnLz4nO1xuICB9IGVsc2Uge1xuICAgIHRhZyArPSAnPic7XG4gICAgaWYgKGVsZW0uY2hpbGRyZW4pIHtcbiAgICAgIHRhZyArPSByZW5kZXIoZWxlbS5jaGlsZHJlbiwgb3B0cyk7XG4gICAgfVxuXG4gICAgaWYgKCFzaW5nbGVUYWdbZWxlbS5uYW1lXSB8fCBvcHRzLnhtbE1vZGUpIHtcbiAgICAgIHRhZyArPSAnPC8nICsgZWxlbS5uYW1lICsgJz4nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YWc7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckRpcmVjdGl2ZShlbGVtKSB7XG4gIHJldHVybiAnPCcgKyBlbGVtLmRhdGEgKyAnPic7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclRleHQoZWxlbSwgb3B0cykge1xuICB2YXIgZGF0YSA9IGVsZW0uZGF0YSB8fCAnJztcblxuICAvLyBpZiBlbnRpdGllcyB3ZXJlbid0IGRlY29kZWQsIG5vIG5lZWQgdG8gZW5jb2RlIHRoZW0gYmFja1xuICBpZiAob3B0cy5kZWNvZGVFbnRpdGllcyAmJiAhKGVsZW0ucGFyZW50ICYmIGVsZW0ucGFyZW50Lm5hbWUgaW4gdW5lbmNvZGVkRWxlbWVudHMpKSB7XG4gICAgZGF0YSA9IGVudGl0aWVzLmVuY29kZVhNTChkYXRhKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiByZW5kZXJDZGF0YShlbGVtKSB7XG4gIHJldHVybiAnPCFbQ0RBVEFbJyArIGVsZW0uY2hpbGRyZW5bMF0uZGF0YSArICddXT4nO1xufVxuXG5mdW5jdGlvbiByZW5kZXJDb21tZW50KGVsZW0pIHtcbiAgcmV0dXJuICc8IS0tJyArIGVsZW0uZGF0YSArICctLT4nO1xufVxuIiwiLy9UeXBlcyBvZiBlbGVtZW50cyBmb3VuZCBpbiB0aGUgRE9NXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0VGV4dDogXCJ0ZXh0XCIsIC8vVGV4dFxuXHREaXJlY3RpdmU6IFwiZGlyZWN0aXZlXCIsIC8vPD8gLi4uID8+XG5cdENvbW1lbnQ6IFwiY29tbWVudFwiLCAvLzwhLS0gLi4uIC0tPlxuXHRTY3JpcHQ6IFwic2NyaXB0XCIsIC8vPHNjcmlwdD4gdGFnc1xuXHRTdHlsZTogXCJzdHlsZVwiLCAvLzxzdHlsZT4gdGFnc1xuXHRUYWc6IFwidGFnXCIsIC8vQW55IHRhZ1xuXHRDREFUQTogXCJjZGF0YVwiLCAvLzwhW0NEQVRBWyAuLi4gXV0+XG5cdERvY3R5cGU6IFwiZG9jdHlwZVwiLFxuXG5cdGlzVGFnOiBmdW5jdGlvbihlbGVtKXtcblx0XHRyZXR1cm4gZWxlbS50eXBlID09PSBcInRhZ1wiIHx8IGVsZW0udHlwZSA9PT0gXCJzY3JpcHRcIiB8fCBlbGVtLnR5cGUgPT09IFwic3R5bGVcIjtcblx0fVxufTtcbiIsInZhciBFbGVtZW50VHlwZSA9IHJlcXVpcmUoXCJkb21lbGVtZW50dHlwZVwiKTtcblxudmFyIHJlX3doaXRlc3BhY2UgPSAvXFxzKy9nO1xudmFyIE5vZGVQcm90b3R5cGUgPSByZXF1aXJlKFwiLi9saWIvbm9kZVwiKTtcbnZhciBFbGVtZW50UHJvdG90eXBlID0gcmVxdWlyZShcIi4vbGliL2VsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIERvbUhhbmRsZXIoY2FsbGJhY2ssIG9wdGlvbnMsIGVsZW1lbnRDQil7XG5cdGlmKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJvYmplY3RcIil7XG5cdFx0ZWxlbWVudENCID0gb3B0aW9ucztcblx0XHRvcHRpb25zID0gY2FsbGJhY2s7XG5cdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHR9IGVsc2UgaWYodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0ZWxlbWVudENCID0gb3B0aW9ucztcblx0XHRvcHRpb25zID0gZGVmYXVsdE9wdHM7XG5cdH1cblx0dGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcblx0dGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMgfHwgZGVmYXVsdE9wdHM7XG5cdHRoaXMuX2VsZW1lbnRDQiA9IGVsZW1lbnRDQjtcblx0dGhpcy5kb20gPSBbXTtcblx0dGhpcy5fZG9uZSA9IGZhbHNlO1xuXHR0aGlzLl90YWdTdGFjayA9IFtdO1xuXHR0aGlzLl9wYXJzZXIgPSB0aGlzLl9wYXJzZXIgfHwgbnVsbDtcbn1cblxuLy9kZWZhdWx0IG9wdGlvbnNcbnZhciBkZWZhdWx0T3B0cyA9IHtcblx0bm9ybWFsaXplV2hpdGVzcGFjZTogZmFsc2UsIC8vUmVwbGFjZSBhbGwgd2hpdGVzcGFjZSB3aXRoIHNpbmdsZSBzcGFjZXNcblx0d2l0aFN0YXJ0SW5kaWNlczogZmFsc2UsIC8vQWRkIHN0YXJ0SW5kZXggcHJvcGVydGllcyB0byBub2Rlc1xuXHR3aXRoRW5kSW5kaWNlczogZmFsc2UsIC8vQWRkIGVuZEluZGV4IHByb3BlcnRpZXMgdG8gbm9kZXNcbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLm9ucGFyc2VyaW5pdCA9IGZ1bmN0aW9uKHBhcnNlcil7XG5cdHRoaXMuX3BhcnNlciA9IHBhcnNlcjtcbn07XG5cbi8vUmVzZXRzIHRoZSBoYW5kbGVyIGJhY2sgdG8gc3RhcnRpbmcgc3RhdGVcbkRvbUhhbmRsZXIucHJvdG90eXBlLm9ucmVzZXQgPSBmdW5jdGlvbigpe1xuXHREb21IYW5kbGVyLmNhbGwodGhpcywgdGhpcy5fY2FsbGJhY2ssIHRoaXMuX29wdGlvbnMsIHRoaXMuX2VsZW1lbnRDQik7XG59O1xuXG4vL1NpZ25hbHMgdGhlIGhhbmRsZXIgdGhhdCBwYXJzaW5nIGlzIGRvbmVcbkRvbUhhbmRsZXIucHJvdG90eXBlLm9uZW5kID0gZnVuY3Rpb24oKXtcblx0aWYodGhpcy5fZG9uZSkgcmV0dXJuO1xuXHR0aGlzLl9kb25lID0gdHJ1ZTtcblx0dGhpcy5fcGFyc2VyID0gbnVsbDtcblx0dGhpcy5faGFuZGxlQ2FsbGJhY2sobnVsbCk7XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5faGFuZGxlQ2FsbGJhY2sgPVxuRG9tSGFuZGxlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKGVycm9yKXtcblx0aWYodHlwZW9mIHRoaXMuX2NhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdHRoaXMuX2NhbGxiYWNrKGVycm9yLCB0aGlzLmRvbSk7XG5cdH0gZWxzZSB7XG5cdFx0aWYoZXJyb3IpIHRocm93IGVycm9yO1xuXHR9XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbmNsb3NldGFnID0gZnVuY3Rpb24oKXtcblx0Ly9pZih0aGlzLl90YWdTdGFjay5wb3AoKS5uYW1lICE9PSBuYW1lKSB0aGlzLl9oYW5kbGVDYWxsYmFjayhFcnJvcihcIlRhZ25hbWUgZGlkbid0IG1hdGNoIVwiKSk7XG5cdFxuXHR2YXIgZWxlbSA9IHRoaXMuX3RhZ1N0YWNrLnBvcCgpO1xuXG5cdGlmKHRoaXMuX29wdGlvbnMud2l0aEVuZEluZGljZXMgJiYgZWxlbSl7XG5cdFx0ZWxlbS5lbmRJbmRleCA9IHRoaXMuX3BhcnNlci5lbmRJbmRleDtcblx0fVxuXG5cdGlmKHRoaXMuX2VsZW1lbnRDQikgdGhpcy5fZWxlbWVudENCKGVsZW0pO1xufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUuX2NyZWF0ZURvbUVsZW1lbnQgPSBmdW5jdGlvbihwcm9wZXJ0aWVzKXtcblx0aWYgKCF0aGlzLl9vcHRpb25zLndpdGhEb21MdmwxKSByZXR1cm4gcHJvcGVydGllcztcblxuXHR2YXIgZWxlbWVudDtcblx0aWYgKHByb3BlcnRpZXMudHlwZSA9PT0gXCJ0YWdcIikge1xuXHRcdGVsZW1lbnQgPSBPYmplY3QuY3JlYXRlKEVsZW1lbnRQcm90b3R5cGUpO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW1lbnQgPSBPYmplY3QuY3JlYXRlKE5vZGVQcm90b3R5cGUpO1xuXHR9XG5cblx0Zm9yICh2YXIga2V5IGluIHByb3BlcnRpZXMpIHtcblx0XHRpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRlbGVtZW50W2tleV0gPSBwcm9wZXJ0aWVzW2tleV07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnQ7XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5fYWRkRG9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpe1xuXHR2YXIgcGFyZW50ID0gdGhpcy5fdGFnU3RhY2tbdGhpcy5fdGFnU3RhY2subGVuZ3RoIC0gMV07XG5cdHZhciBzaWJsaW5ncyA9IHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbiA6IHRoaXMuZG9tO1xuXHR2YXIgcHJldmlvdXNTaWJsaW5nID0gc2libGluZ3Nbc2libGluZ3MubGVuZ3RoIC0gMV07XG5cblx0ZWxlbWVudC5uZXh0ID0gbnVsbDtcblxuXHRpZih0aGlzLl9vcHRpb25zLndpdGhTdGFydEluZGljZXMpe1xuXHRcdGVsZW1lbnQuc3RhcnRJbmRleCA9IHRoaXMuX3BhcnNlci5zdGFydEluZGV4O1xuXHR9XG5cdGlmKHRoaXMuX29wdGlvbnMud2l0aEVuZEluZGljZXMpe1xuXHRcdGVsZW1lbnQuZW5kSW5kZXggPSB0aGlzLl9wYXJzZXIuZW5kSW5kZXg7XG5cdH1cblxuXHRpZihwcmV2aW91c1NpYmxpbmcpe1xuXHRcdGVsZW1lbnQucHJldiA9IHByZXZpb3VzU2libGluZztcblx0XHRwcmV2aW91c1NpYmxpbmcubmV4dCA9IGVsZW1lbnQ7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbWVudC5wcmV2ID0gbnVsbDtcblx0fVxuXG5cdHNpYmxpbmdzLnB1c2goZWxlbWVudCk7XG5cdGVsZW1lbnQucGFyZW50ID0gcGFyZW50IHx8IG51bGw7XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbm9wZW50YWcgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJzKXtcblx0dmFyIHByb3BlcnRpZXMgPSB7XG5cdFx0dHlwZTogbmFtZSA9PT0gXCJzY3JpcHRcIiA/IEVsZW1lbnRUeXBlLlNjcmlwdCA6IG5hbWUgPT09IFwic3R5bGVcIiA/IEVsZW1lbnRUeXBlLlN0eWxlIDogRWxlbWVudFR5cGUuVGFnLFxuXHRcdG5hbWU6IG5hbWUsXG5cdFx0YXR0cmliczogYXR0cmlicyxcblx0XHRjaGlsZHJlbjogW11cblx0fTtcblxuXHR2YXIgZWxlbWVudCA9IHRoaXMuX2NyZWF0ZURvbUVsZW1lbnQocHJvcGVydGllcyk7XG5cblx0dGhpcy5fYWRkRG9tRWxlbWVudChlbGVtZW50KTtcblxuXHR0aGlzLl90YWdTdGFjay5wdXNoKGVsZW1lbnQpO1xufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUub250ZXh0ID0gZnVuY3Rpb24oZGF0YSl7XG5cdC8vdGhlIGlnbm9yZVdoaXRlc3BhY2UgaXMgb2ZmaWNpYWxseSBkcm9wcGVkLCBidXQgZm9yIG5vdyxcblx0Ly9pdCdzIGFuIGFsaWFzIGZvciBub3JtYWxpemVXaGl0ZXNwYWNlXG5cdHZhciBub3JtYWxpemUgPSB0aGlzLl9vcHRpb25zLm5vcm1hbGl6ZVdoaXRlc3BhY2UgfHwgdGhpcy5fb3B0aW9ucy5pZ25vcmVXaGl0ZXNwYWNlO1xuXG5cdHZhciBsYXN0VGFnO1xuXG5cdGlmKCF0aGlzLl90YWdTdGFjay5sZW5ndGggJiYgdGhpcy5kb20ubGVuZ3RoICYmIChsYXN0VGFnID0gdGhpcy5kb21bdGhpcy5kb20ubGVuZ3RoLTFdKS50eXBlID09PSBFbGVtZW50VHlwZS5UZXh0KXtcblx0XHRpZihub3JtYWxpemUpe1xuXHRcdFx0bGFzdFRhZy5kYXRhID0gKGxhc3RUYWcuZGF0YSArIGRhdGEpLnJlcGxhY2UocmVfd2hpdGVzcGFjZSwgXCIgXCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsYXN0VGFnLmRhdGEgKz0gZGF0YTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0aWYoXG5cdFx0XHR0aGlzLl90YWdTdGFjay5sZW5ndGggJiZcblx0XHRcdChsYXN0VGFnID0gdGhpcy5fdGFnU3RhY2tbdGhpcy5fdGFnU3RhY2subGVuZ3RoIC0gMV0pICYmXG5cdFx0XHQobGFzdFRhZyA9IGxhc3RUYWcuY2hpbGRyZW5bbGFzdFRhZy5jaGlsZHJlbi5sZW5ndGggLSAxXSkgJiZcblx0XHRcdGxhc3RUYWcudHlwZSA9PT0gRWxlbWVudFR5cGUuVGV4dFxuXHRcdCl7XG5cdFx0XHRpZihub3JtYWxpemUpe1xuXHRcdFx0XHRsYXN0VGFnLmRhdGEgPSAobGFzdFRhZy5kYXRhICsgZGF0YSkucmVwbGFjZShyZV93aGl0ZXNwYWNlLCBcIiBcIik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsYXN0VGFnLmRhdGEgKz0gZGF0YTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYobm9ybWFsaXplKXtcblx0XHRcdFx0ZGF0YSA9IGRhdGEucmVwbGFjZShyZV93aGl0ZXNwYWNlLCBcIiBcIik7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBlbGVtZW50ID0gdGhpcy5fY3JlYXRlRG9tRWxlbWVudCh7XG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdHR5cGU6IEVsZW1lbnRUeXBlLlRleHRcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLl9hZGREb21FbGVtZW50KGVsZW1lbnQpO1xuXHRcdH1cblx0fVxufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUub25jb21tZW50ID0gZnVuY3Rpb24oZGF0YSl7XG5cdHZhciBsYXN0VGFnID0gdGhpcy5fdGFnU3RhY2tbdGhpcy5fdGFnU3RhY2subGVuZ3RoIC0gMV07XG5cblx0aWYobGFzdFRhZyAmJiBsYXN0VGFnLnR5cGUgPT09IEVsZW1lbnRUeXBlLkNvbW1lbnQpe1xuXHRcdGxhc3RUYWcuZGF0YSArPSBkYXRhO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciBwcm9wZXJ0aWVzID0ge1xuXHRcdGRhdGE6IGRhdGEsXG5cdFx0dHlwZTogRWxlbWVudFR5cGUuQ29tbWVudFxuXHR9O1xuXG5cdHZhciBlbGVtZW50ID0gdGhpcy5fY3JlYXRlRG9tRWxlbWVudChwcm9wZXJ0aWVzKTtcblxuXHR0aGlzLl9hZGREb21FbGVtZW50KGVsZW1lbnQpO1xuXHR0aGlzLl90YWdTdGFjay5wdXNoKGVsZW1lbnQpO1xufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUub25jZGF0YXN0YXJ0ID0gZnVuY3Rpb24oKXtcblx0dmFyIHByb3BlcnRpZXMgPSB7XG5cdFx0Y2hpbGRyZW46IFt7XG5cdFx0XHRkYXRhOiBcIlwiLFxuXHRcdFx0dHlwZTogRWxlbWVudFR5cGUuVGV4dFxuXHRcdH1dLFxuXHRcdHR5cGU6IEVsZW1lbnRUeXBlLkNEQVRBXG5cdH07XG5cblx0dmFyIGVsZW1lbnQgPSB0aGlzLl9jcmVhdGVEb21FbGVtZW50KHByb3BlcnRpZXMpO1xuXG5cdHRoaXMuX2FkZERvbUVsZW1lbnQoZWxlbWVudCk7XG5cdHRoaXMuX3RhZ1N0YWNrLnB1c2goZWxlbWVudCk7XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbmNvbW1lbnRlbmQgPSBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmNkYXRhZW5kID0gZnVuY3Rpb24oKXtcblx0dGhpcy5fdGFnU3RhY2sucG9wKCk7XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEpe1xuXHR2YXIgZWxlbWVudCA9IHRoaXMuX2NyZWF0ZURvbUVsZW1lbnQoe1xuXHRcdG5hbWU6IG5hbWUsXG5cdFx0ZGF0YTogZGF0YSxcblx0XHR0eXBlOiBFbGVtZW50VHlwZS5EaXJlY3RpdmVcblx0fSk7XG5cblx0dGhpcy5fYWRkRG9tRWxlbWVudChlbGVtZW50KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRG9tSGFuZGxlcjtcbiIsIi8vIERPTS1MZXZlbC0xLWNvbXBsaWFudCBzdHJ1Y3R1cmVcbnZhciBOb2RlUHJvdG90eXBlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG52YXIgRWxlbWVudFByb3RvdHlwZSA9IG1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZShOb2RlUHJvdG90eXBlKTtcblxudmFyIGRvbUx2bDEgPSB7XG5cdHRhZ05hbWU6IFwibmFtZVwiXG59O1xuXG5PYmplY3Qua2V5cyhkb21MdmwxKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHR2YXIgc2hvcnRoYW5kID0gZG9tTHZsMVtrZXldO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoRWxlbWVudFByb3RvdHlwZSwga2V5LCB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzW3Nob3J0aGFuZF0gfHwgbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24odmFsKSB7XG5cdFx0XHR0aGlzW3Nob3J0aGFuZF0gPSB2YWw7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0fSk7XG59KTtcbiIsIi8vIFRoaXMgb2JqZWN0IHdpbGwgYmUgdXNlZCBhcyB0aGUgcHJvdG90eXBlIGZvciBOb2RlcyB3aGVuIGNyZWF0aW5nIGFcbi8vIERPTS1MZXZlbC0xLWNvbXBsaWFudCBzdHJ1Y3R1cmUuXG52YXIgTm9kZVByb3RvdHlwZSA9IG1vZHVsZS5leHBvcnRzID0ge1xuXHRnZXQgZmlyc3RDaGlsZCgpIHtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXHRcdHJldHVybiBjaGlsZHJlbiAmJiBjaGlsZHJlblswXSB8fCBudWxsO1xuXHR9LFxuXHRnZXQgbGFzdENoaWxkKCkge1xuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cdFx0cmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIHx8IG51bGw7XG5cdH0sXG5cdGdldCBub2RlVHlwZSgpIHtcblx0XHRyZXR1cm4gbm9kZVR5cGVzW3RoaXMudHlwZV0gfHwgbm9kZVR5cGVzLmVsZW1lbnQ7XG5cdH1cbn07XG5cbnZhciBkb21MdmwxID0ge1xuXHR0YWdOYW1lOiBcIm5hbWVcIixcblx0Y2hpbGROb2RlczogXCJjaGlsZHJlblwiLFxuXHRwYXJlbnROb2RlOiBcInBhcmVudFwiLFxuXHRwcmV2aW91c1NpYmxpbmc6IFwicHJldlwiLFxuXHRuZXh0U2libGluZzogXCJuZXh0XCIsXG5cdG5vZGVWYWx1ZTogXCJkYXRhXCJcbn07XG5cbnZhciBub2RlVHlwZXMgPSB7XG5cdGVsZW1lbnQ6IDEsXG5cdHRleHQ6IDMsXG5cdGNkYXRhOiA0LFxuXHRjb21tZW50OiA4XG59O1xuXG5PYmplY3Qua2V5cyhkb21MdmwxKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHR2YXIgc2hvcnRoYW5kID0gZG9tTHZsMVtrZXldO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZVByb3RvdHlwZSwga2V5LCB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzW3Nob3J0aGFuZF0gfHwgbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24odmFsKSB7XG5cdFx0XHR0aGlzW3Nob3J0aGFuZF0gPSB2YWw7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0fSk7XG59KTtcbiIsInZhciBEb21VdGlscyA9IG1vZHVsZS5leHBvcnRzO1xuXG5bXG5cdHJlcXVpcmUoXCIuL2xpYi9zdHJpbmdpZnlcIiksXG5cdHJlcXVpcmUoXCIuL2xpYi90cmF2ZXJzYWxcIiksXG5cdHJlcXVpcmUoXCIuL2xpYi9tYW5pcHVsYXRpb25cIiksXG5cdHJlcXVpcmUoXCIuL2xpYi9xdWVyeWluZ1wiKSxcblx0cmVxdWlyZShcIi4vbGliL2xlZ2FjeVwiKSxcblx0cmVxdWlyZShcIi4vbGliL2hlbHBlcnNcIilcbl0uZm9yRWFjaChmdW5jdGlvbihleHQpe1xuXHRPYmplY3Qua2V5cyhleHQpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtcblx0XHREb21VdGlsc1trZXldID0gZXh0W2tleV0uYmluZChEb21VdGlscyk7XG5cdH0pO1xufSk7XG4iLCIvLyByZW1vdmVTdWJzZXRzXG4vLyBHaXZlbiBhbiBhcnJheSBvZiBub2RlcywgcmVtb3ZlIGFueSBtZW1iZXIgdGhhdCBpcyBjb250YWluZWQgYnkgYW5vdGhlci5cbmV4cG9ydHMucmVtb3ZlU3Vic2V0cyA9IGZ1bmN0aW9uKG5vZGVzKSB7XG5cdHZhciBpZHggPSBub2Rlcy5sZW5ndGgsIG5vZGUsIGFuY2VzdG9yLCByZXBsYWNlO1xuXG5cdC8vIENoZWNrIGlmIGVhY2ggbm9kZSAob3Igb25lIG9mIGl0cyBhbmNlc3RvcnMpIGlzIGFscmVhZHkgY29udGFpbmVkIGluIHRoZVxuXHQvLyBhcnJheS5cblx0d2hpbGUgKC0taWR4ID4gLTEpIHtcblx0XHRub2RlID0gYW5jZXN0b3IgPSBub2Rlc1tpZHhdO1xuXG5cdFx0Ly8gVGVtcG9yYXJpbHkgcmVtb3ZlIHRoZSBub2RlIHVuZGVyIGNvbnNpZGVyYXRpb25cblx0XHRub2Rlc1tpZHhdID0gbnVsbDtcblx0XHRyZXBsYWNlID0gdHJ1ZTtcblxuXHRcdHdoaWxlIChhbmNlc3Rvcikge1xuXHRcdFx0aWYgKG5vZGVzLmluZGV4T2YoYW5jZXN0b3IpID4gLTEpIHtcblx0XHRcdFx0cmVwbGFjZSA9IGZhbHNlO1xuXHRcdFx0XHRub2Rlcy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGUgbm9kZSBoYXMgYmVlbiBmb3VuZCB0byBiZSB1bmlxdWUsIHJlLWluc2VydCBpdC5cblx0XHRpZiAocmVwbGFjZSkge1xuXHRcdFx0bm9kZXNbaWR4XSA9IG5vZGU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5vZGVzO1xufTtcblxuLy8gU291cmNlOiBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLW5vZGUtY29tcGFyZWRvY3VtZW50cG9zaXRpb25cbnZhciBQT1NJVElPTiA9IHtcblx0RElTQ09OTkVDVEVEOiAxLFxuXHRQUkVDRURJTkc6IDIsXG5cdEZPTExPV0lORzogNCxcblx0Q09OVEFJTlM6IDgsXG5cdENPTlRBSU5FRF9CWTogMTZcbn07XG5cbi8vIENvbXBhcmUgdGhlIHBvc2l0aW9uIG9mIG9uZSBub2RlIGFnYWluc3QgYW5vdGhlciBub2RlIGluIGFueSBvdGhlciBkb2N1bWVudC5cbi8vIFRoZSByZXR1cm4gdmFsdWUgaXMgYSBiaXRtYXNrIHdpdGggdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG4vL1xuLy8gZG9jdW1lbnQgb3JkZXI6XG4vLyA+IFRoZXJlIGlzIGFuIG9yZGVyaW5nLCBkb2N1bWVudCBvcmRlciwgZGVmaW5lZCBvbiBhbGwgdGhlIG5vZGVzIGluIHRoZVxuLy8gPiBkb2N1bWVudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZVxuLy8gPiBYTUwgcmVwcmVzZW50YXRpb24gb2YgZWFjaCBub2RlIG9jY3VycyBpbiB0aGUgWE1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuLy8gPiBkb2N1bWVudCBhZnRlciBleHBhbnNpb24gb2YgZ2VuZXJhbCBlbnRpdGllcy4gVGh1cywgdGhlIGRvY3VtZW50IGVsZW1lbnRcbi8vID4gbm9kZSB3aWxsIGJlIHRoZSBmaXJzdCBub2RlLiBFbGVtZW50IG5vZGVzIG9jY3VyIGJlZm9yZSB0aGVpciBjaGlsZHJlbi5cbi8vID4gVGh1cywgZG9jdW1lbnQgb3JkZXIgb3JkZXJzIGVsZW1lbnQgbm9kZXMgaW4gb3JkZXIgb2YgdGhlIG9jY3VycmVuY2Ugb2Zcbi8vID4gdGhlaXIgc3RhcnQtdGFnIGluIHRoZSBYTUwgKGFmdGVyIGV4cGFuc2lvbiBvZiBlbnRpdGllcykuIFRoZSBhdHRyaWJ1dGVcbi8vID4gbm9kZXMgb2YgYW4gZWxlbWVudCBvY2N1ciBhZnRlciB0aGUgZWxlbWVudCBhbmQgYmVmb3JlIGl0cyBjaGlsZHJlbi4gVGhlXG4vLyA+IHJlbGF0aXZlIG9yZGVyIG9mIGF0dHJpYnV0ZSBub2RlcyBpcyBpbXBsZW1lbnRhdGlvbi1kZXBlbmRlbnQuL1xuLy8gU291cmNlOlxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9nbG9zc2FyeS5odG1sI2R0LWRvY3VtZW50LW9yZGVyXG4vL1xuLy8gQGFyZ3VtZW50IHtOb2RlfSBub2RhQSBUaGUgZmlyc3Qgbm9kZSB0byB1c2UgaW4gdGhlIGNvbXBhcmlzb25cbi8vIEBhcmd1bWVudCB7Tm9kZX0gbm9kZUIgVGhlIHNlY29uZCBub2RlIHRvIHVzZSBpbiB0aGUgY29tcGFyaXNvblxuLy9cbi8vIEByZXR1cm4ge051bWJlcn0gQSBiaXRtYXNrIGRlc2NyaWJpbmcgdGhlIGlucHV0IG5vZGVzJyByZWxhdGl2ZSBwb3NpdGlvbi5cbi8vICAgICAgICAgU2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1jb21wYXJlZG9jdW1lbnRwb3NpdGlvbiBmb3Jcbi8vICAgICAgICAgYSBkZXNjcmlwdGlvbiBvZiB0aGVzZSB2YWx1ZXMuXG52YXIgY29tcGFyZVBvcyA9IGV4cG9ydHMuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBmdW5jdGlvbihub2RlQSwgbm9kZUIpIHtcblx0dmFyIGFQYXJlbnRzID0gW107XG5cdHZhciBiUGFyZW50cyA9IFtdO1xuXHR2YXIgY3VycmVudCwgc2hhcmVkUGFyZW50LCBzaWJsaW5ncywgYVNpYmxpbmcsIGJTaWJsaW5nLCBpZHg7XG5cblx0aWYgKG5vZGVBID09PSBub2RlQikge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Y3VycmVudCA9IG5vZGVBO1xuXHR3aGlsZSAoY3VycmVudCkge1xuXHRcdGFQYXJlbnRzLnVuc2hpZnQoY3VycmVudCk7XG5cdFx0Y3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuXHR9XG5cdGN1cnJlbnQgPSBub2RlQjtcblx0d2hpbGUgKGN1cnJlbnQpIHtcblx0XHRiUGFyZW50cy51bnNoaWZ0KGN1cnJlbnQpO1xuXHRcdGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcblx0fVxuXG5cdGlkeCA9IDA7XG5cdHdoaWxlIChhUGFyZW50c1tpZHhdID09PSBiUGFyZW50c1tpZHhdKSB7XG5cdFx0aWR4Kys7XG5cdH1cblxuXHRpZiAoaWR4ID09PSAwKSB7XG5cdFx0cmV0dXJuIFBPU0lUSU9OLkRJU0NPTk5FQ1RFRDtcblx0fVxuXG5cdHNoYXJlZFBhcmVudCA9IGFQYXJlbnRzW2lkeCAtIDFdO1xuXHRzaWJsaW5ncyA9IHNoYXJlZFBhcmVudC5jaGlsZHJlbjtcblx0YVNpYmxpbmcgPSBhUGFyZW50c1tpZHhdO1xuXHRiU2libGluZyA9IGJQYXJlbnRzW2lkeF07XG5cblx0aWYgKHNpYmxpbmdzLmluZGV4T2YoYVNpYmxpbmcpID4gc2libGluZ3MuaW5kZXhPZihiU2libGluZykpIHtcblx0XHRpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQikge1xuXHRcdFx0cmV0dXJuIFBPU0lUSU9OLkZPTExPV0lORyB8IFBPU0lUSU9OLkNPTlRBSU5FRF9CWTtcblx0XHR9XG5cdFx0cmV0dXJuIFBPU0lUSU9OLkZPTExPV0lORztcblx0fSBlbHNlIHtcblx0XHRpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQSkge1xuXHRcdFx0cmV0dXJuIFBPU0lUSU9OLlBSRUNFRElORyB8IFBPU0lUSU9OLkNPTlRBSU5TO1xuXHRcdH1cblx0XHRyZXR1cm4gUE9TSVRJT04uUFJFQ0VESU5HO1xuXHR9XG59O1xuXG4vLyBTb3J0IGFuIGFycmF5IG9mIG5vZGVzIGJhc2VkIG9uIHRoZWlyIHJlbGF0aXZlIHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudCBhbmRcbi8vIHJlbW92ZSBhbnkgZHVwbGljYXRlIG5vZGVzLiBJZiB0aGUgYXJyYXkgY29udGFpbnMgbm9kZXMgdGhhdCBkbyBub3QgYmVsb25nXG4vLyB0byB0aGUgc2FtZSBkb2N1bWVudCwgc29ydCBvcmRlciBpcyB1bnNwZWNpZmllZC5cbi8vXG4vLyBAYXJndW1lbnQge0FycmF5fSBub2RlcyBBcnJheSBvZiBET00gbm9kZXNcbi8vXG4vLyBAcmV0dXJucyB7QXJyYXl9IGNvbGxlY3Rpb24gb2YgdW5pcXVlIG5vZGVzLCBzb3J0ZWQgaW4gZG9jdW1lbnQgb3JkZXJcbmV4cG9ydHMudW5pcXVlU29ydCA9IGZ1bmN0aW9uKG5vZGVzKSB7XG5cdHZhciBpZHggPSBub2Rlcy5sZW5ndGgsIG5vZGUsIHBvc2l0aW9uO1xuXG5cdG5vZGVzID0gbm9kZXMuc2xpY2UoKTtcblxuXHR3aGlsZSAoLS1pZHggPiAtMSkge1xuXHRcdG5vZGUgPSBub2Rlc1tpZHhdO1xuXHRcdHBvc2l0aW9uID0gbm9kZXMuaW5kZXhPZihub2RlKTtcblx0XHRpZiAocG9zaXRpb24gPiAtMSAmJiBwb3NpdGlvbiA8IGlkeCkge1xuXHRcdFx0bm9kZXMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fVxuXHR9XG5cdG5vZGVzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdHZhciByZWxhdGl2ZSA9IGNvbXBhcmVQb3MoYSwgYik7XG5cdFx0aWYgKHJlbGF0aXZlICYgUE9TSVRJT04uUFJFQ0VESU5HKSB7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fSBlbHNlIGlmIChyZWxhdGl2ZSAmIFBPU0lUSU9OLkZPTExPV0lORykge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9KTtcblxuXHRyZXR1cm4gbm9kZXM7XG59O1xuIiwidmFyIEVsZW1lbnRUeXBlID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpO1xudmFyIGlzVGFnID0gZXhwb3J0cy5pc1RhZyA9IEVsZW1lbnRUeXBlLmlzVGFnO1xuXG5leHBvcnRzLnRlc3RFbGVtZW50ID0gZnVuY3Rpb24ob3B0aW9ucywgZWxlbWVudCl7XG5cdGZvcih2YXIga2V5IGluIG9wdGlvbnMpe1xuXHRcdGlmKCFvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpO1xuXHRcdGVsc2UgaWYoa2V5ID09PSBcInRhZ19uYW1lXCIpe1xuXHRcdFx0aWYoIWlzVGFnKGVsZW1lbnQpIHx8ICFvcHRpb25zLnRhZ19uYW1lKGVsZW1lbnQubmFtZSkpe1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmKGtleSA9PT0gXCJ0YWdfdHlwZVwiKXtcblx0XHRcdGlmKCFvcHRpb25zLnRhZ190eXBlKGVsZW1lbnQudHlwZSkpIHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2UgaWYoa2V5ID09PSBcInRhZ19jb250YWluc1wiKXtcblx0XHRcdGlmKGlzVGFnKGVsZW1lbnQpIHx8ICFvcHRpb25zLnRhZ19jb250YWlucyhlbGVtZW50LmRhdGEpKXtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZighZWxlbWVudC5hdHRyaWJzIHx8ICFvcHRpb25zW2tleV0oZWxlbWVudC5hdHRyaWJzW2tleV0pKXtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRydWU7XG59O1xuXG52YXIgQ2hlY2tzID0ge1xuXHR0YWdfbmFtZTogZnVuY3Rpb24obmFtZSl7XG5cdFx0aWYodHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZWxlbSl7IHJldHVybiBpc1RhZyhlbGVtKSAmJiBuYW1lKGVsZW0ubmFtZSk7IH07XG5cdFx0fSBlbHNlIGlmKG5hbWUgPT09IFwiKlwiKXtcblx0XHRcdHJldHVybiBpc1RhZztcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gaXNUYWcoZWxlbSkgJiYgZWxlbS5uYW1lID09PSBuYW1lOyB9O1xuXHRcdH1cblx0fSxcblx0dGFnX3R5cGU6IGZ1bmN0aW9uKHR5cGUpe1xuXHRcdGlmKHR5cGVvZiB0eXBlID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gdHlwZShlbGVtLnR5cGUpOyB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZWxlbSl7IHJldHVybiBlbGVtLnR5cGUgPT09IHR5cGU7IH07XG5cdFx0fVxuXHR9LFxuXHR0YWdfY29udGFpbnM6IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdGlmKHR5cGVvZiBkYXRhID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gIWlzVGFnKGVsZW0pICYmIGRhdGEoZWxlbS5kYXRhKTsgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gIWlzVGFnKGVsZW0pICYmIGVsZW0uZGF0YSA9PT0gZGF0YTsgfTtcblx0XHR9XG5cdH1cbn07XG5cbmZ1bmN0aW9uIGdldEF0dHJpYkNoZWNrKGF0dHJpYiwgdmFsdWUpe1xuXHRpZih0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gZWxlbS5hdHRyaWJzICYmIHZhbHVlKGVsZW0uYXR0cmlic1thdHRyaWJdKTsgfTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oZWxlbSl7IHJldHVybiBlbGVtLmF0dHJpYnMgJiYgZWxlbS5hdHRyaWJzW2F0dHJpYl0gPT09IHZhbHVlOyB9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVGdW5jcyhhLCBiKXtcblx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0pe1xuXHRcdHJldHVybiBhKGVsZW0pIHx8IGIoZWxlbSk7XG5cdH07XG59XG5cbmV4cG9ydHMuZ2V0RWxlbWVudHMgPSBmdW5jdGlvbihvcHRpb25zLCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdHZhciBmdW5jcyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpLm1hcChmdW5jdGlvbihrZXkpe1xuXHRcdHZhciB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcblx0XHRyZXR1cm4ga2V5IGluIENoZWNrcyA/IENoZWNrc1trZXldKHZhbHVlKSA6IGdldEF0dHJpYkNoZWNrKGtleSwgdmFsdWUpO1xuXHR9KTtcblxuXHRyZXR1cm4gZnVuY3MubGVuZ3RoID09PSAwID8gW10gOiB0aGlzLmZpbHRlcihcblx0XHRmdW5jcy5yZWR1Y2UoY29tYmluZUZ1bmNzKSxcblx0XHRlbGVtZW50LCByZWN1cnNlLCBsaW1pdFxuXHQpO1xufTtcblxuZXhwb3J0cy5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKGlkLCBlbGVtZW50LCByZWN1cnNlKXtcblx0aWYoIUFycmF5LmlzQXJyYXkoZWxlbWVudCkpIGVsZW1lbnQgPSBbZWxlbWVudF07XG5cdHJldHVybiB0aGlzLmZpbmRPbmUoZ2V0QXR0cmliQ2hlY2soXCJpZFwiLCBpZCksIGVsZW1lbnQsIHJlY3Vyc2UgIT09IGZhbHNlKTtcbn07XG5cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBmdW5jdGlvbihuYW1lLCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdHJldHVybiB0aGlzLmZpbHRlcihDaGVja3MudGFnX25hbWUobmFtZSksIGVsZW1lbnQsIHJlY3Vyc2UsIGxpbWl0KTtcbn07XG5cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ1R5cGUgPSBmdW5jdGlvbih0eXBlLCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdHJldHVybiB0aGlzLmZpbHRlcihDaGVja3MudGFnX3R5cGUodHlwZSksIGVsZW1lbnQsIHJlY3Vyc2UsIGxpbWl0KTtcbn07XG4iLCJleHBvcnRzLnJlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtKXtcblx0aWYoZWxlbS5wcmV2KSBlbGVtLnByZXYubmV4dCA9IGVsZW0ubmV4dDtcblx0aWYoZWxlbS5uZXh0KSBlbGVtLm5leHQucHJldiA9IGVsZW0ucHJldjtcblxuXHRpZihlbGVtLnBhcmVudCl7XG5cdFx0dmFyIGNoaWxkcyA9IGVsZW0ucGFyZW50LmNoaWxkcmVuO1xuXHRcdGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pLCAxKTtcblx0fVxufTtcblxuZXhwb3J0cy5yZXBsYWNlRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW0sIHJlcGxhY2VtZW50KXtcblx0dmFyIHByZXYgPSByZXBsYWNlbWVudC5wcmV2ID0gZWxlbS5wcmV2O1xuXHRpZihwcmV2KXtcblx0XHRwcmV2Lm5leHQgPSByZXBsYWNlbWVudDtcblx0fVxuXG5cdHZhciBuZXh0ID0gcmVwbGFjZW1lbnQubmV4dCA9IGVsZW0ubmV4dDtcblx0aWYobmV4dCl7XG5cdFx0bmV4dC5wcmV2ID0gcmVwbGFjZW1lbnQ7XG5cdH1cblxuXHR2YXIgcGFyZW50ID0gcmVwbGFjZW1lbnQucGFyZW50ID0gZWxlbS5wYXJlbnQ7XG5cdGlmKHBhcmVudCl7XG5cdFx0dmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcblx0XHRjaGlsZHNbY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pXSA9IHJlcGxhY2VtZW50O1xuXHR9XG59O1xuXG5leHBvcnRzLmFwcGVuZENoaWxkID0gZnVuY3Rpb24oZWxlbSwgY2hpbGQpe1xuXHRjaGlsZC5wYXJlbnQgPSBlbGVtO1xuXG5cdGlmKGVsZW0uY2hpbGRyZW4ucHVzaChjaGlsZCkgIT09IDEpe1xuXHRcdHZhciBzaWJsaW5nID0gZWxlbS5jaGlsZHJlbltlbGVtLmNoaWxkcmVuLmxlbmd0aCAtIDJdO1xuXHRcdHNpYmxpbmcubmV4dCA9IGNoaWxkO1xuXHRcdGNoaWxkLnByZXYgPSBzaWJsaW5nO1xuXHRcdGNoaWxkLm5leHQgPSBudWxsO1xuXHR9XG59O1xuXG5leHBvcnRzLmFwcGVuZCA9IGZ1bmN0aW9uKGVsZW0sIG5leHQpe1xuXHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnQsXG5cdFx0Y3Vyck5leHQgPSBlbGVtLm5leHQ7XG5cblx0bmV4dC5uZXh0ID0gY3Vyck5leHQ7XG5cdG5leHQucHJldiA9IGVsZW07XG5cdGVsZW0ubmV4dCA9IG5leHQ7XG5cdG5leHQucGFyZW50ID0gcGFyZW50O1xuXG5cdGlmKGN1cnJOZXh0KXtcblx0XHRjdXJyTmV4dC5wcmV2ID0gbmV4dDtcblx0XHRpZihwYXJlbnQpe1xuXHRcdFx0dmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcblx0XHRcdGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGN1cnJOZXh0KSwgMCwgbmV4dCk7XG5cdFx0fVxuXHR9IGVsc2UgaWYocGFyZW50KXtcblx0XHRwYXJlbnQuY2hpbGRyZW4ucHVzaChuZXh0KTtcblx0fVxufTtcblxuZXhwb3J0cy5wcmVwZW5kID0gZnVuY3Rpb24oZWxlbSwgcHJldil7XG5cdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudDtcblx0aWYocGFyZW50KXtcblx0XHR2YXIgY2hpbGRzID0gcGFyZW50LmNoaWxkcmVuO1xuXHRcdGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pLCAwLCBwcmV2KTtcblx0fVxuXG5cdGlmKGVsZW0ucHJldil7XG5cdFx0ZWxlbS5wcmV2Lm5leHQgPSBwcmV2O1xuXHR9XG5cdFxuXHRwcmV2LnBhcmVudCA9IHBhcmVudDtcblx0cHJldi5wcmV2ID0gZWxlbS5wcmV2O1xuXHRwcmV2Lm5leHQgPSBlbGVtO1xuXHRlbGVtLnByZXYgPSBwcmV2O1xufTtcblxuXG4iLCJ2YXIgaXNUYWcgPSByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIikuaXNUYWc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRmaWx0ZXI6IGZpbHRlcixcblx0ZmluZDogZmluZCxcblx0ZmluZE9uZUNoaWxkOiBmaW5kT25lQ2hpbGQsXG5cdGZpbmRPbmU6IGZpbmRPbmUsXG5cdGV4aXN0c09uZTogZXhpc3RzT25lLFxuXHRmaW5kQWxsOiBmaW5kQWxsXG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIodGVzdCwgZWxlbWVudCwgcmVjdXJzZSwgbGltaXQpe1xuXHRpZighQXJyYXkuaXNBcnJheShlbGVtZW50KSkgZWxlbWVudCA9IFtlbGVtZW50XTtcblxuXHRpZih0eXBlb2YgbGltaXQgIT09IFwibnVtYmVyXCIgfHwgIWlzRmluaXRlKGxpbWl0KSl7XG5cdFx0bGltaXQgPSBJbmZpbml0eTtcblx0fVxuXHRyZXR1cm4gZmluZCh0ZXN0LCBlbGVtZW50LCByZWN1cnNlICE9PSBmYWxzZSwgbGltaXQpO1xufVxuXG5mdW5jdGlvbiBmaW5kKHRlc3QsIGVsZW1zLCByZWN1cnNlLCBsaW1pdCl7XG5cdHZhciByZXN1bHQgPSBbXSwgY2hpbGRzO1xuXG5cdGZvcih2YXIgaSA9IDAsIGogPSBlbGVtcy5sZW5ndGg7IGkgPCBqOyBpKyspe1xuXHRcdGlmKHRlc3QoZWxlbXNbaV0pKXtcblx0XHRcdHJlc3VsdC5wdXNoKGVsZW1zW2ldKTtcblx0XHRcdGlmKC0tbGltaXQgPD0gMCkgYnJlYWs7XG5cdFx0fVxuXG5cdFx0Y2hpbGRzID0gZWxlbXNbaV0uY2hpbGRyZW47XG5cdFx0aWYocmVjdXJzZSAmJiBjaGlsZHMgJiYgY2hpbGRzLmxlbmd0aCA+IDApe1xuXHRcdFx0Y2hpbGRzID0gZmluZCh0ZXN0LCBjaGlsZHMsIHJlY3Vyc2UsIGxpbWl0KTtcblx0XHRcdHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoY2hpbGRzKTtcblx0XHRcdGxpbWl0IC09IGNoaWxkcy5sZW5ndGg7XG5cdFx0XHRpZihsaW1pdCA8PSAwKSBicmVhaztcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmaW5kT25lQ2hpbGQodGVzdCwgZWxlbXMpe1xuXHRmb3IodmFyIGkgPSAwLCBsID0gZWxlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKXtcblx0XHRpZih0ZXN0KGVsZW1zW2ldKSkgcmV0dXJuIGVsZW1zW2ldO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGZpbmRPbmUodGVzdCwgZWxlbXMpe1xuXHR2YXIgZWxlbSA9IG51bGw7XG5cblx0Zm9yKHZhciBpID0gMCwgbCA9IGVsZW1zLmxlbmd0aDsgaSA8IGwgJiYgIWVsZW07IGkrKyl7XG5cdFx0aWYoIWlzVGFnKGVsZW1zW2ldKSl7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9IGVsc2UgaWYodGVzdChlbGVtc1tpXSkpe1xuXHRcdFx0ZWxlbSA9IGVsZW1zW2ldO1xuXHRcdH0gZWxzZSBpZihlbGVtc1tpXS5jaGlsZHJlbi5sZW5ndGggPiAwKXtcblx0XHRcdGVsZW0gPSBmaW5kT25lKHRlc3QsIGVsZW1zW2ldLmNoaWxkcmVuKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gZXhpc3RzT25lKHRlc3QsIGVsZW1zKXtcblx0Zm9yKHZhciBpID0gMCwgbCA9IGVsZW1zLmxlbmd0aDsgaSA8IGw7IGkrKyl7XG5cdFx0aWYoXG5cdFx0XHRpc1RhZyhlbGVtc1tpXSkgJiYgKFxuXHRcdFx0XHR0ZXN0KGVsZW1zW2ldKSB8fCAoXG5cdFx0XHRcdFx0ZWxlbXNbaV0uY2hpbGRyZW4ubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdGV4aXN0c09uZSh0ZXN0LCBlbGVtc1tpXS5jaGlsZHJlbilcblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdCl7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGZpbmRBbGwodGVzdCwgcm9vdEVsZW1zKXtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHR2YXIgc3RhY2sgPSByb290RWxlbXMuc2xpY2UoKTtcblx0d2hpbGUoc3RhY2subGVuZ3RoKXtcblx0XHR2YXIgZWxlbSA9IHN0YWNrLnNoaWZ0KCk7XG5cdFx0aWYoIWlzVGFnKGVsZW0pKSBjb250aW51ZTtcblx0XHRpZiAoZWxlbS5jaGlsZHJlbiAmJiBlbGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcblx0XHRcdHN0YWNrLnVuc2hpZnQuYXBwbHkoc3RhY2ssIGVsZW0uY2hpbGRyZW4pO1xuXHRcdH1cblx0XHRpZih0ZXN0KGVsZW0pKSByZXN1bHQucHVzaChlbGVtKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuIiwidmFyIEVsZW1lbnRUeXBlID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpLFxuICAgIGdldE91dGVySFRNTCA9IHJlcXVpcmUoXCJkb20tc2VyaWFsaXplclwiKSxcbiAgICBpc1RhZyA9IEVsZW1lbnRUeXBlLmlzVGFnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Z2V0SW5uZXJIVE1MOiBnZXRJbm5lckhUTUwsXG5cdGdldE91dGVySFRNTDogZ2V0T3V0ZXJIVE1MLFxuXHRnZXRUZXh0OiBnZXRUZXh0XG59O1xuXG5mdW5jdGlvbiBnZXRJbm5lckhUTUwoZWxlbSwgb3B0cyl7XG5cdHJldHVybiBlbGVtLmNoaWxkcmVuID8gZWxlbS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24oZWxlbSl7XG5cdFx0cmV0dXJuIGdldE91dGVySFRNTChlbGVtLCBvcHRzKTtcblx0fSkuam9pbihcIlwiKSA6IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGdldFRleHQoZWxlbSl7XG5cdGlmKEFycmF5LmlzQXJyYXkoZWxlbSkpIHJldHVybiBlbGVtLm1hcChnZXRUZXh0KS5qb2luKFwiXCIpO1xuXHRpZihpc1RhZyhlbGVtKSkgcmV0dXJuIGVsZW0ubmFtZSA9PT0gXCJiclwiID8gXCJcXG5cIiA6IGdldFRleHQoZWxlbS5jaGlsZHJlbik7XG5cdGlmKGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuQ0RBVEEpIHJldHVybiBnZXRUZXh0KGVsZW0uY2hpbGRyZW4pO1xuXHRpZihlbGVtLnR5cGUgPT09IEVsZW1lbnRUeXBlLlRleHQpIHJldHVybiBlbGVtLmRhdGE7XG5cdHJldHVybiBcIlwiO1xufVxuIiwidmFyIGdldENoaWxkcmVuID0gZXhwb3J0cy5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uKGVsZW0pe1xuXHRyZXR1cm4gZWxlbS5jaGlsZHJlbjtcbn07XG5cbnZhciBnZXRQYXJlbnQgPSBleHBvcnRzLmdldFBhcmVudCA9IGZ1bmN0aW9uKGVsZW0pe1xuXHRyZXR1cm4gZWxlbS5wYXJlbnQ7XG59O1xuXG5leHBvcnRzLmdldFNpYmxpbmdzID0gZnVuY3Rpb24oZWxlbSl7XG5cdHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoZWxlbSk7XG5cdHJldHVybiBwYXJlbnQgPyBnZXRDaGlsZHJlbihwYXJlbnQpIDogW2VsZW1dO1xufTtcblxuZXhwb3J0cy5nZXRBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uKGVsZW0sIG5hbWUpe1xuXHRyZXR1cm4gZWxlbS5hdHRyaWJzICYmIGVsZW0uYXR0cmlic1tuYW1lXTtcbn07XG5cbmV4cG9ydHMuaGFzQXR0cmliID0gZnVuY3Rpb24oZWxlbSwgbmFtZSl7XG5cdHJldHVybiAhIWVsZW0uYXR0cmlicyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGVsZW0uYXR0cmlicywgbmFtZSk7XG59O1xuXG5leHBvcnRzLmdldE5hbWUgPSBmdW5jdGlvbihlbGVtKXtcblx0cmV0dXJuIGVsZW0ubmFtZTtcbn07XG4iLCJ2YXIgZW5jb2RlID0gcmVxdWlyZShcIi4vbGliL2VuY29kZS5qc1wiKSxcbiAgICBkZWNvZGUgPSByZXF1aXJlKFwiLi9saWIvZGVjb2RlLmpzXCIpO1xuXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKGRhdGEsIGxldmVsKSB7XG4gICAgcmV0dXJuICghbGV2ZWwgfHwgbGV2ZWwgPD0gMCA/IGRlY29kZS5YTUwgOiBkZWNvZGUuSFRNTCkoZGF0YSk7XG59O1xuXG5leHBvcnRzLmRlY29kZVN0cmljdCA9IGZ1bmN0aW9uKGRhdGEsIGxldmVsKSB7XG4gICAgcmV0dXJuICghbGV2ZWwgfHwgbGV2ZWwgPD0gMCA/IGRlY29kZS5YTUwgOiBkZWNvZGUuSFRNTFN0cmljdCkoZGF0YSk7XG59O1xuXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGRhdGEsIGxldmVsKSB7XG4gICAgcmV0dXJuICghbGV2ZWwgfHwgbGV2ZWwgPD0gMCA/IGVuY29kZS5YTUwgOiBlbmNvZGUuSFRNTCkoZGF0YSk7XG59O1xuXG5leHBvcnRzLmVuY29kZVhNTCA9IGVuY29kZS5YTUw7XG5cbmV4cG9ydHMuZW5jb2RlSFRNTDQgPSBleHBvcnRzLmVuY29kZUhUTUw1ID0gZXhwb3J0cy5lbmNvZGVIVE1MID0gZW5jb2RlLkhUTUw7XG5cbmV4cG9ydHMuZGVjb2RlWE1MID0gZXhwb3J0cy5kZWNvZGVYTUxTdHJpY3QgPSBkZWNvZGUuWE1MO1xuXG5leHBvcnRzLmRlY29kZUhUTUw0ID0gZXhwb3J0cy5kZWNvZGVIVE1MNSA9IGV4cG9ydHMuZGVjb2RlSFRNTCA9IGRlY29kZS5IVE1MO1xuXG5leHBvcnRzLmRlY29kZUhUTUw0U3RyaWN0ID0gZXhwb3J0cy5kZWNvZGVIVE1MNVN0cmljdCA9IGV4cG9ydHMuZGVjb2RlSFRNTFN0cmljdCA9IGRlY29kZS5IVE1MU3RyaWN0O1xuXG5leHBvcnRzLmVzY2FwZSA9IGVuY29kZS5lc2NhcGU7XG4iLCJ2YXIgZW50aXR5TWFwID0gcmVxdWlyZShcIi4uL21hcHMvZW50aXRpZXMuanNvblwiKSxcbiAgICBsZWdhY3lNYXAgPSByZXF1aXJlKFwiLi4vbWFwcy9sZWdhY3kuanNvblwiKSxcbiAgICB4bWxNYXAgPSByZXF1aXJlKFwiLi4vbWFwcy94bWwuanNvblwiKSxcbiAgICBkZWNvZGVDb2RlUG9pbnQgPSByZXF1aXJlKFwiLi9kZWNvZGVfY29kZXBvaW50LmpzXCIpO1xuXG52YXIgZGVjb2RlWE1MU3RyaWN0ID0gZ2V0U3RyaWN0RGVjb2Rlcih4bWxNYXApLFxuICAgIGRlY29kZUhUTUxTdHJpY3QgPSBnZXRTdHJpY3REZWNvZGVyKGVudGl0eU1hcCk7XG5cbmZ1bmN0aW9uIGdldFN0cmljdERlY29kZXIobWFwKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhtYXApLmpvaW4oXCJ8XCIpLFxuICAgICAgICByZXBsYWNlID0gZ2V0UmVwbGFjZXIobWFwKTtcblxuICAgIGtleXMgKz0gXCJ8I1t4WF1bXFxcXGRhLWZBLUZdK3wjXFxcXGQrXCI7XG5cbiAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiJig/OlwiICsga2V5cyArIFwiKTtcIiwgXCJnXCIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZShyZSwgcmVwbGFjZSk7XG4gICAgfTtcbn1cblxudmFyIGRlY29kZUhUTUwgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZ2FjeSA9IE9iamVjdC5rZXlzKGxlZ2FjeU1hcCkuc29ydChzb3J0ZXIpO1xuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhlbnRpdHlNYXApLnNvcnQoc29ydGVyKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGxlZ2FjeVtqXSA9PT0ga2V5c1tpXSkge1xuICAgICAgICAgICAga2V5c1tpXSArPSBcIjs/XCI7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXlzW2ldICs9IFwiO1wiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIiYoPzpcIiArIGtleXMuam9pbihcInxcIikgKyBcInwjW3hYXVtcXFxcZGEtZkEtRl0rOz98I1xcXFxkKzs/KVwiLCBcImdcIiksXG4gICAgICAgIHJlcGxhY2UgPSBnZXRSZXBsYWNlcihlbnRpdHlNYXApO1xuXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIoc3RyKSB7XG4gICAgICAgIGlmIChzdHIuc3Vic3RyKC0xKSAhPT0gXCI7XCIpIHN0ciArPSBcIjtcIjtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2Uoc3RyKTtcbiAgICB9XG5cbiAgICAvL1RPRE8gY29uc2lkZXIgY3JlYXRpbmcgYSBtZXJnZWQgbWFwXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZShyZSwgcmVwbGFjZXIpO1xuICAgIH07XG59KSgpO1xuXG5mdW5jdGlvbiBzb3J0ZXIoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IDEgOiAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVwbGFjZXIobWFwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgICAgIGlmIChzdHIuY2hhckF0KDEpID09PSBcIiNcIikge1xuICAgICAgICAgICAgaWYgKHN0ci5jaGFyQXQoMikgPT09IFwiWFwiIHx8IHN0ci5jaGFyQXQoMikgPT09IFwieFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZUNvZGVQb2ludChwYXJzZUludChzdHIuc3Vic3RyKDMpLCAxNikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlY29kZUNvZGVQb2ludChwYXJzZUludChzdHIuc3Vic3RyKDIpLCAxMCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXBbc3RyLnNsaWNlKDEsIC0xKV07XG4gICAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgWE1MOiBkZWNvZGVYTUxTdHJpY3QsXG4gICAgSFRNTDogZGVjb2RlSFRNTCxcbiAgICBIVE1MU3RyaWN0OiBkZWNvZGVIVE1MU3RyaWN0XG59O1xuIiwidmFyIGRlY29kZU1hcCA9IHJlcXVpcmUoXCIuLi9tYXBzL2RlY29kZS5qc29uXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZUNvZGVQb2ludDtcblxuLy8gbW9kaWZpZWQgdmVyc2lvbiBvZiBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9oZS9ibG9iL21hc3Rlci9zcmMvaGUuanMjTDk0LUwxMTlcbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgICBpZiAoKGNvZGVQb2ludCA+PSAweGQ4MDAgJiYgY29kZVBvaW50IDw9IDB4ZGZmZikgfHwgY29kZVBvaW50ID4gMHgxMGZmZmYpIHtcbiAgICAgICAgcmV0dXJuIFwiXFx1RkZGRFwiO1xuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgaW4gZGVjb2RlTWFwKSB7XG4gICAgICAgIGNvZGVQb2ludCA9IGRlY29kZU1hcFtjb2RlUG9pbnRdO1xuICAgIH1cblxuICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuXG4gICAgaWYgKGNvZGVQb2ludCA+IDB4ZmZmZikge1xuICAgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDtcbiAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4+IDEwKSAmIDB4M2ZmKSB8IDB4ZDgwMCk7XG4gICAgICAgIGNvZGVQb2ludCA9IDB4ZGMwMCB8IChjb2RlUG9pbnQgJiAweDNmZik7XG4gICAgfVxuXG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuIiwidmFyIGludmVyc2VYTUwgPSBnZXRJbnZlcnNlT2JqKHJlcXVpcmUoXCIuLi9tYXBzL3htbC5qc29uXCIpKSxcbiAgICB4bWxSZXBsYWNlciA9IGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlWE1MKTtcblxuZXhwb3J0cy5YTUwgPSBnZXRJbnZlcnNlKGludmVyc2VYTUwsIHhtbFJlcGxhY2VyKTtcblxudmFyIGludmVyc2VIVE1MID0gZ2V0SW52ZXJzZU9iaihyZXF1aXJlKFwiLi4vbWFwcy9lbnRpdGllcy5qc29uXCIpKSxcbiAgICBodG1sUmVwbGFjZXIgPSBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZUhUTUwpO1xuXG5leHBvcnRzLkhUTUwgPSBnZXRJbnZlcnNlKGludmVyc2VIVE1MLCBodG1sUmVwbGFjZXIpO1xuXG5mdW5jdGlvbiBnZXRJbnZlcnNlT2JqKG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbihpbnZlcnNlLCBuYW1lKSB7XG4gICAgICAgICAgICBpbnZlcnNlW29ialtuYW1lXV0gPSBcIiZcIiArIG5hbWUgKyBcIjtcIjtcbiAgICAgICAgICAgIHJldHVybiBpbnZlcnNlO1xuICAgICAgICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlKSB7XG4gICAgdmFyIHNpbmdsZSA9IFtdLFxuICAgICAgICBtdWx0aXBsZSA9IFtdO1xuXG4gICAgT2JqZWN0LmtleXMoaW52ZXJzZSkuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgICAgIGlmIChrLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgc2luZ2xlLnB1c2goXCJcXFxcXCIgKyBrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11bHRpcGxlLnB1c2goayk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vVE9ETyBhZGQgcmFuZ2VzXG4gICAgbXVsdGlwbGUudW5zaGlmdChcIltcIiArIHNpbmdsZS5qb2luKFwiXCIpICsgXCJdXCIpO1xuXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAobXVsdGlwbGUuam9pbihcInxcIiksIFwiZ1wiKTtcbn1cblxudmFyIHJlX25vbkFTQ0lJID0gL1teXFwwLVxceDdGXS9nLFxuICAgIHJlX2FzdHJhbFN5bWJvbHMgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nO1xuXG5mdW5jdGlvbiBzaW5nbGVDaGFyUmVwbGFjZXIoYykge1xuICAgIHJldHVybiAoXG4gICAgICAgIFwiJiN4XCIgK1xuICAgICAgICBjXG4gICAgICAgICAgICAuY2hhckNvZGVBdCgwKVxuICAgICAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgLnRvVXBwZXJDYXNlKCkgK1xuICAgICAgICBcIjtcIlxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGFzdHJhbFJlcGxhY2VyKGMpIHtcbiAgICAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgIHZhciBoaWdoID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBsb3cgPSBjLmNoYXJDb2RlQXQoMSk7XG4gICAgdmFyIGNvZGVQb2ludCA9IChoaWdoIC0gMHhkODAwKSAqIDB4NDAwICsgbG93IC0gMHhkYzAwICsgMHgxMDAwMDtcbiAgICByZXR1cm4gXCImI3hcIiArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArIFwiO1wiO1xufVxuXG5mdW5jdGlvbiBnZXRJbnZlcnNlKGludmVyc2UsIHJlKSB7XG4gICAgZnVuY3Rpb24gZnVuYyhuYW1lKSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlW25hbWVdO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAucmVwbGFjZShyZSwgZnVuYylcbiAgICAgICAgICAgIC5yZXBsYWNlKHJlX2FzdHJhbFN5bWJvbHMsIGFzdHJhbFJlcGxhY2VyKVxuICAgICAgICAgICAgLnJlcGxhY2UocmVfbm9uQVNDSUksIHNpbmdsZUNoYXJSZXBsYWNlcik7XG4gICAgfTtcbn1cblxudmFyIHJlX3htbENoYXJzID0gZ2V0SW52ZXJzZVJlcGxhY2VyKGludmVyc2VYTUwpO1xuXG5mdW5jdGlvbiBlc2NhcGVYTUwoZGF0YSkge1xuICAgIHJldHVybiBkYXRhXG4gICAgICAgIC5yZXBsYWNlKHJlX3htbENoYXJzLCBzaW5nbGVDaGFyUmVwbGFjZXIpXG4gICAgICAgIC5yZXBsYWNlKHJlX2FzdHJhbFN5bWJvbHMsIGFzdHJhbFJlcGxhY2VyKVxuICAgICAgICAucmVwbGFjZShyZV9ub25BU0NJSSwgc2luZ2xlQ2hhclJlcGxhY2VyKTtcbn1cblxuZXhwb3J0cy5lc2NhcGUgPSBlc2NhcGVYTUw7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbC5leHByRXZhbCA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICB2YXIgSU5VTUJFUiA9ICdJTlVNQkVSJztcbiAgdmFyIElPUDEgPSAnSU9QMSc7XG4gIHZhciBJT1AyID0gJ0lPUDInO1xuICB2YXIgSU9QMyA9ICdJT1AzJztcbiAgdmFyIElWQVIgPSAnSVZBUic7XG4gIHZhciBJRlVOQ0FMTCA9ICdJRlVOQ0FMTCc7XG4gIHZhciBJRVhQUiA9ICdJRVhQUic7XG4gIHZhciBJTUVNQkVSID0gJ0lNRU1CRVInO1xuXG4gIGZ1bmN0aW9uIEluc3RydWN0aW9uKHR5cGUsIHZhbHVlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnZhbHVlID0gKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpID8gdmFsdWUgOiAwO1xuICB9XG5cbiAgSW5zdHJ1Y3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICBjYXNlIElOVU1CRVI6XG4gICAgICBjYXNlIElPUDE6XG4gICAgICBjYXNlIElPUDI6XG4gICAgICBjYXNlIElPUDM6XG4gICAgICBjYXNlIElWQVI6XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgY2FzZSBJRlVOQ0FMTDpcbiAgICAgICAgcmV0dXJuICdDQUxMICcgKyB0aGlzLnZhbHVlO1xuICAgICAgY2FzZSBJTUVNQkVSOlxuICAgICAgICByZXR1cm4gJy4nICsgdGhpcy52YWx1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnSW52YWxpZCBJbnN0cnVjdGlvbic7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHVuYXJ5SW5zdHJ1Y3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IEluc3RydWN0aW9uKElPUDEsIHZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpbmFyeUluc3RydWN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBJbnN0cnVjdGlvbihJT1AyLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZXJuYXJ5SW5zdHJ1Y3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IEluc3RydWN0aW9uKElPUDMsIHZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbXBsaWZ5KHRva2VucywgdW5hcnlPcHMsIGJpbmFyeU9wcywgdGVybmFyeU9wcywgdmFsdWVzKSB7XG4gICAgdmFyIG5zdGFjayA9IFtdO1xuICAgIHZhciBuZXdleHByZXNzaW9uID0gW107XG4gICAgdmFyIG4xLCBuMiwgbjM7XG4gICAgdmFyIGY7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gdG9rZW5zW2ldO1xuICAgICAgdmFyIHR5cGUgPSBpdGVtLnR5cGU7XG4gICAgICBpZiAodHlwZSA9PT0gSU5VTUJFUikge1xuICAgICAgICBuc3RhY2sucHVzaChpdGVtKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSVZBUiAmJiB2YWx1ZXMuaGFzT3duUHJvcGVydHkoaXRlbS52YWx1ZSkpIHtcbiAgICAgICAgaXRlbSA9IG5ldyBJbnN0cnVjdGlvbihJTlVNQkVSLCB2YWx1ZXNbaXRlbS52YWx1ZV0pO1xuICAgICAgICBuc3RhY2sucHVzaChpdGVtKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSU9QMiAmJiBuc3RhY2subGVuZ3RoID4gMSkge1xuICAgICAgICBuMiA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgbjEgPSBuc3RhY2sucG9wKCk7XG4gICAgICAgIGYgPSBiaW5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICAgIGl0ZW0gPSBuZXcgSW5zdHJ1Y3Rpb24oSU5VTUJFUiwgZihuMS52YWx1ZSwgbjIudmFsdWUpKTtcbiAgICAgICAgbnN0YWNrLnB1c2goaXRlbSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElPUDMgJiYgbnN0YWNrLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgbjMgPSBuc3RhY2sucG9wKCk7XG4gICAgICAgIG4yID0gbnN0YWNrLnBvcCgpO1xuICAgICAgICBuMSA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKGl0ZW0udmFsdWUgPT09ICc/Jykge1xuICAgICAgICAgIG5zdGFjay5wdXNoKG4xLnZhbHVlID8gbjIudmFsdWUgOiBuMy52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZiA9IHRlcm5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICAgICAgaXRlbSA9IG5ldyBJbnN0cnVjdGlvbihJTlVNQkVSLCBmKG4xLnZhbHVlLCBuMi52YWx1ZSwgbjMudmFsdWUpKTtcbiAgICAgICAgICBuc3RhY2sucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJT1AxICYmIG5zdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIG4xID0gbnN0YWNrLnBvcCgpO1xuICAgICAgICBmID0gdW5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICAgIGl0ZW0gPSBuZXcgSW5zdHJ1Y3Rpb24oSU5VTUJFUiwgZihuMS52YWx1ZSkpO1xuICAgICAgICBuc3RhY2sucHVzaChpdGVtKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSUVYUFIpIHtcbiAgICAgICAgd2hpbGUgKG5zdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbmV3ZXhwcmVzc2lvbi5wdXNoKG5zdGFjay5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdleHByZXNzaW9uLnB1c2gobmV3IEluc3RydWN0aW9uKElFWFBSLCBzaW1wbGlmeShpdGVtLnZhbHVlLCB1bmFyeU9wcywgYmluYXJ5T3BzLCB0ZXJuYXJ5T3BzLCB2YWx1ZXMpKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElNRU1CRVIgJiYgbnN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbjEgPSBuc3RhY2sucG9wKCk7XG4gICAgICAgIG5zdGFjay5wdXNoKG5ldyBJbnN0cnVjdGlvbihJTlVNQkVSLCBuMS52YWx1ZVtpdGVtLnZhbHVlXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2hpbGUgKG5zdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbmV3ZXhwcmVzc2lvbi5wdXNoKG5zdGFjay5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdleHByZXNzaW9uLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChuc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgbmV3ZXhwcmVzc2lvbi5wdXNoKG5zdGFjay5zaGlmdCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld2V4cHJlc3Npb247XG4gIH1cblxuICBmdW5jdGlvbiBzdWJzdGl0dXRlKHRva2VucywgdmFyaWFibGUsIGV4cHIpIHtcbiAgICB2YXIgbmV3ZXhwcmVzc2lvbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHRva2Vuc1tpXTtcbiAgICAgIHZhciB0eXBlID0gaXRlbS50eXBlO1xuICAgICAgaWYgKHR5cGUgPT09IElWQVIgJiYgaXRlbS52YWx1ZSA9PT0gdmFyaWFibGUpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBleHByLnRva2Vucy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBleHByaXRlbSA9IGV4cHIudG9rZW5zW2pdO1xuICAgICAgICAgIHZhciByZXBsaXRlbTtcbiAgICAgICAgICBpZiAoZXhwcml0ZW0udHlwZSA9PT0gSU9QMSkge1xuICAgICAgICAgICAgcmVwbGl0ZW0gPSB1bmFyeUluc3RydWN0aW9uKGV4cHJpdGVtLnZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGV4cHJpdGVtLnR5cGUgPT09IElPUDIpIHtcbiAgICAgICAgICAgIHJlcGxpdGVtID0gYmluYXJ5SW5zdHJ1Y3Rpb24oZXhwcml0ZW0udmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXhwcml0ZW0udHlwZSA9PT0gSU9QMykge1xuICAgICAgICAgICAgcmVwbGl0ZW0gPSB0ZXJuYXJ5SW5zdHJ1Y3Rpb24oZXhwcml0ZW0udmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXBsaXRlbSA9IG5ldyBJbnN0cnVjdGlvbihleHByaXRlbS50eXBlLCBleHByaXRlbS52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld2V4cHJlc3Npb24ucHVzaChyZXBsaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSUVYUFIpIHtcbiAgICAgICAgbmV3ZXhwcmVzc2lvbi5wdXNoKG5ldyBJbnN0cnVjdGlvbihJRVhQUiwgc3Vic3RpdHV0ZShpdGVtLnZhbHVlLCB2YXJpYWJsZSwgZXhwcikpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld2V4cHJlc3Npb24ucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld2V4cHJlc3Npb247XG4gIH1cblxuICBmdW5jdGlvbiBldmFsdWF0ZSh0b2tlbnMsIGV4cHIsIHZhbHVlcykge1xuICAgIHZhciBuc3RhY2sgPSBbXTtcbiAgICB2YXIgbjEsIG4yLCBuMztcbiAgICB2YXIgZjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSB0b2tlbnNbaV07XG4gICAgICB2YXIgdHlwZSA9IGl0ZW0udHlwZTtcbiAgICAgIGlmICh0eXBlID09PSBJTlVNQkVSKSB7XG4gICAgICAgIG5zdGFjay5wdXNoKGl0ZW0udmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJT1AyKSB7XG4gICAgICAgIG4yID0gbnN0YWNrLnBvcCgpO1xuICAgICAgICBuMSA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKGl0ZW0udmFsdWUgPT09ICdhbmQnKSB7XG4gICAgICAgICAgbnN0YWNrLnB1c2gobjEgPyAhIWV2YWx1YXRlKG4yLCBleHByLCB2YWx1ZXMpIDogZmFsc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udmFsdWUgPT09ICdvcicpIHtcbiAgICAgICAgICBuc3RhY2sucHVzaChuMSA/IHRydWUgOiAhIWV2YWx1YXRlKG4yLCBleHByLCB2YWx1ZXMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmID0gZXhwci5iaW5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICAgICAgbnN0YWNrLnB1c2goZihuMSwgbjIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJT1AzKSB7XG4gICAgICAgIG4zID0gbnN0YWNrLnBvcCgpO1xuICAgICAgICBuMiA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgbjEgPSBuc3RhY2sucG9wKCk7XG4gICAgICAgIGlmIChpdGVtLnZhbHVlID09PSAnPycpIHtcbiAgICAgICAgICBuc3RhY2sucHVzaChldmFsdWF0ZShuMSA/IG4yIDogbjMsIGV4cHIsIHZhbHVlcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGYgPSBleHByLnRlcm5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICAgICAgbnN0YWNrLnB1c2goZihuMSwgbjIsIG4zKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSVZBUikge1xuICAgICAgICBpZiAoaXRlbS52YWx1ZSBpbiBleHByLmZ1bmN0aW9ucykge1xuICAgICAgICAgIG5zdGFjay5wdXNoKGV4cHIuZnVuY3Rpb25zW2l0ZW0udmFsdWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdiA9IHZhbHVlc1tpdGVtLnZhbHVlXTtcbiAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuc3RhY2sucHVzaCh2KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmRlZmluZWQgdmFyaWFibGU6ICcgKyBpdGVtLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSU9QMSkge1xuICAgICAgICBuMSA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgZiA9IGV4cHIudW5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICAgIG5zdGFjay5wdXNoKGYobjEpKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSUZVTkNBTEwpIHtcbiAgICAgICAgdmFyIGFyZ0NvdW50ID0gaXRlbS52YWx1ZTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgd2hpbGUgKGFyZ0NvdW50LS0gPiAwKSB7XG4gICAgICAgICAgYXJncy51bnNoaWZ0KG5zdGFjay5wb3AoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZiA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKGYuYXBwbHkgJiYgZi5jYWxsKSB7XG4gICAgICAgICAgbnN0YWNrLnB1c2goZi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZiArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJRVhQUikge1xuICAgICAgICBuc3RhY2sucHVzaChpdGVtLnZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSU1FTUJFUikge1xuICAgICAgICBuMSA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgbnN0YWNrLnB1c2gobjFbaXRlbS52YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIEV4cHJlc3Npb24nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5zdGFjay5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgRXhwcmVzc2lvbiAocGFyaXR5KScpO1xuICAgIH1cbiAgICByZXR1cm4gbnN0YWNrWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwcmVzc2lvblRvU3RyaW5nKHRva2VucywgdG9KUykge1xuICAgIHZhciBuc3RhY2sgPSBbXTtcbiAgICB2YXIgbjEsIG4yLCBuMztcbiAgICB2YXIgZjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSB0b2tlbnNbaV07XG4gICAgICB2YXIgdHlwZSA9IGl0ZW0udHlwZTtcbiAgICAgIGlmICh0eXBlID09PSBJTlVNQkVSKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbS52YWx1ZSA9PT0gJ251bWJlcicgJiYgaXRlbS52YWx1ZSA8IDApIHtcbiAgICAgICAgICBuc3RhY2sucHVzaCgnKCcgKyBpdGVtLnZhbHVlICsgJyknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuc3RhY2sucHVzaChlc2NhcGVWYWx1ZShpdGVtLnZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSU9QMikge1xuICAgICAgICBuMiA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgbjEgPSBuc3RhY2sucG9wKCk7XG4gICAgICAgIGYgPSBpdGVtLnZhbHVlO1xuICAgICAgICBpZiAodG9KUykge1xuICAgICAgICAgIGlmIChmID09PSAnXicpIHtcbiAgICAgICAgICAgIG5zdGFjay5wdXNoKCdNYXRoLnBvdygnICsgbjEgKyAnLCAnICsgbjIgKyAnKScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZiA9PT0gJ2FuZCcpIHtcbiAgICAgICAgICAgIG5zdGFjay5wdXNoKCcoISEnICsgbjEgKyAnICYmICEhJyArIG4yICsgJyknKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGYgPT09ICdvcicpIHtcbiAgICAgICAgICAgIG5zdGFjay5wdXNoKCcoISEnICsgbjEgKyAnIHx8ICEhJyArIG4yICsgJyknKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGYgPT09ICd8fCcpIHtcbiAgICAgICAgICAgIG5zdGFjay5wdXNoKCcoU3RyaW5nKCcgKyBuMSArICcpICsgU3RyaW5nKCcgKyBuMiArICcpKScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZiA9PT0gJz09Jykge1xuICAgICAgICAgICAgbnN0YWNrLnB1c2goJygnICsgbjEgKyAnID09PSAnICsgbjIgKyAnKScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZiA9PT0gJyE9Jykge1xuICAgICAgICAgICAgbnN0YWNrLnB1c2goJygnICsgbjEgKyAnICE9PSAnICsgbjIgKyAnKScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuc3RhY2sucHVzaCgnKCcgKyBuMSArICcgJyArIGYgKyAnICcgKyBuMiArICcpJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5zdGFjay5wdXNoKCcoJyArIG4xICsgJyAnICsgZiArICcgJyArIG4yICsgJyknKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJT1AzKSB7XG4gICAgICAgIG4zID0gbnN0YWNrLnBvcCgpO1xuICAgICAgICBuMiA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgbjEgPSBuc3RhY2sucG9wKCk7XG4gICAgICAgIGYgPSBpdGVtLnZhbHVlO1xuICAgICAgICBpZiAoZiA9PT0gJz8nKSB7XG4gICAgICAgICAgbnN0YWNrLnB1c2goJygnICsgbjEgKyAnID8gJyArIG4yICsgJyA6ICcgKyBuMyArICcpJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIEV4cHJlc3Npb24nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJVkFSKSB7XG4gICAgICAgIG5zdGFjay5wdXNoKGl0ZW0udmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJT1AxKSB7XG4gICAgICAgIG4xID0gbnN0YWNrLnBvcCgpO1xuICAgICAgICBmID0gaXRlbS52YWx1ZTtcbiAgICAgICAgaWYgKGYgPT09ICctJyB8fCBmID09PSAnKycpIHtcbiAgICAgICAgICBuc3RhY2sucHVzaCgnKCcgKyBmICsgbjEgKyAnKScpO1xuICAgICAgICB9IGVsc2UgaWYgKHRvSlMpIHtcbiAgICAgICAgICBpZiAoZiA9PT0gJ25vdCcpIHtcbiAgICAgICAgICAgIG5zdGFjay5wdXNoKCcoJyArICchJyArIG4xICsgJyknKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGYgPT09ICchJykge1xuICAgICAgICAgICAgbnN0YWNrLnB1c2goJ2ZhYygnICsgbjEgKyAnKScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuc3RhY2sucHVzaChmICsgJygnICsgbjEgKyAnKScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmID09PSAnIScpIHtcbiAgICAgICAgICBuc3RhY2sucHVzaCgnKCcgKyBuMSArICchKScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5zdGFjay5wdXNoKCcoJyArIGYgKyAnICcgKyBuMSArICcpJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSUZVTkNBTEwpIHtcbiAgICAgICAgdmFyIGFyZ0NvdW50ID0gaXRlbS52YWx1ZTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgd2hpbGUgKGFyZ0NvdW50LS0gPiAwKSB7XG4gICAgICAgICAgYXJncy51bnNoaWZ0KG5zdGFjay5wb3AoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZiA9IG5zdGFjay5wb3AoKTtcbiAgICAgICAgbnN0YWNrLnB1c2goZiArICcoJyArIGFyZ3Muam9pbignLCAnKSArICcpJyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElNRU1CRVIpIHtcbiAgICAgICAgbjEgPSBuc3RhY2sucG9wKCk7XG4gICAgICAgIG5zdGFjay5wdXNoKG4xICsgJy4nICsgaXRlbS52YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElFWFBSKSB7XG4gICAgICAgIG5zdGFjay5wdXNoKCcoJyArIGV4cHJlc3Npb25Ub1N0cmluZyhpdGVtLnZhbHVlLCB0b0pTKSArICcpJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgRXhwcmVzc2lvbicpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobnN0YWNrLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBFeHByZXNzaW9uIChwYXJpdHkpJyk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcobnN0YWNrWzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVzY2FwZVZhbHVlKHYpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodikucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JykucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5Jyk7XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgZnVuY3Rpb24gY29udGFpbnMoYXJyYXksIG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhcnJheVtpXSA9PT0gb2JqKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTeW1ib2xzKHRva2Vucywgc3ltYm9scywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aXRoTWVtYmVycyA9ICEhb3B0aW9ucy53aXRoTWVtYmVycztcbiAgICB2YXIgcHJldlZhciA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSB0b2tlbnNbaV07XG4gICAgICBpZiAoaXRlbS50eXBlID09PSBJVkFSICYmICFjb250YWlucyhzeW1ib2xzLCBpdGVtLnZhbHVlKSkge1xuICAgICAgICBpZiAoIXdpdGhNZW1iZXJzKSB7XG4gICAgICAgICAgc3ltYm9scy5wdXNoKGl0ZW0udmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZWYXIgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoIWNvbnRhaW5zKHN5bWJvbHMsIHByZXZWYXIpKSB7XG4gICAgICAgICAgICBzeW1ib2xzLnB1c2gocHJldlZhcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZXZWYXIgPSBpdGVtLnZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZWYXIgPSBpdGVtLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gSU1FTUJFUiAmJiB3aXRoTWVtYmVycyAmJiBwcmV2VmFyICE9PSBudWxsKSB7XG4gICAgICAgIHByZXZWYXIgKz0gJy4nICsgaXRlbS52YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBJRVhQUikge1xuICAgICAgICBnZXRTeW1ib2xzKGl0ZW0udmFsdWUsIHN5bWJvbHMsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2VmFyICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghY29udGFpbnMoc3ltYm9scywgcHJldlZhcikpIHtcbiAgICAgICAgICBzeW1ib2xzLnB1c2gocHJldlZhcik7XG4gICAgICAgIH1cbiAgICAgICAgcHJldlZhciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZWYXIgIT09IG51bGwgJiYgIWNvbnRhaW5zKHN5bWJvbHMsIHByZXZWYXIpKSB7XG4gICAgICBzeW1ib2xzLnB1c2gocHJldlZhcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gRXhwcmVzc2lvbih0b2tlbnMsIHBhcnNlcikge1xuICAgIHRoaXMudG9rZW5zID0gdG9rZW5zO1xuICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgIHRoaXMudW5hcnlPcHMgPSBwYXJzZXIudW5hcnlPcHM7XG4gICAgdGhpcy5iaW5hcnlPcHMgPSBwYXJzZXIuYmluYXJ5T3BzO1xuICAgIHRoaXMudGVybmFyeU9wcyA9IHBhcnNlci50ZXJuYXJ5T3BzO1xuICAgIHRoaXMuZnVuY3Rpb25zID0gcGFyc2VyLmZ1bmN0aW9ucztcbiAgfVxuXG4gIEV4cHJlc3Npb24ucHJvdG90eXBlLnNpbXBsaWZ5ID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIHZhbHVlcyA9IHZhbHVlcyB8fCB7fTtcbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb24oc2ltcGxpZnkodGhpcy50b2tlbnMsIHRoaXMudW5hcnlPcHMsIHRoaXMuYmluYXJ5T3BzLCB0aGlzLnRlcm5hcnlPcHMsIHZhbHVlcyksIHRoaXMucGFyc2VyKTtcbiAgfTtcblxuICBFeHByZXNzaW9uLnByb3RvdHlwZS5zdWJzdGl0dXRlID0gZnVuY3Rpb24gKHZhcmlhYmxlLCBleHByKSB7XG4gICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIEV4cHJlc3Npb24pKSB7XG4gICAgICBleHByID0gdGhpcy5wYXJzZXIucGFyc2UoU3RyaW5nKGV4cHIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb24oc3Vic3RpdHV0ZSh0aGlzLnRva2VucywgdmFyaWFibGUsIGV4cHIpLCB0aGlzLnBhcnNlcik7XG4gIH07XG5cbiAgRXhwcmVzc2lvbi5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgdmFsdWVzID0gdmFsdWVzIHx8IHt9O1xuICAgIHJldHVybiBldmFsdWF0ZSh0aGlzLnRva2VucywgdGhpcywgdmFsdWVzKTtcbiAgfTtcblxuICBFeHByZXNzaW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZXhwcmVzc2lvblRvU3RyaW5nKHRoaXMudG9rZW5zLCBmYWxzZSk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbi5wcm90b3R5cGUuc3ltYm9scyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIHZhcnMgPSBbXTtcbiAgICBnZXRTeW1ib2xzKHRoaXMudG9rZW5zLCB2YXJzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdmFycztcbiAgfTtcblxuICBFeHByZXNzaW9uLnByb3RvdHlwZS52YXJpYWJsZXMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciB2YXJzID0gW107XG4gICAgZ2V0U3ltYm9scyh0aGlzLnRva2VucywgdmFycywgb3B0aW9ucyk7XG4gICAgdmFyIGZ1bmN0aW9ucyA9IHRoaXMuZnVuY3Rpb25zO1xuICAgIHJldHVybiB2YXJzLmZpbHRlcihmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuICEobmFtZSBpbiBmdW5jdGlvbnMpO1xuICAgIH0pO1xuICB9O1xuXG4gIEV4cHJlc3Npb24ucHJvdG90eXBlLnRvSlNGdW5jdGlvbiA9IGZ1bmN0aW9uIChwYXJhbSwgdmFyaWFibGVzKSB7XG4gICAgdmFyIGV4cHIgPSB0aGlzO1xuICAgIHZhciBmID0gbmV3IEZ1bmN0aW9uKHBhcmFtLCAnd2l0aCh0aGlzLmZ1bmN0aW9ucykgd2l0aCAodGhpcy50ZXJuYXJ5T3BzKSB3aXRoICh0aGlzLmJpbmFyeU9wcykgd2l0aCAodGhpcy51bmFyeU9wcykgeyByZXR1cm4gJyArIGV4cHJlc3Npb25Ub1N0cmluZyh0aGlzLnNpbXBsaWZ5KHZhcmlhYmxlcykudG9rZW5zLCB0cnVlKSArICc7IH0nKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctZnVuY1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZi5hcHBseShleHByLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIFRFT0YgPSAnVEVPRic7XG4gIHZhciBUT1AgPSAnVE9QJztcbiAgdmFyIFROVU1CRVIgPSAnVE5VTUJFUic7XG4gIHZhciBUU1RSSU5HID0gJ1RTVFJJTkcnO1xuICB2YXIgVFBBUkVOID0gJ1RQQVJFTic7XG4gIHZhciBUQ09NTUEgPSAnVENPTU1BJztcbiAgdmFyIFROQU1FID0gJ1ROQU1FJztcblxuICBmdW5jdGlvbiBUb2tlbih0eXBlLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gIH1cblxuICBUb2tlbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSArICc6ICcgKyB0aGlzLnZhbHVlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFRva2VuU3RyZWFtKHBhcnNlciwgZXhwcmVzc2lvbikge1xuICAgIHRoaXMucG9zID0gMDtcbiAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgIHRoaXMudW5hcnlPcHMgPSBwYXJzZXIudW5hcnlPcHM7XG4gICAgdGhpcy5iaW5hcnlPcHMgPSBwYXJzZXIuYmluYXJ5T3BzO1xuICAgIHRoaXMudGVybmFyeU9wcyA9IHBhcnNlci50ZXJuYXJ5T3BzO1xuICAgIHRoaXMuY29uc3RzID0gcGFyc2VyLmNvbnN0cztcbiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIHRoaXMuc2F2ZWRQb3NpdGlvbiA9IDA7XG4gICAgdGhpcy5zYXZlZEN1cnJlbnQgPSBudWxsO1xuICAgIHRoaXMub3B0aW9ucyA9IHBhcnNlci5vcHRpb25zO1xuICB9XG5cbiAgVG9rZW5TdHJlYW0ucHJvdG90eXBlLm5ld1Rva2VuID0gZnVuY3Rpb24gKHR5cGUsIHZhbHVlLCBwb3MpIHtcbiAgICByZXR1cm4gbmV3IFRva2VuKHR5cGUsIHZhbHVlLCBwb3MgIT0gbnVsbCA/IHBvcyA6IHRoaXMucG9zKTtcbiAgfTtcblxuICBUb2tlblN0cmVhbS5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNhdmVkUG9zaXRpb24gPSB0aGlzLnBvcztcbiAgICB0aGlzLnNhdmVkQ3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgfTtcblxuICBUb2tlblN0cmVhbS5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnBvcyA9IHRoaXMuc2F2ZWRQb3NpdGlvbjtcbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnNhdmVkQ3VycmVudDtcbiAgfTtcblxuICBUb2tlblN0cmVhbS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5leHByZXNzaW9uLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMubmV3VG9rZW4oVEVPRiwgJ0VPRicpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzV2hpdGVzcGFjZSgpIHx8IHRoaXMuaXNDb21tZW50KCkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5leHQoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNSYWRpeEludGVnZXIoKSB8fFxuICAgICAgICB0aGlzLmlzTnVtYmVyKCkgfHxcbiAgICAgICAgdGhpcy5pc09wZXJhdG9yKCkgfHxcbiAgICAgICAgdGhpcy5pc1N0cmluZygpIHx8XG4gICAgICAgIHRoaXMuaXNQYXJlbigpIHx8XG4gICAgICAgIHRoaXMuaXNDb21tYSgpIHx8XG4gICAgICAgIHRoaXMuaXNOYW1lZE9wKCkgfHxcbiAgICAgICAgdGhpcy5pc0NvbnN0KCkgfHxcbiAgICAgICAgdGhpcy5pc05hbWUoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXJzZUVycm9yKCdVbmtub3duIGNoYXJhY3RlciBcIicgKyB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zKSArICdcIicpO1xuICAgIH1cbiAgfTtcblxuICBUb2tlblN0cmVhbS5wcm90b3R5cGUuaXNTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHIgPSBmYWxzZTtcbiAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnBvcztcbiAgICB2YXIgcXVvdGUgPSB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHN0YXJ0UG9zKTtcblxuICAgIGlmIChxdW90ZSA9PT0gJ1xcJycgfHwgcXVvdGUgPT09ICdcIicpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuZXhwcmVzc2lvbi5pbmRleE9mKHF1b3RlLCBzdGFydFBvcyArIDEpO1xuICAgICAgd2hpbGUgKGluZGV4ID49IDAgJiYgdGhpcy5wb3MgPCB0aGlzLmV4cHJlc3Npb24ubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucG9zID0gaW5kZXggKyAxO1xuICAgICAgICBpZiAodGhpcy5leHByZXNzaW9uLmNoYXJBdChpbmRleCAtIDEpICE9PSAnXFxcXCcpIHtcbiAgICAgICAgICB2YXIgcmF3U3RyaW5nID0gdGhpcy5leHByZXNzaW9uLnN1YnN0cmluZyhzdGFydFBvcyArIDEsIGluZGV4KTtcbiAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRTVFJJTkcsIHRoaXMudW5lc2NhcGUocmF3U3RyaW5nKSwgc3RhcnRQb3MpO1xuICAgICAgICAgIHIgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gdGhpcy5leHByZXNzaW9uLmluZGV4T2YocXVvdGUsIGluZGV4ICsgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFRva2VuU3RyZWFtLnByb3RvdHlwZS5pc1BhcmVuID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyk7XG4gICAgaWYgKGMgPT09ICcoJyB8fCBjID09PSAnKScpIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVFBBUkVOLCBjKTtcbiAgICAgIHRoaXMucG9zKys7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIFRva2VuU3RyZWFtLnByb3RvdHlwZS5pc0NvbW1hID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyk7XG4gICAgaWYgKGMgPT09ICcsJykge1xuICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5uZXdUb2tlbihUQ09NTUEsICcsJyk7XG4gICAgICB0aGlzLnBvcysrO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBUb2tlblN0cmVhbS5wcm90b3R5cGUuaXNDb25zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnBvcztcbiAgICB2YXIgaSA9IHN0YXJ0UG9zO1xuICAgIGZvciAoOyBpIDwgdGhpcy5leHByZXNzaW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQoaSk7XG4gICAgICBpZiAoYy50b1VwcGVyQ2FzZSgpID09PSBjLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgaWYgKGkgPT09IHRoaXMucG9zIHx8IChjICE9PSAnXycgJiYgYyAhPT0gJy4nICYmIChjIDwgJzAnIHx8IGMgPiAnOScpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpID4gc3RhcnRQb3MpIHtcbiAgICAgIHZhciBzdHIgPSB0aGlzLmV4cHJlc3Npb24uc3Vic3RyaW5nKHN0YXJ0UG9zLCBpKTtcbiAgICAgIGlmIChzdHIgaW4gdGhpcy5jb25zdHMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5uZXdUb2tlbihUTlVNQkVSLCB0aGlzLmNvbnN0c1tzdHJdKTtcbiAgICAgICAgdGhpcy5wb3MgKz0gc3RyLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBUb2tlblN0cmVhbS5wcm90b3R5cGUuaXNOYW1lZE9wID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGFydFBvcyA9IHRoaXMucG9zO1xuICAgIHZhciBpID0gc3RhcnRQb3M7XG4gICAgZm9yICg7IGkgPCB0aGlzLmV4cHJlc3Npb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdChpKTtcbiAgICAgIGlmIChjLnRvVXBwZXJDYXNlKCkgPT09IGMudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBpZiAoaSA9PT0gdGhpcy5wb3MgfHwgKGMgIT09ICdfJyAmJiAoYyA8ICcwJyB8fCBjID4gJzknKSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA+IHN0YXJ0UG9zKSB7XG4gICAgICB2YXIgc3RyID0gdGhpcy5leHByZXNzaW9uLnN1YnN0cmluZyhzdGFydFBvcywgaSk7XG4gICAgICBpZiAodGhpcy5pc09wZXJhdG9yRW5hYmxlZChzdHIpICYmIChzdHIgaW4gdGhpcy5iaW5hcnlPcHMgfHwgc3RyIGluIHRoaXMudW5hcnlPcHMgfHwgc3RyIGluIHRoaXMudGVybmFyeU9wcykpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5uZXdUb2tlbihUT1AsIHN0cik7XG4gICAgICAgIHRoaXMucG9zICs9IHN0ci5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgVG9rZW5TdHJlYW0ucHJvdG90eXBlLmlzTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnBvcztcbiAgICB2YXIgaSA9IHN0YXJ0UG9zO1xuICAgIHZhciBoYXNMZXR0ZXIgPSBmYWxzZTtcbiAgICBmb3IgKDsgaSA8IHRoaXMuZXhwcmVzc2lvbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSB0aGlzLmV4cHJlc3Npb24uY2hhckF0KGkpO1xuICAgICAgaWYgKGMudG9VcHBlckNhc2UoKSA9PT0gYy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGlmIChpID09PSB0aGlzLnBvcyAmJiAoYyA9PT0gJyQnIHx8IGMgPT09ICdfJykpIHtcbiAgICAgICAgICBpZiAoYyA9PT0gJ18nKSB7XG4gICAgICAgICAgICBoYXNMZXR0ZXIgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpID09PSB0aGlzLnBvcyB8fCAhaGFzTGV0dGVyIHx8IChjICE9PSAnXycgJiYgKGMgPCAnMCcgfHwgYyA+ICc5JykpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc0xldHRlciA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNMZXR0ZXIpIHtcbiAgICAgIHZhciBzdHIgPSB0aGlzLmV4cHJlc3Npb24uc3Vic3RyaW5nKHN0YXJ0UG9zLCBpKTtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE5BTUUsIHN0cik7XG4gICAgICB0aGlzLnBvcyArPSBzdHIubGVuZ3RoO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBUb2tlblN0cmVhbS5wcm90b3R5cGUuaXNXaGl0ZXNwYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByID0gZmFsc2U7XG4gICAgdmFyIGMgPSB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zKTtcbiAgICB3aGlsZSAoYyA9PT0gJyAnIHx8IGMgPT09ICdcXHQnIHx8IGMgPT09ICdcXG4nIHx8IGMgPT09ICdcXHInKSB7XG4gICAgICByID0gdHJ1ZTtcbiAgICAgIHRoaXMucG9zKys7XG4gICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5leHByZXNzaW9uLmxlbmd0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGMgPSB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zKTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgdmFyIGNvZGVQb2ludFBhdHRlcm4gPSAvXlswLTlhLWZdezR9JC9pO1xuXG4gIFRva2VuU3RyZWFtLnByb3RvdHlwZS51bmVzY2FwZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGluZGV4ID0gdi5pbmRleE9mKCdcXFxcJyk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfVxuXG4gICAgdmFyIGJ1ZmZlciA9IHYuc3Vic3RyaW5nKDAsIGluZGV4KTtcbiAgICB3aGlsZSAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIGMgPSB2LmNoYXJBdCgrK2luZGV4KTtcbiAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICBjYXNlICdcXCcnOlxuICAgICAgICAgIGJ1ZmZlciArPSAnXFwnJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgIGJ1ZmZlciArPSAnXCInO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdcXFxcJzpcbiAgICAgICAgICBidWZmZXIgKz0gJ1xcXFwnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICBidWZmZXIgKz0gJy8nO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICBidWZmZXIgKz0gJ1xcYic7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgIGJ1ZmZlciArPSAnXFxmJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgYnVmZmVyICs9ICdcXG4nO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyJzpcbiAgICAgICAgICBidWZmZXIgKz0gJ1xccic7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgIGJ1ZmZlciArPSAnXFx0JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgLy8gaW50ZXJwcmV0IHRoZSBmb2xsb3dpbmcgNCBjaGFyYWN0ZXJzIGFzIHRoZSBoZXggb2YgdGhlIHVuaWNvZGUgY29kZSBwb2ludFxuICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSB2LnN1YnN0cmluZyhpbmRleCArIDEsIGluZGV4ICsgNSk7XG4gICAgICAgICAgaWYgKCFjb2RlUG9pbnRQYXR0ZXJuLnRlc3QoY29kZVBvaW50KSkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZUVycm9yKCdJbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZTogXFxcXHUnICsgY29kZVBvaW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoY29kZVBvaW50LCAxNikpO1xuICAgICAgICAgIGluZGV4ICs9IDQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgdGhpcy5wYXJzZUVycm9yKCdJbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZTogXCJcXFxcJyArIGMgKyAnXCInKTtcbiAgICAgIH1cbiAgICAgICsraW5kZXg7XG4gICAgICB2YXIgYmFja3NsYXNoID0gdi5pbmRleE9mKCdcXFxcJywgaW5kZXgpO1xuICAgICAgYnVmZmVyICs9IHYuc3Vic3RyaW5nKGluZGV4LCBiYWNrc2xhc2ggPCAwID8gdi5sZW5ndGggOiBiYWNrc2xhc2gpO1xuICAgICAgaW5kZXggPSBiYWNrc2xhc2g7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfTtcblxuICBUb2tlblN0cmVhbS5wcm90b3R5cGUuaXNDb21tZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyk7XG4gICAgaWYgKGMgPT09ICcvJyAmJiB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zICsgMSkgPT09ICcqJykge1xuICAgICAgdGhpcy5wb3MgPSB0aGlzLmV4cHJlc3Npb24uaW5kZXhPZignKi8nLCB0aGlzLnBvcykgKyAyO1xuICAgICAgaWYgKHRoaXMucG9zID09PSAxKSB7XG4gICAgICAgIHRoaXMucG9zID0gdGhpcy5leHByZXNzaW9uLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgVG9rZW5TdHJlYW0ucHJvdG90eXBlLmlzUmFkaXhJbnRlZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3MgPSB0aGlzLnBvcztcblxuICAgIGlmIChwb3MgPj0gdGhpcy5leHByZXNzaW9uLmxlbmd0aCAtIDIgfHwgdGhpcy5leHByZXNzaW9uLmNoYXJBdChwb3MpICE9PSAnMCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgKytwb3M7XG5cbiAgICB2YXIgcmFkaXg7XG4gICAgdmFyIHZhbGlkRGlnaXQ7XG4gICAgaWYgKHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQocG9zKSA9PT0gJ3gnKSB7XG4gICAgICByYWRpeCA9IDE2O1xuICAgICAgdmFsaWREaWdpdCA9IC9eWzAtOWEtZl0kL2k7XG4gICAgICArK3BvcztcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQocG9zKSA9PT0gJ2InKSB7XG4gICAgICByYWRpeCA9IDI7XG4gICAgICB2YWxpZERpZ2l0ID0gL15bMDFdJC9pO1xuICAgICAgKytwb3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsaWQgPSBmYWxzZTtcbiAgICB2YXIgc3RhcnRQb3MgPSBwb3M7XG5cbiAgICB3aGlsZSAocG9zIDwgdGhpcy5leHByZXNzaW9uLmxlbmd0aCkge1xuICAgICAgdmFyIGMgPSB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHBvcyk7XG4gICAgICBpZiAodmFsaWREaWdpdC50ZXN0KGMpKSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmFsaWQpIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE5VTUJFUiwgcGFyc2VJbnQodGhpcy5leHByZXNzaW9uLnN1YnN0cmluZyhzdGFydFBvcywgcG9zKSwgcmFkaXgpKTtcbiAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgIH1cbiAgICByZXR1cm4gdmFsaWQ7XG4gIH07XG5cbiAgVG9rZW5TdHJlYW0ucHJvdG90eXBlLmlzTnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuICAgIHZhciBwb3MgPSB0aGlzLnBvcztcbiAgICB2YXIgc3RhcnRQb3MgPSBwb3M7XG4gICAgdmFyIHJlc2V0UG9zID0gcG9zO1xuICAgIHZhciBmb3VuZERvdCA9IGZhbHNlO1xuICAgIHZhciBmb3VuZERpZ2l0cyA9IGZhbHNlO1xuICAgIHZhciBjO1xuXG4gICAgd2hpbGUgKHBvcyA8IHRoaXMuZXhwcmVzc2lvbi5sZW5ndGgpIHtcbiAgICAgIGMgPSB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHBvcyk7XG4gICAgICBpZiAoKGMgPj0gJzAnICYmIGMgPD0gJzknKSB8fCAoIWZvdW5kRG90ICYmIGMgPT09ICcuJykpIHtcbiAgICAgICAgaWYgKGMgPT09ICcuJykge1xuICAgICAgICAgIGZvdW5kRG90ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3VuZERpZ2l0cyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcG9zKys7XG4gICAgICAgIHZhbGlkID0gZm91bmREaWdpdHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmFsaWQpIHtcbiAgICAgIHJlc2V0UG9zID0gcG9zO1xuICAgIH1cblxuICAgIGlmIChjID09PSAnZScgfHwgYyA9PT0gJ0UnKSB7XG4gICAgICBwb3MrKztcbiAgICAgIHZhciBhY2NlcHRTaWduID0gdHJ1ZTtcbiAgICAgIHZhciB2YWxpZEV4cG9uZW50ID0gZmFsc2U7XG4gICAgICB3aGlsZSAocG9zIDwgdGhpcy5leHByZXNzaW9uLmxlbmd0aCkge1xuICAgICAgICBjID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdChwb3MpO1xuICAgICAgICBpZiAoYWNjZXB0U2lnbiAmJiAoYyA9PT0gJysnIHx8IGMgPT09ICctJykpIHtcbiAgICAgICAgICBhY2NlcHRTaWduID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA+PSAnMCcgJiYgYyA8PSAnOScpIHtcbiAgICAgICAgICB2YWxpZEV4cG9uZW50ID0gdHJ1ZTtcbiAgICAgICAgICBhY2NlcHRTaWduID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcG9zKys7XG4gICAgICB9XG5cbiAgICAgIGlmICghdmFsaWRFeHBvbmVudCkge1xuICAgICAgICBwb3MgPSByZXNldFBvcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmFsaWQpIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE5VTUJFUiwgcGFyc2VGbG9hdCh0aGlzLmV4cHJlc3Npb24uc3Vic3RyaW5nKHN0YXJ0UG9zLCBwb3MpKSk7XG4gICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb3MgPSByZXNldFBvcztcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkO1xuICB9O1xuXG4gIFRva2VuU3RyZWFtLnByb3RvdHlwZS5pc09wZXJhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGFydFBvcyA9IHRoaXMucG9zO1xuICAgIHZhciBjID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyk7XG5cbiAgICBpZiAoYyA9PT0gJysnIHx8IGMgPT09ICctJyB8fCBjID09PSAnKicgfHwgYyA9PT0gJy8nIHx8IGMgPT09ICclJyB8fCBjID09PSAnXicgfHwgYyA9PT0gJz8nIHx8IGMgPT09ICc6JyB8fCBjID09PSAnLicpIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCBjKTtcbiAgICB9IGVsc2UgaWYgKGMgPT09ICfiiJknIHx8IGMgPT09ICfigKInKSB7XG4gICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRPUCwgJyonKTtcbiAgICB9IGVsc2UgaWYgKGMgPT09ICc+Jykge1xuICAgICAgaWYgKHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQodGhpcy5wb3MgKyAxKSA9PT0gJz0nKSB7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCAnPj0nKTtcbiAgICAgICAgdGhpcy5wb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCAnPicpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYyA9PT0gJzwnKSB7XG4gICAgICBpZiAodGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyArIDEpID09PSAnPScpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5uZXdUb2tlbihUT1AsICc8PScpO1xuICAgICAgICB0aGlzLnBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5uZXdUb2tlbihUT1AsICc8Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjID09PSAnfCcpIHtcbiAgICAgIGlmICh0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zICsgMSkgPT09ICd8Jykge1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRPUCwgJ3x8Jyk7XG4gICAgICAgIHRoaXMucG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjID09PSAnPScpIHtcbiAgICAgIGlmICh0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zICsgMSkgPT09ICc9Jykge1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRPUCwgJz09Jyk7XG4gICAgICAgIHRoaXMucG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjID09PSAnIScpIHtcbiAgICAgIGlmICh0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zICsgMSkgPT09ICc9Jykge1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRPUCwgJyE9Jyk7XG4gICAgICAgIHRoaXMucG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRPUCwgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5wb3MrKztcblxuICAgIGlmICh0aGlzLmlzT3BlcmF0b3JFbmFibGVkKHRoaXMuY3VycmVudC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBvcyA9IHN0YXJ0UG9zO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb3B0aW9uTmFtZU1hcCA9IHtcbiAgICAnKyc6ICdhZGQnLFxuICAgICctJzogJ3N1YnRyYWN0JyxcbiAgICAnKic6ICdtdWx0aXBseScsXG4gICAgJy8nOiAnZGl2aWRlJyxcbiAgICAnJSc6ICdyZW1haW5kZXInLFxuICAgICdeJzogJ3Bvd2VyJyxcbiAgICAnISc6ICdmYWN0b3JpYWwnLFxuICAgICc8JzogJ2NvbXBhcmlzb24nLFxuICAgICc+JzogJ2NvbXBhcmlzb24nLFxuICAgICc8PSc6ICdjb21wYXJpc29uJyxcbiAgICAnPj0nOiAnY29tcGFyaXNvbicsXG4gICAgJz09JzogJ2NvbXBhcmlzb24nLFxuICAgICchPSc6ICdjb21wYXJpc29uJyxcbiAgICAnfHwnOiAnY29uY2F0ZW5hdGUnLFxuICAgICdhbmQnOiAnbG9naWNhbCcsXG4gICAgJ29yJzogJ2xvZ2ljYWwnLFxuICAgICdub3QnOiAnbG9naWNhbCcsXG4gICAgJz8nOiAnY29uZGl0aW9uYWwnLFxuICAgICc6JzogJ2NvbmRpdGlvbmFsJ1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbk5hbWUob3ApIHtcbiAgICByZXR1cm4gb3B0aW9uTmFtZU1hcC5oYXNPd25Qcm9wZXJ0eShvcCkgPyBvcHRpb25OYW1lTWFwW29wXSA6IG9wO1xuICB9XG5cbiAgVG9rZW5TdHJlYW0ucHJvdG90eXBlLmlzT3BlcmF0b3JFbmFibGVkID0gZnVuY3Rpb24gKG9wKSB7XG4gICAgdmFyIG9wdGlvbk5hbWUgPSBnZXRPcHRpb25OYW1lKG9wKTtcbiAgICB2YXIgb3BlcmF0b3JzID0gdGhpcy5vcHRpb25zLm9wZXJhdG9ycyB8fCB7fTtcblxuICAgIC8vIGluIGlzIGEgc3BlY2lhbCBjYXNlIGZvciBub3cgYmVjYXVzZSBpdCdzIGRpc2FibGVkIGJ5IGRlZmF1bHRcbiAgICBpZiAob3B0aW9uTmFtZSA9PT0gJ2luJykge1xuICAgICAgcmV0dXJuICEhb3BlcmF0b3JzWydpbiddO1xuICAgIH1cblxuICAgIHJldHVybiAhKG9wdGlvbk5hbWUgaW4gb3BlcmF0b3JzKSB8fCAhIW9wZXJhdG9yc1tvcHRpb25OYW1lXTtcbiAgfTtcblxuICBUb2tlblN0cmVhbS5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxpbmUgPSAwO1xuICAgIHZhciBjb2x1bW47XG4gICAgdmFyIG5ld2xpbmUgPSAtMTtcbiAgICBkbyB7XG4gICAgICBsaW5lKys7XG4gICAgICBjb2x1bW4gPSB0aGlzLnBvcyAtIG5ld2xpbmU7XG4gICAgICBuZXdsaW5lID0gdGhpcy5leHByZXNzaW9uLmluZGV4T2YoJ1xcbicsIG5ld2xpbmUgKyAxKTtcbiAgICB9IHdoaWxlIChuZXdsaW5lID49IDAgJiYgbmV3bGluZSA8IHRoaXMucG9zKTtcblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBsaW5lLFxuICAgICAgY29sdW1uOiBjb2x1bW5cbiAgICB9O1xuICB9O1xuXG4gIFRva2VuU3RyZWFtLnByb3RvdHlwZS5wYXJzZUVycm9yID0gZnVuY3Rpb24gKG1zZykge1xuICAgIHZhciBjb29yZHMgPSB0aGlzLmdldENvb3JkaW5hdGVzKCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwYXJzZSBlcnJvciBbJyArIGNvb3Jkcy5saW5lICsgJzonICsgY29vcmRzLmNvbHVtbiArICddOiAnICsgbXNnKTtcbiAgfTtcblxuICBmdW5jdGlvbiBQYXJzZXJTdGF0ZShwYXJzZXIsIHRva2VuU3RyZWFtLCBvcHRpb25zKSB7XG4gICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gICAgdGhpcy50b2tlbnMgPSB0b2tlblN0cmVhbTtcbiAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgIHRoaXMubmV4dFRva2VuID0gbnVsbDtcbiAgICB0aGlzLm5leHQoKTtcbiAgICB0aGlzLnNhdmVkQ3VycmVudCA9IG51bGw7XG4gICAgdGhpcy5zYXZlZE5leHRUb2tlbiA9IG51bGw7XG4gICAgdGhpcy5hbGxvd01lbWJlckFjY2VzcyA9IG9wdGlvbnMuYWxsb3dNZW1iZXJBY2Nlc3MgIT09IGZhbHNlO1xuICB9XG5cbiAgUGFyc2VyU3RhdGUucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5uZXh0VG9rZW47XG4gICAgcmV0dXJuICh0aGlzLm5leHRUb2tlbiA9IHRoaXMudG9rZW5zLm5leHQoKSk7XG4gIH07XG5cbiAgUGFyc2VyU3RhdGUucHJvdG90eXBlLnRva2VuTWF0Y2hlcyA9IGZ1bmN0aW9uICh0b2tlbiwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGNvbnRhaW5zKHZhbHVlLCB0b2tlbi52YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB2YWx1ZSh0b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0b2tlbi52YWx1ZSA9PT0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2F2ZWRDdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgIHRoaXMuc2F2ZWROZXh0VG9rZW4gPSB0aGlzLm5leHRUb2tlbjtcbiAgICB0aGlzLnRva2Vucy5zYXZlKCk7XG4gIH07XG5cbiAgUGFyc2VyU3RhdGUucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50b2tlbnMucmVzdG9yZSgpO1xuICAgIHRoaXMuY3VycmVudCA9IHRoaXMuc2F2ZWRDdXJyZW50O1xuICAgIHRoaXMubmV4dFRva2VuID0gdGhpcy5zYXZlZE5leHRUb2tlbjtcbiAgfTtcblxuICBQYXJzZXJTdGF0ZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMubmV4dFRva2VuLnR5cGUgPT09IHR5cGUgJiYgdGhpcy50b2tlbk1hdGNoZXModGhpcy5uZXh0VG9rZW4sIHZhbHVlKSkge1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5leHBlY3QgPSBmdW5jdGlvbiAodHlwZSwgdmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuYWNjZXB0KHR5cGUsIHZhbHVlKSkge1xuICAgICAgdmFyIGNvb3JkcyA9IHRoaXMudG9rZW5zLmdldENvb3JkaW5hdGVzKCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhcnNlIGVycm9yIFsnICsgY29vcmRzLmxpbmUgKyAnOicgKyBjb29yZHMuY29sdW1uICsgJ106IEV4cGVjdGVkICcgKyAodmFsdWUgfHwgdHlwZSkpO1xuICAgIH1cbiAgfTtcblxuICBQYXJzZXJTdGF0ZS5wcm90b3R5cGUucGFyc2VBdG9tID0gZnVuY3Rpb24gKGluc3RyKSB7XG4gICAgaWYgKHRoaXMuYWNjZXB0KFROQU1FKSkge1xuICAgICAgaW5zdHIucHVzaChuZXcgSW5zdHJ1Y3Rpb24oSVZBUiwgdGhpcy5jdXJyZW50LnZhbHVlKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFjY2VwdChUTlVNQkVSKSkge1xuICAgICAgaW5zdHIucHVzaChuZXcgSW5zdHJ1Y3Rpb24oSU5VTUJFUiwgdGhpcy5jdXJyZW50LnZhbHVlKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFjY2VwdChUU1RSSU5HKSkge1xuICAgICAgaW5zdHIucHVzaChuZXcgSW5zdHJ1Y3Rpb24oSU5VTUJFUiwgdGhpcy5jdXJyZW50LnZhbHVlKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFjY2VwdChUUEFSRU4sICcoJykpIHtcbiAgICAgIHRoaXMucGFyc2VFeHByZXNzaW9uKGluc3RyKTtcbiAgICAgIHRoaXMuZXhwZWN0KFRQQVJFTiwgJyknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmV4cGVjdGVkICcgKyB0aGlzLm5leHRUb2tlbik7XG4gICAgfVxuICB9O1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgICB0aGlzLnBhcnNlQ29uZGl0aW9uYWxFeHByZXNzaW9uKGluc3RyKTtcbiAgfTtcblxuICBQYXJzZXJTdGF0ZS5wcm90b3R5cGUucGFyc2VDb25kaXRpb25hbEV4cHJlc3Npb24gPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgICB0aGlzLnBhcnNlT3JFeHByZXNzaW9uKGluc3RyKTtcbiAgICB3aGlsZSAodGhpcy5hY2NlcHQoVE9QLCAnPycpKSB7XG4gICAgICB2YXIgdHJ1ZUJyYW5jaCA9IFtdO1xuICAgICAgdmFyIGZhbHNlQnJhbmNoID0gW107XG4gICAgICB0aGlzLnBhcnNlQ29uZGl0aW9uYWxFeHByZXNzaW9uKHRydWVCcmFuY2gpO1xuICAgICAgdGhpcy5leHBlY3QoVE9QLCAnOicpO1xuICAgICAgdGhpcy5wYXJzZUNvbmRpdGlvbmFsRXhwcmVzc2lvbihmYWxzZUJyYW5jaCk7XG4gICAgICBpbnN0ci5wdXNoKG5ldyBJbnN0cnVjdGlvbihJRVhQUiwgdHJ1ZUJyYW5jaCkpO1xuICAgICAgaW5zdHIucHVzaChuZXcgSW5zdHJ1Y3Rpb24oSUVYUFIsIGZhbHNlQnJhbmNoKSk7XG4gICAgICBpbnN0ci5wdXNoKHRlcm5hcnlJbnN0cnVjdGlvbignPycpKTtcbiAgICB9XG4gIH07XG5cbiAgUGFyc2VyU3RhdGUucHJvdG90eXBlLnBhcnNlT3JFeHByZXNzaW9uID0gZnVuY3Rpb24gKGluc3RyKSB7XG4gICAgdGhpcy5wYXJzZUFuZEV4cHJlc3Npb24oaW5zdHIpO1xuICAgIHdoaWxlICh0aGlzLmFjY2VwdChUT1AsICdvcicpKSB7XG4gICAgICB2YXIgZmFsc2VCcmFuY2ggPSBbXTtcbiAgICAgIHRoaXMucGFyc2VBbmRFeHByZXNzaW9uKGZhbHNlQnJhbmNoKTtcbiAgICAgIGluc3RyLnB1c2gobmV3IEluc3RydWN0aW9uKElFWFBSLCBmYWxzZUJyYW5jaCkpO1xuICAgICAgaW5zdHIucHVzaChiaW5hcnlJbnN0cnVjdGlvbignb3InKSk7XG4gICAgfVxuICB9O1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUFuZEV4cHJlc3Npb24gPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgICB0aGlzLnBhcnNlQ29tcGFyaXNvbihpbnN0cik7XG4gICAgd2hpbGUgKHRoaXMuYWNjZXB0KFRPUCwgJ2FuZCcpKSB7XG4gICAgICB2YXIgdHJ1ZUJyYW5jaCA9IFtdO1xuICAgICAgdGhpcy5wYXJzZUNvbXBhcmlzb24odHJ1ZUJyYW5jaCk7XG4gICAgICBpbnN0ci5wdXNoKG5ldyBJbnN0cnVjdGlvbihJRVhQUiwgdHJ1ZUJyYW5jaCkpO1xuICAgICAgaW5zdHIucHVzaChiaW5hcnlJbnN0cnVjdGlvbignYW5kJykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgQ09NUEFSSVNPTl9PUEVSQVRPUlMgPSBbJz09JywgJyE9JywgJzwnLCAnPD0nLCAnPj0nLCAnPicsICdpbiddO1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUNvbXBhcmlzb24gPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgICB0aGlzLnBhcnNlQWRkU3ViKGluc3RyKTtcbiAgICB3aGlsZSAodGhpcy5hY2NlcHQoVE9QLCBDT01QQVJJU09OX09QRVJBVE9SUykpIHtcbiAgICAgIHZhciBvcCA9IHRoaXMuY3VycmVudDtcbiAgICAgIHRoaXMucGFyc2VBZGRTdWIoaW5zdHIpO1xuICAgICAgaW5zdHIucHVzaChiaW5hcnlJbnN0cnVjdGlvbihvcC52YWx1ZSkpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgQUREX1NVQl9PUEVSQVRPUlMgPSBbJysnLCAnLScsICd8fCddO1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUFkZFN1YiA9IGZ1bmN0aW9uIChpbnN0cikge1xuICAgIHRoaXMucGFyc2VUZXJtKGluc3RyKTtcbiAgICB3aGlsZSAodGhpcy5hY2NlcHQoVE9QLCBBRERfU1VCX09QRVJBVE9SUykpIHtcbiAgICAgIHZhciBvcCA9IHRoaXMuY3VycmVudDtcbiAgICAgIHRoaXMucGFyc2VUZXJtKGluc3RyKTtcbiAgICAgIGluc3RyLnB1c2goYmluYXJ5SW5zdHJ1Y3Rpb24ob3AudmFsdWUpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIFRFUk1fT1BFUkFUT1JTID0gWycqJywgJy8nLCAnJSddO1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZVRlcm0gPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgICB0aGlzLnBhcnNlRmFjdG9yKGluc3RyKTtcbiAgICB3aGlsZSAodGhpcy5hY2NlcHQoVE9QLCBURVJNX09QRVJBVE9SUykpIHtcbiAgICAgIHZhciBvcCA9IHRoaXMuY3VycmVudDtcbiAgICAgIHRoaXMucGFyc2VGYWN0b3IoaW5zdHIpO1xuICAgICAgaW5zdHIucHVzaChiaW5hcnlJbnN0cnVjdGlvbihvcC52YWx1ZSkpO1xuICAgIH1cbiAgfTtcblxuICBQYXJzZXJTdGF0ZS5wcm90b3R5cGUucGFyc2VGYWN0b3IgPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgICB2YXIgdW5hcnlPcHMgPSB0aGlzLnRva2Vucy51bmFyeU9wcztcbiAgICBmdW5jdGlvbiBpc1ByZWZpeE9wZXJhdG9yKHRva2VuKSB7XG4gICAgICByZXR1cm4gdG9rZW4udmFsdWUgaW4gdW5hcnlPcHM7XG4gICAgfVxuXG4gICAgdGhpcy5zYXZlKCk7XG4gICAgaWYgKHRoaXMuYWNjZXB0KFRPUCwgaXNQcmVmaXhPcGVyYXRvcikpIHtcbiAgICAgIGlmICgodGhpcy5jdXJyZW50LnZhbHVlICE9PSAnLScgJiYgdGhpcy5jdXJyZW50LnZhbHVlICE9PSAnKycgJiYgdGhpcy5uZXh0VG9rZW4udHlwZSA9PT0gVFBBUkVOICYmIHRoaXMubmV4dFRva2VuLnZhbHVlID09PSAnKCcpKSB7XG4gICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgICB0aGlzLnBhcnNlRXhwb25lbnRpYWwoaW5zdHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG9wID0gdGhpcy5jdXJyZW50O1xuICAgICAgICB0aGlzLnBhcnNlRmFjdG9yKGluc3RyKTtcbiAgICAgICAgaW5zdHIucHVzaCh1bmFyeUluc3RydWN0aW9uKG9wLnZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFyc2VFeHBvbmVudGlhbChpbnN0cik7XG4gICAgfVxuICB9O1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUV4cG9uZW50aWFsID0gZnVuY3Rpb24gKGluc3RyKSB7XG4gICAgdGhpcy5wYXJzZVBvc3RmaXhFeHByZXNzaW9uKGluc3RyKTtcbiAgICB3aGlsZSAodGhpcy5hY2NlcHQoVE9QLCAnXicpKSB7XG4gICAgICB0aGlzLnBhcnNlRmFjdG9yKGluc3RyKTtcbiAgICAgIGluc3RyLnB1c2goYmluYXJ5SW5zdHJ1Y3Rpb24oJ14nKSk7XG4gICAgfVxuICB9O1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZVBvc3RmaXhFeHByZXNzaW9uID0gZnVuY3Rpb24gKGluc3RyKSB7XG4gICAgdGhpcy5wYXJzZUZ1bmN0aW9uQ2FsbChpbnN0cik7XG4gICAgd2hpbGUgKHRoaXMuYWNjZXB0KFRPUCwgJyEnKSkge1xuICAgICAgaW5zdHIucHVzaCh1bmFyeUluc3RydWN0aW9uKCchJykpO1xuICAgIH1cbiAgfTtcblxuICBQYXJzZXJTdGF0ZS5wcm90b3R5cGUucGFyc2VGdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgICB2YXIgdW5hcnlPcHMgPSB0aGlzLnRva2Vucy51bmFyeU9wcztcbiAgICBmdW5jdGlvbiBpc1ByZWZpeE9wZXJhdG9yKHRva2VuKSB7XG4gICAgICByZXR1cm4gdG9rZW4udmFsdWUgaW4gdW5hcnlPcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWNjZXB0KFRPUCwgaXNQcmVmaXhPcGVyYXRvcikpIHtcbiAgICAgIHZhciBvcCA9IHRoaXMuY3VycmVudDtcbiAgICAgIHRoaXMucGFyc2VBdG9tKGluc3RyKTtcbiAgICAgIGluc3RyLnB1c2godW5hcnlJbnN0cnVjdGlvbihvcC52YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhcnNlTWVtYmVyRXhwcmVzc2lvbihpbnN0cik7XG4gICAgICB3aGlsZSAodGhpcy5hY2NlcHQoVFBBUkVOLCAnKCcpKSB7XG4gICAgICAgIGlmICh0aGlzLmFjY2VwdChUUEFSRU4sICcpJykpIHtcbiAgICAgICAgICBpbnN0ci5wdXNoKG5ldyBJbnN0cnVjdGlvbihJRlVOQ0FMTCwgMCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBhcmdDb3VudCA9IHRoaXMucGFyc2VBcmd1bWVudExpc3QoaW5zdHIpO1xuICAgICAgICAgIGluc3RyLnB1c2gobmV3IEluc3RydWN0aW9uKElGVU5DQUxMLCBhcmdDb3VudCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUFyZ3VtZW50TGlzdCA9IGZ1bmN0aW9uIChpbnN0cikge1xuICAgIHZhciBhcmdDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoIXRoaXMuYWNjZXB0KFRQQVJFTiwgJyknKSkge1xuICAgICAgdGhpcy5wYXJzZUV4cHJlc3Npb24oaW5zdHIpO1xuICAgICAgKythcmdDb3VudDtcbiAgICAgIHdoaWxlICh0aGlzLmFjY2VwdChUQ09NTUEpKSB7XG4gICAgICAgIHRoaXMucGFyc2VFeHByZXNzaW9uKGluc3RyKTtcbiAgICAgICAgKythcmdDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJnQ291bnQ7XG4gIH07XG5cbiAgUGFyc2VyU3RhdGUucHJvdG90eXBlLnBhcnNlTWVtYmVyRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChpbnN0cikge1xuICAgIHRoaXMucGFyc2VBdG9tKGluc3RyKTtcbiAgICB3aGlsZSAodGhpcy5hY2NlcHQoVE9QLCAnLicpKSB7XG4gICAgICBpZiAoIXRoaXMuYWxsb3dNZW1iZXJBY2Nlc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmV4cGVjdGVkIFwiLlwiLCBtZW1iZXIgYWNjZXNzIGlzIG5vdCBwZXJtaXR0ZWQnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5leHBlY3QoVE5BTUUpO1xuICAgICAgaW5zdHIucHVzaChuZXcgSW5zdHJ1Y3Rpb24oSU1FTUJFUiwgdGhpcy5jdXJyZW50LnZhbHVlKSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGFkZChhLCBiKSB7XG4gICAgcmV0dXJuIE51bWJlcihhKSArIE51bWJlcihiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN1YihhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xuICB9XG5cbiAgZnVuY3Rpb24gbXVsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAqIGI7XG4gIH1cblxuICBmdW5jdGlvbiBkaXYoYSwgYikge1xuICAgIHJldHVybiBhIC8gYjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vZChhLCBiKSB7XG4gICAgcmV0dXJuIGEgJSBiO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uY2F0KGEsIGIpIHtcbiAgICByZXR1cm4gJycgKyBhICsgYjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdEVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPT0gYjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdyZWF0ZXJUaGFuKGEsIGIpIHtcbiAgICByZXR1cm4gYSA+IGI7XG4gIH1cblxuICBmdW5jdGlvbiBsZXNzVGhhbihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiO1xuICB9XG5cbiAgZnVuY3Rpb24gZ3JlYXRlclRoYW5FcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgPj0gYjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlc3NUaGFuRXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhIDw9IGI7XG4gIH1cblxuICBmdW5jdGlvbiBhbmRPcGVyYXRvcihhLCBiKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oYSAmJiBiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9yT3BlcmF0b3IoYSwgYikge1xuICAgIHJldHVybiBCb29sZWFuKGEgfHwgYik7XG4gIH1cblxuICBmdW5jdGlvbiBpbk9wZXJhdG9yKGEsIGIpIHtcbiAgICByZXR1cm4gY29udGFpbnMoYiwgYSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaW5oKGEpIHtcbiAgICByZXR1cm4gKChNYXRoLmV4cChhKSAtIE1hdGguZXhwKC1hKSkgLyAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvc2goYSkge1xuICAgIHJldHVybiAoKE1hdGguZXhwKGEpICsgTWF0aC5leHAoLWEpKSAvIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFuaChhKSB7XG4gICAgaWYgKGEgPT09IEluZmluaXR5KSByZXR1cm4gMTtcbiAgICBpZiAoYSA9PT0gLUluZmluaXR5KSByZXR1cm4gLTE7XG4gICAgcmV0dXJuIChNYXRoLmV4cChhKSAtIE1hdGguZXhwKC1hKSkgLyAoTWF0aC5leHAoYSkgKyBNYXRoLmV4cCgtYSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNpbmgoYSkge1xuICAgIGlmIChhID09PSAtSW5maW5pdHkpIHJldHVybiBhO1xuICAgIHJldHVybiBNYXRoLmxvZyhhICsgTWF0aC5zcXJ0KChhICogYSkgKyAxKSk7XG4gIH1cblxuICBmdW5jdGlvbiBhY29zaChhKSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKGEgKyBNYXRoLnNxcnQoKGEgKiBhKSAtIDEpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0YW5oKGEpIHtcbiAgICByZXR1cm4gKE1hdGgubG9nKCgxICsgYSkgLyAoMSAtIGEpKSAvIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9nMTAoYSkge1xuICAgIHJldHVybiBNYXRoLmxvZyhhKSAqIE1hdGguTE9HMTBFO1xuICB9XG5cbiAgZnVuY3Rpb24gbmVnKGEpIHtcbiAgICByZXR1cm4gLWE7XG4gIH1cblxuICBmdW5jdGlvbiBub3QoYSkge1xuICAgIHJldHVybiAhYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRydW5jKGEpIHtcbiAgICByZXR1cm4gYSA8IDAgPyBNYXRoLmNlaWwoYSkgOiBNYXRoLmZsb29yKGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFuZG9tKGEpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChhIHx8IDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmFjdG9yaWFsKGEpIHsgLy8gYSFcbiAgICByZXR1cm4gZ2FtbWEoYSArIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRmluaXRlKHZhbHVlKSAmJiAodmFsdWUgPT09IE1hdGgucm91bmQodmFsdWUpKTtcbiAgfVxuXG4gIHZhciBHQU1NQV9HID0gNC43NDIxODc1O1xuICB2YXIgR0FNTUFfUCA9IFtcbiAgICAwLjk5OTk5OTk5OTk5OTk5NzA5MTgyLFxuICAgIDU3LjE1NjIzNTY2NTg2MjkyMzUxNywgLTU5LjU5Nzk2MDM1NTQ3NTQ5MTI0OCxcbiAgICAxNC4xMzYwOTc5NzQ3NDE3NDcxNzQsIC0wLjQ5MTkxMzgxNjA5NzYyMDE5OTc4LFxuICAgIDAuMzM5OTQ2NDk5ODQ4MTE4ODg2OTllLTQsXG4gICAgMC40NjUyMzYyODkyNzA0ODU3NTY2NWUtNCwgLTAuOTgzNzQ0NzUzMDQ4Nzk1NjQ2NzdlLTQsXG4gICAgMC4xNTgwODg3MDMyMjQ5MTI0ODg4NGUtMywgLTAuMjEwMjY0NDQxNzI0MTA0ODgzMTllLTMsXG4gICAgMC4yMTc0Mzk2MTgxMTUyMTI2NDMyMGUtMywgLTAuMTY0MzE4MTA2NTM2NzYzODkwMjJlLTMsXG4gICAgMC44NDQxODIyMzk4Mzg1Mjc0MzI5M2UtNCwgLTAuMjYxOTA4Mzg0MDE1ODE0MDg2NzBlLTQsXG4gICAgMC4zNjg5OTE4MjY1OTUzMTYyMjcwNGUtNVxuICBdO1xuXG4gIC8vIEdhbW1hIGZ1bmN0aW9uIGZyb20gbWF0aC5qc1xuICBmdW5jdGlvbiBnYW1tYShuKSB7XG4gICAgdmFyIHQsIHg7XG5cbiAgICBpZiAoaXNJbnRlZ2VyKG4pKSB7XG4gICAgICBpZiAobiA8PSAwKSB7XG4gICAgICAgIHJldHVybiBpc0Zpbml0ZShuKSA/IEluZmluaXR5IDogTmFOO1xuICAgICAgfVxuXG4gICAgICBpZiAobiA+IDE3MSkge1xuICAgICAgICByZXR1cm4gSW5maW5pdHk7IC8vIFdpbGwgb3ZlcmZsb3dcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gbiAtIDI7XG4gICAgICB2YXIgcmVzID0gbiAtIDE7XG4gICAgICB3aGlsZSAodmFsdWUgPiAxKSB7XG4gICAgICAgIHJlcyAqPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUtLTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlcyA9PT0gMCkge1xuICAgICAgICByZXMgPSAxOyAvLyAwISBpcyBwZXIgZGVmaW5pdGlvbiAxXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKG4gPCAwLjUpIHtcbiAgICAgIHJldHVybiBNYXRoLlBJIC8gKE1hdGguc2luKE1hdGguUEkgKiBuKSAqIGdhbW1hKDEgLSBuKSk7XG4gICAgfVxuXG4gICAgaWYgKG4gPj0gMTcxLjM1KSB7XG4gICAgICByZXR1cm4gSW5maW5pdHk7IC8vIHdpbGwgb3ZlcmZsb3dcbiAgICB9XG5cbiAgICBpZiAobiA+IDg1LjApIHsgLy8gRXh0ZW5kZWQgU3RpcmxpbmcgQXBwcm94XG4gICAgICB2YXIgdHdvTiA9IG4gKiBuO1xuICAgICAgdmFyIHRocmVlTiA9IHR3b04gKiBuO1xuICAgICAgdmFyIGZvdXJOID0gdGhyZWVOICogbjtcbiAgICAgIHZhciBmaXZlTiA9IGZvdXJOICogbjtcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoMiAqIE1hdGguUEkgLyBuKSAqIE1hdGgucG93KChuIC8gTWF0aC5FKSwgbikgKlxuICAgICAgICAoMSArICgxIC8gKDEyICogbikpICsgKDEgLyAoMjg4ICogdHdvTikpIC0gKDEzOSAvICg1MTg0MCAqIHRocmVlTikpIC1cbiAgICAgICAgKDU3MSAvICgyNDg4MzIwICogZm91ck4pKSArICgxNjM4NzkgLyAoMjA5MDE4ODgwICogZml2ZU4pKSArXG4gICAgICAgICg1MjQ2ODE5IC8gKDc1MjQ2Nzk2ODAwICogZml2ZU4gKiBuKSkpO1xuICAgIH1cblxuICAgIC0tbjtcbiAgICB4ID0gR0FNTUFfUFswXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IEdBTU1BX1AubGVuZ3RoOyArK2kpIHtcbiAgICAgIHggKz0gR0FNTUFfUFtpXSAvIChuICsgaSk7XG4gICAgfVxuXG4gICAgdCA9IG4gKyBHQU1NQV9HICsgMC41O1xuICAgIHJldHVybiBNYXRoLnNxcnQoMiAqIE1hdGguUEkpICogTWF0aC5wb3codCwgbiArIDAuNSkgKiBNYXRoLmV4cCgtdCkgKiB4O1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyaW5nTGVuZ3RoKHMpIHtcbiAgICByZXR1cm4gU3RyaW5nKHMpLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGh5cG90KCkge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGFyZyA9IE1hdGguYWJzKGFyZ3VtZW50c1tpXSk7XG4gICAgICB2YXIgZGl2O1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gKHN1bSAqIGRpdiAqIGRpdikgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdW0gKz0gYXJnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmRpdGlvbihjb25kLCB5ZXAsIG5vcGUpIHtcbiAgICByZXR1cm4gY29uZCA/IHllcCA6IG5vcGU7XG4gIH1cblxuICAvKipcbiAgKiBEZWNpbWFsIGFkanVzdG1lbnQgb2YgYSBudW1iZXIuXG4gICogRnJvbSBAZXNjb3BlY3ouXG4gICpcbiAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgVGhlIG51bWJlci5cbiAgKiBAcGFyYW0ge0ludGVnZXJ9IGV4cCAgVGhlIGV4cG9uZW50ICh0aGUgMTAgbG9nYXJpdGhtIG9mIHRoZSBhZGp1c3RtZW50IGJhc2UpLlxuICAqIEByZXR1cm4ge051bWJlcn0gVGhlIGFkanVzdGVkIHZhbHVlLlxuICAqL1xuICBmdW5jdGlvbiByb3VuZFRvKHZhbHVlLCBleHApIHtcbiAgICAvLyBJZiB0aGUgZXhwIGlzIHVuZGVmaW5lZCBvciB6ZXJvLi4uXG4gICAgaWYgKHR5cGVvZiBleHAgPT09ICd1bmRlZmluZWQnIHx8ICtleHAgPT09IDApIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICB9XG4gICAgdmFsdWUgPSArdmFsdWU7XG4gICAgZXhwID0gLSgrZXhwKTtcbiAgICAvLyBJZiB0aGUgdmFsdWUgaXMgbm90IGEgbnVtYmVyIG9yIHRoZSBleHAgaXMgbm90IGFuIGludGVnZXIuLi5cbiAgICBpZiAoaXNOYU4odmFsdWUpIHx8ICEodHlwZW9mIGV4cCA9PT0gJ251bWJlcicgJiYgZXhwICUgMSA9PT0gMCkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIC8vIFNoaWZ0XG4gICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnNwbGl0KCdlJyk7XG4gICAgdmFsdWUgPSBNYXRoLnJvdW5kKCsodmFsdWVbMF0gKyAnZScgKyAodmFsdWVbMV0gPyAoK3ZhbHVlWzFdIC0gZXhwKSA6IC1leHApKSk7XG4gICAgLy8gU2hpZnQgYmFja1xuICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdCgnZScpO1xuICAgIHJldHVybiArKHZhbHVlWzBdICsgJ2UnICsgKHZhbHVlWzFdID8gKCt2YWx1ZVsxXSArIGV4cCkgOiBleHApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFBhcnNlcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLnVuYXJ5T3BzID0ge1xuICAgICAgc2luOiBNYXRoLnNpbixcbiAgICAgIGNvczogTWF0aC5jb3MsXG4gICAgICB0YW46IE1hdGgudGFuLFxuICAgICAgYXNpbjogTWF0aC5hc2luLFxuICAgICAgYWNvczogTWF0aC5hY29zLFxuICAgICAgYXRhbjogTWF0aC5hdGFuLFxuICAgICAgc2luaDogTWF0aC5zaW5oIHx8IHNpbmgsXG4gICAgICBjb3NoOiBNYXRoLmNvc2ggfHwgY29zaCxcbiAgICAgIHRhbmg6IE1hdGgudGFuaCB8fCB0YW5oLFxuICAgICAgYXNpbmg6IE1hdGguYXNpbmggfHwgYXNpbmgsXG4gICAgICBhY29zaDogTWF0aC5hY29zaCB8fCBhY29zaCxcbiAgICAgIGF0YW5oOiBNYXRoLmF0YW5oIHx8IGF0YW5oLFxuICAgICAgc3FydDogTWF0aC5zcXJ0LFxuICAgICAgbG9nOiBNYXRoLmxvZyxcbiAgICAgIGxuOiBNYXRoLmxvZyxcbiAgICAgIGxnOiBNYXRoLmxvZzEwIHx8IGxvZzEwLFxuICAgICAgbG9nMTA6IE1hdGgubG9nMTAgfHwgbG9nMTAsXG4gICAgICBhYnM6IE1hdGguYWJzLFxuICAgICAgY2VpbDogTWF0aC5jZWlsLFxuICAgICAgZmxvb3I6IE1hdGguZmxvb3IsXG4gICAgICByb3VuZDogTWF0aC5yb3VuZCxcbiAgICAgIHRydW5jOiBNYXRoLnRydW5jIHx8IHRydW5jLFxuICAgICAgJy0nOiBuZWcsXG4gICAgICAnKyc6IE51bWJlcixcbiAgICAgIGV4cDogTWF0aC5leHAsXG4gICAgICBub3Q6IG5vdCxcbiAgICAgIGxlbmd0aDogc3RyaW5nTGVuZ3RoLFxuICAgICAgJyEnOiBmYWN0b3JpYWxcbiAgICB9O1xuXG4gICAgdGhpcy5iaW5hcnlPcHMgPSB7XG4gICAgICAnKyc6IGFkZCxcbiAgICAgICctJzogc3ViLFxuICAgICAgJyonOiBtdWwsXG4gICAgICAnLyc6IGRpdixcbiAgICAgICclJzogbW9kLFxuICAgICAgJ14nOiBNYXRoLnBvdyxcbiAgICAgICd8fCc6IGNvbmNhdCxcbiAgICAgICc9PSc6IGVxdWFsLFxuICAgICAgJyE9Jzogbm90RXF1YWwsXG4gICAgICAnPic6IGdyZWF0ZXJUaGFuLFxuICAgICAgJzwnOiBsZXNzVGhhbixcbiAgICAgICc+PSc6IGdyZWF0ZXJUaGFuRXF1YWwsXG4gICAgICAnPD0nOiBsZXNzVGhhbkVxdWFsLFxuICAgICAgYW5kOiBhbmRPcGVyYXRvcixcbiAgICAgIG9yOiBvck9wZXJhdG9yLFxuICAgICAgJ2luJzogaW5PcGVyYXRvclxuICAgIH07XG5cbiAgICB0aGlzLnRlcm5hcnlPcHMgPSB7XG4gICAgICAnPyc6IGNvbmRpdGlvblxuICAgIH07XG5cbiAgICB0aGlzLmZ1bmN0aW9ucyA9IHtcbiAgICAgIHJhbmRvbTogcmFuZG9tLFxuICAgICAgZmFjOiBmYWN0b3JpYWwsXG4gICAgICBtaW46IE1hdGgubWluLFxuICAgICAgbWF4OiBNYXRoLm1heCxcbiAgICAgIGh5cG90OiBNYXRoLmh5cG90IHx8IGh5cG90LFxuICAgICAgcHl0OiBNYXRoLmh5cG90IHx8IGh5cG90LCAvLyBiYWNrd2FyZCBjb21wYXRcbiAgICAgIHBvdzogTWF0aC5wb3csXG4gICAgICBhdGFuMjogTWF0aC5hdGFuMixcbiAgICAgICdpZic6IGNvbmRpdGlvbixcbiAgICAgIGdhbW1hOiBnYW1tYSxcbiAgICAgIHJvdW5kVG86IHJvdW5kVG9cbiAgICB9O1xuXG4gICAgdGhpcy5jb25zdHMgPSB7XG4gICAgICBFOiBNYXRoLkUsXG4gICAgICBQSTogTWF0aC5QSSxcbiAgICAgICd0cnVlJzogdHJ1ZSxcbiAgICAgICdmYWxzZSc6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIFBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoZXhwcikge1xuICAgIHZhciBpbnN0ciA9IFtdO1xuICAgIHZhciBwYXJzZXJTdGF0ZSA9IG5ldyBQYXJzZXJTdGF0ZShcbiAgICAgIHRoaXMsXG4gICAgICBuZXcgVG9rZW5TdHJlYW0odGhpcywgZXhwciksXG4gICAgICB7IGFsbG93TWVtYmVyQWNjZXNzOiB0aGlzLm9wdGlvbnMuYWxsb3dNZW1iZXJBY2Nlc3MgfVxuICAgICk7XG5cbiAgICBwYXJzZXJTdGF0ZS5wYXJzZUV4cHJlc3Npb24oaW5zdHIpO1xuICAgIHBhcnNlclN0YXRlLmV4cGVjdChURU9GLCAnRU9GJyk7XG5cbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb24oaW5zdHIsIHRoaXMpO1xuICB9O1xuXG4gIFBhcnNlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiAoZXhwciwgdmFyaWFibGVzKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2UoZXhwcikuZXZhbHVhdGUodmFyaWFibGVzKTtcbiAgfTtcblxuICB2YXIgc2hhcmVkUGFyc2VyID0gbmV3IFBhcnNlcigpO1xuXG4gIFBhcnNlci5wYXJzZSA9IGZ1bmN0aW9uIChleHByKSB7XG4gICAgcmV0dXJuIHNoYXJlZFBhcnNlci5wYXJzZShleHByKTtcbiAgfTtcblxuICBQYXJzZXIuZXZhbHVhdGUgPSBmdW5jdGlvbiAoZXhwciwgdmFyaWFibGVzKSB7XG4gICAgcmV0dXJuIHNoYXJlZFBhcnNlci5wYXJzZShleHByKS5ldmFsdWF0ZSh2YXJpYWJsZXMpO1xuICB9O1xuXG4gIC8qIVxuICAgQmFzZWQgb24gbmRlZi5wYXJzZXIsIGJ5IFJhcGhhZWwgR3JhZihyQHVuZGVmaW5lZC5jaClcbiAgIGh0dHA6Ly93d3cudW5kZWZpbmVkLmNoL21wYXJzZXIvaW5kZXguaHRtbFxuXG4gICBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBhbmQgbW9kaWZpZWQgYnkgTWF0dGhldyBDcnVtbGV5IChlbWFpbEBtYXR0aGV3Y3J1bWxleS5jb20sIGh0dHA6Ly9zaWxlbnRtYXR0LmNvbS8pXG5cbiAgIFlvdSBhcmUgZnJlZSB0byB1c2UgYW5kIG1vZGlmeSB0aGlzIGNvZGUgaW4gYW55d2F5IHlvdSBmaW5kIHVzZWZ1bC4gUGxlYXNlIGxlYXZlIHRoaXMgY29tbWVudCBpbiB0aGUgY29kZVxuICAgdG8gYWNrbm93bGVkZ2UgaXRzIG9yaWdpbmFsIHNvdXJjZS4gSWYgeW91IGZlZWwgbGlrZSBpdCwgSSBlbmpveSBoZWFyaW5nIGFib3V0IHByb2plY3RzIHRoYXQgdXNlIG15IGNvZGUsXG4gICBidXQgZG9uJ3QgZmVlbCBsaWtlIHlvdSBoYXZlIHRvIGxldCBtZSBrbm93IG9yIGFzayBwZXJtaXNzaW9uLlxuICAqL1xuXG4gIHZhciBpbmRleCA9IHtcbiAgICBQYXJzZXI6IFBhcnNlcixcbiAgICBFeHByZXNzaW9uOiBFeHByZXNzaW9uXG4gIH07XG5cbiAgcmV0dXJuIGluZGV4O1xuXG59KSkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW5nSGFuZGxlcjtcblxuZnVuY3Rpb24gQ29sbGVjdGluZ0hhbmRsZXIoY2JzKSB7XG4gICAgdGhpcy5fY2JzID0gY2JzIHx8IHt9O1xuICAgIHRoaXMuZXZlbnRzID0gW107XG59XG5cbnZhciBFVkVOVFMgPSByZXF1aXJlKFwiLi9cIikuRVZFTlRTO1xuT2JqZWN0LmtleXMoRVZFTlRTKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoRVZFTlRTW25hbWVdID09PSAwKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBDb2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2goW25hbWVdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXSgpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoRVZFTlRTW25hbWVdID09PSAxKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBDb2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKFtuYW1lLCBhXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzW25hbWVdKSB0aGlzLl9jYnNbbmFtZV0oYSk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChFVkVOVFNbbmFtZV0gPT09IDIpIHtcbiAgICAgICAgbmFtZSA9IFwib25cIiArIG5hbWU7XG4gICAgICAgIENvbGxlY3RpbmdIYW5kbGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2goW25hbWUsIGEsIGJdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXShhLCBiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHNcIik7XG4gICAgfVxufSk7XG5cbkNvbGxlY3RpbmdIYW5kbGVyLnByb3RvdHlwZS5vbnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5ldmVudHMgPSBbXTtcbiAgICBpZiAodGhpcy5fY2JzLm9ucmVzZXQpIHRoaXMuX2Nicy5vbnJlc2V0KCk7XG59O1xuXG5Db2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYnMub25yZXNldCkgdGhpcy5fY2JzLm9ucmVzZXQoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmV2ZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAodGhpcy5fY2JzW3RoaXMuZXZlbnRzW2ldWzBdXSkge1xuICAgICAgICAgICAgdmFyIG51bSA9IHRoaXMuZXZlbnRzW2ldLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKG51bSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nic1t0aGlzLmV2ZW50c1tpXVswXV0oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtID09PSAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2JzW3RoaXMuZXZlbnRzW2ldWzBdXSh0aGlzLmV2ZW50c1tpXVsxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nic1t0aGlzLmV2ZW50c1tpXVswXV0oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzW2ldWzFdLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50c1tpXVsyXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwidmFyIERvbUhhbmRsZXIgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbnZhciBEb21VdGlscyA9IHJlcXVpcmUoXCJkb211dGlsc1wiKTtcblxuLy9UT0RPOiBtYWtlIHRoaXMgYSBzdHJlYW1hYmxlIGhhbmRsZXJcbmZ1bmN0aW9uIEZlZWRIYW5kbGVyKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgdGhpcy5pbml0KGNhbGxiYWNrLCBvcHRpb25zKTtcbn1cblxucmVxdWlyZShcImluaGVyaXRzXCIpKEZlZWRIYW5kbGVyLCBEb21IYW5kbGVyKTtcblxuRmVlZEhhbmRsZXIucHJvdG90eXBlLmluaXQgPSBEb21IYW5kbGVyO1xuXG5mdW5jdGlvbiBnZXRFbGVtZW50cyh3aGF0LCB3aGVyZSkge1xuICAgIHJldHVybiBEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh3aGF0LCB3aGVyZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBnZXRPbmVFbGVtZW50KHdoYXQsIHdoZXJlKSB7XG4gICAgcmV0dXJuIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHdoYXQsIHdoZXJlLCB0cnVlLCAxKVswXTtcbn1cbmZ1bmN0aW9uIGZldGNoKHdoYXQsIHdoZXJlLCByZWN1cnNlKSB7XG4gICAgcmV0dXJuIERvbVV0aWxzLmdldFRleHQoXG4gICAgICAgIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHdoYXQsIHdoZXJlLCByZWN1cnNlLCAxKVxuICAgICkudHJpbSgpO1xufVxuXG5mdW5jdGlvbiBhZGRDb25kaXRpb25hbGx5KG9iaiwgcHJvcCwgd2hhdCwgd2hlcmUsIHJlY3Vyc2UpIHtcbiAgICB2YXIgdG1wID0gZmV0Y2god2hhdCwgd2hlcmUsIHJlY3Vyc2UpO1xuICAgIGlmICh0bXApIG9ialtwcm9wXSA9IHRtcDtcbn1cblxudmFyIGlzVmFsaWRGZWVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IFwicnNzXCIgfHwgdmFsdWUgPT09IFwiZmVlZFwiIHx8IHZhbHVlID09PSBcInJkZjpSREZcIjtcbn07XG5cbkZlZWRIYW5kbGVyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmZWVkID0ge30sXG4gICAgICAgIGZlZWRSb290ID0gZ2V0T25lRWxlbWVudChpc1ZhbGlkRmVlZCwgdGhpcy5kb20pLFxuICAgICAgICB0bXAsXG4gICAgICAgIGNoaWxkcztcblxuICAgIGlmIChmZWVkUm9vdCkge1xuICAgICAgICBpZiAoZmVlZFJvb3QubmFtZSA9PT0gXCJmZWVkXCIpIHtcbiAgICAgICAgICAgIGNoaWxkcyA9IGZlZWRSb290LmNoaWxkcmVuO1xuXG4gICAgICAgICAgICBmZWVkLnR5cGUgPSBcImF0b21cIjtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJpZFwiLCBcImlkXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICh0bXAgPSBnZXRPbmVFbGVtZW50KFwibGlua1wiLCBjaGlsZHMpKSAmJlxuICAgICAgICAgICAgICAgICh0bXAgPSB0bXAuYXR0cmlicykgJiZcbiAgICAgICAgICAgICAgICAodG1wID0gdG1wLmhyZWYpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgZmVlZC5saW5rID0gdG1wO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImRlc2NyaXB0aW9uXCIsIFwic3VidGl0bGVcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGlmICgodG1wID0gZmV0Y2goXCJ1cGRhdGVkXCIsIGNoaWxkcykpKSBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh0bXApO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcImVtYWlsXCIsIGNoaWxkcywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZlZWQuaXRlbXMgPSBnZXRFbGVtZW50cyhcImVudHJ5XCIsIGNoaWxkcykubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgdG1wO1xuXG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW0uY2hpbGRyZW47XG5cbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiaWRcIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHRtcCA9IGdldE9uZUVsZW1lbnQoXCJsaW5rXCIsIGl0ZW0pKSAmJlxuICAgICAgICAgICAgICAgICAgICAodG1wID0gdG1wLmF0dHJpYnMpICYmXG4gICAgICAgICAgICAgICAgICAgICh0bXAgPSB0bXAuaHJlZilcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmxpbmsgPSB0bXA7XG4gICAgICAgICAgICAgICAgaWYgKCh0bXAgPSBmZXRjaChcInN1bW1hcnlcIiwgaXRlbSkgfHwgZmV0Y2goXCJjb250ZW50XCIsIGl0ZW0pKSlcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZGVzY3JpcHRpb24gPSB0bXA7XG4gICAgICAgICAgICAgICAgaWYgKCh0bXAgPSBmZXRjaChcInVwZGF0ZWRcIiwgaXRlbSkpKVxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUodG1wKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkcyA9IGdldE9uZUVsZW1lbnQoXCJjaGFubmVsXCIsIGZlZWRSb290LmNoaWxkcmVuKS5jaGlsZHJlbjtcblxuICAgICAgICAgICAgZmVlZC50eXBlID0gZmVlZFJvb3QubmFtZS5zdWJzdHIoMCwgMyk7XG4gICAgICAgICAgICBmZWVkLmlkID0gXCJcIjtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwibGlua1wiLCBcImxpbmtcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcImRlc2NyaXB0aW9uXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBpZiAoKHRtcCA9IGZldGNoKFwibGFzdEJ1aWxkRGF0ZVwiLCBjaGlsZHMpKSlcbiAgICAgICAgICAgICAgICBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh0bXApO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcIm1hbmFnaW5nRWRpdG9yXCIsIGNoaWxkcywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZlZWQuaXRlbXMgPSBnZXRFbGVtZW50cyhcIml0ZW1cIiwgZmVlZFJvb3QuY2hpbGRyZW4pLm1hcChmdW5jdGlvbihcbiAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgdG1wO1xuXG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW0uY2hpbGRyZW47XG5cbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiZ3VpZFwiLCBpdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcInRpdGxlXCIsIFwidGl0bGVcIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJsaW5rXCIsIFwibGlua1wiLCBpdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImRlc2NyaXB0aW9uXCIsIFwiZGVzY3JpcHRpb25cIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgaWYgKCh0bXAgPSBmZXRjaChcInB1YkRhdGVcIiwgaXRlbSkpKVxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUodG1wKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRvbSA9IGZlZWQ7XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUuX2hhbmRsZUNhbGxiYWNrLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGZlZWRSb290ID8gbnVsbCA6IEVycm9yKFwiY291bGRuJ3QgZmluZCByb290IG9mIGZlZWRcIilcbiAgICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGZWVkSGFuZGxlcjtcbiIsInZhciBUb2tlbml6ZXIgPSByZXF1aXJlKFwiLi9Ub2tlbml6ZXIuanNcIik7XG5cbi8qXG5cdE9wdGlvbnM6XG5cblx0eG1sTW9kZTogRGlzYWJsZXMgdGhlIHNwZWNpYWwgYmVoYXZpb3IgZm9yIHNjcmlwdC9zdHlsZSB0YWdzIChmYWxzZSBieSBkZWZhdWx0KVxuXHRsb3dlckNhc2VBdHRyaWJ1dGVOYW1lczogY2FsbCAudG9Mb3dlckNhc2UgZm9yIGVhY2ggYXR0cmlidXRlIG5hbWUgKHRydWUgaWYgeG1sTW9kZSBpcyBgZmFsc2VgKVxuXHRsb3dlckNhc2VUYWdzOiBjYWxsIC50b0xvd2VyQ2FzZSBmb3IgZWFjaCB0YWcgbmFtZSAodHJ1ZSBpZiB4bWxNb2RlIGlzIGBmYWxzZWApXG4qL1xuXG4vKlxuXHRDYWxsYmFja3M6XG5cblx0b25jZGF0YWVuZCxcblx0b25jZGF0YXN0YXJ0LFxuXHRvbmNsb3NldGFnLFxuXHRvbmNvbW1lbnQsXG5cdG9uY29tbWVudGVuZCxcblx0b25lcnJvcixcblx0b25vcGVudGFnLFxuXHRvbnByb2Nlc3NpbmdpbnN0cnVjdGlvbixcblx0b25yZXNldCxcblx0b250ZXh0XG4qL1xuXG52YXIgZm9ybVRhZ3MgPSB7XG4gICAgaW5wdXQ6IHRydWUsXG4gICAgb3B0aW9uOiB0cnVlLFxuICAgIG9wdGdyb3VwOiB0cnVlLFxuICAgIHNlbGVjdDogdHJ1ZSxcbiAgICBidXR0b246IHRydWUsXG4gICAgZGF0YWxpc3Q6IHRydWUsXG4gICAgdGV4dGFyZWE6IHRydWVcbn07XG5cbnZhciBvcGVuSW1wbGllc0Nsb3NlID0ge1xuICAgIHRyOiB7IHRyOiB0cnVlLCB0aDogdHJ1ZSwgdGQ6IHRydWUgfSxcbiAgICB0aDogeyB0aDogdHJ1ZSB9LFxuICAgIHRkOiB7IHRoZWFkOiB0cnVlLCB0aDogdHJ1ZSwgdGQ6IHRydWUgfSxcbiAgICBib2R5OiB7IGhlYWQ6IHRydWUsIGxpbms6IHRydWUsIHNjcmlwdDogdHJ1ZSB9LFxuICAgIGxpOiB7IGxpOiB0cnVlIH0sXG4gICAgcDogeyBwOiB0cnVlIH0sXG4gICAgaDE6IHsgcDogdHJ1ZSB9LFxuICAgIGgyOiB7IHA6IHRydWUgfSxcbiAgICBoMzogeyBwOiB0cnVlIH0sXG4gICAgaDQ6IHsgcDogdHJ1ZSB9LFxuICAgIGg1OiB7IHA6IHRydWUgfSxcbiAgICBoNjogeyBwOiB0cnVlIH0sXG4gICAgc2VsZWN0OiBmb3JtVGFncyxcbiAgICBpbnB1dDogZm9ybVRhZ3MsXG4gICAgb3V0cHV0OiBmb3JtVGFncyxcbiAgICBidXR0b246IGZvcm1UYWdzLFxuICAgIGRhdGFsaXN0OiBmb3JtVGFncyxcbiAgICB0ZXh0YXJlYTogZm9ybVRhZ3MsXG4gICAgb3B0aW9uOiB7IG9wdGlvbjogdHJ1ZSB9LFxuICAgIG9wdGdyb3VwOiB7IG9wdGdyb3VwOiB0cnVlIH1cbn07XG5cbnZhciB2b2lkRWxlbWVudHMgPSB7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIGFyZWE6IHRydWUsXG4gICAgYmFzZTogdHJ1ZSxcbiAgICBiYXNlZm9udDogdHJ1ZSxcbiAgICBicjogdHJ1ZSxcbiAgICBjb2w6IHRydWUsXG4gICAgY29tbWFuZDogdHJ1ZSxcbiAgICBlbWJlZDogdHJ1ZSxcbiAgICBmcmFtZTogdHJ1ZSxcbiAgICBocjogdHJ1ZSxcbiAgICBpbWc6IHRydWUsXG4gICAgaW5wdXQ6IHRydWUsXG4gICAgaXNpbmRleDogdHJ1ZSxcbiAgICBrZXlnZW46IHRydWUsXG4gICAgbGluazogdHJ1ZSxcbiAgICBtZXRhOiB0cnVlLFxuICAgIHBhcmFtOiB0cnVlLFxuICAgIHNvdXJjZTogdHJ1ZSxcbiAgICB0cmFjazogdHJ1ZSxcbiAgICB3YnI6IHRydWVcbn07XG5cbnZhciBmb3JlaWduQ29udGV4dEVsZW1lbnRzID0ge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBtYXRoOiB0cnVlLFxuICAgIHN2ZzogdHJ1ZVxufTtcbnZhciBodG1sSW50ZWdyYXRpb25FbGVtZW50cyA9IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgbWk6IHRydWUsXG4gICAgbW86IHRydWUsXG4gICAgbW46IHRydWUsXG4gICAgbXM6IHRydWUsXG4gICAgbXRleHQ6IHRydWUsXG4gICAgXCJhbm5vdGF0aW9uLXhtbFwiOiB0cnVlLFxuICAgIGZvcmVpZ25PYmplY3Q6IHRydWUsXG4gICAgZGVzYzogdHJ1ZSxcbiAgICB0aXRsZTogdHJ1ZVxufTtcblxudmFyIHJlX25hbWVFbmQgPSAvXFxzfFxcLy87XG5cbmZ1bmN0aW9uIFBhcnNlcihjYnMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLl9jYnMgPSBjYnMgfHwge307XG5cbiAgICB0aGlzLl90YWduYW1lID0gXCJcIjtcbiAgICB0aGlzLl9hdHRyaWJuYW1lID0gXCJcIjtcbiAgICB0aGlzLl9hdHRyaWJ2YWx1ZSA9IFwiXCI7XG4gICAgdGhpcy5fYXR0cmlicyA9IG51bGw7XG4gICAgdGhpcy5fc3RhY2sgPSBbXTtcbiAgICB0aGlzLl9mb3JlaWduQ29udGV4dCA9IFtdO1xuXG4gICAgdGhpcy5zdGFydEluZGV4ID0gMDtcbiAgICB0aGlzLmVuZEluZGV4ID0gbnVsbDtcblxuICAgIHRoaXMuX2xvd2VyQ2FzZVRhZ05hbWVzID1cbiAgICAgICAgXCJsb3dlckNhc2VUYWdzXCIgaW4gdGhpcy5fb3B0aW9uc1xuICAgICAgICAgICAgPyAhIXRoaXMuX29wdGlvbnMubG93ZXJDYXNlVGFnc1xuICAgICAgICAgICAgOiAhdGhpcy5fb3B0aW9ucy54bWxNb2RlO1xuICAgIHRoaXMuX2xvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzID1cbiAgICAgICAgXCJsb3dlckNhc2VBdHRyaWJ1dGVOYW1lc1wiIGluIHRoaXMuX29wdGlvbnNcbiAgICAgICAgICAgID8gISF0aGlzLl9vcHRpb25zLmxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzXG4gICAgICAgICAgICA6ICF0aGlzLl9vcHRpb25zLnhtbE1vZGU7XG5cbiAgICBpZiAodGhpcy5fb3B0aW9ucy5Ub2tlbml6ZXIpIHtcbiAgICAgICAgVG9rZW5pemVyID0gdGhpcy5fb3B0aW9ucy5Ub2tlbml6ZXI7XG4gICAgfVxuICAgIHRoaXMuX3Rva2VuaXplciA9IG5ldyBUb2tlbml6ZXIodGhpcy5fb3B0aW9ucywgdGhpcyk7XG5cbiAgICBpZiAodGhpcy5fY2JzLm9ucGFyc2VyaW5pdCkgdGhpcy5fY2JzLm9ucGFyc2VyaW5pdCh0aGlzKTtcbn1cblxucmVxdWlyZShcImluaGVyaXRzXCIpKFBhcnNlciwgcmVxdWlyZShcImV2ZW50c1wiKS5FdmVudEVtaXR0ZXIpO1xuXG5QYXJzZXIucHJvdG90eXBlLl91cGRhdGVQb3NpdGlvbiA9IGZ1bmN0aW9uKGluaXRpYWxPZmZzZXQpIHtcbiAgICBpZiAodGhpcy5lbmRJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICBpZiAodGhpcy5fdG9rZW5pemVyLl9zZWN0aW9uU3RhcnQgPD0gaW5pdGlhbE9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IHRoaXMuX3Rva2VuaXplci5fc2VjdGlvblN0YXJ0IC0gaW5pdGlhbE9mZnNldDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB0aGlzLnN0YXJ0SW5kZXggPSB0aGlzLmVuZEluZGV4ICsgMTtcbiAgICB0aGlzLmVuZEluZGV4ID0gdGhpcy5fdG9rZW5pemVyLmdldEFic29sdXRlSW5kZXgoKTtcbn07XG5cbi8vVG9rZW5pemVyIGV2ZW50IGhhbmRsZXJzXG5QYXJzZXIucHJvdG90eXBlLm9udGV4dCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigxKTtcbiAgICB0aGlzLmVuZEluZGV4LS07XG5cbiAgICBpZiAodGhpcy5fY2JzLm9udGV4dCkgdGhpcy5fY2JzLm9udGV4dChkYXRhKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUub25vcGVudGFnbmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAodGhpcy5fbG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICB0aGlzLl90YWduYW1lID0gbmFtZTtcblxuICAgIGlmICghdGhpcy5fb3B0aW9ucy54bWxNb2RlICYmIG5hbWUgaW4gb3BlbkltcGxpZXNDbG9zZSkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgICAgdmFyIGVsO1xuICAgICAgICAgICAgKGVsID0gdGhpcy5fc3RhY2tbdGhpcy5fc3RhY2subGVuZ3RoIC0gMV0pIGluXG4gICAgICAgICAgICBvcGVuSW1wbGllc0Nsb3NlW25hbWVdO1xuICAgICAgICAgICAgdGhpcy5vbmNsb3NldGFnKGVsKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9vcHRpb25zLnhtbE1vZGUgfHwgIShuYW1lIGluIHZvaWRFbGVtZW50cykpIHtcbiAgICAgICAgdGhpcy5fc3RhY2sucHVzaChuYW1lKTtcbiAgICAgICAgaWYgKG5hbWUgaW4gZm9yZWlnbkNvbnRleHRFbGVtZW50cykgdGhpcy5fZm9yZWlnbkNvbnRleHQucHVzaCh0cnVlKTtcbiAgICAgICAgZWxzZSBpZiAobmFtZSBpbiBodG1sSW50ZWdyYXRpb25FbGVtZW50cylcbiAgICAgICAgICAgIHRoaXMuX2ZvcmVpZ25Db250ZXh0LnB1c2goZmFsc2UpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jYnMub25vcGVudGFnbmFtZSkgdGhpcy5fY2JzLm9ub3BlbnRhZ25hbWUobmFtZSk7XG4gICAgaWYgKHRoaXMuX2Nicy5vbm9wZW50YWcpIHRoaXMuX2F0dHJpYnMgPSB7fTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUub25vcGVudGFnZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oMSk7XG5cbiAgICBpZiAodGhpcy5fYXR0cmlicykge1xuICAgICAgICBpZiAodGhpcy5fY2JzLm9ub3BlbnRhZylcbiAgICAgICAgICAgIHRoaXMuX2Nicy5vbm9wZW50YWcodGhpcy5fdGFnbmFtZSwgdGhpcy5fYXR0cmlicyk7XG4gICAgICAgIHRoaXMuX2F0dHJpYnMgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICAgIXRoaXMuX29wdGlvbnMueG1sTW9kZSAmJlxuICAgICAgICB0aGlzLl9jYnMub25jbG9zZXRhZyAmJlxuICAgICAgICB0aGlzLl90YWduYW1lIGluIHZvaWRFbGVtZW50c1xuICAgICkge1xuICAgICAgICB0aGlzLl9jYnMub25jbG9zZXRhZyh0aGlzLl90YWduYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLl90YWduYW1lID0gXCJcIjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUub25jbG9zZXRhZyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigxKTtcblxuICAgIGlmICh0aGlzLl9sb3dlckNhc2VUYWdOYW1lcykge1xuICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBcbiAgICBpZiAobmFtZSBpbiBmb3JlaWduQ29udGV4dEVsZW1lbnRzIHx8IG5hbWUgaW4gaHRtbEludGVncmF0aW9uRWxlbWVudHMpIHtcbiAgICAgICAgdGhpcy5fZm9yZWlnbkNvbnRleHQucG9wKCk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICB0aGlzLl9zdGFjay5sZW5ndGggJiZcbiAgICAgICAgKCEobmFtZSBpbiB2b2lkRWxlbWVudHMpIHx8IHRoaXMuX29wdGlvbnMueG1sTW9kZSlcbiAgICApIHtcbiAgICAgICAgdmFyIHBvcyA9IHRoaXMuX3N0YWNrLmxhc3RJbmRleE9mKG5hbWUpO1xuICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nicy5vbmNsb3NldGFnKSB7XG4gICAgICAgICAgICAgICAgcG9zID0gdGhpcy5fc3RhY2subGVuZ3RoIC0gcG9zO1xuICAgICAgICAgICAgICAgIHdoaWxlIChwb3MtLSkgdGhpcy5fY2JzLm9uY2xvc2V0YWcodGhpcy5fc3RhY2sucG9wKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHRoaXMuX3N0YWNrLmxlbmd0aCA9IHBvcztcbiAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSBcInBcIiAmJiAhdGhpcy5fb3B0aW9ucy54bWxNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLm9ub3BlbnRhZ25hbWUobmFtZSk7XG4gICAgICAgICAgICB0aGlzLl9jbG9zZUN1cnJlbnRUYWcoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXRoaXMuX29wdGlvbnMueG1sTW9kZSAmJiAobmFtZSA9PT0gXCJiclwiIHx8IG5hbWUgPT09IFwicFwiKSkge1xuICAgICAgICB0aGlzLm9ub3BlbnRhZ25hbWUobmFtZSk7XG4gICAgICAgIHRoaXMuX2Nsb3NlQ3VycmVudFRhZygpO1xuICAgIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUub25zZWxmY2xvc2luZ3RhZyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChcbiAgICAgICAgdGhpcy5fb3B0aW9ucy54bWxNb2RlIHx8XG4gICAgICAgIHRoaXMuX29wdGlvbnMucmVjb2duaXplU2VsZkNsb3NpbmcgfHxcbiAgICAgICAgdGhpcy5fZm9yZWlnbkNvbnRleHRbdGhpcy5fZm9yZWlnbkNvbnRleHQubGVuZ3RoIC0gMV1cbiAgICApIHtcbiAgICAgICAgdGhpcy5fY2xvc2VDdXJyZW50VGFnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbm9wZW50YWdlbmQoKTtcbiAgICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9jbG9zZUN1cnJlbnRUYWcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmFtZSA9IHRoaXMuX3RhZ25hbWU7XG5cbiAgICB0aGlzLm9ub3BlbnRhZ2VuZCgpO1xuXG4gICAgLy9zZWxmLWNsb3NpbmcgdGFncyB3aWxsIGJlIG9uIHRoZSB0b3Agb2YgdGhlIHN0YWNrXG4gICAgLy8oY2hlYXBlciBjaGVjayB0aGFuIGluIG9uY2xvc2V0YWcpXG4gICAgaWYgKHRoaXMuX3N0YWNrW3RoaXMuX3N0YWNrLmxlbmd0aCAtIDFdID09PSBuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9jYnMub25jbG9zZXRhZykge1xuICAgICAgICAgICAgdGhpcy5fY2JzLm9uY2xvc2V0YWcobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhY2sucG9wKCk7XG4gICAgICAgIFxuICAgIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUub25hdHRyaWJuYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICh0aGlzLl9sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcykge1xuICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICB0aGlzLl9hdHRyaWJuYW1lID0gbmFtZTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUub25hdHRyaWJkYXRhID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB0aGlzLl9hdHRyaWJ2YWx1ZSArPSB2YWx1ZTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUub25hdHRyaWJlbmQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2JzLm9uYXR0cmlidXRlKVxuICAgICAgICB0aGlzLl9jYnMub25hdHRyaWJ1dGUodGhpcy5fYXR0cmlibmFtZSwgdGhpcy5fYXR0cmlidmFsdWUpO1xuICAgIGlmIChcbiAgICAgICAgdGhpcy5fYXR0cmlicyAmJlxuICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX2F0dHJpYnMsIHRoaXMuX2F0dHJpYm5hbWUpXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2F0dHJpYnNbdGhpcy5fYXR0cmlibmFtZV0gPSB0aGlzLl9hdHRyaWJ2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5fYXR0cmlibmFtZSA9IFwiXCI7XG4gICAgdGhpcy5fYXR0cmlidmFsdWUgPSBcIlwiO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fZ2V0SW5zdHJ1Y3Rpb25OYW1lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgaWR4ID0gdmFsdWUuc2VhcmNoKHJlX25hbWVFbmQpLFxuICAgICAgICBuYW1lID0gaWR4IDwgMCA/IHZhbHVlIDogdmFsdWUuc3Vic3RyKDAsIGlkeCk7XG5cbiAgICBpZiAodGhpcy5fbG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUub25kZWNsYXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX2Nicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbikge1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuX2dldEluc3RydWN0aW9uTmFtZSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuX2Nicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbihcIiFcIiArIG5hbWUsIFwiIVwiICsgdmFsdWUpO1xuICAgIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLl9nZXRJbnN0cnVjdGlvbk5hbWUodmFsdWUpO1xuICAgICAgICB0aGlzLl9jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24oXCI/XCIgKyBuYW1lLCBcIj9cIiArIHZhbHVlKTtcbiAgICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uY29tbWVudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oNCk7XG5cbiAgICBpZiAodGhpcy5fY2JzLm9uY29tbWVudCkgdGhpcy5fY2JzLm9uY29tbWVudCh2YWx1ZSk7XG4gICAgaWYgKHRoaXMuX2Nicy5vbmNvbW1lbnRlbmQpIHRoaXMuX2Nicy5vbmNvbW1lbnRlbmQoKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUub25jZGF0YSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oMSk7XG5cbiAgICBpZiAodGhpcy5fb3B0aW9ucy54bWxNb2RlIHx8IHRoaXMuX29wdGlvbnMucmVjb2duaXplQ0RBVEEpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nicy5vbmNkYXRhc3RhcnQpIHRoaXMuX2Nicy5vbmNkYXRhc3RhcnQoKTtcbiAgICAgICAgaWYgKHRoaXMuX2Nicy5vbnRleHQpIHRoaXMuX2Nicy5vbnRleHQodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5fY2JzLm9uY2RhdGFlbmQpIHRoaXMuX2Nicy5vbmNkYXRhZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbmNvbW1lbnQoXCJbQ0RBVEFbXCIgKyB2YWx1ZSArIFwiXV1cIik7XG4gICAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgaWYgKHRoaXMuX2Nicy5vbmVycm9yKSB0aGlzLl9jYnMub25lcnJvcihlcnIpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYnMub25jbG9zZXRhZykge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLl9zdGFjay5sZW5ndGg7XG4gICAgICAgICAgICBpID4gMDtcbiAgICAgICAgICAgIHRoaXMuX2Nicy5vbmNsb3NldGFnKHRoaXMuX3N0YWNrWy0taV0pXG4gICAgICAgICk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9jYnMub25lbmQpIHRoaXMuX2Nicy5vbmVuZCgpO1xufTtcblxuLy9SZXNldHMgdGhlIHBhcnNlciB0byBhIGJsYW5rIHN0YXRlLCByZWFkeSB0byBwYXJzZSBhIG5ldyBIVE1MIGRvY3VtZW50XG5QYXJzZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2Nicy5vbnJlc2V0KSB0aGlzLl9jYnMub25yZXNldCgpO1xuICAgIHRoaXMuX3Rva2VuaXplci5yZXNldCgpO1xuXG4gICAgdGhpcy5fdGFnbmFtZSA9IFwiXCI7XG4gICAgdGhpcy5fYXR0cmlibmFtZSA9IFwiXCI7XG4gICAgdGhpcy5fYXR0cmlicyA9IG51bGw7XG4gICAgdGhpcy5fc3RhY2sgPSBbXTtcblxuICAgIGlmICh0aGlzLl9jYnMub25wYXJzZXJpbml0KSB0aGlzLl9jYnMub25wYXJzZXJpbml0KHRoaXMpO1xufTtcblxuLy9QYXJzZXMgYSBjb21wbGV0ZSBIVE1MIGRvY3VtZW50IGFuZCBwdXNoZXMgaXQgdG8gdGhlIGhhbmRsZXJcblBhcnNlci5wcm90b3R5cGUucGFyc2VDb21wbGV0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5lbmQoZGF0YSk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgICB0aGlzLl90b2tlbml6ZXIud3JpdGUoY2h1bmspO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihjaHVuaykge1xuICAgIHRoaXMuX3Rva2VuaXplci5lbmQoY2h1bmspO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3Rva2VuaXplci5wYXVzZSgpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl90b2tlbml6ZXIucmVzdW1lKCk7XG59O1xuXG4vL2FsaWFzIGZvciBiYWNrd2FyZHMgY29tcGF0XG5QYXJzZXIucHJvdG90eXBlLnBhcnNlQ2h1bmsgPSBQYXJzZXIucHJvdG90eXBlLndyaXRlO1xuUGFyc2VyLnByb3RvdHlwZS5kb25lID0gUGFyc2VyLnByb3RvdHlwZS5lbmQ7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBQcm94eUhhbmRsZXI7XG5cbmZ1bmN0aW9uIFByb3h5SGFuZGxlcihjYnMpIHtcbiAgICB0aGlzLl9jYnMgPSBjYnMgfHwge307XG59XG5cbnZhciBFVkVOVFMgPSByZXF1aXJlKFwiLi9cIikuRVZFTlRTO1xuT2JqZWN0LmtleXMoRVZFTlRTKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoRVZFTlRTW25hbWVdID09PSAwKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBQcm94eUhhbmRsZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzW25hbWVdKSB0aGlzLl9jYnNbbmFtZV0oKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKEVWRU5UU1tuYW1lXSA9PT0gMSkge1xuICAgICAgICBuYW1lID0gXCJvblwiICsgbmFtZTtcbiAgICAgICAgUHJveHlIYW5kbGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXShhKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKEVWRU5UU1tuYW1lXSA9PT0gMikge1xuICAgICAgICBuYW1lID0gXCJvblwiICsgbmFtZTtcbiAgICAgICAgUHJveHlIYW5kbGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXShhLCBiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHNcIik7XG4gICAgfVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcblxudmFyIFBhcnNlciA9IHJlcXVpcmUoXCIuL1dyaXRhYmxlU3RyZWFtLmpzXCIpO1xuXG5mdW5jdGlvbiBTdHJlYW0ob3B0aW9ucykge1xuICAgIFBhcnNlci5jYWxsKHRoaXMsIG5ldyBDYnModGhpcyksIG9wdGlvbnMpO1xufVxuXG5yZXF1aXJlKFwiaW5oZXJpdHNcIikoU3RyZWFtLCBQYXJzZXIpO1xuXG5TdHJlYW0ucHJvdG90eXBlLnJlYWRhYmxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gQ2JzKHNjb3BlKSB7XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xufVxuXG52YXIgRVZFTlRTID0gcmVxdWlyZShcIi4uL1wiKS5FVkVOVFM7XG5cbk9iamVjdC5rZXlzKEVWRU5UUykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKEVWRU5UU1tuYW1lXSA9PT0gMCkge1xuICAgICAgICBDYnMucHJvdG90eXBlW1wib25cIiArIG5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlLmVtaXQobmFtZSk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChFVkVOVFNbbmFtZV0gPT09IDEpIHtcbiAgICAgICAgQ2JzLnByb3RvdHlwZVtcIm9uXCIgKyBuYW1lXSA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHRoaXMuc2NvcGUuZW1pdChuYW1lLCBhKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKEVWRU5UU1tuYW1lXSA9PT0gMikge1xuICAgICAgICBDYnMucHJvdG90eXBlW1wib25cIiArIG5hbWVdID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgdGhpcy5zY29wZS5lbWl0KG5hbWUsIGEsIGIpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKFwid3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyFcIik7XG4gICAgfVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFRva2VuaXplcjtcblxudmFyIGRlY29kZUNvZGVQb2ludCA9IHJlcXVpcmUoXCJlbnRpdGllcy9saWIvZGVjb2RlX2NvZGVwb2ludC5qc1wiKTtcbnZhciBlbnRpdHlNYXAgPSByZXF1aXJlKFwiZW50aXRpZXMvbWFwcy9lbnRpdGllcy5qc29uXCIpO1xudmFyIGxlZ2FjeU1hcCA9IHJlcXVpcmUoXCJlbnRpdGllcy9tYXBzL2xlZ2FjeS5qc29uXCIpO1xudmFyIHhtbE1hcCA9IHJlcXVpcmUoXCJlbnRpdGllcy9tYXBzL3htbC5qc29uXCIpO1xuXG52YXIgaSA9IDA7XG5cbnZhciBURVhUID0gaSsrO1xudmFyIEJFRk9SRV9UQUdfTkFNRSA9IGkrKzsgLy9hZnRlciA8XG52YXIgSU5fVEFHX05BTUUgPSBpKys7XG52YXIgSU5fU0VMRl9DTE9TSU5HX1RBRyA9IGkrKztcbnZhciBCRUZPUkVfQ0xPU0lOR19UQUdfTkFNRSA9IGkrKztcbnZhciBJTl9DTE9TSU5HX1RBR19OQU1FID0gaSsrO1xudmFyIEFGVEVSX0NMT1NJTkdfVEFHX05BTUUgPSBpKys7XG5cbi8vYXR0cmlidXRlc1xudmFyIEJFRk9SRV9BVFRSSUJVVEVfTkFNRSA9IGkrKztcbnZhciBJTl9BVFRSSUJVVEVfTkFNRSA9IGkrKztcbnZhciBBRlRFUl9BVFRSSUJVVEVfTkFNRSA9IGkrKztcbnZhciBCRUZPUkVfQVRUUklCVVRFX1ZBTFVFID0gaSsrO1xudmFyIElOX0FUVFJJQlVURV9WQUxVRV9EUSA9IGkrKzsgLy8gXCJcbnZhciBJTl9BVFRSSUJVVEVfVkFMVUVfU1EgPSBpKys7IC8vICdcbnZhciBJTl9BVFRSSUJVVEVfVkFMVUVfTlEgPSBpKys7XG5cbi8vZGVjbGFyYXRpb25zXG52YXIgQkVGT1JFX0RFQ0xBUkFUSU9OID0gaSsrOyAvLyAhXG52YXIgSU5fREVDTEFSQVRJT04gPSBpKys7XG5cbi8vcHJvY2Vzc2luZyBpbnN0cnVjdGlvbnNcbnZhciBJTl9QUk9DRVNTSU5HX0lOU1RSVUNUSU9OID0gaSsrOyAvLyA/XG5cbi8vY29tbWVudHNcbnZhciBCRUZPUkVfQ09NTUVOVCA9IGkrKztcbnZhciBJTl9DT01NRU5UID0gaSsrO1xudmFyIEFGVEVSX0NPTU1FTlRfMSA9IGkrKztcbnZhciBBRlRFUl9DT01NRU5UXzIgPSBpKys7XG5cbi8vY2RhdGFcbnZhciBCRUZPUkVfQ0RBVEFfMSA9IGkrKzsgLy8gW1xudmFyIEJFRk9SRV9DREFUQV8yID0gaSsrOyAvLyBDXG52YXIgQkVGT1JFX0NEQVRBXzMgPSBpKys7IC8vIERcbnZhciBCRUZPUkVfQ0RBVEFfNCA9IGkrKzsgLy8gQVxudmFyIEJFRk9SRV9DREFUQV81ID0gaSsrOyAvLyBUXG52YXIgQkVGT1JFX0NEQVRBXzYgPSBpKys7IC8vIEFcbnZhciBJTl9DREFUQSA9IGkrKzsgLy8gW1xudmFyIEFGVEVSX0NEQVRBXzEgPSBpKys7IC8vIF1cbnZhciBBRlRFUl9DREFUQV8yID0gaSsrOyAvLyBdXG5cbi8vc3BlY2lhbCB0YWdzXG52YXIgQkVGT1JFX1NQRUNJQUwgPSBpKys7IC8vU1xudmFyIEJFRk9SRV9TUEVDSUFMX0VORCA9IGkrKzsgLy9TXG5cbnZhciBCRUZPUkVfU0NSSVBUXzEgPSBpKys7IC8vQ1xudmFyIEJFRk9SRV9TQ1JJUFRfMiA9IGkrKzsgLy9SXG52YXIgQkVGT1JFX1NDUklQVF8zID0gaSsrOyAvL0lcbnZhciBCRUZPUkVfU0NSSVBUXzQgPSBpKys7IC8vUFxudmFyIEJFRk9SRV9TQ1JJUFRfNSA9IGkrKzsgLy9UXG52YXIgQUZURVJfU0NSSVBUXzEgPSBpKys7IC8vQ1xudmFyIEFGVEVSX1NDUklQVF8yID0gaSsrOyAvL1JcbnZhciBBRlRFUl9TQ1JJUFRfMyA9IGkrKzsgLy9JXG52YXIgQUZURVJfU0NSSVBUXzQgPSBpKys7IC8vUFxudmFyIEFGVEVSX1NDUklQVF81ID0gaSsrOyAvL1RcblxudmFyIEJFRk9SRV9TVFlMRV8xID0gaSsrOyAvL1RcbnZhciBCRUZPUkVfU1RZTEVfMiA9IGkrKzsgLy9ZXG52YXIgQkVGT1JFX1NUWUxFXzMgPSBpKys7IC8vTFxudmFyIEJFRk9SRV9TVFlMRV80ID0gaSsrOyAvL0VcbnZhciBBRlRFUl9TVFlMRV8xID0gaSsrOyAvL1RcbnZhciBBRlRFUl9TVFlMRV8yID0gaSsrOyAvL1lcbnZhciBBRlRFUl9TVFlMRV8zID0gaSsrOyAvL0xcbnZhciBBRlRFUl9TVFlMRV80ID0gaSsrOyAvL0VcblxudmFyIEJFRk9SRV9FTlRJVFkgPSBpKys7IC8vJlxudmFyIEJFRk9SRV9OVU1FUklDX0VOVElUWSA9IGkrKzsgLy8jXG52YXIgSU5fTkFNRURfRU5USVRZID0gaSsrO1xudmFyIElOX05VTUVSSUNfRU5USVRZID0gaSsrO1xudmFyIElOX0hFWF9FTlRJVFkgPSBpKys7IC8vWFxuXG52YXIgaiA9IDA7XG5cbnZhciBTUEVDSUFMX05PTkUgPSBqKys7XG52YXIgU1BFQ0lBTF9TQ1JJUFQgPSBqKys7XG52YXIgU1BFQ0lBTF9TVFlMRSA9IGorKztcblxuZnVuY3Rpb24gd2hpdGVzcGFjZShjKSB7XG4gICAgcmV0dXJuIGMgPT09IFwiIFwiIHx8IGMgPT09IFwiXFxuXCIgfHwgYyA9PT0gXCJcXHRcIiB8fCBjID09PSBcIlxcZlwiIHx8IGMgPT09IFwiXFxyXCI7XG59XG5cbmZ1bmN0aW9uIGlmRWxzZVN0YXRlKHVwcGVyLCBTVUNDRVNTLCBGQUlMVVJFKSB7XG4gICAgdmFyIGxvd2VyID0gdXBwZXIudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICh1cHBlciA9PT0gbG93ZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGlmIChjID09PSBsb3dlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gU1VDQ0VTUztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBGQUlMVVJFO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGlmIChjID09PSBsb3dlciB8fCBjID09PSB1cHBlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gU1VDQ0VTUztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBGQUlMVVJFO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKHVwcGVyLCBORVhUX1NUQVRFKSB7XG4gICAgdmFyIGxvd2VyID0gdXBwZXIudG9Mb3dlckNhc2UoKTtcblxuICAgIHJldHVybiBmdW5jdGlvbihjKSB7XG4gICAgICAgIGlmIChjID09PSBsb3dlciB8fCBjID09PSB1cHBlcikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBORVhUX1NUQVRFO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9UQUdfTkFNRTtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4LS07IC8vY29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIFRva2VuaXplcihvcHRpb25zLCBjYnMpIHtcbiAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgdGhpcy5fYnVmZmVyID0gXCJcIjtcbiAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSAwO1xuICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICB0aGlzLl9idWZmZXJPZmZzZXQgPSAwOyAvL2NoYXJzIHJlbW92ZWQgZnJvbSBfYnVmZmVyXG4gICAgdGhpcy5fYmFzZVN0YXRlID0gVEVYVDtcbiAgICB0aGlzLl9zcGVjaWFsID0gU1BFQ0lBTF9OT05FO1xuICAgIHRoaXMuX2NicyA9IGNicztcbiAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3htbE1vZGUgPSAhIShvcHRpb25zICYmIG9wdGlvbnMueG1sTW9kZSk7XG4gICAgdGhpcy5fZGVjb2RlRW50aXRpZXMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuZGVjb2RlRW50aXRpZXMpO1xufVxuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZVRleHQgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPFwiKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbmRleCA+IHRoaXMuX3NlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgdGhpcy5fY2JzLm9udGV4dCh0aGlzLl9nZXRTZWN0aW9uKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX1RBR19OQU1FO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0aGlzLl9kZWNvZGVFbnRpdGllcyAmJlxuICAgICAgICB0aGlzLl9zcGVjaWFsID09PSBTUEVDSUFMX05PTkUgJiZcbiAgICAgICAgYyA9PT0gXCImXCJcbiAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuX2luZGV4ID4gdGhpcy5fc2VjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICB0aGlzLl9jYnMub250ZXh0KHRoaXMuX2dldFNlY3Rpb24oKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYmFzZVN0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfRU5USVRZO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVRhZ05hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiL1wiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0NMT1NJTkdfVEFHX05BTUU7XG4gICAgfSBlbHNlIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICB0aGlzLl9jYnMub250ZXh0KHRoaXMuX2dldFNlY3Rpb24oKSk7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gXCI+XCIgfHwgdGhpcy5fc3BlY2lhbCAhPT0gU1BFQ0lBTF9OT05FIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gXCIhXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfREVDTEFSQVRJT047XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFwiP1wiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fUFJPQ0VTU0lOR19JTlNUUlVDVElPTjtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID1cbiAgICAgICAgICAgICF0aGlzLl94bWxNb2RlICYmIChjID09PSBcInNcIiB8fCBjID09PSBcIlNcIilcbiAgICAgICAgICAgICAgICA/IEJFRk9SRV9TUEVDSUFMXG4gICAgICAgICAgICAgICAgOiBJTl9UQUdfTkFNRTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJblRhZ05hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fZW1pdFRva2VuKFwib25vcGVudGFnbmFtZVwiKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX05BTUU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVDbG9zZWluZ1RhZ05hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKHdoaXRlc3BhY2UoYykpO1xuICAgIGVsc2UgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NwZWNpYWwgIT09IFNQRUNJQUxfTk9ORSkge1xuICAgICAgICBpZiAoYyA9PT0gXCJzXCIgfHwgYyA9PT0gXCJTXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX1NQRUNJQUxfRU5EO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQ0xPU0lOR19UQUdfTkFNRTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbkNsb3NlaW5nVGFnTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9lbWl0VG9rZW4oXCJvbmNsb3NldGFnXCIpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEFGVEVSX0NMT1NJTkdfVEFHX05BTUU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlckNsb3NlaW5nVGFnTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAvL3NraXAgZXZlcnl0aGluZyB1bnRpbCBcIj5cIlxuICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbm9wZW50YWdlbmQoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmIChjID09PSBcIi9cIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX1NFTEZfQ0xPU0lOR19UQUc7XG4gICAgfSBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluU2VsZkNsb3NpbmdUYWcgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbnNlbGZjbG9zaW5ndGFnKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSBpZiAoIXdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX05BTUU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbkF0dHJpYnV0ZU5hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPVwiIHx8IGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmlibmFtZSh0aGlzLl9nZXRTZWN0aW9uKCkpO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBBRlRFUl9BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUFmdGVyQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI9XCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX1ZBTFVFO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gXCIvXCIgfHwgYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZW5kKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgIH0gZWxzZSBpZiAoIXdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZW5kKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQVRUUklCVVRFX05BTUU7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09ICdcIicpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9BVFRSSUJVVEVfVkFMVUVfRFE7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFwiJ1wiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQVRUUklCVVRFX1ZBTFVFX1NRO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0FUVFJJQlVURV9WQUxVRV9OUTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIHRoaXMuX2luZGV4LS07IC8vcmVjb25zdW1lIHRva2VuXG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbkF0dHJpYnV0ZVZhbHVlRG91YmxlUXVvdGVzID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSAnXCInKSB7XG4gICAgICAgIHRoaXMuX2VtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZW5kKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fZGVjb2RlRW50aXRpZXMgJiYgYyA9PT0gXCImXCIpIHtcbiAgICAgICAgdGhpcy5fZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICB0aGlzLl9iYXNlU3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfRU5USVRZO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZXMgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiJ1wiKSB7XG4gICAgICAgIHRoaXMuX2VtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZW5kKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fZGVjb2RlRW50aXRpZXMgJiYgYyA9PT0gXCImXCIpIHtcbiAgICAgICAgdGhpcy5fZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICB0aGlzLl9iYXNlU3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfRU5USVRZO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluQXR0cmlidXRlVmFsdWVOb1F1b3RlcyA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAod2hpdGVzcGFjZShjKSB8fCBjID09PSBcIj5cIikge1xuICAgICAgICB0aGlzLl9lbWl0VG9rZW4oXCJvbmF0dHJpYmRhdGFcIik7XG4gICAgICAgIHRoaXMuX2Nicy5vbmF0dHJpYmVuZCgpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2RlY29kZUVudGl0aWVzICYmIGMgPT09IFwiJlwiKSB7XG4gICAgICAgIHRoaXMuX2VtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgdGhpcy5fYmFzZVN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0VOVElUWTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVEZWNsYXJhdGlvbiA9IGZ1bmN0aW9uKGMpIHtcbiAgICB0aGlzLl9zdGF0ZSA9XG4gICAgICAgIGMgPT09IFwiW1wiXG4gICAgICAgICAgICA/IEJFRk9SRV9DREFUQV8xXG4gICAgICAgICAgICA6IGMgPT09IFwiLVwiXG4gICAgICAgICAgICAgICAgPyBCRUZPUkVfQ09NTUVOVFxuICAgICAgICAgICAgICAgIDogSU5fREVDTEFSQVRJT047XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluRGVjbGFyYXRpb24gPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbmRlY2xhcmF0aW9uKHRoaXMuX2dldFNlY3Rpb24oKSk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbih0aGlzLl9nZXRTZWN0aW9uKCkpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNvbW1lbnQgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiLVwiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQ09NTUVOVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fREVDTEFSQVRJT047XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbkNvbW1lbnQgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiLVwiKSB0aGlzLl9zdGF0ZSA9IEFGVEVSX0NPTU1FTlRfMTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJDb21tZW50MSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCItXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBBRlRFUl9DT01NRU5UXzI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9DT01NRU5UO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJDb21tZW50MiA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgLy9yZW1vdmUgMiB0cmFpbGluZyBjaGFyc1xuICAgICAgICB0aGlzLl9jYnMub25jb21tZW50KFxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyLnN1YnN0cmluZyh0aGlzLl9zZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4IC0gMilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmIChjICE9PSBcIi1cIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0NPTU1FTlQ7XG4gICAgfVxuICAgIC8vIGVsc2U6IHN0YXkgaW4gQUZURVJfQ09NTUVOVF8yIChgLS0tPmApXG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNkYXRhMSA9IGlmRWxzZVN0YXRlKFxuICAgIFwiQ1wiLFxuICAgIEJFRk9SRV9DREFUQV8yLFxuICAgIElOX0RFQ0xBUkFUSU9OXG4pO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVDZGF0YTIgPSBpZkVsc2VTdGF0ZShcbiAgICBcIkRcIixcbiAgICBCRUZPUkVfQ0RBVEFfMyxcbiAgICBJTl9ERUNMQVJBVElPTlxuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlQ2RhdGEzID0gaWZFbHNlU3RhdGUoXG4gICAgXCJBXCIsXG4gICAgQkVGT1JFX0NEQVRBXzQsXG4gICAgSU5fREVDTEFSQVRJT05cbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNkYXRhNCA9IGlmRWxzZVN0YXRlKFxuICAgIFwiVFwiLFxuICAgIEJFRk9SRV9DREFUQV81LFxuICAgIElOX0RFQ0xBUkFUSU9OXG4pO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVDZGF0YTUgPSBpZkVsc2VTdGF0ZShcbiAgICBcIkFcIixcbiAgICBCRUZPUkVfQ0RBVEFfNixcbiAgICBJTl9ERUNMQVJBVElPTlxuKTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVDZGF0YTYgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiW1wiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQ0RBVEE7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0RFQ0xBUkFUSU9OO1xuICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5DZGF0YSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCJdXCIpIHRoaXMuX3N0YXRlID0gQUZURVJfQ0RBVEFfMTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJDZGF0YTEgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiXVwiKSB0aGlzLl9zdGF0ZSA9IEFGVEVSX0NEQVRBXzI7XG4gICAgZWxzZSB0aGlzLl9zdGF0ZSA9IElOX0NEQVRBO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlckNkYXRhMiA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgLy9yZW1vdmUgMiB0cmFpbGluZyBjaGFyc1xuICAgICAgICB0aGlzLl9jYnMub25jZGF0YShcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlci5zdWJzdHJpbmcodGhpcy5fc2VjdGlvblN0YXJ0LCB0aGlzLl9pbmRleCAtIDIpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSBpZiAoYyAhPT0gXCJdXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9DREFUQTtcbiAgICB9XG4gICAgLy9lbHNlOiBzdGF5IGluIEFGVEVSX0NEQVRBXzIgKGBdXV0+YClcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU3BlY2lhbCA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCJjXCIgfHwgYyA9PT0gXCJDXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfU0NSSVBUXzE7XG4gICAgfSBlbHNlIGlmIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9TVFlMRV8xO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fVEFHX05BTUU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07IC8vY29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVNwZWNpYWxFbmQgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKHRoaXMuX3NwZWNpYWwgPT09IFNQRUNJQUxfU0NSSVBUICYmIChjID09PSBcImNcIiB8fCBjID09PSBcIkNcIikpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBBRlRFUl9TQ1JJUFRfMTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NwZWNpYWwgPT09IFNQRUNJQUxfU1RZTEUgJiYgKGMgPT09IFwidFwiIHx8IGMgPT09IFwiVFwiKSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEFGVEVSX1NUWUxFXzE7XG4gICAgfSBlbHNlIHRoaXMuX3N0YXRlID0gVEVYVDtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU2NyaXB0MSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJSXCIsXG4gICAgQkVGT1JFX1NDUklQVF8yXG4pO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVTY3JpcHQyID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcbiAgICBcIklcIixcbiAgICBCRUZPUkVfU0NSSVBUXzNcbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVNjcmlwdDMgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFxuICAgIFwiUFwiLFxuICAgIEJFRk9SRV9TQ1JJUFRfNFxuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU2NyaXB0NCA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJUXCIsXG4gICAgQkVGT1JFX1NDUklQVF81XG4pO1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVNjcmlwdDUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fc3BlY2lhbCA9IFNQRUNJQUxfU0NSSVBUO1xuICAgIH1cbiAgICB0aGlzLl9zdGF0ZSA9IElOX1RBR19OQU1FO1xuICAgIHRoaXMuX2luZGV4LS07IC8vY29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTY3JpcHQxID0gaWZFbHNlU3RhdGUoXCJSXCIsIEFGVEVSX1NDUklQVF8yLCBURVhUKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTY3JpcHQyID0gaWZFbHNlU3RhdGUoXCJJXCIsIEFGVEVSX1NDUklQVF8zLCBURVhUKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTY3JpcHQzID0gaWZFbHNlU3RhdGUoXCJQXCIsIEFGVEVSX1NDUklQVF80LCBURVhUKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTY3JpcHQ0ID0gaWZFbHNlU3RhdGUoXCJUXCIsIEFGVEVSX1NDUklQVF81LCBURVhUKTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclNjcmlwdDUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fc3BlY2lhbCA9IFNQRUNJQUxfTk9ORTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9DTE9TSU5HX1RBR19OQU1FO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCAtIDY7XG4gICAgICAgIHRoaXMuX2luZGV4LS07IC8vcmVjb25zdW1lIHRoZSB0b2tlblxuICAgIH0gZWxzZSB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVN0eWxlMSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJZXCIsXG4gICAgQkVGT1JFX1NUWUxFXzJcbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVN0eWxlMiA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJMXCIsXG4gICAgQkVGT1JFX1NUWUxFXzNcbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVN0eWxlMyA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJFXCIsXG4gICAgQkVGT1JFX1NUWUxFXzRcbik7XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU3R5bGU0ID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIi9cIiB8fCBjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgIHRoaXMuX3NwZWNpYWwgPSBTUEVDSUFMX1NUWUxFO1xuICAgIH1cbiAgICB0aGlzLl9zdGF0ZSA9IElOX1RBR19OQU1FO1xuICAgIHRoaXMuX2luZGV4LS07IC8vY29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTdHlsZTEgPSBpZkVsc2VTdGF0ZShcIllcIiwgQUZURVJfU1RZTEVfMiwgVEVYVCk7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUFmdGVyU3R5bGUyID0gaWZFbHNlU3RhdGUoXCJMXCIsIEFGVEVSX1NUWUxFXzMsIFRFWFQpO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclN0eWxlMyA9IGlmRWxzZVN0YXRlKFwiRVwiLCBBRlRFUl9TVFlMRV80LCBURVhUKTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclN0eWxlNCA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zcGVjaWFsID0gU1BFQ0lBTF9OT05FO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0NMT1NJTkdfVEFHX05BTUU7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4IC0gNTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTsgLy9yZWNvbnN1bWUgdGhlIHRva2VuXG4gICAgfSBlbHNlIHRoaXMuX3N0YXRlID0gVEVYVDtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlRW50aXR5ID0gaWZFbHNlU3RhdGUoXG4gICAgXCIjXCIsXG4gICAgQkVGT1JFX05VTUVSSUNfRU5USVRZLFxuICAgIElOX05BTUVEX0VOVElUWVxuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlTnVtZXJpY0VudGl0eSA9IGlmRWxzZVN0YXRlKFxuICAgIFwiWFwiLFxuICAgIElOX0hFWF9FTlRJVFksXG4gICAgSU5fTlVNRVJJQ19FTlRJVFlcbik7XG5cbi8vZm9yIGVudGl0aWVzIHRlcm1pbmF0ZWQgd2l0aCBhIHNlbWljb2xvblxuVG9rZW5pemVyLnByb3RvdHlwZS5fcGFyc2VOYW1lZEVudGl0eVN0cmljdCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vb2Zmc2V0ID0gMVxuICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgKyAxIDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuX2J1ZmZlci5zdWJzdHJpbmcoXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ICsgMSxcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG1hcCA9IHRoaXMuX3htbE1vZGUgPyB4bWxNYXAgOiBlbnRpdHlNYXA7XG5cbiAgICAgICAgaWYgKG1hcC5oYXNPd25Qcm9wZXJ0eShlbnRpdHkpKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0UGFydGlhbChtYXBbZW50aXR5XSk7XG4gICAgICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vL3BhcnNlcyBsZWdhY3kgZW50aXRpZXMgKHdpdGhvdXQgdHJhaWxpbmcgc2VtaWNvbG9uKVxuVG9rZW5pemVyLnByb3RvdHlwZS5fcGFyc2VMZWdhY3lFbnRpdHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9zZWN0aW9uU3RhcnQgKyAxLFxuICAgICAgICBsaW1pdCA9IHRoaXMuX2luZGV4IC0gc3RhcnQ7XG5cbiAgICBpZiAobGltaXQgPiA2KSBsaW1pdCA9IDY7IC8vdGhlIG1heCBsZW5ndGggb2YgbGVnYWN5IGVudGl0aWVzIGlzIDZcblxuICAgIHdoaWxlIChsaW1pdCA+PSAyKSB7XG4gICAgICAgIC8vdGhlIG1pbiBsZW5ndGggb2YgbGVnYWN5IGVudGl0aWVzIGlzIDJcbiAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuX2J1ZmZlci5zdWJzdHIoc3RhcnQsIGxpbWl0KTtcblxuICAgICAgICBpZiAobGVnYWN5TWFwLmhhc093blByb3BlcnR5KGVudGl0eSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRQYXJ0aWFsKGxlZ2FjeU1hcFtlbnRpdHldKTtcbiAgICAgICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCArPSBsaW1pdCArIDE7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW1pdC0tO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbk5hbWVkRW50aXR5ID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIjtcIikge1xuICAgICAgICB0aGlzLl9wYXJzZU5hbWVkRW50aXR5U3RyaWN0KCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgKyAxIDwgdGhpcy5faW5kZXggJiYgIXRoaXMuX3htbE1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlTGVnYWN5RW50aXR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgKGMgPCBcImFcIiB8fCBjID4gXCJ6XCIpICYmXG4gICAgICAgIChjIDwgXCJBXCIgfHwgYyA+IFwiWlwiKSAmJlxuICAgICAgICAoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIilcbiAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuX3htbE1vZGUpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgKyAxID09PSB0aGlzLl9pbmRleCk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2Jhc2VTdGF0ZSAhPT0gVEVYVCkge1xuICAgICAgICAgICAgaWYgKGMgIT09IFwiPVwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VOYW1lZEVudGl0eVN0cmljdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2VMZWdhY3lFbnRpdHkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2RlY29kZU51bWVyaWNFbnRpdHkgPSBmdW5jdGlvbihvZmZzZXQsIGJhc2UpIHtcbiAgICB2YXIgc2VjdGlvblN0YXJ0ID0gdGhpcy5fc2VjdGlvblN0YXJ0ICsgb2Zmc2V0O1xuXG4gICAgaWYgKHNlY3Rpb25TdGFydCAhPT0gdGhpcy5faW5kZXgpIHtcbiAgICAgICAgLy9wYXJzZSBlbnRpdHlcbiAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuX2J1ZmZlci5zdWJzdHJpbmcoc2VjdGlvblN0YXJ0LCB0aGlzLl9pbmRleCk7XG4gICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChlbnRpdHksIGJhc2UpO1xuXG4gICAgICAgIHRoaXMuX2VtaXRQYXJ0aWFsKGRlY29kZUNvZGVQb2ludChwYXJzZWQpKTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0LS07XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluTnVtZXJpY0VudGl0eSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI7XCIpIHtcbiAgICAgICAgdGhpcy5fZGVjb2RlTnVtZXJpY0VudGl0eSgyLCAxMCk7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCsrO1xuICAgIH0gZWxzZSBpZiAoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIikge1xuICAgICAgICBpZiAoIXRoaXMuX3htbE1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlY29kZU51bWVyaWNFbnRpdHkoMiwgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluSGV4RW50aXR5ID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIjtcIikge1xuICAgICAgICB0aGlzLl9kZWNvZGVOdW1lcmljRW50aXR5KDMsIDE2KTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0Kys7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgKGMgPCBcImFcIiB8fCBjID4gXCJmXCIpICYmXG4gICAgICAgIChjIDwgXCJBXCIgfHwgYyA+IFwiRlwiKSAmJlxuICAgICAgICAoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIilcbiAgICApIHtcbiAgICAgICAgaWYgKCF0aGlzLl94bWxNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9kZWNvZGVOdW1lcmljRW50aXR5KDMsIDE2KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPCAwKSB7XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCArPSB0aGlzLl9pbmRleDtcbiAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fcnVubmluZykge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IFRFWFQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgIT09IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2JzLm9udGV4dCh0aGlzLl9idWZmZXIuc3Vic3RyKHRoaXMuX3NlY3Rpb25TdGFydCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCArPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPT09IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAvL3RoZSBzZWN0aW9uIGp1c3Qgc3RhcnRlZFxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCArPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vcmVtb3ZlIGV2ZXJ5dGhpbmcgdW5uZWNlc3NhcnlcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IHRoaXMuX2J1ZmZlci5zdWJzdHIodGhpcy5fc2VjdGlvblN0YXJ0KTtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4IC09IHRoaXMuX3NlY3Rpb25TdGFydDtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCArPSB0aGlzLl9zZWN0aW9uU3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSAwO1xuICAgIH1cbn07XG5cbi8vVE9ETyBtYWtlIGV2ZW50cyBjb25kaXRpb25hbFxuVG9rZW5pemVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgaWYgKHRoaXMuX2VuZGVkKSB0aGlzLl9jYnMub25lcnJvcihFcnJvcihcIi53cml0ZSgpIGFmdGVyIGRvbmUhXCIpKTtcblxuICAgIHRoaXMuX2J1ZmZlciArPSBjaHVuaztcbiAgICB0aGlzLl9wYXJzZSgpO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fcGFyc2UgPSBmdW5jdGlvbigpIHtcbiAgICB3aGlsZSAodGhpcy5faW5kZXggPCB0aGlzLl9idWZmZXIubGVuZ3RoICYmIHRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgdmFyIGMgPSB0aGlzLl9idWZmZXIuY2hhckF0KHRoaXMuX2luZGV4KTtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSBURVhUKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVRleHQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9UQUdfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVUYWdOYW1lKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9UQUdfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJblRhZ05hbWUoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9DTE9TSU5HX1RBR19OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUNsb3NlaW5nVGFnTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fQ0xPU0lOR19UQUdfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkNsb3NlaW5nVGFnTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ0xPU0lOR19UQUdfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlckNsb3NlaW5nVGFnTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fU0VMRl9DTE9TSU5HX1RBRykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJblNlbGZDbG9zaW5nVGFnKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQVRUUklCVVRFX05BTUUpIHtcblxuICAgICAgICAvKlxuXHRcdCpcdGF0dHJpYnV0ZXNcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9BVFRSSUJVVEVfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX0FUVFJJQlVURV9OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQXR0cmlidXRlTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0FUVFJJQlVURV9WQUxVRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVBdHRyaWJ1dGVWYWx1ZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fQVRUUklCVVRFX1ZBTFVFX0RRKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX0FUVFJJQlVURV9WQUxVRV9TUSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9BVFRSSUJVVEVfVkFMVUVfTlEpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5BdHRyaWJ1dGVWYWx1ZU5vUXVvdGVzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfREVDTEFSQVRJT04pIHtcblxuICAgICAgICAvKlxuXHRcdCpcdGRlY2xhcmF0aW9uc1xuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZURlY2xhcmF0aW9uKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9ERUNMQVJBVElPTikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkRlY2xhcmF0aW9uKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9QUk9DRVNTSU5HX0lOU1RSVUNUSU9OKSB7XG5cbiAgICAgICAgLypcblx0XHQqXHRwcm9jZXNzaW5nIGluc3RydWN0aW9uc1xuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluUHJvY2Vzc2luZ0luc3RydWN0aW9uKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQ09NTUVOVCkge1xuXG4gICAgICAgIC8qXG5cdFx0Klx0Y29tbWVudHNcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVDb21tZW50KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9DT01NRU5UKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluQ29tbWVudChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ09NTUVOVF8xKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQ29tbWVudDEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX0NPTU1FTlRfMikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlckNvbW1lbnQyKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQ0RBVEFfMSkge1xuXG4gICAgICAgIC8qXG5cdFx0Klx0Y2RhdGFcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVDZGF0YTEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9DREFUQV8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUNkYXRhMihjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0NEQVRBXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlQ2RhdGEzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQ0RBVEFfNCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVDZGF0YTQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9DREFUQV81KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUNkYXRhNShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0NEQVRBXzYpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlQ2RhdGE2KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9DREFUQSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkNkYXRhKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9DREFUQV8xKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQ2RhdGExKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9DREFUQV8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQ2RhdGEyKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU1BFQ0lBTCkge1xuXG4gICAgICAgIC8qXG5cdFx0KiBzcGVjaWFsIHRhZ3Ncblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTcGVjaWFsKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU1BFQ0lBTF9FTkQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlU3BlY2lhbEVuZChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NDUklQVF8xKSB7XG5cbiAgICAgICAgLypcblx0XHQqIHNjcmlwdFxuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVNjcmlwdDEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TQ1JJUFRfMikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTY3JpcHQyKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU0NSSVBUXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlU2NyaXB0MyhjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NDUklQVF80KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVNjcmlwdDQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TQ1JJUFRfNSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTY3JpcHQ1KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9TQ1JJUFRfMSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlclNjcmlwdDEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NDUklQVF8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyU2NyaXB0MihjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfU0NSSVBUXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTY3JpcHQzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9TQ1JJUFRfNCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlclNjcmlwdDQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NDUklQVF81KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyU2NyaXB0NShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NUWUxFXzEpIHtcblxuICAgICAgICAvKlxuXHRcdCogc3R5bGVcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTdHlsZTEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TVFlMRV8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVN0eWxlMihjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NUWUxFXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlU3R5bGUzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU1RZTEVfNCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTdHlsZTQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NUWUxFXzEpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTdHlsZTEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NUWUxFXzIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTdHlsZTIoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NUWUxFXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTdHlsZTMoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NUWUxFXzQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTdHlsZTQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9FTlRJVFkpIHtcblxuICAgICAgICAvKlxuXHRcdCogZW50aXRpZXNcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVFbnRpdHkoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9OVU1FUklDX0VOVElUWSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVOdW1lcmljRW50aXR5KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9OQU1FRF9FTlRJVFkpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5OYW1lZEVudGl0eShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fTlVNRVJJQ19FTlRJVFkpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5OdW1lcmljRW50aXR5KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9IRVhfRU5USVRZKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluSGV4RW50aXR5KGMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY2JzLm9uZXJyb3IoRXJyb3IoXCJ1bmtub3duIF9zdGF0ZVwiKSwgdGhpcy5fc3RhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faW5kZXgrKztcbiAgICB9XG5cbiAgICB0aGlzLl9jbGVhbnVwKCk7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xufTtcblRva2VuaXplci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcnVubmluZyA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5faW5kZXggPCB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9lbmRlZCkge1xuICAgICAgICB0aGlzLl9maW5pc2goKTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgaWYgKHRoaXMuX2VuZGVkKSB0aGlzLl9jYnMub25lcnJvcihFcnJvcihcIi5lbmQoKSBhZnRlciBkb25lIVwiKSk7XG4gICAgaWYgKGNodW5rKSB0aGlzLndyaXRlKGNodW5rKTtcblxuICAgIHRoaXMuX2VuZGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9ydW5uaW5nKSB0aGlzLl9maW5pc2goKTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2ZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vaWYgdGhlcmUgaXMgcmVtYWluaW5nIGRhdGEsIGVtaXQgaXQgaW4gYSByZWFzb25hYmxlIHdheVxuICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVUcmFpbGluZ0RhdGEoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jYnMub25lbmQoKTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2hhbmRsZVRyYWlsaW5nRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fYnVmZmVyLnN1YnN0cih0aGlzLl9zZWN0aW9uU3RhcnQpO1xuXG4gICAgaWYgKFxuICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gSU5fQ0RBVEEgfHxcbiAgICAgICAgdGhpcy5fc3RhdGUgPT09IEFGVEVSX0NEQVRBXzEgfHxcbiAgICAgICAgdGhpcy5fc3RhdGUgPT09IEFGVEVSX0NEQVRBXzJcbiAgICApIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uY2RhdGEoZGF0YSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgdGhpcy5fc3RhdGUgPT09IElOX0NPTU1FTlQgfHxcbiAgICAgICAgdGhpcy5fc3RhdGUgPT09IEFGVEVSX0NPTU1FTlRfMSB8fFxuICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ09NTUVOVF8yXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbmNvbW1lbnQoZGF0YSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fTkFNRURfRU5USVRZICYmICF0aGlzLl94bWxNb2RlKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlTGVnYWN5RW50aXR5KCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVUcmFpbGluZ0RhdGEoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX05VTUVSSUNfRU5USVRZICYmICF0aGlzLl94bWxNb2RlKSB7XG4gICAgICAgIHRoaXMuX2RlY29kZU51bWVyaWNFbnRpdHkoMiwgMTApO1xuICAgICAgICBpZiAodGhpcy5fc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9IRVhfRU5USVRZICYmICF0aGlzLl94bWxNb2RlKSB7XG4gICAgICAgIHRoaXMuX2RlY29kZU51bWVyaWNFbnRpdHkoMywgMTYpO1xuICAgICAgICBpZiAodGhpcy5fc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gSU5fVEFHX05BTUUgJiZcbiAgICAgICAgdGhpcy5fc3RhdGUgIT09IEJFRk9SRV9BVFRSSUJVVEVfTkFNRSAmJlxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gQkVGT1JFX0FUVFJJQlVURV9WQUxVRSAmJlxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gQUZURVJfQVRUUklCVVRFX05BTUUgJiZcbiAgICAgICAgdGhpcy5fc3RhdGUgIT09IElOX0FUVFJJQlVURV9OQU1FICYmXG4gICAgICAgIHRoaXMuX3N0YXRlICE9PSBJTl9BVFRSSUJVVEVfVkFMVUVfU1EgJiZcbiAgICAgICAgdGhpcy5fc3RhdGUgIT09IElOX0FUVFJJQlVURV9WQUxVRV9EUSAmJlxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gSU5fQVRUUklCVVRFX1ZBTFVFX05RICYmXG4gICAgICAgIHRoaXMuX3N0YXRlICE9PSBJTl9DTE9TSU5HX1RBR19OQU1FXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbnRleHQoZGF0YSk7XG4gICAgfVxuICAgIC8vZWxzZSwgaWdub3JlIHJlbWFpbmluZyBkYXRhXG4gICAgLy9UT0RPIGFkZCBhIHdheSB0byByZW1vdmUgY3VycmVudCB0YWdcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICBUb2tlbml6ZXIuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgeyB4bWxNb2RlOiB0aGlzLl94bWxNb2RlLCBkZWNvZGVFbnRpdGllczogdGhpcy5fZGVjb2RlRW50aXRpZXMgfSxcbiAgICAgICAgdGhpcy5fY2JzXG4gICAgKTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuZ2V0QWJzb2x1dGVJbmRleCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXJPZmZzZXQgKyB0aGlzLl9pbmRleDtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2dldFNlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVmZmVyLnN1YnN0cmluZyh0aGlzLl9zZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4KTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2VtaXRUb2tlbiA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB0aGlzLl9jYnNbbmFtZV0odGhpcy5fZ2V0U2VjdGlvbigpKTtcbiAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSAtMTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2VtaXRQYXJ0aWFsID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy5fYmFzZVN0YXRlICE9PSBURVhUKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbmF0dHJpYmRhdGEodmFsdWUpOyAvL1RPRE8gaW1wbGVtZW50IHRoZSBuZXcgZXZlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jYnMub250ZXh0KHZhbHVlKTtcbiAgICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBQYXJzZXIgPSByZXF1aXJlKFwiLi9QYXJzZXIuanNcIik7XG52YXIgV3JpdGFibGVTdHJlYW0gPSByZXF1aXJlKFwicmVhZGFibGUtc3RyZWFtXCIpLldyaXRhYmxlO1xudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKFwic3RyaW5nX2RlY29kZXJcIikuU3RyaW5nRGVjb2RlcjtcbnZhciBCdWZmZXIgPSByZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcjtcblxuZnVuY3Rpb24gU3RyZWFtKGNicywgb3B0aW9ucykge1xuICAgIHZhciBwYXJzZXIgPSAodGhpcy5fcGFyc2VyID0gbmV3IFBhcnNlcihjYnMsIG9wdGlvbnMpKTtcbiAgICB2YXIgZGVjb2RlciA9ICh0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoKSk7XG5cbiAgICBXcml0YWJsZVN0cmVhbS5jYWxsKHRoaXMsIHsgZGVjb2RlU3RyaW5nczogZmFsc2UgfSk7XG5cbiAgICB0aGlzLm9uY2UoXCJmaW5pc2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHBhcnNlci5lbmQoZGVjb2Rlci5lbmQoKSk7XG4gICAgfSk7XG59XG5cbnJlcXVpcmUoXCJpbmhlcml0c1wiKShTdHJlYW0sIFdyaXRhYmxlU3RyZWFtKTtcblxuU3RyZWFtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gICAgaWYgKGNodW5rIGluc3RhbmNlb2YgQnVmZmVyKSBjaHVuayA9IHRoaXMuX2RlY29kZXIud3JpdGUoY2h1bmspO1xuICAgIHRoaXMuX3BhcnNlci53cml0ZShjaHVuayk7XG4gICAgY2IoKTtcbn07XG4iLCJ2YXIgUGFyc2VyID0gcmVxdWlyZShcIi4vUGFyc2VyLmpzXCIpO1xudmFyIERvbUhhbmRsZXIgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcblxuZnVuY3Rpb24gZGVmaW5lUHJvcChuYW1lLCB2YWx1ZSkge1xuICAgIGRlbGV0ZSBtb2R1bGUuZXhwb3J0c1tuYW1lXTtcbiAgICBtb2R1bGUuZXhwb3J0c1tuYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUGFyc2VyOiBQYXJzZXIsXG4gICAgVG9rZW5pemVyOiByZXF1aXJlKFwiLi9Ub2tlbml6ZXIuanNcIiksXG4gICAgRWxlbWVudFR5cGU6IHJlcXVpcmUoXCJkb21lbGVtZW50dHlwZVwiKSxcbiAgICBEb21IYW5kbGVyOiBEb21IYW5kbGVyLFxuICAgIGdldCBGZWVkSGFuZGxlcigpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZVByb3AoXCJGZWVkSGFuZGxlclwiLCByZXF1aXJlKFwiLi9GZWVkSGFuZGxlci5qc1wiKSk7XG4gICAgfSxcbiAgICBnZXQgU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIlN0cmVhbVwiLCByZXF1aXJlKFwiLi9TdHJlYW0uanNcIikpO1xuICAgIH0sXG4gICAgZ2V0IFdyaXRhYmxlU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIldyaXRhYmxlU3RyZWFtXCIsIHJlcXVpcmUoXCIuL1dyaXRhYmxlU3RyZWFtLmpzXCIpKTtcbiAgICB9LFxuICAgIGdldCBQcm94eUhhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFwiUHJveHlIYW5kbGVyXCIsIHJlcXVpcmUoXCIuL1Byb3h5SGFuZGxlci5qc1wiKSk7XG4gICAgfSxcbiAgICBnZXQgRG9tVXRpbHMoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFwiRG9tVXRpbHNcIiwgcmVxdWlyZShcImRvbXV0aWxzXCIpKTtcbiAgICB9LFxuICAgIGdldCBDb2xsZWN0aW5nSGFuZGxlcigpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZVByb3AoXG4gICAgICAgICAgICBcIkNvbGxlY3RpbmdIYW5kbGVyXCIsXG4gICAgICAgICAgICByZXF1aXJlKFwiLi9Db2xsZWN0aW5nSGFuZGxlci5qc1wiKVxuICAgICAgICApO1xuICAgIH0sXG4gICAgLy8gRm9yIGxlZ2FjeSBzdXBwb3J0XG4gICAgRGVmYXVsdEhhbmRsZXI6IERvbUhhbmRsZXIsXG4gICAgZ2V0IFJzc0hhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFwiUnNzSGFuZGxlclwiLCB0aGlzLkZlZWRIYW5kbGVyKTtcbiAgICB9LFxuICAgIC8vaGVscGVyIG1ldGhvZHNcbiAgICBwYXJzZURPTTogZnVuY3Rpb24oZGF0YSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgaGFuZGxlciA9IG5ldyBEb21IYW5kbGVyKG9wdGlvbnMpO1xuICAgICAgICBuZXcgUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpLmVuZChkYXRhKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIuZG9tO1xuICAgIH0sXG4gICAgcGFyc2VGZWVkOiBmdW5jdGlvbihmZWVkLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gbmV3IG1vZHVsZS5leHBvcnRzLkZlZWRIYW5kbGVyKG9wdGlvbnMpO1xuICAgICAgICBuZXcgUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpLmVuZChmZWVkKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIuZG9tO1xuICAgIH0sXG4gICAgY3JlYXRlRG9tU3RyZWFtOiBmdW5jdGlvbihjYiwgb3B0aW9ucywgZWxlbWVudENiKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gbmV3IERvbUhhbmRsZXIoY2IsIG9wdGlvbnMsIGVsZW1lbnRDYik7XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgLy8gTGlzdCBvZiBhbGwgZXZlbnRzIHRoYXQgdGhlIHBhcnNlciBlbWl0c1xuICAgIEVWRU5UUzoge1xuICAgICAgICAvKiBGb3JtYXQ6IGV2ZW50bmFtZTogbnVtYmVyIG9mIGFyZ3VtZW50cyAqL1xuICAgICAgICBhdHRyaWJ1dGU6IDIsXG4gICAgICAgIGNkYXRhc3RhcnQ6IDAsXG4gICAgICAgIGNkYXRhZW5kOiAwLFxuICAgICAgICB0ZXh0OiAxLFxuICAgICAgICBwcm9jZXNzaW5naW5zdHJ1Y3Rpb246IDIsXG4gICAgICAgIGNvbW1lbnQ6IDEsXG4gICAgICAgIGNvbW1lbnRlbmQ6IDAsXG4gICAgICAgIGNsb3NldGFnOiAxLFxuICAgICAgICBvcGVudGFnOiAyLFxuICAgICAgICBvcGVudGFnbmFtZTogMSxcbiAgICAgICAgZXJyb3I6IDEsXG4gICAgICAgIGVuZDogMFxuICAgIH1cbn07XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLy8hIG1vbWVudC5qc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiBob29rcyAoKSB7XG4gICAgICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuICAgIC8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgIGZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICAgICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgICAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgICAgICB2YXIgcmVzID0gW10sIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1wdHkgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB1bnVzZWRUb2tlbnMgICAgOiBbXSxcbiAgICAgICAgICAgIHVudXNlZElucHV0ICAgICA6IFtdLFxuICAgICAgICAgICAgb3ZlcmZsb3cgICAgICAgIDogLTIsXG4gICAgICAgICAgICBjaGFyc0xlZnRPdmVyICAgOiAwLFxuICAgICAgICAgICAgbnVsbElucHV0ICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBpbnZhbGlkTW9udGggICAgOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZEZvcm1hdCAgIDogZmFsc2UsXG4gICAgICAgICAgICB1c2VySW52YWxpZGF0ZWQgOiBmYWxzZSxcbiAgICAgICAgICAgIGlzbyAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VkRGF0ZVBhcnRzIDogW10sXG4gICAgICAgICAgICBtZXJpZGllbSAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgcmZjMjgyMiAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB3ZWVrZGF5TWlzbWF0Y2ggOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5fcGY7XG4gICAgfVxuXG4gICAgdmFyIHNvbWU7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5zb21lKSB7XG4gICAgICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgICAgICBpZiAobS5faXNWYWxpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgICAgICB2YXIgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICE9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBpc05vd1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG5cbiAgICAgICAgICAgIGlmIChtLl9zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpc05vd1ZhbGlkID0gaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuID09IG51bGwgfHwgIU9iamVjdC5pc0Zyb3plbihtKSkge1xuICAgICAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCAoZmxhZ3MpIHtcbiAgICAgICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuICAgIC8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG4gICAgdmFyIG1vbWVudFByb3BlcnRpZXMgPSBob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW107XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faSkpIHtcbiAgICAgICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2YpKSB7XG4gICAgICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sKSkge1xuICAgICAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fc3RyaWN0KSkge1xuICAgICAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3R6bSkpIHtcbiAgICAgICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc1VUQykpIHtcbiAgICAgICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fb2Zmc2V0KSkge1xuICAgICAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3BmKSkge1xuICAgICAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbG9jYWxlKSkge1xuICAgICAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAvLyBNb21lbnQgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICAgICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgICAgICAvLyBvYmplY3RzLlxuICAgICAgICBpZiAodXBkYXRlSW5Qcm9ncmVzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnQgKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNGbG9vciAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcikgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKSkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAoaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGFyZztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm4obXNnICsgJ1xcbkFyZ3VtZW50czogJyArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICsgJ1xcbicgKyAobmV3IEVycm9yKCkpLnN0YWNrKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbik7XG4gICAgfVxuXG4gICAgdmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG4gICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQgKGNvbmZpZykge1xuICAgICAgICB2YXIgcHJvcCwgaTtcbiAgICAgICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICAgICAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLCBwcm9wO1xuICAgICAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgICAgICFoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXM7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgaSwgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIgKGtleSwgbW9tLCBub3cpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV0gfHwgdGhpcy5fY2FsZW5kYXJbJ3NhbWVFbHNlJ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICAgICAgTFRTICA6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMVCAgIDogJ2g6bW0gQScsXG4gICAgICAgIEwgICAgOiAnTU0vREQvWVlZWScsXG4gICAgICAgIExMICAgOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgTExMICA6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb25nRGF0ZUZvcm1hdCAoa2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXIucmVwbGFjZSgvTU1NTXxNTXxERHxkZGRkL2csIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWwuc2xpY2UoMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuICAgIGZ1bmN0aW9uIGludmFsaWREYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCc7XG4gICAgdmFyIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgICA6ICclcyBhZ28nLFxuICAgICAgICBzICA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgIG0gIDogJ2EgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggIDogJ2FuIGhvdXInLFxuICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgIGQgIDogJ2EgZGF5JyxcbiAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgIE0gIDogJ2EgbW9udGgnLFxuICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICB5ICA6ICdhIHllYXInLFxuICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gKGlzRnVuY3Rpb24ob3V0cHV0KSkgP1xuICAgICAgICAgICAgb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkgOlxuICAgICAgICAgICAgb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFzdEZ1dHVyZSAoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0QWxpYXMgKHVuaXQsIHNob3J0aGFuZCkge1xuICAgICAgICB2YXIgbG93ZXJDYXNlID0gdW5pdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBhbGlhc2VzW2xvd2VyQ2FzZV0gPSBhbGlhc2VzW2xvd2VyQ2FzZSArICdzJ10gPSBhbGlhc2VzW3Nob3J0aGFuZF0gPSB1bml0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgICAgIHByb3A7XG5cbiAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbiAgICB9XG5cbiAgICB2YXIgcHJpb3JpdGllcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdFByaW9yaXR5KHVuaXQsIHByaW9yaXR5KSB7XG4gICAgICAgIHByaW9yaXRpZXNbdW5pdF0gPSBwcmlvcml0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgICAgIHZhciB1bml0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciB1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgICAgICB1bml0cy5wdXNoKHt1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XX0pO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1bml0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICsgYWJzTnVtYmVyO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxuICAgIHZhciBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nO1xuXG4gICAgdmFyIGZvcm1hdEZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbiAgICAvLyB0b2tlbjogICAgJ00nXG4gICAgLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuICAgIC8vIG9yZGluYWw6ICAnTW8nXG4gICAgLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG4gICAgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4gKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRva2VuKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJycsIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaXNGdW5jdGlvbihhcnJheVtpXSkgPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KSA6IGFycmF5W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbiAgICBmdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9IGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShsb2NhbEZvcm1hdHRpbmdUb2tlbnMsIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vucyk7XG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSAgICAgICAgID0gL1xcZC87ICAgICAgICAgICAgLy8gICAgICAgMCAtIDlcbiAgICB2YXIgbWF0Y2gyICAgICAgICAgPSAvXFxkXFxkLzsgICAgICAgICAgLy8gICAgICAwMCAtIDk5XG4gICAgdmFyIG1hdGNoMyAgICAgICAgID0gL1xcZHszfS87ICAgICAgICAgLy8gICAgIDAwMCAtIDk5OVxuICAgIHZhciBtYXRjaDQgICAgICAgICA9IC9cXGR7NH0vOyAgICAgICAgIC8vICAgIDAwMDAgLSA5OTk5XG4gICAgdmFyIG1hdGNoNiAgICAgICAgID0gL1srLV0/XFxkezZ9LzsgICAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgIHZhciBtYXRjaDF0bzIgICAgICA9IC9cXGRcXGQ/LzsgICAgICAgICAvLyAgICAgICAwIC0gOTlcbiAgICB2YXIgbWF0Y2gzdG80ICAgICAgPSAvXFxkXFxkXFxkXFxkPy87ICAgICAvLyAgICAgOTk5IC0gOTk5OVxuICAgIHZhciBtYXRjaDV0bzYgICAgICA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LzsgLy8gICA5OTk5OSAtIDk5OTk5OVxuICAgIHZhciBtYXRjaDF0bzMgICAgICA9IC9cXGR7MSwzfS87ICAgICAgIC8vICAgICAgIDAgLSA5OTlcbiAgICB2YXIgbWF0Y2gxdG80ICAgICAgPSAvXFxkezEsNH0vOyAgICAgICAvLyAgICAgICAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDF0bzYgICAgICA9IC9bKy1dP1xcZHsxLDZ9LzsgIC8vIC05OTk5OTkgLSA5OTk5OTlcblxuICAgIHZhciBtYXRjaFVuc2lnbmVkICA9IC9cXGQrLzsgICAgICAgICAgIC8vICAgICAgIDAgLSBpbmZcbiAgICB2YXIgbWF0Y2hTaWduZWQgICAgPSAvWystXT9cXGQrLzsgICAgICAvLyAgICAtaW5mIC0gaW5mXG5cbiAgICB2YXIgbWF0Y2hPZmZzZXQgICAgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2k7IC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgIHZhciBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2k7IC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG5cbiAgICB2YXIgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vOyAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuXG4gICAgLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4gICAgLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xuICAgIHZhciBtYXRjaFdvcmQgPSAvWzAtOV17MCwyNTZ9WydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGMDdcXHVGRjEwLVxcdUZGRUZdezEsMjU2fXxbXFx1MDYwMC1cXHUwNkZGXFwvXXsxLDI1Nn0oXFxzKj9bXFx1MDYwMC1cXHUwNkZGXXsxLDI1Nn0pezEsMn0vaTtcblxuICAgIHZhciByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRSZWdleFRva2VuICh0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleCkgPyByZWdleCA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIChpc1N0cmljdCAmJiBzdHJpY3RSZWdleCkgPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbiAodG9rZW4sIGNvbmZpZykge1xuICAgICAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2V4RXNjYXBlKHMucmVwbGFjZSgnXFxcXCcsICcnKS5yZXBsYWNlKC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0O1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5zID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGksIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRva2VuID0gW3Rva2VuXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOdW1iZXIoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5baV1dID0gZnVuYztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgWUVBUiA9IDA7XG4gICAgdmFyIE1PTlRIID0gMTtcbiAgICB2YXIgREFURSA9IDI7XG4gICAgdmFyIEhPVVIgPSAzO1xuICAgIHZhciBNSU5VVEUgPSA0O1xuICAgIHZhciBTRUNPTkQgPSA1O1xuICAgIHZhciBNSUxMSVNFQ09ORCA9IDY7XG4gICAgdmFyIFdFRUsgPSA3O1xuICAgIHZhciBXRUVLREFZID0gODtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgICAgICByZXR1cm4geSA8PSA5OTk5ID8gJycgKyB5IDogJysnICsgeTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCAgIDRdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCAgNV0sICAgICAgIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3llYXInLCAxKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWScsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWScsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhciAoKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0U2V0ICh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCAobW9tLCB1bml0KSB7XG4gICAgICAgIHJldHVybiBtb20uaXNWYWxpZCgpID9cbiAgICAgICAgICAgIG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCQxIChtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChtb20uaXNWYWxpZCgpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh1bml0ID09PSAnRnVsbFllYXInICYmIGlzTGVhcFllYXIobW9tLnllYXIoKSkgJiYgbW9tLm1vbnRoKCkgPT09IDEgJiYgbW9tLmRhdGUoKSA9PT0gMjkpIHtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUsIG1vbS5tb250aCgpLCBkYXlzSW5Nb250aCh2YWx1ZSwgbW9tLm1vbnRoKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdHZXQgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gc3RyaW5nU2V0ICh1bml0cywgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplT2JqZWN0VW5pdHModW5pdHMpO1xuICAgICAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXRpemVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9kKG4sIHgpIHtcbiAgICAgICAgcmV0dXJuICgobiAlIHgpICsgeCkgJSB4O1xuICAgIH1cblxuICAgIHZhciBpbmRleE9mO1xuXG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIC8vIEkga25vd1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4obW9udGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtb2RNb250aCA9IG1vZChtb250aCwgMTIpO1xuICAgICAgICB5ZWFyICs9IChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuICAgICAgICByZXR1cm4gbW9kTW9udGggPT09IDEgPyAoaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpIDogKDMxIC0gbW9kTW9udGggJSA3ICUgMik7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21vbnRoJywgOCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdNJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTScsICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICAgICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFycmF5W01PTlRIXSA9IG1vbnRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIHZhciBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vO1xuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzID0gJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzIDpcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzWyh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnQgOlxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXSA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFtNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UgKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgICAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NTScgJiYgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NJyAmJiB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc2V0TW9udGggKG1vbSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGRheU9mTW9udGg7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSk7XG4gICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyAnTW9udGgnXSh2YWx1ZSwgZGF5T2ZNb250aCk7XG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TW9udGggKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCAoKSB7XG4gICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLCBtb207XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSAoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAgICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG5cbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCAmJiBpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHkpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcblxuICAgICAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCAmJiBpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG4gICAgZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgICAgIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICAgICAgcmV0dXJuIC1md2RsdyArIGZ3ZCAtIDE7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICAgICAgcmVzWWVhciwgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgICAgICByZXNXZWVrLCByZXNZZWFyO1xuXG4gICAgICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWsnLCA1KTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWsnLCA1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3cnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdXJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ3cnLCAnd3cnLCAnVycsICdXVyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2VlayAobW9tKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB0aGlzLmxvY2FsZURhdGEoKS53ZWVrKHRoaXMpO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5JywgMTEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtkYXknLCAxMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID0gJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5cyA6XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5c1ttLmRheSgpXSA6XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1t0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5kYXkoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0IChtKSB7XG4gICAgICAgIHJldHVybiAobSkgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluIChtKSB7XG4gICAgICAgIHJldHVybiAobSkgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzTWluO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2UgKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZGQnICYmIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGQnICYmIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGQnICYmIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5QaWVjZXMgPSBbXSwgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSwgbW9tLCBtaW5wLCBzaG9ydHAsIGxvbmdwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIG1pbnAgPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgc2hvcnRwID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgbG9uZ3AgPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpO1xuICAgICAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgd2Vla2RheSAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbSAodG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKHRoaXMuaG91cnMoKSwgdGhpcy5taW51dGVzKCksIGxvd2VyY2FzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2hvdXInLCAxMyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdBJywgIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICAgICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0gKGlucHV0KSB7XG4gICAgICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAgICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgICAgIHJldHVybiAoKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCcpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIHRoZXkgd2FudC4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgLy8gdGhpcyBydWxlLlxuICAgIHZhciBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuICAgIHZhciBiYXNlQ29uZmlnID0ge1xuICAgICAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgICAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgICAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgICAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICAgICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICAgICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICAgICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2VcbiAgICB9O1xuXG4gICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xuICAgIHZhciBsb2NhbGVzID0ge307XG4gICAgdmFyIGxvY2FsZUZhbWlsaWVzID0ge307XG4gICAgdmFyIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xuICAgIH1cblxuICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuICAgIC8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4gICAgLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgICAgICB2YXIgaSA9IDAsIGosIG5leHQsIGxvY2FsZSwgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID49IGogJiYgY29tcGFyZUFycmF5cyhzcGxpdCwgbmV4dCwgdHJ1ZSkgPj0gaiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsO1xuICAgICAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgICAgICBpZiAoIWxvY2FsZXNbbmFtZV0gJiYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgICAgIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvbGRMb2NhbGUgPSBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgICAgICAgICAgICAgdmFyIGFsaWFzZWRSZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbiAgICAvLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuICAgIC8vIGxvY2FsZSBrZXkuXG4gICAgZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy93YXJuIHVzZXIgaWYgYXJndW1lbnRzIGFyZSBwYXNzZWQgYnV0IHRoZSBsb2NhbGUgY291bGQgbm90IGJlIHNldFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0xvY2FsZSAnICsga2V5ICsgICcgbm90IGZvdW5kLiBEaWQgeW91IGZvcmdldCB0byBsb2FkIGl0PycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlIChuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbiBleGlzdGluZyBsb2NhbGUuIG1vbWVudC5kZWZpbmVMb2NhbGUobG9jYWxlTmFtZSwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoY29uZmlnLnBhcmVudExvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICAgICAgaWYgKGxvY2FsZUZhbWlsaWVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHNldCB0aGUgbG9jYWxlIEFGVEVSIGFsbCBjaGlsZCBsb2NhbGVzIGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gY3JlYXRlZCwgc28gd2Ugd29uJ3QgZW5kIHVwIHdpdGggdGhlIGNoaWxkIGxvY2FsZSBzZXQuXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSwgdG1wTG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICBsb2NhbGUgPSBuZXcgTG9jYWxlKGNvbmZpZyk7XG4gICAgICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGU7XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGFcbiAgICBmdW5jdGlvbiBnZXRMb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyAobSkge1xuICAgICAgICB2YXIgb3ZlcmZsb3c7XG4gICAgICAgIHZhciBhID0gbS5fYTtcblxuICAgICAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICAgICAgYVtNT05USF0gICAgICAgPCAwIHx8IGFbTU9OVEhdICAgICAgID4gMTEgID8gTU9OVEggOlxuICAgICAgICAgICAgICAgIGFbREFURV0gICAgICAgIDwgMSB8fCBhW0RBVEVdICAgICAgICA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKSA/IERBVEUgOlxuICAgICAgICAgICAgICAgIGFbSE9VUl0gICAgICAgIDwgMCB8fCBhW0hPVVJdICAgICAgICA+IDI0IHx8IChhW0hPVVJdID09PSAyNCAmJiAoYVtNSU5VVEVdICE9PSAwIHx8IGFbU0VDT05EXSAhPT0gMCB8fCBhW01JTExJU0VDT05EXSAhPT0gMCkpID8gSE9VUiA6XG4gICAgICAgICAgICAgICAgYVtNSU5VVEVdICAgICAgPCAwIHx8IGFbTUlOVVRFXSAgICAgID4gNTkgID8gTUlOVVRFIDpcbiAgICAgICAgICAgICAgICBhW1NFQ09ORF0gICAgICA8IDAgfHwgYVtTRUNPTkRdICAgICAgPiA1OSAgPyBTRUNPTkQgOlxuICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OSA/IE1JTExJU0VDT05EIDpcbiAgICAgICAgICAgICAgICAtMTtcblxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiYgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbiAgICBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5IChjb25maWcpIHtcbiAgICAgICAgdmFyIGksIGRhdGUsIGlucHV0ID0gW10sIGN1cnJlbnREYXRlLCBleHBlY3RlZFdlZWtkYXksIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgeWVhclRvVXNlID0gZGVmYXVsdHMoY29uZmlnLl9hW1lFQVJdLCBjdXJyZW50RGF0ZVtZRUFSXSk7XG5cbiAgICAgICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fCBjb25maWcuX2RheU9mWWVhciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtEQVRFXSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgICAgIC8vICogaWYgbm8geWVhciwgbW9udGgsIGRheSBvZiBtb250aCBhcmUgZ2l2ZW4sIGRlZmF1bHQgdG8gdG9kYXlcbiAgICAgICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAgICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAgICAgLy8gKiBpZiB5ZWFyIGlzIGdpdmVuLCBkb24ndCBkZWZhdWx0IGFueXRoaW5nXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICAgICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gKGNvbmZpZy5fYVtpXSA9PSBudWxsKSA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgICAgICBpZiAoY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwKSB7XG4gICAgICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShudWxsLCBpbnB1dCk7XG4gICAgICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDID8gY29uZmlnLl9kLmdldFVUQ0RheSgpIDogY29uZmlnLl9kLmdldERheSgpO1xuXG4gICAgICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHV0Y09mZnNldCBjYW4gYmUgY2hhbmdlZFxuICAgICAgICAvLyB3aXRoIHBhcnNlWm9uZS5cbiAgICAgICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAyNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIHR5cGVvZiBjb25maWcuX3cuZCAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICAgICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93O1xuXG4gICAgICAgIHcgPSBjb25maWcuX3c7XG4gICAgICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvdyA9IDE7XG4gICAgICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIHZhciBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaXNvIDg2MDEgcmVnZXhcbiAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbiAgICB2YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcbiAgICB2YXIgYmFzaWNJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG5cbiAgICB2YXIgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LztcblxuICAgIHZhciBpc29EYXRlcyA9IFtcbiAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICAgICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgICAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgICAgICAvLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXG4gICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXVxuICAgIF07XG5cbiAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgdmFyIGlzb1RpbWVzID0gW1xuICAgICAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgIFsnSEgnLCAvXFxkXFxkL11cbiAgICBdO1xuXG4gICAgdmFyIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoXFwtP1xcZCspL2k7XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBsLFxuICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgICAgIGFsbG93VGltZSwgZGF0ZUZvcm1hdCwgdGltZUZvcm1hdCwgdHpGb3JtYXQ7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbiAgICB2YXIgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC87XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobWludXRlU3RyLCAxMClcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChzZWNvbmRTdHIsIDEwKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgICAgICByZXR1cm4gMjAwMCArIHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiAxOTAwICsgeWVhcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWVhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1xcKFteKV0qXFwpfFtcXG5cXHRdL2csICcgJykucmVwbGFjZSgvKFxcc1xccyspL2csICcgJykucmVwbGFjZSgvXlxcc1xccyovLCAnJykucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tXZWVrZGF5KHdlZWtkYXlTdHIsIHBhcnNlZElucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIHZhbmlsbGEgSlMgRGF0ZSBvYmplY3Qgd2l0aCBhbiBpbmRlcGVudGVudCBkYXktb2Ytd2VlayBjaGVjay5cbiAgICAgICAgICAgIHZhciB3ZWVrZGF5UHJvdmlkZWQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydC5pbmRleE9mKHdlZWtkYXlTdHIpLFxuICAgICAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShwYXJzZWRJbnB1dFswXSwgcGFyc2VkSW5wdXRbMV0sIHBhcnNlZElucHV0WzJdKS5nZXREYXkoKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5UHJvdmlkZWQgIT09IHdlZWtkYXlBY3R1YWwpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgb2JzT2Zmc2V0cyA9IHtcbiAgICAgICAgVVQ6IDAsXG4gICAgICAgIEdNVDogMCxcbiAgICAgICAgRURUOiAtNCAqIDYwLFxuICAgICAgICBFU1Q6IC01ICogNjAsXG4gICAgICAgIENEVDogLTUgKiA2MCxcbiAgICAgICAgQ1NUOiAtNiAqIDYwLFxuICAgICAgICBNRFQ6IC02ICogNjAsXG4gICAgICAgIE1TVDogLTcgKiA2MCxcbiAgICAgICAgUERUOiAtNyAqIDYwLFxuICAgICAgICBQU1Q6IC04ICogNjBcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgICAgICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICAgICAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyB0aGUgb25seSBhbGxvd2VkIG1pbGl0YXJ5IHR6IGlzIFpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhtID0gcGFyc2VJbnQobnVtT2Zmc2V0LCAxMCk7XG4gICAgICAgICAgICB2YXIgbSA9IGhtICUgMTAwLCBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWRBcnJheSA9IGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MobWF0Y2hbNF0sIG1hdGNoWzNdLCBtYXRjaFsyXSwgbWF0Y2hbNV0sIG1hdGNoWzZdLCBtYXRjaFs3XSk7XG4gICAgICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5O1xuICAgICAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgICAgICBjb25maWcuX2QgPSBjcmVhdGVVVENEYXRlLmFwcGx5KG51bGwsIGNvbmZpZy5fYSk7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXQgb3IgZmFsbGJhY2tcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGNvbmZpZy5faSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgIH1cblxuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAgICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYW4gdXBjb21pbmcgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICAgICAnaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuICAgIGhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgUkZDIDI4MjIgZm9ybVxuICAgIGhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25maWcuX2EgPSBbXTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgICAgIGksIHBhcnNlZElucHV0LCB0b2tlbnMsIHRva2VuLCBza2lwcGVkLFxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgICAgIHRva2VucyA9IGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8IFtdKVswXTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b2tlbicsIHRva2VuLCAncGFyc2VkSW5wdXQnLCBwYXJzZWRJbnB1dCxcbiAgICAgICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxuICAgICAgICBpZiAoY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5tZXJpZGllbSA9IGNvbmZpZy5fbWVyaWRpZW07XG4gICAgICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoY29uZmlnLl9sb2NhbGUsIGNvbmZpZy5fYVtIT1VSXSwgY29uZmlnLl9tZXJpZGllbSk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcCAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgICAgICB2YXIgaXNQbTtcblxuICAgICAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3NcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICAgICAgYmVzdE1vbWVudCxcblxuICAgICAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgY3VycmVudFNjb3JlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2YubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnLl9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmICghaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICAgICAgaWYgKHNjb3JlVG9CZWF0ID09IG51bGwgfHwgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpO1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoW2kueWVhciwgaS5tb250aCwgaS5kYXkgfHwgaS5kYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gIGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmFsaWQoY29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2k7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGlzT2JqZWN0KGlucHV0KSAmJiBpc09iamVjdEVtcHR5KGlucHV0KSkgfHxcbiAgICAgICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgICAgIGMuX2kgPSBpbnB1dDtcbiAgICAgICAgYy5fZiA9IGZvcm1hdDtcbiAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICB2YXIgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbiAgICBmdW5jdGlvbiBtaW4gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heCAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbiAgICB9XG5cbiAgICB2YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogKyhuZXcgRGF0ZSgpKTtcbiAgICB9O1xuXG4gICAgdmFyIG9yZGVyaW5nID0gWyd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgJ21pbGxpc2Vjb25kJ107XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uVmFsaWQobSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbSkge1xuICAgICAgICAgICAgaWYgKCEoaW5kZXhPZi5jYWxsKG9yZGVyaW5nLCBrZXkpICE9PSAtMSAmJiAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1bml0SGFzRGVjaW1hbCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IDAsXG4gICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArXG4gICAgICAgICAgICB3ZWVrcyAqIDc7XG4gICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICAgICAgcXVhcnRlcnMgKiAzICtcbiAgICAgICAgICAgIHllYXJzICogMTI7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzUm91bmQgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2lnbiArIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgKyBzZXBhcmF0b3IgKyB6ZXJvRmlsbCh+fihvZmZzZXQpICUgNjAsIDIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvZmZzZXQoJ1onLCAnOicpO1xuICAgIG9mZnNldCgnWlonLCAnJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdaJywgIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ1onLCAnWlonXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIHRpbWV6b25lIGNodW5rZXJcbiAgICAvLyAnKzEwOjAwJyA+IFsnMTAnLCAgJzAwJ11cbiAgICAvLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbiAgICB2YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbiAgICBmdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpO1xuXG4gICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgICAgICB2YXIgcGFydHMgICA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgICAgIHZhciBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgICAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/XG4gICAgICAgICAgMCA6XG4gICAgICAgICAgcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgdmFyIHJlcywgZGlmZjtcbiAgICAgICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyBpbnB1dC52YWx1ZU9mKCkgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgICAgICByZXMuX2Quc2V0VGltZShyZXMuX2QudmFsdWVPZigpICsgZGlmZik7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgICAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICAgICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4gICAgLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG4gICAgaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbiAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuICAgIC8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbiAgICAvLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4gICAgLy9cbiAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbiAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbiAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4gICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbiAgICBmdW5jdGlvbiBnZXRTZXRPZmZzZXQgKGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBsb2NhbEFkanVzdDtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbCAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgICAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSk7XG4gICAgICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0IChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICAgICAgaWYgKGMuX2EpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgIGNvbXBhcmVBcnJheXMoYy5fYSwgb3RoZXIudG9BcnJheSgpKSA+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjT2Zmc2V0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0YyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxuICAgIHZhciBhc3BOZXRSZWdleCA9IC9eKFxcLXxcXCspPyg/OihcXGQqKVsuIF0pPyhcXGQrKVxcOihcXGQrKSg/OlxcOihcXGQrKShcXC5cXGQqKT8pPyQvO1xuXG4gICAgLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbiAgICAvLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4gICAgLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxuICAgIHZhciBpc29SZWdleCA9IC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEdXJhdGlvbiAoaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zIDogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkICA6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9IGlucHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHkgIDogMCxcbiAgICAgICAgICAgICAgICBkICA6IHRvSW50KG1hdGNoW0RBVEVdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgaCAgOiB0b0ludChtYXRjaFtIT1VSXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBzICA6IHRvSW50KG1hdGNoW1NFQ09ORF0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbXMgOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogKG1hdGNoWzFdID09PSAnKycpID8gMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5IDogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE0gOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBkIDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGggOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgbSA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgICAgICBzIDogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiYgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLCBjcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG4gICAgY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvIChpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG5cbiAgICAgICAgcmVzLm1vbnRocyA9IG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgK1xuICAgICAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gKyhiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKG5hbWUsICdtb21lbnQoKS4nICsgbmFtZSAgKyAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgKyBuYW1lICsgJyhudW1iZXIsIHBlcmlvZCkuICcgK1xuICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyArdmFsIDogdmFsO1xuICAgICAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QgKG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG5cbiAgICBmdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkaWZmIDwgLTYgPyAnc2FtZUVsc2UnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgLTEgPyAnbGFzdFdlZWsnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDEgPyAnc2FtZURheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAyID8gJ25leHREYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyJDEgKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAgICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJztcblxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0cyAmJiAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KSA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKCFpc1VuZGVmaW5lZCh1bml0cykgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyghaXNVbmRlZmluZWQodW5pdHMpID8gdW5pdHMgOiAnbWlsbGlzZWNvbmQnKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZXR3ZWVuIChmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICAgICAgcmV0dXJuIChpbmNsdXNpdml0eVswXSA9PT0gJygnID8gdGhpcy5pc0FmdGVyKGZyb20sIHVuaXRzKSA6ICF0aGlzLmlzQmVmb3JlKGZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknID8gdGhpcy5pc0JlZm9yZSh0bywgdW5pdHMpIDogIXRoaXMuaXNBZnRlcih0bywgdW5pdHMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICAgICAgaW5wdXRNcztcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyB8fCAnbWlsbGlzZWNvbmQnKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNBZnRlcihpbnB1dCx1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQmVmb3JlKGlucHV0LHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaWZmIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICAgICAgdmFyIHRoYXQsXG4gICAgICAgICAgICB6b25lRGVsdGEsXG4gICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAxMjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMWUzOyBicmVhazsgLy8gMTAwMFxuICAgICAgICAgICAgY2FzZSAnbWludXRlJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDZlNDsgYnJlYWs7IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnaG91cic6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA4NjRlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gNjA0OGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGRlZmF1bHQ6IG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzRmxvYXQgPyBvdXRwdXQgOiBhYnNGbG9vcihvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoRGlmZiAoYSwgYikge1xuICAgICAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRoc1xuICAgICAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbiAgICB9XG5cbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZTtcbiAgICAgICAgdmFyIG0gPSB1dGMgPyB0aGlzLmNsb25lKCkudXRjKCkgOiB0aGlzO1xuICAgICAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCB1dGMgPyAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICAgICAgaWYgKHV0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSArIHRoaXMudXRjT2Zmc2V0KCkgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gICAgICogYWxzbyBiZSBldmFsdWF0ZWQgdG8gZ2V0IGEgbmV3IG1vbWVudCB3aGljaCBpcyB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb21lbnQuaW52YWxpZCgvKiAnICsgdGhpcy5faSArICcgKi8pJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnVuYyA9ICdtb21lbnQnO1xuICAgICAgICB2YXIgem9uZSA9ICcnO1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgICAgIHpvbmUgPSAnWic7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgICAgIHZhciB5ZWFyID0gKDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSkgPyAnWVlZWScgOiAnWVlZWVlZJztcbiAgICAgICAgdmFyIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgICAgIHZhciBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQgKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbSAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbU5vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7ZnJvbTogdGhpcywgdG86IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vdyAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICAvLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4gICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuICAgIC8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBsb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRPZiAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgc3dpdGNoIGludGVudGlvbmFsbHkgb21pdHMgYnJlYWsga2V5d29yZHNcbiAgICAgICAgLy8gdG8gdXRpbGl6ZSBmYWxsaW5nIHRocm91Z2ggdGhlIGNhc2VzLlxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKDApO1xuICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgxKTtcbiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRoaXMuaG91cnMoMCk7XG4gICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGhpcy5taW51dGVzKDApO1xuICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZWNvbmRzKDApO1xuICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZHMoMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZWVrcyBhcmUgYSBzcGVjaWFsIGNhc2VcbiAgICAgICAgaWYgKHVuaXRzID09PSAnd2VlaycpIHtcbiAgICAgICAgICAgIHRoaXMud2Vla2RheSgwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodW5pdHMgPT09ICdpc29XZWVrJykge1xuICAgICAgICAgICAgdGhpcy5pc29XZWVrZGF5KDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcXVhcnRlcnMgYXJlIGFsc28gc3BlY2lhbFxuICAgICAgICBpZiAodW5pdHMgPT09ICdxdWFydGVyJykge1xuICAgICAgICAgICAgdGhpcy5tb250aChNYXRoLmZsb29yKHRoaXMubW9udGgoKSAvIDMpICogMyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRPZiAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICdkYXRlJyBpcyBhbiBhbGlhcyBmb3IgJ2RheScsIHNvIGl0IHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIHN1Y2guXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICB1bml0cyA9ICdkYXknO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRPZih1bml0cykuYWRkKDEsICh1bml0cyA9PT0gJ2lzb1dlZWsnID8gJ3dlZWsnIDogdW5pdHMpKS5zdWJ0cmFjdCgxLCAnbXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZU9mICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKCh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5ICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW20ueWVhcigpLCBtLm1vbnRoKCksIG0uZGF0ZSgpLCBtLmhvdXIoKSwgbS5taW51dGUoKSwgbS5zZWNvbmQoKSwgbS5taWxsaXNlY29uZCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b09iamVjdCAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDIgKCkge1xuICAgICAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzaW5nRmxhZ3MgKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRBdCAoKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4gKHRva2VuLCBnZXR0ZXIpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xuICAgIH1cblxuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAgICAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgICdpc29XZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtZZWFyJywgJ2dnJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla1llYXInLCAxKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCwgdGhpcy5pc29XZWVrKCksIHRoaXMuaXNvV2Vla2RheSgpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIgKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICAgICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgICAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgICAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3F1YXJ0ZXInLCAnUScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG4gICAgYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMztcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyB0aGlzLm1vbnRoKCkgJSAzKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF0ZScsICdEJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgP1xuICAgICAgICAgIChsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2UpIDpcbiAgICAgICAgICBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXlPZlllYXInLCA0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0RERCcsICBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIgKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoKGlucHV0IC0gZGF5T2ZZZWFyKSwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdzZWNvbmQnLCAxNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdzJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbiAgICB9KTtcblxuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWlsbGlzZWNvbmQnLCAxNik7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdTJywgICAgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgICBtYXRjaDF0bzMsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxuICAgIHZhciB0b2tlbjtcbiAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbiAgICB9XG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3onLCAgMCwgMCwgJ3pvbmVBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRab25lQWJiciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZU5hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxuICAgIHByb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkO1xuICAgIHByb3RvLmNhbGVuZGFyICAgICAgICAgID0gY2FsZW5kYXIkMTtcbiAgICBwcm90by5jbG9uZSAgICAgICAgICAgICA9IGNsb25lO1xuICAgIHByb3RvLmRpZmYgICAgICAgICAgICAgID0gZGlmZjtcbiAgICBwcm90by5lbmRPZiAgICAgICAgICAgICA9IGVuZE9mO1xuICAgIHByb3RvLmZvcm1hdCAgICAgICAgICAgID0gZm9ybWF0O1xuICAgIHByb3RvLmZyb20gICAgICAgICAgICAgID0gZnJvbTtcbiAgICBwcm90by5mcm9tTm93ICAgICAgICAgICA9IGZyb21Ob3c7XG4gICAgcHJvdG8udG8gICAgICAgICAgICAgICAgPSB0bztcbiAgICBwcm90by50b05vdyAgICAgICAgICAgICA9IHRvTm93O1xuICAgIHByb3RvLmdldCAgICAgICAgICAgICAgID0gc3RyaW5nR2V0O1xuICAgIHByb3RvLmludmFsaWRBdCAgICAgICAgID0gaW52YWxpZEF0O1xuICAgIHByb3RvLmlzQWZ0ZXIgICAgICAgICAgID0gaXNBZnRlcjtcbiAgICBwcm90by5pc0JlZm9yZSAgICAgICAgICA9IGlzQmVmb3JlO1xuICAgIHByb3RvLmlzQmV0d2VlbiAgICAgICAgID0gaXNCZXR3ZWVuO1xuICAgIHByb3RvLmlzU2FtZSAgICAgICAgICAgID0gaXNTYW1lO1xuICAgIHByb3RvLmlzU2FtZU9yQWZ0ZXIgICAgID0gaXNTYW1lT3JBZnRlcjtcbiAgICBwcm90by5pc1NhbWVPckJlZm9yZSAgICA9IGlzU2FtZU9yQmVmb3JlO1xuICAgIHByb3RvLmlzVmFsaWQgICAgICAgICAgID0gaXNWYWxpZCQyO1xuICAgIHByb3RvLmxhbmcgICAgICAgICAgICAgID0gbGFuZztcbiAgICBwcm90by5sb2NhbGUgICAgICAgICAgICA9IGxvY2FsZTtcbiAgICBwcm90by5sb2NhbGVEYXRhICAgICAgICA9IGxvY2FsZURhdGE7XG4gICAgcHJvdG8ubWF4ICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNYXg7XG4gICAgcHJvdG8ubWluICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNaW47XG4gICAgcHJvdG8ucGFyc2luZ0ZsYWdzICAgICAgPSBwYXJzaW5nRmxhZ3M7XG4gICAgcHJvdG8uc2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdTZXQ7XG4gICAgcHJvdG8uc3RhcnRPZiAgICAgICAgICAgPSBzdGFydE9mO1xuICAgIHByb3RvLnN1YnRyYWN0ICAgICAgICAgID0gc3VidHJhY3Q7XG4gICAgcHJvdG8udG9BcnJheSAgICAgICAgICAgPSB0b0FycmF5O1xuICAgIHByb3RvLnRvT2JqZWN0ICAgICAgICAgID0gdG9PYmplY3Q7XG4gICAgcHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG4gICAgcHJvdG8udG9JU09TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZztcbiAgICBwcm90by5pbnNwZWN0ICAgICAgICAgICA9IGluc3BlY3Q7XG4gICAgcHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG4gICAgcHJvdG8udG9TdHJpbmcgICAgICAgICAgPSB0b1N0cmluZztcbiAgICBwcm90by51bml4ICAgICAgICAgICAgICA9IHVuaXg7XG4gICAgcHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB2YWx1ZU9mO1xuICAgIHByb3RvLmNyZWF0aW9uRGF0YSAgICAgID0gY3JlYXRpb25EYXRhO1xuICAgIHByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xuICAgIHByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuICAgIHByb3RvLndlZWtZZWFyICAgID0gZ2V0U2V0V2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcbiAgICBwcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuICAgIHByb3RvLm1vbnRoICAgICAgID0gZ2V0U2V0TW9udGg7XG4gICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcbiAgICBwcm90by53ZWVrICAgICAgICAgICA9IHByb3RvLndlZWtzICAgICAgICA9IGdldFNldFdlZWs7XG4gICAgcHJvdG8uaXNvV2VlayAgICAgICAgPSBwcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xuICAgIHByb3RvLndlZWtzSW5ZZWFyICAgID0gZ2V0V2Vla3NJblllYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcbiAgICBwcm90by5kYXRlICAgICAgID0gZ2V0U2V0RGF5T2ZNb250aDtcbiAgICBwcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbiAgICBwcm90by53ZWVrZGF5ICAgID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xuICAgIHByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgcHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcbiAgICBwcm90by5ob3VyID0gcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuICAgIHByb3RvLm1pbnV0ZSA9IHByb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG4gICAgcHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcbiAgICBwcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuICAgIHByb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xuICAgIHByb3RvLnV0YyAgICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9VVEM7XG4gICAgcHJvdG8ubG9jYWwgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb0xvY2FsO1xuICAgIHByb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG4gICAgcHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbiAgICBwcm90by5pc0RTVCAgICAgICAgICAgICAgICA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lO1xuICAgIHByb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbiAgICBwcm90by5pc1V0Y09mZnNldCAgICAgICAgICA9IGlzVXRjT2Zmc2V0O1xuICAgIHByb3RvLmlzVXRjICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgcHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcbiAgICBwcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xuICAgIHByb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG4gICAgcHJvdG8uZGF0ZXMgID0gZGVwcmVjYXRlKCdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsIGdldFNldERheU9mTW9udGgpO1xuICAgIHByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xuICAgIHByb3RvLnllYXJzICA9IGRlcHJlY2F0ZSgneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsIGdldFNldFllYXIpO1xuICAgIHByb3RvLnpvbmUgICA9IGRlcHJlY2F0ZSgnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3Mvem9uZS8nLCBnZXRTZXRab25lKTtcbiAgICBwcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlVW5peCAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5ab25lICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0IChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMSA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgICBwcm90byQxLmNhbGVuZGFyICAgICAgICA9IGNhbGVuZGFyO1xuICAgIHByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG8kMS5pbnZhbGlkRGF0ZSAgICAgPSBpbnZhbGlkRGF0ZTtcbiAgICBwcm90byQxLm9yZGluYWwgICAgICAgICA9IG9yZGluYWw7XG4gICAgcHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5wb3N0Zm9ybWF0ICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5yZWxhdGl2ZVRpbWUgICAgPSByZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvJDEuc2V0ICAgICAgICAgICAgID0gc2V0O1xuXG4gICAgcHJvdG8kMS5tb250aHMgICAgICAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHM7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydCAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90byQxLm1vbnRoc1BhcnNlICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xuICAgIHByb3RvJDEubW9udGhzUmVnZXggICAgICAgPSBtb250aHNSZWdleDtcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0UmVnZXggID0gbW9udGhzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWsgPSBsb2NhbGVXZWVrO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICBwcm90byQxLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvJDEud2Vla2RheXNNaW4gICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0ICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvJDEud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxuICAgIHByb3RvJDEud2Vla2RheXNSZWdleCAgICAgICA9ICAgICAgICB3ZWVrZGF5c1JlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ICA9ICAgICAgICB3ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ICAgID0gICAgICAgIHdlZWtkYXlzTWluUmVnZXg7XG5cbiAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xuICAgIHByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGdldCQxIChmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKTtcbiAgICAgICAgdmFyIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNJbXBsIChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvLyAoKVxuICAgIC8vICg1KVxuICAgIC8vIChmbXQsIDUpXG4gICAgLy8gKGZtdClcbiAgICAvLyAodHJ1ZSlcbiAgICAvLyAodHJ1ZSwgNSlcbiAgICAvLyAodHJ1ZSwgZm10LCA1KVxuICAgIC8vICh0cnVlLCBmbXQpXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsZVNvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBsb2NhbGVTb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDA7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5cyAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbiAgICB9XG5cbiAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRvSW50KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIGhvb2tzLmxhbmcgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJywgZ2V0U2V0R2xvYmFsTG9jYWxlKTtcbiAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbiAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gYWJzICgpIHtcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2RheXMgICAgICAgICA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyAgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzICAgICAgICA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgICAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpO1xuXG4gICAgICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICAgICAgZHVyYXRpb24uX21vbnRocyAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGFkZCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWJibGUgKCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IHRoaXMuX21vbnRocztcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICA9IHRoaXMuX2RhdGE7XG4gICAgICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcbiAgICAgICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMCkpKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgICAgIG1vbnRocyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICA9IGhvdXJzICUgMjQ7XG5cbiAgICAgICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgICAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICAgICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgICAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIGRhdGEuZGF5cyAgID0gZGF5cztcbiAgICAgICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgICAgIGRhdGEueWVhcnMgID0geWVhcnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzIChkYXlzKSB7XG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgICAgIHJldHVybiBkYXlzICogNDgwMCAvIDE0NjA5NztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgICAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICAgICAgcmV0dXJuIG1vbnRocyAqIDE0NjA5NyAvIDQ4MDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXMgKHVuaXRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheXM7XG4gICAgICAgIHZhciBtb250aHM7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgICA9IHRoaXMuX2RheXMgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbW9udGgnID8gbW9udGhzIDogbW9udGhzIC8gMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnICAgOiByZXR1cm4gZGF5cyAvIDcgICAgICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cicgICA6IHJldHVybiBkYXlzICogMjQgICAgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZScgOiByZXR1cm4gZGF5cyAqIDE0NDAgICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6IHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSB0aGlzLmFzKCdtcycpP1xuICAgIGZ1bmN0aW9uIHZhbHVlT2YkMSAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgK1xuICAgICAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgICAgICB0b0ludCh0aGlzLl9tb250aHMgLyAxMikgKiAzMTUzNmU2XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUFzIChhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbiAgICB2YXIgYXNTZWNvbmRzICAgICAgPSBtYWtlQXMoJ3MnKTtcbiAgICB2YXIgYXNNaW51dGVzICAgICAgPSBtYWtlQXMoJ20nKTtcbiAgICB2YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbiAgICB2YXIgYXNEYXlzICAgICAgICAgPSBtYWtlQXMoJ2QnKTtcbiAgICB2YXIgYXNXZWVrcyAgICAgICAgPSBtYWtlQXMoJ3cnKTtcbiAgICB2YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbiAgICB2YXIgYXNZZWFycyAgICAgICAgPSBtYWtlQXMoJ3knKTtcblxuICAgIGZ1bmN0aW9uIGNsb25lJDEgKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0JDIgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyk7XG4gICAgdmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbiAgICB2YXIgbWludXRlcyAgICAgID0gbWFrZUdldHRlcignbWludXRlcycpO1xuICAgIHZhciBob3VycyAgICAgICAgPSBtYWtlR2V0dGVyKCdob3VycycpO1xuICAgIHZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IG1ha2VHZXR0ZXIoJ21vbnRocycpO1xuICAgIHZhciB5ZWFycyAgICAgICAgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG4gICAgZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuICAgIHZhciB0aHJlc2hvbGRzID0ge1xuICAgICAgICBzczogNDQsICAgICAgICAgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgICAgIHMgOiA0NSwgICAgICAgICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgICAgICBtIDogNDUsICAgICAgICAgLy8gbWludXRlcyB0byBob3VyXG4gICAgICAgIGggOiAyMiwgICAgICAgICAvLyBob3VycyB0byBkYXlcbiAgICAgICAgZCA6IDI2LCAgICAgICAgIC8vIGRheXMgdG8gbW9udGhcbiAgICAgICAgTSA6IDExICAgICAgICAgIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEgKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpO1xuICAgICAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSk7XG4gICAgICAgIHZhciBob3VycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpO1xuICAgICAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICAgICAgdmFyIG1vbnRocyAgID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSk7XG4gICAgICAgIHZhciB5ZWFycyAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpO1xuXG4gICAgICAgIHZhciBhID0gc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgICAgIHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgICAmJiBbJ3NzJywgc2Vjb25kc10gfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDw9IDEgICAgICAgICAgICAgJiYgWydtJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAgICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2gnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBob3VycyAgIDwgdGhyZXNob2xkcy5oICAgJiYgWydoaCcsIGhvdXJzXSAgIHx8XG4gICAgICAgICAgICAgICAgZGF5cyAgICA8PSAxICAgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPCB0aHJlc2hvbGRzLmQgICAmJiBbJ2RkJywgZGF5c10gICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDw9IDEgICAgICAgICAgICAgJiYgWydNJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAgICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgICAgIHllYXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ3knXSAgICAgICAgICAgfHwgWyd5eScsIHllYXJzXTtcblxuICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICAgICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcgKHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Yocm91bmRpbmdGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQgKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodW1hbml6ZSAod2l0aFN1ZmZpeCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgdmFyIG91dHB1dCA9IHJlbGF0aXZlVGltZSQxKHRoaXMsICF3aXRoU3VmZml4LCBsb2NhbGUpO1xuXG4gICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gc2lnbih4KSB7XG4gICAgICAgIHJldHVybiAoKHggPiAwKSAtICh4IDwgMCkpIHx8ICt4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAgICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgICAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgICAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWNvbmRzID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDA7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSBhYnMkMSh0aGlzLl9kYXlzKTtcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgICAgIHZhciBtaW51dGVzLCBob3VycywgeWVhcnM7XG5cbiAgICAgICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICB2YXIgWSA9IHllYXJzO1xuICAgICAgICB2YXIgTSA9IG1vbnRocztcbiAgICAgICAgdmFyIEQgPSBkYXlzO1xuICAgICAgICB2YXIgaCA9IGhvdXJzO1xuICAgICAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgICAgIHZhciBzID0gc2Vjb25kcyA/IHNlY29uZHMudG9GaXhlZCgzKS5yZXBsYWNlKC9cXC4/MCskLywgJycpIDogJyc7XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCk7XG5cbiAgICAgICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLlxuICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdGFsU2lnbiA9IHRvdGFsIDwgMCA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICB2YXIgaG1zU2lnbiA9IHNpZ24odGhpcy5fbWlsbGlzZWNvbmRzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcblxuICAgICAgICByZXR1cm4gdG90YWxTaWduICsgJ1AnICtcbiAgICAgICAgICAgIChZID8geW1TaWduICsgWSArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAoTSA/IHltU2lnbiArIE0gKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKEQgPyBkYXlzU2lnbiArIEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKChoIHx8IG0gfHwgcykgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGggPyBobXNTaWduICsgaCArICdIJyA6ICcnKSArXG4gICAgICAgICAgICAobSA/IGhtc1NpZ24gKyBtICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChzID8gaG1zU2lnbiArIHMgKyAnUycgOiAnJyk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBwcm90byQyLmlzVmFsaWQgICAgICAgID0gaXNWYWxpZCQxO1xuICAgIHByb3RvJDIuYWJzICAgICAgICAgICAgPSBhYnM7XG4gICAgcHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xuICAgIHByb3RvJDIuc3VidHJhY3QgICAgICAgPSBzdWJ0cmFjdCQxO1xuICAgIHByb3RvJDIuYXMgICAgICAgICAgICAgPSBhcztcbiAgICBwcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5hc1NlY29uZHMgICAgICA9IGFzU2Vjb25kcztcbiAgICBwcm90byQyLmFzTWludXRlcyAgICAgID0gYXNNaW51dGVzO1xuICAgIHByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xuICAgIHByb3RvJDIuYXNEYXlzICAgICAgICAgPSBhc0RheXM7XG4gICAgcHJvdG8kMi5hc1dlZWtzICAgICAgICA9IGFzV2Vla3M7XG4gICAgcHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xuICAgIHByb3RvJDIuYXNZZWFycyAgICAgICAgPSBhc1llYXJzO1xuICAgIHByb3RvJDIudmFsdWVPZiAgICAgICAgPSB2YWx1ZU9mJDE7XG4gICAgcHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbiAgICBwcm90byQyLmNsb25lICAgICAgICAgID0gY2xvbmUkMTtcbiAgICBwcm90byQyLmdldCAgICAgICAgICAgID0gZ2V0JDI7XG4gICAgcHJvdG8kMi5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLnNlY29uZHMgICAgICAgID0gc2Vjb25kcztcbiAgICBwcm90byQyLm1pbnV0ZXMgICAgICAgID0gbWludXRlcztcbiAgICBwcm90byQyLmhvdXJzICAgICAgICAgID0gaG91cnM7XG4gICAgcHJvdG8kMi5kYXlzICAgICAgICAgICA9IGRheXM7XG4gICAgcHJvdG8kMi53ZWVrcyAgICAgICAgICA9IHdlZWtzO1xuICAgIHByb3RvJDIubW9udGhzICAgICAgICAgPSBtb250aHM7XG4gICAgcHJvdG8kMi55ZWFycyAgICAgICAgICA9IHllYXJzO1xuICAgIHByb3RvJDIuaHVtYW5pemUgICAgICAgPSBodW1hbml6ZTtcbiAgICBwcm90byQyLnRvSVNPU3RyaW5nICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvSlNPTiAgICAgICAgID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xuICAgIHByb3RvJDIubG9jYWxlRGF0YSAgICAgPSBsb2NhbGVEYXRhO1xuXG4gICAgcHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZSgndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLCB0b0lTT1N0cmluZyQxKTtcbiAgICBwcm90byQyLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQsIDEwKSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG4gICAgaG9va3MudmVyc2lvbiA9ICcyLjIyLjInO1xuXG4gICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKTtcblxuICAgIGhvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IHByb3RvO1xuICAgIGhvb2tzLm1pbiAgICAgICAgICAgICAgICAgICA9IG1pbjtcbiAgICBob29rcy5tYXggICAgICAgICAgICAgICAgICAgPSBtYXg7XG4gICAgaG9va3Mubm93ICAgICAgICAgICAgICAgICAgID0gbm93O1xuICAgIGhvb2tzLnV0YyAgICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVUQztcbiAgICBob29rcy51bml4ICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVbml4O1xuICAgIGhvb2tzLm1vbnRocyAgICAgICAgICAgICAgICA9IGxpc3RNb250aHM7XG4gICAgaG9va3MuaXNEYXRlICAgICAgICAgICAgICAgID0gaXNEYXRlO1xuICAgIGhvb2tzLmxvY2FsZSAgICAgICAgICAgICAgICA9IGdldFNldEdsb2JhbExvY2FsZTtcbiAgICBob29rcy5pbnZhbGlkICAgICAgICAgICAgICAgPSBjcmVhdGVJbnZhbGlkO1xuICAgIGhvb2tzLmR1cmF0aW9uICAgICAgICAgICAgICA9IGNyZWF0ZUR1cmF0aW9uO1xuICAgIGhvb2tzLmlzTW9tZW50ICAgICAgICAgICAgICA9IGlzTW9tZW50O1xuICAgIGhvb2tzLndlZWtkYXlzICAgICAgICAgICAgICA9IGxpc3RXZWVrZGF5cztcbiAgICBob29rcy5wYXJzZVpvbmUgICAgICAgICAgICAgPSBjcmVhdGVJblpvbmU7XG4gICAgaG9va3MubG9jYWxlRGF0YSAgICAgICAgICAgID0gZ2V0TG9jYWxlO1xuICAgIGhvb2tzLmlzRHVyYXRpb24gICAgICAgICAgICA9IGlzRHVyYXRpb247XG4gICAgaG9va3MubW9udGhzU2hvcnQgICAgICAgICAgID0gbGlzdE1vbnRoc1Nob3J0O1xuICAgIGhvb2tzLndlZWtkYXlzTWluICAgICAgICAgICA9IGxpc3RXZWVrZGF5c01pbjtcbiAgICBob29rcy5kZWZpbmVMb2NhbGUgICAgICAgICAgPSBkZWZpbmVMb2NhbGU7XG4gICAgaG9va3MudXBkYXRlTG9jYWxlICAgICAgICAgID0gdXBkYXRlTG9jYWxlO1xuICAgIGhvb2tzLmxvY2FsZXMgICAgICAgICAgICAgICA9IGxpc3RMb2NhbGVzO1xuICAgIGhvb2tzLndlZWtkYXlzU2hvcnQgICAgICAgICA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuICAgIGhvb2tzLm5vcm1hbGl6ZVVuaXRzICAgICAgICA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nICA9IGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbiAgICBob29rcy5jYWxlbmRhckZvcm1hdCAgICAgICAgPSBnZXRDYWxlbmRhckZvcm1hdDtcbiAgICBob29rcy5wcm90b3R5cGUgICAgICAgICAgICAgPSBwcm90bztcblxuICAgIC8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG4gICAgaG9va3MuSFRNTDVfRk1UID0ge1xuICAgICAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLCAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIERBVEU6ICdZWVlZLU1NLUREJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+XG4gICAgICAgIFRJTUU6ICdISDptbScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgVElNRV9NUzogJ0hIOm1tOnNzLlNTUycsICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgV0VFSzogJ1lZWVktW1ddV1cnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICAgICAgTU9OVEg6ICdZWVlZLU1NJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJtb250aFwiIC8+XG4gICAgfTtcblxuICAgIHJldHVybiBob29rcztcblxufSkpKTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2woJ3V0aWwucHJvbWlzaWZ5LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5leHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZuLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgZm4sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgKTtcbn1cblxuZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tID0ga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XG4gIC8vIGAhcmVhc29uYCBndWFyZCBpbnNwaXJlZCBieSBibHVlYmlyZCAoUmVmOiBodHRwczovL2dvby5nbC90NUlTNk0pLlxuICAvLyBCZWNhdXNlIGBudWxsYCBpcyBhIHNwZWNpYWwgZXJyb3IgdmFsdWUgaW4gY2FsbGJhY2tzIHdoaWNoIG1lYW5zIFwibm8gZXJyb3JcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgLy8gXCJ0aGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIG51bGxcIiBvciBcInRoZSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHVuZGVmaW5lZFwiLlxuICBpZiAoIXJlYXNvbikge1xuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xuICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgcmVhc29uID0gbmV3UmVhc29uO1xuICB9XG4gIHJldHVybiBjYihyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgfVxuXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XG4gIC8vIHRoZSBwcm9taXNlIGlzIGFjdHVhbGx5IHNvbWVob3cgcmVsYXRlZCB0byB0aGUgY2FsbGJhY2sncyBleGVjdXRpb25cbiAgLy8gYW5kIHRoYXQgdGhlIGNhbGxiYWNrIHRocm93aW5nIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLlxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gSW4gdHJ1ZSBub2RlIHN0eWxlIHdlIHByb2Nlc3MgdGhlIGNhbGxiYWNrIG9uIGBuZXh0VGlja2Agd2l0aCBhbGwgdGhlXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcbiAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmV0KSB7IHByb2Nlc3MubmV4dFRpY2soY2IsIG51bGwsIHJldCkgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZCwgcmVqLCBjYikgfSk7XG4gIH1cblxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2FsbGJhY2tpZmllZCwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNhbGxiYWNraWZpZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpKTtcbiAgcmV0dXJuIGNhbGxiYWNraWZpZWQ7XG59XG5leHBvcnRzLmNhbGxiYWNraWZ5ID0gY2FsbGJhY2tpZnk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJpbXBvcnQgeyBCaW5kZXIgfSBmcm9tICcuLi9jb3JlL0JpbmRlcic7XHJcbmltcG9ydCB7IE5hdkNvbnRyb2xsZXIgfSBmcm9tICcuLi9jb3JlL05hdkNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBDaGFuZ2VXYXRjaGVyIH0gZnJvbSAnLi4vY29yZS9DaGFuZ2VXYXRjaGVyJztcclxuaW1wb3J0IHsgdHJ5Q2FsbCB9IGZyb20gJy4uL2NvcmUvaGVscGVycyc7XHJcbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL0Jhc2VDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBPYmplY3RzIH0gZnJvbSAnLi4vY29yZS9PYmplY3RzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNlUGFnZSBleHRlbmRzIENoYW5nZVdhdGNoZXJ7XHJcbiAgY29uc3RydWN0b3IoKXtcclxuICAgIHN1cGVyKCk7XHJcbiAgICAvKiogQHR5cGUge0hUTUxFbGVtZW50fSovXHJcbiAgICB0aGlzLnBhZ2UgPSBudWxsO1xyXG4gICAgLyoqIEB0eXBlIHtOYXZDb250cm9sbGVyfSAqL1xyXG4gICAgdGhpcy5OYXY7XHJcbiAgICAvKiogQHR5cGUge0NTU1N0eWxlRGVjbGFyYXRpb259ICovXHJcbiAgICB0aGlzLnN0eWxlO1xyXG5cdFx0XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB0aGlzLnN0eWxlID0ge307XHJcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBudWxsO1xyXG4gICAgdGhpcy5iaW5kZXIgPSBuZXcgQmluZGVyKHRoaXMpO1xyXG5cclxuICAgIHRoaXMubmFtZSA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5pc0RlbGV0aW5nID0gbnVsbDtcclxuICAgIHRoaXMuaXNDcmVhdGluZyA9IG51bGw7XHJcbiAgICB0aGlzLmlzSGlkaW5nID0gbnVsbDtcclxuICAgIHRoaXMuaXNTaG93aW5nID0gbnVsbDtcclxuICAgIHRoaXMuaXNWaXNpYmxlID0gbnVsbDtcclxuICAgIHRoaXMuaXNEZWxldGVkID0gbnVsbDtcclxuICAgIHRoaXMuaXNIaWRkZW4gPSBudWxsO1xyXG4gICAgdGhpcy5pc1Jvb3QgPSBudWxsLFxyXG5cclxuICAgIHRoaXMuc2VsZWN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yLnNlbGVjdG9yO1xyXG4gICAgdGhpcy5jbGFzc05hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLmNsYXNzTmFtZTtcclxuICAgIHRoaXMudmlzaWJsZVBhcmVudCA9IHRoaXMuY29uc3RydWN0b3IudmlzaWJsZVBhcmVudDtcclxuXHJcbiAgICB0aGlzLmNsYXNzTmFtZXMgPSBbXTtcclxuXHJcbiAgICAvL0JlIGxhenkuIFRoaXMgYWxsb3dzIHVzIHRvIGRpcmVjdGx5IHBhc3MgcGFnZSBtZXRob2RzIHdpdGhvdXQgaGF2aW5nIHRvIHdvcnJ5IGFib3V0IFwidGhpc1wiXHJcbiAgICBPYmplY3RzLmJpbmRNZXRob2RzKHRoaXMpO1xyXG4gIH1cclxuXHJcblx0XHJcblxyXG4gIC8qKlxyXG5cdCAqIEZvcmNlIFBhZ2UgdXBkYXRlXHJcblx0ICovXHJcbiAgdXBkYXRlKCl7XHJcbiAgICBpZiAoIXRoaXMuYmluZGVyKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgdGhpcy5vbkJlZm9yZVVwZGF0ZWQoKTtcdFxyXG4gICAgdGhpcy5iaW5kZXIudXBkYXRlRWxlbWVudHMoKTtcclxuICAgIHRoaXMub25VcGRhdGVkKCk7XHJcbiAgfVxyXG5cclxuICBfb25WaXNpYmxlKCl7XHJcbiAgICB0aGlzLm9uVmlzaWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcblx0ICogQ29tbWFuZCB0aGUgbmF2IGNvbnRyb2xsZXIgdG8gcmVtb3ZlIHRoaXMgcGFnZSBmcm9tIHRoZSBzdGFja1xyXG5cdCAqL1xyXG4gIGRlc3Ryb3koKXtcclxuXHJcbiAgICBpZiAodGhpcy5pc0RlbGV0ZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLk5hdiAmJiB0aGlzLm9uQmVmb3JlRGVzdHJveSgpID09PSBmYWxzZSl7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHRcdFxyXG4gICAgLy9pZiBuYXYgZXhpc3RzLCB0aGVuIHRlbGwgbmF2IHRvIGRlbGV0ZSB0aGUgcGFnZS4gTmF2IHdpbGwgdGhlbiBjYWxsIHRoaXMgbWV0aG9kIGFnYWluXHJcbiAgICBpZiAodGhpcy5OYXYpe1xyXG4gICAgICAvL3RlbGwgTmF2IHRvIHJlbW92ZSB0aGUgcGFnZSBmcm9tIHRoZSBzdGFja1xyXG4gICAgICB0aGlzLk5hdi5yZW1vdmUodGhpcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvL05hdiBkb2VzIG5vdCBleGlzdCBhbnkgbW9yZTogZGVsZXRlIHRoZSBwYWdlXHJcbiAgICAgIC8vbm90aWZ5IHdob2V2ZXIgaW1wbGVtZW50cywgdGhhdCBwYWdlIGlzIHRvIGJlIGRlc3Ryb3llZC5cclxuICAgICAgdGhpcy5vbkRlc3Ryb3koKTtcdFx0XHJcblx0XHRcdFx0XHRcclxuICAgICAgLy9DYWxsIGRlc3Ryb3kgb24gYWxsIGNoaWxkIGNvbXBvbmVudHNcclxuICAgICAgaWYgKHRoaXMuY29tcG9uZW50cyl7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLmNvbXBvbmVudHMpe1xyXG4gICAgICAgICAgdmFyIGNvbXAgPSB0aGlzLmNvbXBvbmVudHNbaV07XHJcbiAgICAgICAgICBpZiAoY29tcCBpbnN0YW5jZW9mIEJhc2VDb21wb25lbnQpe1xyXG4gICAgICAgICAgICB0cnlDYWxsKGNvbXAsIGNvbXAuZGVzdHJveSk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNvbXBvbmVudHNbaV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vZGVzdHJveSBiaW5kZXJcclxuICAgICAgaWYgKHRoaXMuYmluZGVyKXtcclxuICAgICAgICB0aGlzLmJpbmRlci5kZXN0cm95KCk7XHJcbiAgICAgIH1cclxuICAgICAgLy9EZXN0cm95IHRoZSByZXN0IG9mIGxpc3RlbmVycywgcHJvcGVydGllcyBhbmQgbWV0aG9kc1xyXG4gICAgICB0aGlzLnN0b3BXYXRjaCgpO1xyXG4gICAgICBPYmplY3RzLnN0cmlwKHRoaXMpO1xyXG4gICAgICB0aGlzLmlzRGVsZXRlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL0ltcGxlbWVudGF0aW9uIG9mIExpZmVjeWNsZSBjYWxsYmFja3MgdGhhdCBhcmUgY2FsbGVkIGJ5IE5hdkNvbnRyb2xsZXJcclxuICAvKipcclxuXHQgKiAqKipPdmVycmlkZUNhbGxTdXBlcioqKlxyXG5cdCAqIEluaXRpYWxpemUgYmluZGVyXHJcblx0ICovXHJcbiAgX2luaXQoYmluZGVyRXZlbnQpe1xyXG4gXHRcdC8vdGhpcy50ZW1wbGF0ZSA9IEJhc2VQYWdlLnRlbXBsYXRlLnJlcGxhY2UoJzwhLS1jaGlsZC10ZW1wbGF0ZS0tPicsIHRoaXMudGVtcGxhdGUpO1xyXG5cclxuICAgIHRoaXMuYmluZGVyLmJpbmRFbGVtZW50cyhiaW5kZXJFdmVudCwgdGhpcy50ZW1wbGF0ZSk7XHJcbiAgICB0aGlzLnBhZ2UgPSB0aGlzLmJpbmRlci52ZG9tLmVsZW07XHJcbiAgICBzdXBlci5zdGFydFdhdGNoKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuXHQgKiAqKipPdmVycmlkZSoqKlxyXG5cdCAqIENhbGxlZCBhZnRlciBwYWdlIGlzIGNyZWF0ZWQgYW5kIGluc2VydGVkIGludG8gdGhlIGRvY3VtZW50IGJ1dCBiZWZvcmUgaXQgaXMgcmVuZGVyZWRcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYWdlIFxyXG5cdCAqL1xyXG4gIG9uSW5pdChwYWdlKXtcclxuXHRcdFxyXG4gIH1cclxuICAvKipcclxuXHQgKiAqKipPdmVycmlkZSoqKlxyXG5cdCAqICogQ2FsbGVkIGFmdGVyIHRoZSBwYWdlIGlzIGNyZWF0ZWQgYW5kIGZ1bGx5IHJlbmRlcmVkXHJcblx0ICovXHJcbiAgb25Mb2FkZWQoKXtcclxuXHJcbiAgfVxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqKlxyXG5cdCAqIENhbGxlZCBiZWZvcmUgcGFnZSBpcyB1cGRhdGVkIGVpdGhlciBtYW51YWxseSwgb3IgYnkgd2F0Y2hlclxyXG5cdCAqL1xyXG4gIG9uQmVmb3JlVXBkYXRlZCgpe1xyXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLmNvbnN0cnVjdG9yLm5hbWUsICd1cGRhdGVkJyk7XHJcbiAgfVxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqKlxyXG5cdCAqIENhbGxlZCBhZnRlciBwYWdlIGlzIHVwZGF0ZWQgZWl0aGVyIG1hbnVhbGx5LCBvciBieSB3YXRjaGVyXHJcblx0ICovXHJcbiAgb25VcGRhdGVkKCl7XHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuY29uc3RydWN0b3IubmFtZSwgJ3VwZGF0ZWQnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqKlxyXG5cdCAqICogQ2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIHBhZ2UgYmVjb21lcyBhY3RpdmUgYnV0IGJlZm9yZSB0cmFuc2l0aW9uc1xyXG5cdCAqL1xyXG4gIG9uRW50ZXIoKXtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuXHQgKiAqKipPdmVycmlkZSoqKlxyXG5cdCAqIENhbGxlZCBldmVyeSB0aW1lIHRoZSB0cmFuc2l0aW9ucyBoYXZlIGVuZGVkIGFuZCB0aGUgcGFnZSBpcyBmdWxseSB2aXNpYmxlLlxyXG5cdCAqL1xyXG4gIG9uVmlzaWJsZSgpe1xyXG5cclxuICB9XHJcbiAgLyoqXHJcblx0ICogKioqT3ZlcnJpZGUqKioqXHJcblx0ICovXHJcbiAgb25MZWF2ZSgpe1xyXG5cclxuICB9XHJcbiAgLyoqXHJcblx0ICogKioqT3ZlcnJpZGUqKipcclxuXHQgKiBAcGFyYW0ge3t3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXJ9fSB3aW5kb3dTaXplXHJcblx0ICovXHJcbiAgb25SZXNpemUod2luZG93U2l6ZSl7XHJcblxyXG4gIH1cclxuICAvKipcclxuXHQgKiAqKipPdmVycmlkZUNhbGxTdXBlcioqKlxyXG5cdCAqIEBwYXJhbSB7e3dpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcn19IHdpbmRvd1NpemVcclxuXHQgKi9cclxuICByZXNpemUod2luZG93U2l6ZSl7XHJcbiAgICB0aGlzLm9uUmVzaXplKHdpbmRvd1NpemUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcblx0ICogKioqT3ZlcnJpZGUqKipcclxuXHQgKiBDYWxsZWQgd2hlbiBOYXZDb250cm9sbGVyIHJlbW92ZXMgaXQgc2VsZiBmcm9tIHRoZSBwYWdlIGFuZCBwYWdlIGlzIGFib3V0IHRvIGJlIGRlbGV0ZWRcclxuXHQgKiBAb3ZlcnJpZGVcclxuXHQgKi9cclxuICBvbkRlc3Ryb3koKXtcclxuICB9XHJcblxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqXHJcblx0ICogQ2FsbGVkIGJlZm9yZSBwYWdlIGlzIGRlbGV0ZWQuIFJldHVybiBmYWxzZSB0byBwcmVmZW50IHBhZ2UgZGVsZXRpb24uIFxyXG5cdCAqIEByZXR1cm4ge2FueXxmYWxzZX1cclxuXHQgKiBAb3ZlcnJpZGVcclxuXHQgKi9cclxuICBvbkJlZm9yZURlc3Ryb3koKXtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHRcclxuICAvKipcclxuXHQgKiAqKipPdmVycmlkZSoqKlxyXG5cdCAqIENhbGxlZCBqdXN0IGJlZm9yZSBuYXZpZ2F0aW5nIGJhY2sgZnJvbSB0aGUgcGFnZS5cclxuXHQgKiByZXR1cm4gZmFsc2UgdG8gY2FuY2VsIHRoZSBiYWNrIHBhZ2UgbmF2aWdhdGlvblxyXG5cdCAqIEByZXR1cm5zIHtib29sZWFufVxyXG5cdCAqL1xyXG4gIG9uQmFja05hdmlnYXRlKCl7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG5cdCAqIEV4dGVuZCB0aGUgYmFzZSB0ZW1wbGF0ZSB3aXRoIGNoaWxkIHRlbXBsYXRlLlxyXG5cdCAqIFVzZSA8IS0tY2hpbGQtdGVtcGxhdGUtLT4gdG8gbWFyayB0aGUgc2xvdFxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdXBlcl90ZW1wbGF0ZSBcclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY2hpbGRfdGVtcGxhdGUgXHJcblx0ICovXHJcbiAgZXh0ZW5kVGVtcGxhdGUoc3VwZXJfdGVtcGxhdGUsIGNoaWxkX3RlbXBsYXRlKXtcclxuICAgIHJldHVybiBzdXBlcl90ZW1wbGF0ZS5yZXBsYWNlKCc8IS0tY2hpbGQtdGVtcGxhdGUtLT4nLCBjaGlsZF90ZW1wbGF0ZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcblx0ICogKioqUmVhZG9ubHkqKiogcHJvcGVydHkgdGhhdCByZXR1cm5zIHRoZSB0ZW1wbGF0ZSBzdHJpbmdcclxuXHQgKiAgIFlvdSBjYW4gZXh0ZW5kIGJhc2UgdGVtcGxhdGUgYnkgcmV0dXJuaW5nIHRoaXMuZXh0ZW5kVGVtcGxhdGUoc3VwZXIudGVtcGxhdGUsJ2NoaWxkIHRlbXBsYXRlIHN0cmluZycpO1xyXG5cdCAqL1xyXG4gIGdldCB0ZW1wbGF0ZSAoKXtcclxuICAgIHJldHVybiBgPGRpdiBwYWdlIFtjbGFzc109XCJ0aGlzLmNsYXNzTmFtZVwiIFtzdHlsZV09XCJ0aGlzLnN0eWxlXCIgW2F0dHJpYnV0ZV09XCJ7cm9vdDogdGhpcy5pc1Jvb3QsIGhpZGRlbjp0aGlzLmlzSGlkZGVuLHZpc2libGU6dGhpcy5pc1Zpc2libGUsc2hvd2luZzp0aGlzLmlzU2hvd2luZyxoaWRpbmc6dGhpcy5pc0hpZGluZyxjcmVhdGluZzp0aGlzLmlzQ3JlYXRpbmcsZGVsZXRpbmc6dGhpcy5pc0RlbGV0aW5nfVwiPjwhLS1jaGlsZC10ZW1wbGF0ZS0tPjwvZGl2PmA7XHJcbiAgfVxyXG59XHJcbkJhc2VQYWdlLnZpc2libGVQYXJlbnQgPSBudWxsO1xyXG5CYXNlUGFnZS5zZWxlY3RvciA9IG51bGw7XHJcbkJhc2VQYWdlLmNsYXNzTmFtZSA9IG51bGw7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImJhY2tkcm9wXFxcIj5cXHJcXG5cXHQ8ZGl2IGNsYXNzPSdwb3B1cCc+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcyA9ICd0aXRsZScgW2lmXT0ndGhpcy50aXRsZScgIGJpbmQ9XFxcIlRyYW5zbGF0ZSh0aGlzLnRpdGxlKVxcXCI+RGlhbG9nIHRpdGxlPC9kaXY+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcyA9ICdwcm9tcHQnIFtpZl09J3RoaXMucHJvbXB0JyBiaW5kPVxcXCJUcmFuc2xhdGUodGhpcy5wcm9tcHQpXFxcIj5Qcm9tcHQ8L2Rpdj5cXHJcXG5cXHRcXHRcXHJcXG5cXHRcXHQ8ZGl2IGNsYXNzID0gJ2RpYWxvZy1jb250ZW50IHRvdWNoLXNjcm9sbCcgW3N0eWxlXT1cXFwie21heEhlaWdodDp0aGlzLmRpYWxvZ19jb250ZW50X21heF9oZWlnaHR9XFxcIj5cXHJcXG5cXHRcXHRcXHQ8ZGl2IFtkaXJlY3RpdmVdID0gXFxcInRoaXMuY29udGVudFxcXCI+PC9kaXY+XFxyXFxuXFx0XFx0PC9kaXY+XFxyXFxuXFx0XFx0PGRpdiBjbGFzcyA9ICdkaWFsb2ctYnV0dG9ucycgW2lmXT1cXFwidGhpcy5idXR0b25zXFxcIj5cXHJcXG5cXHRcXHRcXHQ8YnV0dG9uIFtmb3JlYWNoXT1cXFwiYnV0dG9uX3RpdGxlIGluIHRoaXMuYnV0dG9ucyBhcyBidXR0b25cXFwiIG9uY2xpY2s9XFxcInRoaXMub25CdXR0b25DbGlja2VkKGJ1dHRvbl90aXRsZSlcXFwiIGJpbmQ9XFxcIlRyYW5zbGF0ZShidXR0b25fdGl0bGUpXFxcIiBbYXR0cmlidXRlXT1cXFwie2lkOidkaWFsb2dCdXR0b24nK2J1dHRvbl90aXRsZX1cXFwiPjwvYnV0dG9uPlxcclxcblxcdFxcdDwvZGl2PlxcclxcblxcdDwvZGl2PlxcclxcbjwvZGl2PlxcclxcblwiIiwiaW1wb3J0IHsgQmFzZVBhZ2UgfSBmcm9tIFwiLi4vQmFzZVBhZ2VcIjtcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgKiBhcyB0ZW1wbGF0ZSBmcm9tICcuL0RpYWxvZ1BhZ2UuaHRtbCc7XHJcbmltcG9ydCAnLi9EaWFsb2dQYWdlLnNjc3MnO1xyXG5pbXBvcnQgeyB0cnlDYWxsIH0gZnJvbSBcIi4uLy4uL2NvcmUvaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCJ1dGlsXCI7XHJcbmltcG9ydCB7IEZvcm1zIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvRm9ybXNcIjtcclxuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tIFwiLi4vLi4vY29yZS9JbmplY3RvclwiO1xyXG5pbXBvcnQgeyBOYXZDb250cm9sbGVyIH0gZnJvbSBcIi4uLy4uL2NvcmUvTmF2Q29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBPYmplY3RzIH0gZnJvbSBcIi4uLy4uL2NvcmUvT2JqZWN0c1wiO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgZGlhbG9nIHBhZ2VcclxuICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIERpYWxvZyh0aXRsZSl7XHJcbiAgLyoqIEB0eXBlIHtOYXZDb250cm9sbGVyfSAqL1xyXG4gIHZhciBuYXYgPSBJbmplY3Rvci5OYXY7XHJcbiAgdmFyIGQgPSBuYXYucHVzaChEaWFsb2dQYWdlKTtcclxuICBkLnRpdGxlID0gdGl0bGU7XHJcbiAgcmV0dXJuIGQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEaWFsb2dQYWdlIGV4dGVuZHMgQmFzZVBhZ2V7XHJcbiAgY29uc3RydWN0b3IodGl0bGUpe1xyXG4gICAgc3VwZXIoKTtcclxuICAgIC8qKiBAdHlwZSB7S2V5VmFsdWVQYWlyfSAqL1xyXG4gICAgdGhpcy5idXR0b25zID0ge307XHJcbiAgICB0aGlzLnRpdGxlPSB0aXRsZTtcclxuICAgIHRoaXMucHJvbXB0PSBudWxsO1xyXG4gICAgdGhpcy5kaWFsb2dfY29udGVudF9tYXhfaGVpZ2h0ID0gXCIxMDAlXCI7XHJcbiAgICB0aGlzLmNvbnRyb2xzPVtdO1xyXG4gICAgdGhpcy5kYXRhID0ge307XHJcbiAgICB0aGlzLmVycm9ycz17fTtcclxuXHJcbiAgICAvKiogQHR5cGUge0Zvcm1zfSAqL1xyXG4gICAgdGhpcy5jb250ZW50PSBuZXcgRm9ybXModGhpcy5jb250cm9scyx0aGlzLmRhdGEsdGhpcy5lcnJvcnMpO1xyXG4gIH1cclxuXHJcbiAgb25SZXNpemUod2luZG93U2l6ZSl7XHJcbiAgICBzdXBlci5vblJlc2l6ZSh3aW5kb3dTaXplKTtcclxuICAgIHZhciBoID0gdGhpcy5wYWdlLm9mZnNldEhlaWdodCAtIDE1MDtcclxuICAgIHRoaXMuZGlhbG9nX2NvbnRlbnRfbWF4X2hlaWdodCA9IGgrXCJweFwiO1xyXG4gIH1cclxuXHJcbiAgb25CdXR0b25DbGlja2VkKGJ1dHRvbl90aXRsZSl7XHJcbiAgICBpZiAodHJ5Q2FsbCh0aGlzLCB0aGlzLmJ1dHRvbnNbYnV0dG9uX3RpdGxlXSwgdGhpcykgIT0gZmFsc2UpXHJcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCl7XHJcbiAgICB0aGlzLmNvbnRlbnQudXBkYXRlVGVtcGxhdGUodGhpcy5jb250cm9scyk7XHJcbiAgfVxyXG5cclxuICBhZGRDaGVjayhuYW1lLCB0aXRsZSwgdmFsdWUsIHJlcXVpcmVkLCBhdHRycykge1xyXG4gICAgdmFyIHZhbFJ1bGUgPSAoaXNTdHJpbmcocmVxdWlyZWQpID8gcmVxdWlyZWQgOiAocmVxdWlyZWQgPyBcInJlcXVpcmVkXCIgOiBudWxsKSk7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnB1c2goe25hbWU6IG5hbWUsIHR5cGU6J2NoZWNrYm94JywgdGl0bGU6dGl0bGUsIHZhbGlkYXRlUnVsZTogdmFsUnVsZSwgYXR0cmlidXRlczphdHRyc30pO1xyXG4gICAgdGhpcy5kYXRhW25hbWVdID0gdmFsdWU7XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcblx0XHRcdFxyXG4gIH1cclxuXHJcbiAgYWRkU2VsZWN0KG5hbWUsIHRpdGxlLCB2YWx1ZSwgcmVxdWlyZWQsIGl0ZW1zLCBhdHRycykge1xyXG4gICAgdmFyIHZhbFJ1bGUgPSAoaXNTdHJpbmcocmVxdWlyZWQpID8gcmVxdWlyZWQgOiAocmVxdWlyZWQgPyBcInJlcXVpcmVkXCIgOiBudWxsKSk7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnB1c2goe25hbWU6IG5hbWUsIHR5cGU6IFwic2VsZWN0XCIsIHRpdGxlOiB0aXRsZSwgdmFsaWRhdGVSdWxlOiB2YWxSdWxlLCBpdGVtczogaXRlbXMsIGF0dHJpYnV0ZXM6YXR0cnN9KTtcclxuICAgIHRoaXMuZGF0YVtuYW1lXSA9IHZhbHVlO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuXHRcdFxyXG4gICAgcmV0dXJuIHRoaXM7XHRcclxuICB9XHJcblx0XHJcbiAgYWRkSW5wdXQobmFtZSwgdGl0bGUsIHR5cGUsIHZhbHVlLCByZXF1aXJlZCwgYXR0cnMpIHtcclxuICAgIHZhciB2YWxSdWxlID0gKGlzU3RyaW5nKHJlcXVpcmVkKSA/IHJlcXVpcmVkIDogKHJlcXVpcmVkID8gXCJyZXF1aXJlZFwiIDogbnVsbCkpO1xyXG4gICAgdGhpcy5jb250cm9scy5wdXNoKHtuYW1lOiBuYW1lLCB0eXBlOiB0eXBlLCB0aXRsZTp0aXRsZSwgdmFsaWRhdGVSdWxlOiB2YWxSdWxlLCBhdHRyaWJ1dGVzOmF0dHJzfSk7XHJcbiAgICB0aGlzLmRhdGFbbmFtZV0gPSB2YWx1ZTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcblx0XHRcclxuICAgIHJldHVybiB0aGlzO1x0XHJcbiAgfVxyXG5cclxuICBhZGREYXRlKG5hbWUsIHRpdGxlLCB2YWx1ZSwgcmVxdWlyZWQsIGF0dHJzKSB7XHJcbiAgICB2YXIgdmFsUnVsZSA9IChpc1N0cmluZyhyZXF1aXJlZCkgPyByZXF1aXJlZCA6IChyZXF1aXJlZCA/IFwicmVxdWlyZWRcIiA6IG51bGwpKTtcclxuICAgIHRoaXMuY29udHJvbHMucHVzaCh7bmFtZTogbmFtZSwgdHlwZTogXCJkYXRlXCIsIHRpdGxlOnRpdGxlLCB2YWxpZGF0ZVJ1bGU6IHZhbFJ1bGUsIGF0dHJpYnV0ZXM6YXR0cnN9KTtcclxuICAgIHRoaXMuZGF0YVtuYW1lXSA9IHZhbHVlO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuXHRcdFxyXG4gICAgcmV0dXJuIHRoaXM7XHRcclxuICB9XHJcblxyXG4gIGFkZERhdGVUaW1lKG5hbWUsIHRpdGxlLCB2YWx1ZSwgcmVxdWlyZWQsIGF0dHJzKSB7XHJcbiAgICB2YXIgdmFsUnVsZSA9IChpc1N0cmluZyhyZXF1aXJlZCkgPyByZXF1aXJlZCA6IChyZXF1aXJlZCA/IFwicmVxdWlyZWRcIiA6IG51bGwpKTtcclxuICAgIHRoaXMuY29udHJvbHMucHVzaCh7bmFtZTogbmFtZSwgdHlwZTogXCJkYXRldGltZVwiLCB0aXRsZTp0aXRsZSwgdmFsaWRhdGVSdWxlOiB2YWxSdWxlLCBhdHRyaWJ1dGVzOmF0dHJzfSk7XHJcbiAgICB0aGlzLmRhdGFbbmFtZV0gPSB2YWx1ZTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcblx0XHRcclxuICAgIHJldHVybiB0aGlzO1x0XHJcbiAgfVxyXG5cclxuICBhZGRUaW1lKG5hbWUsIHRpdGxlLCB2YWx1ZSwgcmVxdWlyZWQsIGF0dHJzKSB7XHJcbiAgICB2YXIgdmFsUnVsZSA9IChpc1N0cmluZyhyZXF1aXJlZCkgPyByZXF1aXJlZCA6IChyZXF1aXJlZCA/IFwicmVxdWlyZWRcIiA6IG51bGwpKTtcclxuICAgIHRoaXMuY29udHJvbHMucHVzaCh7bmFtZTogbmFtZSwgdHlwZTogXCJ0aW1lXCIsIHRpdGxlOnRpdGxlLCB2YWxpZGF0ZVJ1bGU6IHZhbFJ1bGUsIGF0dHJpYnV0ZXM6YXR0cnN9KTtcclxuICAgIHRoaXMuZGF0YVtuYW1lXSA9IHZhbHVlO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuXHRcdFxyXG4gICAgcmV0dXJuIHRoaXM7XHRcclxuICB9XHJcblxyXG4gIGFkZFRleHRBcmVhKG5hbWUsIHRpdGxlLCB2YWx1ZSwgcmVxdWlyZWQsIGF0dHJzKSB7XHJcbiAgICB2YXIgdmFsUnVsZSA9IChpc1N0cmluZyhyZXF1aXJlZCkgPyByZXF1aXJlZCA6IChyZXF1aXJlZCA/IFwicmVxdWlyZWRcIiA6IG51bGwpKTtcclxuICAgIHRoaXMuY29udHJvbHMucHVzaCh7bmFtZTogbmFtZSwgdHlwZTogXCJ0ZXh0YXJlYVwiLCB0aXRsZTp0aXRsZSwgdmFsaWRhdGVSdWxlOiB2YWxSdWxlLCBhdHRyaWJ1dGVzOmF0dHJzfSk7XHJcbiAgICB0aGlzLmRhdGFbbmFtZV0gPSB2YWx1ZTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcblx0XHRcclxuICAgIHJldHVybiB0aGlzO1x0XHJcbiAgfVxyXG5cclxuICBhZGRUZXh0IChuYW1lLCB0aXRsZSwgdmFsdWUsIHJlcXVpcmVkLCBhdHRycykge1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkSW5wdXQobmFtZSwgdGl0bGUsXCJ0ZXh0XCIsIHZhbHVlLCByZXF1aXJlZCwgYXR0cnMpO1xyXG4gIH1cclxuXHJcbiAgYWRkTGFiZWwgKHRpdGxlLCB2YWx1ZSwgYXR0cnMpIHtcclxuICAgIHRoaXMuY29udHJvbHMucHVzaCh7dHlwZTonbGFiZWwnLCB0aXRsZTp0aXRsZSwgdmFsdWU6dmFsdWUsIGF0dHJpYnV0ZXM6YXR0cnN9KTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcblx0XHRcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBhZGRMaW5rICh0aXRsZSwgdmFsdWUsIGF0dHJzKSB7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnB1c2goe3R5cGU6J2xpbmsnLCB0aXRsZTp0aXRsZSwgdmFsdWU6dmFsdWUsIGF0dHJpYnV0ZXM6YXR0cnN9KTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcblx0XHRcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgYWRkUGFzc3dvcmQgKG5hbWUsIHRpdGxlLCB2YWx1ZSwgcmVxdWlyZWQsIGF0dHJzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5hZGRJbnB1dChuYW1lLCB0aXRsZSxcInBhc3N3b3JkXCIsIHZhbHVlLCByZXF1aXJlZCwgYXR0cnMpO1xyXG4gIH1cclxuXHJcblxyXG4gIHJlbW92ZUZpZWxkKG5hbWUpe1xyXG4gICAgdGhpcy5jb250cm9scyA9IE9iamVjdHMuZmlsdGVyKHRoaXMuY29udHJvbHMsIGVsID0+IGVsLm5hbWUgIT0gbmFtZSApO1xyXG5cclxuICAgIGlmICh0aGlzLmRhdGFbbmFtZV0pXHJcbiAgICAgIGRlbGV0ZSB0aGlzLmRhdGFbbmFtZV07XHJcblxyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblx0XHJcbiAgYWRkSHRtbCAodmFsdWUpIHtcclxuICAgIHRoaXMuY29udHJvbHMucHVzaCh7dHlwZTonaHRtbCcsdmFsdWU6dmFsdWV9KTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcblx0XHRcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcblx0XHJcbiAgYWRkU3BsaXQgKGl0ZW1zKSB7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnB1c2goe25hbWU6XCJzcGxpdFwiLCB0eXBlOidzcGxpdCcsIHRpdGxlOm51bGwsIHZhbHVlOm51bGwsIGl0ZW1zOiBpdGVtc30pO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuXHRcdFxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuXHQgKiBWYWxpZGF0ZSB0aGUgY29udGVudCBmb3JtXHJcblx0ICovXHJcbiAgdmFsaWRhdGUoKXtcclxuICAgIGlmICh0aGlzLmNvbnRlbnQgaW5zdGFuY2VvZiBGb3JtcylcclxuICAgICAgcmV0dXJuIHRoaXMuY29udGVudC52YWxpZGF0b3IudmFsaWRhdGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG5cdCAqIEFkZCBBY3Rpb24gQnV0dG9uIHRvIHRoZSBkaWFsb2dcclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcclxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKERpYWxvZ1BhZ2UpfSBjYWxsYmFjayAtIGZpcmVkIHdoZW4gYnV0dG9uIGlzIGNsaWNrZWQuIFJldHVybiBmYWxzZSB0byBzdG9wIGRpYWxvZyBmcm9tIGNsb3NpbmdcclxuXHQgKi9cclxuICBhZGRBY3Rpb25CdXR0b24odGl0bGUsIGNhbGxiYWNrKSB7XHJcbiAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IG51bGw7XHJcbiAgICB0aGlzLmJ1dHRvbnNbdGl0bGVdID0gY2FsbGJhY2s7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGdldCB0ZW1wbGF0ZSgpe1xyXG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kVGVtcGxhdGUoc3VwZXIudGVtcGxhdGUsIHRlbXBsYXRlKTtcclxuICB9XHJcbn1cclxuRGlhbG9nUGFnZS5jbGFzc05hbWUgPSAncGFnZS1EaWFsb2dQYWdlJztcclxuRGlhbG9nUGFnZS52aXNpYmxlUGFyZW50ID0gdHJ1ZTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCJcclxuaW1wb3J0ICcuL0hlYWRlclBhZ2Uuc2Nzcyc7XHJcbmltcG9ydCB7IEJhc2VQYWdlIH0gZnJvbSAnLi4vQmFzZVBhZ2UnO1xyXG5cclxuLyoqXHJcbiAqIEEgcGFnZSB3aXRoIGhlYWRlciBhbmQgbWVudSBhbmQgYmFjayBidXR0b25zXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSGVhZGVyUGFnZSBleHRlbmRzIEJhc2VQYWdle1xyXG4gIGNvbnN0cnVjdG9yKCl7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5iYWNrQnV0dG9uID0gZmFsc2U7XHJcbiAgICB0aGlzLm1lbnVCdXR0b24gPSBmYWxzZTtcclxuICAgIHRoaXMucmVmcmVzaEJ1dHRvbiA9IGZhbHNlO1xyXG4gICAgdGhpcy5zZWFyY2hCdXR0b24gPSBmYWxzZTtcclxuXHRcdFxyXG4gICAgdGhpcy50aXRsZSA9IFwiXCI7XHJcblxyXG4gICAgLy9jb250ZW50IGRpcmVjdGl2ZVxyXG4gICAgdGhpcy5jb250ZW50ID0gbnVsbDtcclxuICAgIC8vZm9vdGVyIGRpcmVjdGl2ZVxyXG4gICAgdGhpcy5mb290ZXIgPSBudWxsO1xyXG4gICAgdGhpcy5zaG93Rm9vdGVyID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5zZXJ2aWNlUHJvdmlkZXJfaWQgPSBudWxsO1xyXG5cclxuICAgIC8vaGVhZGVyIGRpcmVjdGl2ZVxyXG4gICAgdGhpcy5oZWFkZXI9YFxyXG5cdFx0XHQ8YnV0dG9uIGlkPVwiYmFja0J1dHRvblwiIFtpZl09XCJ0aGlzLmJhY2tCdXR0b25cIiBvbmNsaWNrID0gXCJ0aGlzLm9uQmFja0J1dHRvbkNsaWNrZWQoKVwiPjxpIGNsYXNzPVwiZmFzIGZhLWFycm93LWxlZnRcIj48L2k+PC9idXR0b24+XHJcblx0XHRcdDxidXR0b24gaWQ9XCJtZW51QnV0dG9uXCIgW2lmXT1cInRoaXMubWVudUJ1dHRvblwiIG9uY2xpY2sgPSBcInRoaXMub25NZW51QnV0dG9uQ2xpY2tlZCgpXCI+PGkgY2xhc3M9XCJmYXMgZmEtYmFyc1wiPjwvaT48L2J1dHRvbj5cclxuXHRcdFx0PHNwYW4gY2xhc3M9XCJoZWFkZXJ0aXRsZVwiIFtpbm5lcmh0bWxdPVwidGhpcy50aXRsZVwiPjwvc3Bhbj5cclxuXHRcdFx0PHNwYW4gY2xhc3M9XCJsb2dvXCIgW2lmXT1cIiF0aGlzLnRpdGxlXCI+PC9zcGFuPlxyXG5cdFx0XHQ8YnV0dG9uIGlkPVwicmVmcmVzaEJ1dHRvblwiIFtpZl09XCJ0aGlzLnJlZnJlc2hCdXR0b25cIiBbY2xhc3NdPVwidGhpcy5yZWZyZXNoQnV0dG9uUm90YXRpbmcgPyAncm90YXRpbmcnIDogbnVsbFwiIG9uY2xpY2sgPSBcInRoaXMub25SZWZyZXNoQnV0dG9uQ2xpY2tlZCgpXCI+PGkgY2xhc3M9XCJmYXMgZmEtc3luYy1hbHRcIj48L2k+PC9idXR0b24+XHJcblx0XHRcdDxidXR0b24gaWQ9XCJzZWFyY2hCdXR0b25cIiBbaWZdPVwidGhpcy5zZWFyY2hCdXR0b25cIiBvbmNsaWNrID0gXCJ0aGlzLm9uU2VhcmNoQnV0dG9uQ2xpY2tlZCgpXCI+PGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoXCI+PC9pPjwvYnV0dG9uPlxyXG5cdFx0YDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqXHJcblx0ICovXHJcbiAgb25CYWNrQnV0dG9uQ2xpY2tlZCgpe1xyXG4gICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgfVxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqXHJcblx0ICovXHJcbiAgb25NZW51QnV0dG9uQ2xpY2tlZCgpe1xyXG4gICAgY29uc29sZS5sb2coXCJPdmVycmlkZSBtZSA6IG9uTWVudUJ1dHRvbkNsaWNrZWRcIik7XHJcbiAgfVxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqXHJcblx0ICovXHJcbiAgb25SZWZyZXNoQnV0dG9uQ2xpY2tlZCgpe1xyXG4gICAgY29uc29sZS5sb2coXCJPdmVycmlkZSBtZSA6IG9uUmVmcmVzaEJ1dHRvbkNsaWNrZWRcIik7XHJcbiAgfVxyXG4gIC8qKlxyXG5cdCAqICoqKk92ZXJyaWRlKioqXHJcblx0ICovXHJcbiAgb25TZWFyY2hCdXR0b25DbGlja2VkKCl7XHJcblxyXG4gIH1cclxuXHJcbiAgZ2V0IHRlbXBsYXRlKCl7XHJcbiAgICByZXR1cm4gdGhpcy5leHRlbmRUZW1wbGF0ZShzdXBlci50ZW1wbGF0ZSwgdGVtcGxhdGUpO1xyXG4gIH1cclxufVxyXG5IZWFkZXJQYWdlLmNsYXNzTmFtZSA9ICdwYWdlLUhlYWRlclBhZ2UnO1xyXG52YXIgdGVtcGxhdGUgPSBgXHJcblx0PGRpdiBjbGFzcz1cImhlYWRlclwiIFtpZl09XCJ0aGlzLmhlYWRlclwiPlxyXG5cdFx0PGRpdiBbZGlyZWN0aXZlXSA9IFwidGhpcy5oZWFkZXJcIj48L2Rpdj5cclxuXHQ8L2Rpdj5cclxuXHRcclxuXHQ8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxyXG5cdFx0PCEtLWRlZmF1bHQtdGVtcGxhdGUtYmVnaW4tLT5cclxuXHRcdDxkaXYgW2RpcmVjdGl2ZV0gPSBcInRoaXMuY29udGVudFwiPjwvZGl2PlxyXG5cdFx0PCEtLWRlZmF1bHQtdGVtcGxhdGUtZW5kLS0+XHJcblx0XHQ8IS0tY2hpbGQtdGVtcGxhdGUtLT5cclxuXHQ8L2Rpdj5cclxuXHJcblx0PGRpdiBjbGFzcz1cImZvb3RlclwiIFtpZl09XCJ0aGlzLmZvb3RlciAmJiB0aGlzLnNob3dGb290ZXJcIj5cclxuXHRcdDxkaXYgW2RpcmVjdGl2ZV0gPSBcInRoaXMuZm9vdGVyXCI+PC9kaXY+XHJcblx0PC9kaXY+XHJcbmA7IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIiwiaW1wb3J0ICcuL051bWVyaWNLZXlib2FyZFBhZ2Uuc2Nzcyc7XHJcbi8vIEB0cy1pZ25vcmVcclxuaW1wb3J0ICogYXMgdGVtcGxhdGUgZnJvbSAnLi9OdW1lcmljS2V5Ym9hcmRQYWdlLmh0bWwnO1xyXG5pbXBvcnQgeyBCYXNlUGFnZSB9IGZyb20gJy4vLi4vQmFzZVBhZ2UnOyBcclxuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tIFwiLi8uLi8uLi9jb3JlL0luamVjdG9yXCI7XHJcbmltcG9ydCB7IG51bWJlckZyb21Mb2NhbGVTdHJpbmcgfSBmcm9tICcuLy4uLy4uL2NvcmUvaGVscGVycyc7XHJcbmltcG9ydCB7IERPTSB9IGZyb20gJy4uLy4uL2NvcmUvRE9NJztcclxuXHJcbmV4cG9ydCB2YXIgTnVtZXJpY0tleWJvYXJkID0ge1xyXG4gIGlzRW5hYmxlZDogZmFsc2UsXHJcbiAgLyoqIEB0eXBlIHtOdW1lcmljS2V5Ym9hcmRQYWdlfSAqL1xyXG4gIF9wYWdlOm51bGwsXHJcbiAgb3B0aW9ucyA6IHtcclxuICAgIC8qKiAwIC0gVGFsbCBzaW1wbGUsIDEgLVRhbGwgRnVsbCwgMiAtIHNob3J0IGZ1bGwgKi9cclxuICAgIGxheW91dDowLFxyXG4gICAgc2VsZWN0T25Gb2N1cyA6IGZhbHNlLFxyXG4gICAgc2VsZWN0Rm9yZUNvbG9yIDogJ3doaXRlJyxcclxuICAgIHNlbGVjdEJhY2tDb2xvciA6ICcjMDM5YmU1JyxcclxuICAgIHRoZW1lIDogJycsXHJcbiAgfSxcclxuICBlbmFibGUoKXtcclxuICAgIGlmIChOdW1lcmljS2V5Ym9hcmQuaXNFbmFibGVkKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgLy9ET00oZG9jdW1lbnQpLm9mZignZm9jdXMudmlydHVhbF9rZXlib2FyZF9jJywgZm9jdXNFdmVudEhhbmRsZXIpO1xyXG5cclxuICAgIERPTShkb2N1bWVudCkub24oJ2ZvY3VzJywgZm9jdXNFdmVudEhhbmRsZXIsIHRydWUpO1xyXG5cclxuICAgIE51bWVyaWNLZXlib2FyZC5pc0VuYWJsZWQgPSB0cnVlO1xyXG4gIH0sXHJcbiAgZGlzYWJsZSgpe1xyXG4gICAgaWYgKE51bWVyaWNLZXlib2FyZC5fcGFnZSl7XHJcbiAgICAgIE51bWVyaWNLZXlib2FyZC5fcGFnZS5kZXN0cm95S0IoKTsgXHJcbiAgICB9XHJcbiAgICBOdW1lcmljS2V5Ym9hcmQuaXNFbmFibGVkID0gZmFsc2U7XHJcbiAgICBET00oZG9jdW1lbnQpLm9mZignZm9jdXMnLCBmb2N1c0V2ZW50SGFuZGxlcik7XHJcbiAgfSxcclxuICBvbkNsaWNrKCl7XHJcblxyXG4gIH1cclxuXHRcclxufTtcclxuXHJcbmZ1bmN0aW9uIGZvY3VzRXZlbnRIYW5kbGVyKGV2ZW50KXtcclxuICAvLydpbnB1dFt0eXBlPW51bWJlcl0sIGlucHV0W251bWJlcl0nXHJcbiAgLyoqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50fSAqL1xyXG4gIHZhciBlbCA9IGV2ZW50LnRhcmdldDtcclxuICBpZiAoZWwudGFnTmFtZSAhPSBcIklOUFVUXCIgfHwgKGVsLmdldEF0dHJpYnV0ZSgndHlwZScpICE9IFwibnVtYmVyXCIgJiYgZWwuZ2V0QXR0cmlidXRlKCdudW1iZXInKSA9PSBudWxsKSlcclxuICAgIHJldHVybjtcclxuXHRcclxuICAvKiogQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9ICovXHJcbiAgLy8gQHRzLWlnbm9yZVxyXG4gIHZhciBlbGVtID0gZXZlbnQudGFyZ2V0O1xyXG4gIGlmIChOdW1lcmljS2V5Ym9hcmQuaXNFbmFibGVkKXtcclxuICAgIGlmIChOdW1lcmljS2V5Ym9hcmQuX3BhZ2Upe1xyXG4gICAgICAvL2lmICghTnVtZXJpY0tleWJvYXJkLl9wYWdlLmlzRGVsZXRpbmcpe1xyXG4gICAgICBOdW1lcmljS2V5Ym9hcmQuX3BhZ2UuZm9jdXNFbGVtZW50KGVsZW0pO1xyXG4gICAgICAvL31cclxuICAgIH0gZWxzZSB7IFxyXG4gICAgICBOdW1lcmljS2V5Ym9hcmQuX3BhZ2UgPSBJbmplY3Rvci5OYXYucHVzaChOdW1lcmljS2V5Ym9hcmRQYWdlLCBOdW1lcmljS2V5Ym9hcmQub3B0aW9ucyk7XHJcbiAgICAgIE51bWVyaWNLZXlib2FyZC5fcGFnZS5mb2N1c0VsZW1lbnQoZWxlbSk7XHJcbiAgICAgIE51bWVyaWNLZXlib2FyZC5fcGFnZS5vbkRlc3Ryb3kgPSAoKT0+e1xyXG4gICAgICAgIE51bWVyaWNLZXlib2FyZC5fcGFnZT1udWxsO1xyXG4gICAgICB9O1xyXG4gICAgICBOdW1lcmljS2V5Ym9hcmQuX3BhZ2Uub25DbGljayA9IE51bWVyaWNLZXlib2FyZC5vbkNsaWNrO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNUb3VjaERldmljZSgpIHtcclxuICB0cnkge1xyXG4gICAgZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJUb3VjaEV2ZW50XCIpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufVxyXG5mdW5jdGlvbiBnZXRQeE51bWJlcih2YWwpe1xyXG4gIHZhbCA9IHZhbCtcIlwiO1xyXG4gIHJldHVybiBOdW1iZXIodmFsLnNwbGl0KCdweCcpWzBdKTtcclxufVxyXG5jbGFzcyBOdW1lcmljS2V5Ym9hcmRQYWdlIGV4dGVuZHMgQmFzZVBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5zZWxlY3RvciA9XCJwYWdlLU51bWVyaWNLZXlib2FyZFBhZ2VcIjtcclxuICAgIHRoaXMuY2xhc3NOYW1lID1cInBhZ2UtTnVtZXJpY0tleWJvYXJkUGFnZVwiO1xyXG4gICAgdGhpcy52aXNpYmxlUGFyZW50ID0gdHJ1ZTtcclxuXHRcclxuICAgIC8qKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gKi9cclxuICAgIHRoaXMub2xkX2lucHV0O1xyXG4gICAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi9cclxuICAgIHRoaXMuY3Vycl9pbnB1dDtcclxuXHJcbiAgICB0aGlzLm1vdXNlRG93bkVsID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLm9sZF9pbnB1dF9oaWRkZW4gPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLmJsaW5rZXIgPSBudWxsO1xyXG4gICAgdGhpcy52YWx1ZSA9IFwiXCI7XHJcbiAgICB0aGlzLmlzVGV4dFNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnNjcm9sbGVkID0gMDtcclxuICAgIHRoaXMuaXNQaXBlVmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuX29wdGlvbnMgPSB7XHJcbiAgICAgIGxheW91dDowLFxyXG4gICAgICBzZWxlY3RPbkZvY3VzIDogZmFsc2UsXHJcbiAgICAgIHNlbGVjdEZvcmVDb2xvciA6ICd3aGl0ZScsXHJcbiAgICAgIHNlbGVjdEJhY2tDb2xvciA6ICcjMDM5YmU1JyxcclxuICAgICAgdGhlbWU6ICcnLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmlucHV0U3R5bGUgPSB7fTtcclxuXHJcbiAgICB0aGlzLnNldE9wdGlvbnMoT2JqZWN0LmFzc2lnbih7fSx0aGlzLl9vcHRpb25zLCBvcHRpb25zKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0ge3tsYXlvdXQ6bnVtYmVyLHNlbGVjdE9uRm9jdXM6IGJvb2xlYW4sc2VsZWN0Rm9yZUNvbG9yOiBzdHJpbmcsc2VsZWN0QmFja0NvbG9yOnN0cmluZ319IHZhbHVlIFxyXG5cdCAqL1xyXG4gIHNldE9wdGlvbnMgKHZhbHVlKXtcclxuICAgIHRoaXMuX29wdGlvbnMgPSB2YWx1ZTtcclxuICAgIHRoaXMuY2xhc3NOYW1lID0gXCJsYXlvdXQtXCIrIHRoaXMuX29wdGlvbnMubGF5b3V0ICsgJyAnKyB0aGlzLl9vcHRpb25zLnRoZW1lIDtcclxuICB9XHJcblxyXG4gIHVuRm9jdXNDdXJyZW50RWxlbWVudCgpe1xyXG4gICAgdGhpcy5zdG9wQmxpbmtlcigpO1xyXG4gICAgRE9NKHRoaXMub2xkX2lucHV0KS5jc3Moe2Rpc3BsYXk6dGhpcy5vcmlnaW5hbC5lbGVtRGlzcGxheX0pO1xyXG4gICAgRE9NKHRoaXMuY3Vycl9pbnB1dCkucmVtb3ZlKCk7XHJcbiAgICB0aGlzLm9sZF9pbnB1dF9oaWRkZW4gPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGZvY3VzRWxlbWVudChlbGVtKXtcclxuICAgIHZhciBpc05ldyA9IHRydWU7XHJcbiAgICAvL3NhbWUgZWxlbWVudFxyXG4gICAgaWYgKHRoaXMuY3Vycl9pbnB1dCA9PSBlbGVtKXtcclxuICAgICAgZWxlbS5ibHVyKCk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCk9PntcclxuICAgICAgICB3aW5kb3cuZm9jdXMoKTtcclxuICAgICAgfSwxKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy9zd2l0Y2ggdG8gbmV3IGVsZW1lbnQgd2l0aG91dCBjbG9zaW5nIGtleWJvYXJkXHJcbiAgICBpZiAodGhpcy5jdXJyX2lucHV0KXtcclxuICAgICAgdGhpcy5lbnRlcigpO1xyXG4gICAgICB0aGlzLnVuRm9jdXNDdXJyZW50RWxlbWVudCgpO1xyXG5cdFx0XHRcclxuICAgICAgaXNOZXcgPSBmYWxzZTtcclxuICAgIH1cclxuXHRcdFxyXG4gICAgLyoqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50fSAqL1xyXG4gICAgdGhpcy5vbGRfaW5wdXQgPSBlbGVtO1xyXG5cdFx0XHJcbiAgICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50fSAqLyBcclxuICAgIHRoaXMuY3Vycl9pbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHN0ID0gRE9NKGVsZW0pLmNzcyhbJ2Rpc3BsYXknLCdwYWRkaW5nJywncGFkZGluZy10b3AnLCdwYWRkaW5nLWJvdHRvbScsJ2JvcmRlcicsJ2JvcmRlci10b3AnLCdib3JkZXItYm90dG9tJywnYm9yZGVyLWxlZnQnLCdib3JkZXItcmlnaHQnLCdib3JkZXItcmFkaXVzJywnZm9udCcsJ2ZvbnQtc2l6ZScsJ2NvbG9yJywndG9wJywnbGVmdCcsJ2JvdHRvbScsJ3JpZ2h0Jywnd2lkdGgnLCdoZWlnaHQnLCdwb3NpdGlvbicsJ2JhY2tncm91bmQnLCdib3gtc2hhZG93J10pO1xyXG4gICAgdmFyIHAgPSBnZXRQeE51bWJlcihzdFsnaGVpZ2h0J10pIC0gKGdldFB4TnVtYmVyKHN0WydwYWRkaW5nLXRvcCddKStnZXRQeE51bWJlcihzdFsncGFkZGluZy1ib3R0b20nXSkpO1xyXG4gICAgc3RbJ2xpbmUtaGVpZ2h0J10gPSBwICsgJ3B4JztcclxuICAgIHN0WydvdmVyZmxvdyddID0gJ2hpZGRlbic7XHJcbiAgICB0aGlzLmlucHV0U3R5bGUgPSBzdDtcclxuICAgIERPTSh0aGlzLmN1cnJfaW5wdXQpLmNzcyhzdCk7XHJcblxyXG4gICAgdGhpcy5zZXRWYWx1ZShlbGVtLnZhbHVlKTtcclxuXHJcblx0XHRcclxuICAgIGlmICh0aGlzLl9vcHRpb25zLnNlbGVjdE9uRm9jdXMpe1xyXG4gICAgICB0aGlzLmlzVGV4dFNlbGVjdGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNOZXcpe1xyXG4gICAgICB0aGlzLm9yaWdpbmFsID0ge1xyXG4gICAgICAgIHR5cGU6IGVsZW0udHlwZSxcclxuICAgICAgICBib2R5U3R5bGU6IERPTSgnYm9keScpLmNzcyhbJ2hlaWdodCcsJ292ZXJmbG93JywgJ3Bvc2l0aW9uJ10pLFxyXG4gICAgICAgIGVsZW1DbGFzc05hbWU6IGVsZW0uY2xhc3NOYW1lLFxyXG4gICAgICAgIGVsZW1EaXNwbGF5OiAgRE9NKGVsZW0pLmNzcygnZGlzcGxheScpXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLm9yaWdpbmFsLmJvZHlTdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcclxuICAgIH1cclxuXHJcbiAgICAvL3JlbW92ZSBmb2N1cyBmcm9tIHRoZSBvbGQgZWxlbWVudCFcclxuICAgIGVsZW0uYmx1cigpO1xyXG4gICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICB3aW5kb3cuZm9jdXMoKTtcclxuICAgIH0sMSk7XHJcblxyXG5cclxuICAgIHRoaXMuc3RhcnRCbGlua2VyKCk7XHJcblxyXG4gICAgaWYgKGlzTmV3KXtcclxuICAgICAgdGhpcy5ob29rRXZlbnRzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cdFxyXG4gIGhvb2tFdmVudHMoKXtcclxuXHJcbiAgICBpZiAoaXNUb3VjaERldmljZSgpKSB7XHJcbiAgICAgIHZhciBldl9uYW1lID0gJ3RvdWNoc3RhcnQnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGV2X25hbWUgPSAnY2xpY2snO1xyXG4gICAgfVxyXG4gICAgLy9zdG9wIGV2ZW50cyBidWJibGluZyBwYXN0IGtleWJvYXJkIGVsZW1lbnRcclxuICAgIERPTSh0aGlzLnBhZ2UpLm9uKCBldl9uYW1lLCAoZXYpID0+IHtcclxuICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9KTtcclxuICAgIC8vYXR0YWNoIGJ1dHRvbiBldmVudHNcclxuICAgIERPTSh0aGlzLnBhZ2UpLm9uKCBldl9uYW1lLCAoZXYpID0+IHtcclxuICAgICAgaWYgKGV2LnRhcmdldC50YWdOYW1lICE9IFwiQlVUVE9OXCIpe1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgZXYudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgZXYudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgICB9LDEwMCk7XHJcbiAgICAgIHZhciB2ID0gZXYudGFyZ2V0LnZhbHVlO1xyXG4gICAgICBpZiAoIHY9PVwiZFwiICkge1xyXG4gICAgICAgIHRoaXMuYmFja3NwYWNlKCk7XHJcbiAgICAgIH1lbHNlIGlmICggdj09XCJlXCIgKSB7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95S0IoKTtcclxuICAgICAgfWVsc2UgaWYgKCB2PT1cIi1cIiApIHtcclxuICAgICAgICB0aGlzLm1pbnVzKCk7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIHRoaXMudHlwZV9jaGFyKGV2LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0sIHRydWUpO1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgLy9oYW5kbGUgaGFyZHdhcmUga2V5Ym9hcmQgaW5wdXRcclxuICAgIERPTShkb2N1bWVudCkub24oJ2tleWRvd24udmlydHVhbF9rZXlib2FyZCcsKGV2KT0+e3NlbGYuY3VzdG9tS0Jfa2V5ZG93bmhhbmRsZXIoZXYpO30pO1xyXG4gICAgLy9oYW5kbGUgY2xpY2sgb24gYW55dGhpbmcgb3RoZXIgdGhhbiB0aGUga2V5Ym9hcmRcclxuICAgIERPTShkb2N1bWVudCkub24oJ21vdXNlZG93bi52aXJ0dWFsX2tleWJvYXJkJywoZXYpPT57XHJcbiAgICAgIHRoaXMubW91c2VEb3duRWwgPSBldi50YXJnZXQ7XHJcbiAgICB9KTtcclxuICAgIERPTShkb2N1bWVudCkub24oJ2NsaWNrLnZpcnR1YWxfa2V5Ym9hcmQgbW91c2V1cC52aXJ0dWFsX2tleWJvYXJkJywoZXYpPT57XHJcbiAgICAgIC8qKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gKi8gXHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgdmFyIGVsID0gZXYudGFyZ2V0O1xyXG4gICAgICAvL2lmIG9sZCBlbGVtZW50IGlzIHN0aWxsIHZpc2libGUgdGhlbiBoaWRlIHRoZSBvbGQgZWxlbWVudCBhbmQgZXhpdCBoZXJlXHJcbiAgICAgIGlmICghdGhpcy5vbGRfaW5wdXRfaGlkZGVuKXtcclxuICAgICAgICB0aGlzLm9sZF9pbnB1dF9oaWRkZW4gPSB0cnVlO1xyXG4gICAgICAgIERPTSh0aGlzLm9sZF9pbnB1dCkuY3NzKHtkaXNwbGF5Oidub25lJ30pO1xyXG4gICAgICAgIERPTSh0aGlzLmN1cnJfaW5wdXQpLmNzcyh7ZGlzcGxheTogc2VsZi5vcmlnaW5hbC5lbGVtRGlzcGxheX0pO1xyXG4gICAgICAgIERPTSh0aGlzLmN1cnJfaW5wdXQpLmluc2VydEFmdGVyKHRoaXMub2xkX2lucHV0KTtcclxuICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMub2xkX2lucHV0LnZhbHVlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgLy93ZWlyZCBjbGljayBtb3VzZWRvd24gZG9lcyBub3QgbWF0Y2ghXHJcbiAgICAgIGlmICh0aGlzLm1vdXNlRG93bkVsICE9PSBlbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy9pZiBjbGlja2VkIGluc2lkZSBjdXJyZW50X2lucHV0IHRoZW4gcmV0dXJuXHJcbiAgICAgIGlmICh0aGlzLmN1cnJfaW5wdXQgPT09IGVsIHx8IHRoaXMuY3Vycl9pbnB1dC5jb250YWlucyhlbCkpe1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvL2lmIGNsaWNrZWQgaW5zaWRlIGtleWJvYXJkIHRoZW4gcmV0dXJuIGFzIHdlbGxcclxuICAgICAgaWYgKHNlbGYucGFnZS5jb250YWlucyhlbCkpe1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvL2luIGNsaWNrZWQgb24gYW5vdGhlciBcImlucHV0W251bWJlcl1cIiB0aGVuIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGZvciB0aGUgY3VycmVudCBmaWVsZFxyXG4gICAgICBpZiAoZWwudGFnTmFtZSA9PT0gXCJJTlBVVFwiICYmIChlbC50eXBlID09PSBcIm51bWJlclwiIHx8IGVsLmdldEF0dHJpYnV0ZSgnbnVtYmVyJykgIT0gbnVsbCkpe1xyXG4gICAgICAgIHNlbGYuY3Vycl9pbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJykpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy9pZiBjbGlja2VkIG91dHNpZGUgb2Yga2V5Ym9hcmQgQU5EIHRhcmdldCBlbGVtZW50IGlzIG5vdCBpbnB1dCBudW1iZXIsIHNpbXVsYXRlIEVOVEVSXHJcbiAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICBzZWxmLmRlc3Ryb3lLQigpO1xyXG5cdFx0XHRcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciB3X2ggPSAgd2luZG93LmlubmVySGVpZ2h0O1xyXG5cclxuICAgIHZhciBrYl9oID0gIHRoaXMucGFnZS5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgLy9waGFzZSBvbmU6IHNob3cga2V5Ym9hcmQgc2xvd2x5IHdpdGggYm9keSB0aGUgc2FtZVxyXG4gICAgRE9NKHRoaXMucGFnZSkuY3NzKHt0b3A6KHdfaCAtIGtiX2gpK1wicHhcIn0pO1xyXG4gICAgdGhpcy5saXN0ZW5SZXNpemUgPSB0cnVlO1xyXG4gICAgdGhpcy5fcmVzaXplQm9keSh0cnVlKTtcdFxyXG4gIH1cclxuXHJcbiAgX3Jlc2l6ZUJvZHkoZW1pdFJlc2l6ZSl7XHJcbiAgICBpZiAoIXRoaXMubGlzdGVuUmVzaXplKXtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHdfaCA9ICB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblxyXG4gICAgdmFyIGtiX2ggPSAgdGhpcy5wYWdlLm9mZnNldEhlaWdodDtcclxuXHJcbiAgICAvL3BoYXNlIHR3byByZXNpemUgYm9keSBhZnRlciBrZXlib2FyZCBpcyBzaG93blxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICBpZiAoIXNlbGYucGFnZSB8fCAhdGhpcy5saXN0ZW5SZXNpemUpe1xyXG4gICAgICAgIC8vaW4gY2FzZSBwYWdlIGlzIGFscmVhZHkgcmVtb3ZlZFxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB2YXIgd19oID0gIHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgdmFyIGJfaCA9IHdfaCAtIGtiX2g7XHJcblx0XHJcbiAgICAgIERPTShzZWxmLnBhZ2UpLmNzcyh7dG9wOiAod19oIC0ga2JfaCkrXCJweFwifSk7XHJcblxyXG4gICAgICBET00oJ2JvZHknKS5jc3Moe2hlaWdodDpiX2ggKyBcInB4XCIsIG92ZXJmbG93Oid2aXNpYmxlJywgcG9zaXRpb246J3JlbGF0aXZlJ30pO1xyXG4gICAgICBpZiAoZW1pdFJlc2l6ZSl7XHJcbiAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdyZXNpemUnKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBjID0gRE9NKHNlbGYuY3Vycl9pbnB1dCkuY2xvc2VzdCgnLnNjcm9sbCcpLmZpcnN0KCk7XHJcbiAgICAgIGlmICghYykge1xyXG4gICAgICAgIGMgPSBET00oc2VsZi5jdXJyX2lucHV0KS5jbG9zZXN0KCcuY29udGVudCcpLmZpcnN0KCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGMpIHtcclxuICAgICAgICB2YXIgaW5wdXRfcCA9IERPTShzZWxmLmN1cnJfaW5wdXQpLm9mZnNldFRvcCgpICsgc2VsZi5jdXJyX2lucHV0Lm9mZnNldEhlaWdodCAtIGMuc2Nyb2xsVG9wO1xyXG4gICAgICAgIGlmIChpbnB1dF9wID4gYl9oKXtcclxuICAgICAgICAgIHZhciBzID0ga2JfaCArIGMuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgRE9NKGMpLnNjcm9sbFRvKHt0b3A6cywgYmVoYXZpb3I6ICdzbW9vdGgnfSk7XHJcbiAgICAgICAgICB0aGlzLnNjcm9sbGVkPSBrYl9oO1xyXG4gICAgICAgIH1cclxuXHRcdFx0XHRcclxuICAgICAgfVxyXG5cdFx0XHRcclxuICAgIH0sNDAwKTtcclxuICB9XHJcblxyXG5cclxuICBkZXN0cm95S0IoKXtcclxuICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gIH1cclxuICAvKm9uQmFja05hdmlnYXRlKCl7XHJcblx0XHR0aGlzLmRlc3Ryb3lLQigpO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSovXHJcblxyXG4gIC8vcHJlcGFyZSBmb3IgcmVtb3ZpbmcgdGhlIGtleWJvYXJkIHBhZ2VcclxuICBvbkJlZm9yZURlc3Ryb3koKXtcclxuICAgIHRoaXMudW5Gb2N1c0N1cnJlbnRFbGVtZW50KCk7XHJcbiAgICBET00odGhpcy5wYWdlKS5yZW1vdmVBbGxFdmVudExpc3RlbmVycygpO1xyXG4gICAgRE9NKGRvY3VtZW50KS5vZmYoJ2tleWRvd24udmlydHVhbF9rZXlib2FyZCcpO1xyXG4gICAgRE9NKGRvY3VtZW50KS5vZmYoJ2NsaWNrLnZpcnR1YWxfa2V5Ym9hcmQgbW91c2V1cC52aXJ0dWFsX2tleWJvYXJkJyk7XHJcbiAgICBET00oZG9jdW1lbnQpLm9mZignZm9jdXMudmlydHVhbF9rZXlib2FyZCcpO1xyXG4gICAgRE9NKGRvY3VtZW50KS5vZmYoJ21vdXNlZG93bi52aXJ0dWFsX2tleWJvYXJkJyk7XHJcblxyXG4gICAgdmFyIHdfaCA9ICB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICB2YXIga2JfaCA9ICB0aGlzLnBhZ2Uub2Zmc2V0SGVpZ2h0O1xyXG4gICAgRE9NKHRoaXMucGFnZSkuY3NzKHt0b3A6d19oIC0ga2JfaCArIFwicHhcIn0pO1xyXG5cdFx0XHJcbiAgICBET00oJ2JvZHknKS5jc3ModGhpcy5vcmlnaW5hbC5ib2R5U3R5bGUpO1xyXG5cclxuICAgIHRoaXMubGlzdGVuUmVzaXplID0gZmFsc2U7XHJcbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcclxuXHRcdFx0XHJcbiAgICB0aGlzLmVudGVyKCk7XHJcbiAgfVxyXG5cclxuICBvblJlc2l6ZSgpe1xyXG4gICAgdGhpcy53aW5kb3dfcmVzaXplPXRydWU7XHJcbiAgICB0aGlzLl9yZXNpemVCb2R5KGZhbHNlKTtcclxuICB9XHJcblxyXG4gIGN1c3RvbUtCX2tleWRvd25oYW5kbGVyIChlKSB7XHJcbiAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xyXG4gICAgY2FzZSAyNzpcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLmRlc3Ryb3lLQigpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDY6XHJcbiAgICBjYXNlIDg6XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5iYWNrc3BhY2UoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDEzOlxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuZGVzdHJveUtCKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAxMDk6XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5taW51cygpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMTkwOlxyXG4gICAgY2FzZSAxMTA6XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy50eXBlX2NoYXIoXCIuXCIpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDg6XHJcbiAgICBjYXNlIDk2OlxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMudHlwZV9jaGFyKDApO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNDk6XHJcbiAgICBjYXNlIDk3OlxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMudHlwZV9jaGFyKDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNTA6XHJcbiAgICBjYXNlIDk4OlxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMudHlwZV9jaGFyKDIpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNTE6XHJcbiAgICBjYXNlIDk5OlxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMudHlwZV9jaGFyKDMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNTI6XHJcbiAgICBjYXNlIDEwMDpcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLnR5cGVfY2hhcig0KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDUzOlxyXG4gICAgY2FzZSAxMDE6XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy50eXBlX2NoYXIoNSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA1NDpcclxuICAgIGNhc2UgMTAyOlxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMudHlwZV9jaGFyKDYpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgNTU6XHJcbiAgICBjYXNlIDEwMzpcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLnR5cGVfY2hhcig3KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDU2OlxyXG4gICAgY2FzZSAxMDQ6XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy50eXBlX2NoYXIoOCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSA1NzogXHJcbiAgICBjYXNlIDEwNTpcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLnR5cGVfY2hhcig5KTtcclxuICAgICAgYnJlYWs7XHJcblxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUodCl7XHJcbiAgICB0aGlzLnZhbHVlID0gdDtcclxuICAgIHZhciB2ID0gTnVtYmVyKHQpO1xyXG4gICAgaWYgKGlzTmFOKHYpKSB7XHJcbiAgICAgIHYgPSBudW1iZXJGcm9tTG9jYWxlU3RyaW5nKHQpO1xyXG4gICAgfVx0XHJcblxyXG4gICAgdGhpcy5vbGRfaW5wdXQudmFsdWUgPSB2O1xyXG4gICAgdmFyIHN0eWxlID0gXCJcIjtcclxuICAgIGlmICh0aGlzLmlzVGV4dFNlbGVjdGVkKSB7XHJcbiAgICAgIHN0eWxlID0gYGJhY2tncm91bmQtY29sb3I6ICR7dGhpcy5fb3B0aW9ucy5zZWxlY3RCYWNrQ29sb3J9OyBjb2xvcjogJHt0aGlzLl9vcHRpb25zLnNlbGVjdEZvcmVDb2xvcn1gO1xyXG4gICAgfVxyXG4gICAgdmFyIHBpcGVjaGFyID0gYDxzcGFuIHN0eWxlPVwiYm9yZGVyLWxlZnQ6MXB4IHNvbGlkICR7dGhpcy5pbnB1dFN0eWxlWydjb2xvciddfTtcIj4mbmJzcDs8L3NwYW4+YDtcclxuICAgIHRoaXMuY3Vycl9pbnB1dC5pbm5lckhUTUwgPWA8c3BhbiBzdHlsZT1cIiR7c3R5bGV9XCI+YCsgdCArICc8L3NwYW4+JyArICh0aGlzLmlzUGlwZVZpc2libGUgPyBwaXBlY2hhciA6ICAnJm5ic3A7Jyk7XHJcbiAgfVxyXG5cclxuICBnZXRWYWx1ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gIH1cclxuXHRcclxuICBibGluaygpIHtcclxuICAgIHZhciB0ID0gdGhpcy5nZXRWYWx1ZSgpO1xyXG5cdFxyXG4gICAgdGhpcy5pc1BpcGVWaXNpYmxlID0gIXRoaXMuaXNQaXBlVmlzaWJsZTtcclxuICAgIHRoaXMuc2V0VmFsdWUodCk7XHJcbiAgfVxyXG5cclxuICBzdGFydEJsaW5rZXIoKXtcclxuICAgIHRoaXMuYmxpbmtlciA9IHNldEludGVydmFsKCgpPT57XHJcbiAgICAgIGlmICghdGhpcy5pc0RlbGV0ZWQpe1xyXG4gICAgICAgIHRoaXMuYmxpbmsoKTtcclxuICAgICAgfVxyXG4gICAgfSw0MDApO1xyXG4gIH1cclxuXHJcbiAgc3RvcEJsaW5rZXIoKSB7XHJcbiAgICB0aGlzLmlzVGV4dFNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICBjbGVhckludGVydmFsKHRoaXMuYmxpbmtlcik7XHJcbiAgICB0aGlzLnNldFZhbHVlKHRoaXMuZ2V0VmFsdWUoKSk7XHJcbiAgfVxyXG4gIHR5cGVfY2hhcihjaHIpIHtcclxuICAgIHZhciByX3ZhbCA9IHRoaXMuZ2V0VmFsdWUoKTtcclxuXHJcbiAgICBpZiAodGhpcy5pc1RleHRTZWxlY3RlZCkge1xyXG4gICAgICB0aGlzLmlzVGV4dFNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgIHJfdmFsID0gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICAvL2lmIERPVCBhbHJlYWR5IGV4aXN0cywgZG8gbm90aGluZ1xyXG4gICAgaWYgKGNociA9PSBcIi5cIiAmJiByX3ZhbC5pbmRleE9mKFwiLlwiKT49MCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvL2lmIGZpcnN0IGNoYXIgaXMgMCwgYWRkIERPVCBhZnRlclxyXG4gICAgaWYgKHJfdmFsID09IFwiMFwiICYmIGNociAhPT0gXCIuXCIpIHtcclxuICAgICAgcl92YWwgPSByX3ZhbCArIFwiLlwiO1xyXG4gICAgfVxyXG4gICAgLy9pZiBmaXJzdCBjaGFyIGlzIERPVCwgYWRkIDAgYmVmb3JlXHJcbiAgICBpZiAocl92YWwgPT0gXCJcIiAmJiBjaHIgPT0gXCIuXCIpIHtcclxuICAgICAgcl92YWwgPSByX3ZhbCArIFwiMFwiOyAvLy4gd2lsbCBiZSBhZGRlZCBsYXRlclxyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRWYWx1ZShyX3ZhbCArIGNoci50b1N0cmluZygpKTtcclxuICAgIHRoaXMub2xkX2lucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcpKTtcclxuICAgIHRoaXMub25DbGljaygpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBiYWNrc3BhY2UgKCkge1xyXG4gICAgdmFyIHJfdmFsID0gdGhpcy5nZXRWYWx1ZSgpOyAvL3JlbW92ZSBjYXJldFxyXG4gICAgdGhpcy5pc1RleHRTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5zZXRWYWx1ZSggcl92YWwuc3Vic3RyaW5nKDAsIHJfdmFsLmxlbmd0aCAtIDEpKTsgLy9yZW1vdmUgbGFzdCBjaGFyIGFuZCBhZGQgY2FyZXRcclxuICAgIHRoaXMub2xkX2lucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcpKTtcclxuICAgIHRoaXMub25DbGljaygpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICAvKipcclxuXHQgKiAqKiogT3ZlcnJpZGUgKioqXHJcblx0ICovXHJcbiAgb25DbGljayAoKSB7XHJcblx0XHRcclxuICB9XHJcbiAgbWludXMgKCkge1xyXG4gICAgdmFyIHJfdmFsID0gdGhpcy5nZXRWYWx1ZSgpOyAvL3JlbW92ZSBjYXJldFxyXG4gICAgdGhpcy5pc1RleHRTZWxlY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChyX3ZhbC5zdWJzdHJpbmcoMCwgMSkgPT0gXCItXCIpIHtcclxuICAgICAgLy9SZW1vdmUgbWludXNcclxuICAgICAgdGhpcy5zZXRWYWx1ZShyX3ZhbC5zdWJzdHJpbmcoMSwgcl92YWwubGVuZ3RoKSk7IC8vcmVtb3ZlIG1pbnVzIGNoYXJcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAvL3JlbW92ZSBtaW51c1xyXG4gICAgICB0aGlzLnNldFZhbHVlKFwiLVwiICsgcl92YWwpOyAvL2FkZCBtaW51c1xyXG4gICAgfVxyXG4gICAgdGhpcy5vbGRfaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2lucHV0JykpO1xyXG4gICAgdGhpcy5vbkNsaWNrKCk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBlbnRlciAoc2lsZW50KSB7XHJcbiAgICB0aGlzLnN0b3BCbGlua2VyKCk7XHJcbiAgICBzaWxlbnQgPSBzaWxlbnQgfHwgZmFsc2U7XHJcbiAgICBpZiAodGhpcy5jdXJyX2lucHV0ICE9IG51bGwgJiYgdHlwZW9mICh0aGlzLmdldFZhbHVlKCkpICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgIC8vdHJpZ2dlciBvbmNoYW5nZVxyXG4gICAgICB0aGlzLm9sZF9pbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJykpO1xyXG5cclxuICAgICAgLy90cmlnZ2VyIGJsdXJcclxuICAgICAgdGhpcy5vbGRfaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2JsdXInKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXNpbGVudClcclxuICAgICAgdGhpcy5vbkNsaWNrKCk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBnZXQgdGVtcGxhdGUoKXtcclxuICAgIHJldHVybiB0aGlzLmV4dGVuZFRlbXBsYXRlKHN1cGVyLnRlbXBsYXRlLCB0ZW1wbGF0ZSk7XHJcbiAgfVxyXG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcIndyYXBwZXJcXFwiPlxcclxcbjx0YWJsZSBjbGFzcz1cXFwia2V5Ym9hcmRcXFwiIFtpZl09XFxcInRoaXMuX29wdGlvbnMubGF5b3V0ID09IDBcXFwiIGNvbHBhZGRpbmc9XFxcIjBcXFwiIGNvbHNwYWNpbmc9XFxcIjBcXFwiPlxcclxcblxcdDx0cj5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiB2YWx1ZT1cXFwiMVxcXCI+MTwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjJcXFwiPjI8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIHZhbHVlPVxcXCIzXFxcIj4zPC9idXR0b24+PC90ZD5cXHJcXG5cXHQ8L3RyPlxcclxcblxcdDx0cj5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiB2YWx1ZT1cXFwiNFxcXCI+NDwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjVcXFwiPjU8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIHZhbHVlPVxcXCI2XFxcIj42PC9idXR0b24+PC90ZD5cXHJcXG5cXHQ8L3RyPlxcclxcblxcdDx0cj5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiB2YWx1ZT1cXFwiN1xcXCI+NzwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjhcXFwiPjg8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIHZhbHVlPVxcXCI5XFxcIj45PC9idXR0b24+PC90ZD5cXHJcXG5cXHQ8L3RyPlxcclxcblxcdDx0cj5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiBjbGFzcz1cXFwiZ3JcXFwiIHZhbHVlPVxcXCIuXFxcIj4uPC9idXR0b24+PC90ZD5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiB2YWx1ZT1cXFwiMFxcXCI+MDwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gY2xhc3M9XFxcImdyXFxcIiBpZD1cXFwiZGVsZXRlXFxcIiB2YWx1ZT1cXFwiZFxcXCI+PGkgY2xhc3M9XFxcIk51bWVyaWNLZXlib2FyZFBhZ2UtaWNvbi1rYl9kZWxldGVcXFwiPjwvaT48L2J1dHRvbj48L3RkPlxcclxcblxcdDwvdHI+XFxyXFxuPC90YWJsZT5cXHJcXG5cXHJcXG48dGFibGUgY2xhc3M9XFxcImtleWJvYXJkXFxcIiBbaWZdPVxcXCJ0aGlzLl9vcHRpb25zLmxheW91dCA9PSAxXFxcIiBjb2xwYWRkaW5nPVxcXCIwXFxcIiBjb2xzcGFjaW5nPVxcXCIwXFxcIj5cXHJcXG5cXHQ8dHI+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjFcXFwiPjE8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIHZhbHVlPVxcXCIyXFxcIj4yPC9idXR0b24+PC90ZD5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiB2YWx1ZT1cXFwiM1xcXCI+MzwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gY2xhc3M9XFxcImdyXFxcIiBpZD1cXFwiZGVsZXRlXFxcIiB2YWx1ZT1cXFwiZFxcXCI+PGkgY2xhc3M9XFxcIk51bWVyaWNLZXlib2FyZFBhZ2UtaWNvbi1rYl9kZWxldGVcXFwiPjwvaT48L2J1dHRvbj48L3RkPlxcclxcblxcdDwvdHI+XFxyXFxuXFx0PHRyPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIHZhbHVlPVxcXCI0XFxcIj40PC9idXR0b24+PC90ZD5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiB2YWx1ZT1cXFwiNVxcXCI+NTwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjZcXFwiPjY8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZCByb3dzcGFuPVxcXCIzXFxcIj48YnV0dG9uIGNsYXNzPVxcXCJnclxcXCIgaWQ9XFxcImVudGVyXFxcIiB2YWx1ZT1cXFwiZVxcXCI+PGkgY2xhc3M9XFxcIk51bWVyaWNLZXlib2FyZFBhZ2UtaWNvbi1rYl9lbnRlclxcXCI+PC9pPjwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0PC90cj5cXHJcXG5cXHQ8dHI+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjdcXFwiPjc8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIHZhbHVlPVxcXCI4XFxcIj44PC9idXR0b24+PC90ZD5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiAgdmFsdWU9XFxcIjlcXFwiPjk8L2J1dHRvbj48L3RkPlxcclxcblxcdDwvdHI+XFxyXFxuXFx0PHRyPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIGNsYXNzPVxcXCJnclxcXCIgdmFsdWU9XFxcIi1cXFwiPi08L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIHZhbHVlPVxcXCIwXFxcIj4wPC9idXR0b24+PC90ZD5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiBjbGFzcz1cXFwiZ3JcXFwiIHZhbHVlPVxcXCIuXFxcIj4uPC9idXR0b24+PC90ZD5cXHJcXG5cXHQ8L3RyPlxcclxcbjwvdGFibGU+XFxyXFxuPHRhYmxlIGNsYXNzPVxcXCJrZXlib2FyZFxcXCIgW2lmXT1cXFwidGhpcy5fb3B0aW9ucy5sYXlvdXQgPT0gMlxcXCIgY29scGFkZGluZz1cXFwiMFxcXCIgY29sc3BhY2luZz1cXFwiMFxcXCI+XFxyXFxuXFx0PHRyPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIHZhbHVlPVxcXCIxXFxcIj4xPC9idXR0b24+PC90ZD5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiB2YWx1ZT1cXFwiMlxcXCI+MjwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjNcXFwiPjM8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIHZhbHVlPVxcXCI0XFxcIj40PC9idXR0b24+PC90ZD5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiB2YWx1ZT1cXFwiNVxcXCI+NTwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjZcXFwiPjY8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIGNsYXNzPVxcXCJnclxcXCIgaWQ9XFxcImRlbGV0ZVxcXCIgdmFsdWU9XFxcImRcXFwiIGNsYXNzPVxcXCJkZWxldGVcXFwiPjxpIGNsYXNzPVxcXCJOdW1lcmljS2V5Ym9hcmRQYWdlLWljb24ta2JfZGVsZXRlXFxcIj48L2k+PC9idXR0b24+PC90ZD5cXHJcXG5cXHQ8L3RyPlxcclxcblxcdDx0cj5cXHJcXG5cXHRcXHQ8dGQ+PGJ1dHRvbiB2YWx1ZT1cXFwiN1xcXCI+NzwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjhcXFwiPjg8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uICB2YWx1ZT1cXFwiOVxcXCI+OTwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0XFx0PHRkPjxidXR0b24gdmFsdWU9XFxcIjBcXFwiPjA8L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIGNsYXNzPVxcXCJnclxcXCIgdmFsdWU9XFxcIi5cXFwiPi48L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIGNsYXNzPVxcXCJnclxcXCIgdmFsdWU9XFxcIi1cXFwiPi08L2J1dHRvbj48L3RkPlxcclxcblxcdFxcdDx0ZD48YnV0dG9uIGNsYXNzPVxcXCJnclxcXCIgaWQ9XFxcImVudGVyXFxcIiB2YWx1ZT1cXFwiZVxcXCI+PGkgY2xhc3M9XFxcIk51bWVyaWNLZXlib2FyZFBhZ2UtaWNvbi1rYl9lbnRlclxcXCI+PC9pPjwvYnV0dG9uPjwvdGQ+XFxyXFxuXFx0PC90cj5cXHJcXG48L3RhYmxlPlxcdFxcclxcbjwvZGl2PlwiIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIiwiaW1wb3J0IHsgTmF2Q29udHJvbGxlciB9IGZyb20gXCIuLi9jb3JlL05hdkNvbnRyb2xsZXJcIjtcclxuXHJcbmV4cG9ydCB2YXIgSW5qZWN0VGVtcGxhdGUgPXtcclxuXHQvKiogQHR5cGUge05hdkNvbnRyb2xsZXJ9ICovXHJcblx0TmF2OiBudWxsLFxyXG59IiwiaW1wb3J0IHsgVGVzdEFycmF5UGFnZSB9IGZyb20gXCIuL1Rlc3RBcnJheVBhZ2VcIjtcclxuaW1wb3J0IHsgVGVzdEZvcm1zUGFnZSB9IGZyb20gXCIuL1Rlc3RGb3Jtc1BhZ2VcIjtcclxuaW1wb3J0IHsgSGVhZGVyUGFnZSB9IGZyb20gXCIuLi8uLi9wYWdlcy9IZWFkZXJQYWdlL0hlYWRlclBhZ2VcIjtcclxuaW1wb3J0IHsgVGVzdEZpbGVVcGxvYWRQYWdlIH0gZnJvbSBcIi4vVGVzdEZpbGVVcGxvYWRQYWdlXCI7XHJcbmltcG9ydCB7IFRlc3RDaGFuZ2VXYXRjaGVyIH0gZnJvbSBcIi4vVGVzdENoYW5nZVdhdGNoZXJcIjtcclxuaW1wb3J0IHsgVGVzdEZvcm1zVmlzaWJsZVBhZ2UgfSBmcm9tIFwiLi9UZXN0Rm9ybXNWaXNpYmxlUGFnZVwiO1xyXG5pbXBvcnQgeyBUZXN0Q29tcG9uZW50UGFnZSB9IGZyb20gXCIuL1Rlc3RDb21wb25lbnRQYWdlXCI7XHJcbmltcG9ydCB7IFRlc3RGb3Jtc1NlbGVjdEl0ZW1zUGFnZSB9IGZyb20gXCIuL1Rlc3RGb3Jtc1NlbGVjdEl0ZW1zUGFnZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJvb3RQYWdlIGV4dGVuZHMgSGVhZGVyUGFnZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMucGFnZXMgPSBbXHJcbiAgICAgIHsgcGFnZTogVGVzdEFycmF5UGFnZSwgbmFtZTogXCJUZXN0IEFycmF5IFBhZ2VcIiB9LFxyXG4gICAgICB7IHBhZ2U6IFRlc3RGb3Jtc1BhZ2UsIG5hbWU6IFwiVGVzdCBGb3JtcyBQYWdlXCIgfSxcclxuICAgICAgeyBwYWdlOiBUZXN0RmlsZVVwbG9hZFBhZ2UsIG5hbWU6IFwiVGVzdCBGaWxlIHVwbG9hZFwiIH0sXHJcblxyXG4gICAgICB7IHBhZ2U6IFRlc3RDaGFuZ2VXYXRjaGVyLCBuYW1lOiBcIlRlc3QgQ2hhbmdlIFdhdGNoZXJcIiB9LFxyXG4gICAgICB7IHBhZ2U6IFRlc3RGb3Jtc1Zpc2libGVQYWdlLCBuYW1lOiBcIlRlc3QgRm9ybXMgVmlzaWJsZVwiIH0sXHJcblxyXG4gICAgICB7IHBhZ2U6IFRlc3RDb21wb25lbnRQYWdlLCBuYW1lOiBcIlRlc3QgQ29tcG9uZW50XCIgfSxcclxuICAgICAgeyBwYWdlOiBUZXN0Rm9ybXNTZWxlY3RJdGVtc1BhZ2UsIG5hbWU6IFwiVGVzdCBGb3JtcyBTZWxlY3QgSXRlbXNcIiB9XHJcbiAgICBdO1xyXG5cclxuICB9XHJcblxyXG4gIGxvYWRQYWdlKGluZGV4KSB7XHJcblxyXG4gICAgdmFyIHAgPSB0aGlzLk5hdi5wdXNoKHRoaXMucGFnZXNbaW5kZXhdLnBhZ2UpO1xyXG4gICAgcC5iYWNrQnV0dG9uID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGdldCB0ZW1wbGF0ZSgpIHtcclxuICAgIHJldHVybiBzdXBlci5leHRlbmRUZW1wbGF0ZShzdXBlci50ZW1wbGF0ZSwgdGVtcGxhdGUpO1xyXG4gIH1cclxufVxyXG5cclxudmFyIHRlbXBsYXRlID0gYFxyXG48ZGl2IFtmb3JlYWNoXT1cImluZGV4IGluIHRoaXMucGFnZXMgYXMgaXRlbVwiPlxyXG5cdDxidXR0b24gb25jbGljaz1cInRoaXMubG9hZFBhZ2UoaW5kZXgpXCI+e3sgaXRlbS5uYW1lIH19PC9idXR0b24+XHJcbjwvZGl2PlxyXG5gOyIsImltcG9ydCB7IEZvcm1zIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvRm9ybXNcIjtcclxuaW1wb3J0IHsgSGVhZGVyUGFnZSB9IGZyb20gXCIuLi8uLi9wYWdlcy9IZWFkZXJQYWdlL0hlYWRlclBhZ2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUZXN0QXJyYXlQYWdlIGV4dGVuZHMgSGVhZGVyUGFnZSB7XHJcblx0Y29uc3RydWN0b3IoKXtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5hcnI9W107XHJcblxyXG5cdFx0dGhpcy5vYmphcnI9W107XHJcblxyXG5cdFx0dGhpcy5maW5kZXg9IDA7XHJcblxyXG5cdFx0dGhpcy5mb3JtYXJyID0gW107XHJcblxyXG5cdFx0dGhpcy5vYmpvYmogPSB7fTtcclxuXHRcdFxyXG5cdH1cclxuXHJcblxyXG5cdGdldCB0ZW1wbGF0ZSgpe1xyXG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5kVGVtcGxhdGUoc3VwZXIudGVtcGxhdGUsIHRlbXBsYXRlKTtcclxuXHR9XHJcblxyXG5cdG9uQWRkQ2xpY2tlZCgpe1xyXG5cdFx0dGhpcy5hcnIucHVzaCh0aGlzLmluZGV4KyspO1xyXG5cdH1cclxuXHJcblx0b25EZWxldGVJdGVtQ2xpY2tlZChpbmRleCl7XHJcblx0XHR0aGlzLmFyci5zcGxpY2UoaW5kZXgsMSk7XHJcblx0fVxyXG5cclxuXHRvbkFkZEZvcm1DbGlja2VkKCl7XHJcblx0XHR0aGlzLmFyci5wdXNoKHRoaXMuZmluZGV4KTtcclxuXHRcdHRoaXMub2JqYXJyLnB1c2goe2E6IHRoaXMuZmluZGV4IH0pO1xyXG5cdFx0dGhpcy5vYmpvYmpbdGhpcy5maW5kZXhdID0ge2E6IHRoaXMuZmluZGV4IH07XHJcblx0XHR0aGlzLmZvcm1hcnIucHVzaChuZXcgRm9ybXMoW3tcclxuXHRcdFx0dHlwZTogXCJ0ZXh0XCIsIHRpdGxlOlwiU29tZSBmaWVsZCBcIiArIHRoaXMuZmluZGV4LCBuYW1lOlwic29tZU5hbWVfXCIrdGhpcy5maW5kZXgrK1xyXG5cdFx0fV0pKTtcclxuXHR9XHJcblx0b25EZWxldGVGb3JtSXRlbUNsaWNrZWQoaW5kZXgpe1xyXG5cdFx0dGhpcy5hcnIuc3BsaWNlKGluZGV4LDEpO1xyXG5cdFx0dGhpcy5vYmphcnIuc3BsaWNlKGluZGV4LDEpO1xyXG5cdFx0ZGVsZXRlIHRoaXMub2Jqb2JqW2luZGV4XTtcclxuXHRcdHZhciBmID0gdGhpcy5mb3JtYXJyLnNwbGljZShpbmRleCwxKVswXTtcclxuXHRcdC8vZi5kZXN0cm95KCk7XHJcblx0fVxyXG5cclxufVxyXG5cclxudmFyIHRlbXBsYXRlID0gYFxyXG48ZGl2IGNsYXNzPVwiZmlsbCBzY3JvbGxcIj5cclxuXHQ8IS0tIDxkaXY+XHJcblx0XHQ8YnV0dG9uIG9uY2xpY2sgPSBcInRoaXMub25BZGRDbGlja2VkKClcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPkFkZCBJdGVtPC9idXR0b24+XHJcblx0PC9kaXY+XHJcblxyXG5cdDxkaXYgW2ZvcmVhY2hdID0gXCJpbmRleCBpbiB0aGlzLmFyciBhcyBpdGVtXCI+XHJcblx0XHR7e2luZGV4fX0ge3tpdGVtfX0gPGJ1dHRvbiBvbmNsaWNrPVwidGhpcy5vbkRlbGV0ZUl0ZW1DbGlja2VkKGluZGV4KVwiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj5YPC9idXR0b24+XHJcblx0PC9kaXY+IC0tPlxyXG5cclxuXHQ8ZGl2PlxyXG5cdFx0PGJ1dHRvbiBvbmNsaWNrID0gXCJ0aGlzLm9uQWRkRm9ybUNsaWNrZWQoKVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+QWRkIEZvcm0gSXRlbTwvYnV0dG9uPlxyXG5cdDwvZGl2PlxyXG5cclxuXHQ8ZGl2IFtmb3JlYWNoXSA9IFwiaW5kZXggaW4gdGhpcy5mb3JtYXJyIGFzIGl0ZW1cIj5cclxuXHRcdDxkaXYgW2NvbXBvbmVudF09XCJpdGVtXCI+PC9kaXY+XHJcblx0XHQgPGJ1dHRvbiBvbmNsaWNrPVwidGhpcy5vbkRlbGV0ZUZvcm1JdGVtQ2xpY2tlZChpbmRleClcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+WDwvYnV0dG9uPlxyXG5cdDwvZGl2PlxyXG5cclxuXHQ8ZGl2IFtmb3JlYWNoXSA9IFwiaW5kZXggaW4gdGhpcy5vYmphcnIgYXMgaXRlbVwiPlxyXG5cdFx0e3tpdGVtLmF9fSBcclxuXHQ8L2Rpdj5cclxuXHJcblx0PGRpdiBbZm9yZWFjaF0gPSBcImluZGV4IGluIHRoaXMub2Jqb2JqIGFzIGl0ZW1cIj5cclxuXHRcdHt7aXRlbS5hfX0gXHJcblx0PC9kaXY+XHJcblxyXG5cdDxkaXYgW2ZvcmVhY2hdID0gXCJpbmRleCBpbiB0aGlzLmFyciBhcyBpdGVtXCI+XHJcblx0XHR7e2luZGV4fX0ge3tpdGVtfX1cclxuXHQ8L2Rpdj5cclxuXHJcbjwvZGl2PlxyXG5cclxuYCIsImltcG9ydCB7IEhlYWRlclBhZ2UgfSBmcm9tIFwiLi4vLi4vcGFnZXMvSGVhZGVyUGFnZS9IZWFkZXJQYWdlXCI7XHJcbmltcG9ydCB7IFdhdGNoZXIgfSBmcm9tIFwiLi4vLi4vY29yZS9XYXRjaGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGVzdENoYW5nZVdhdGNoZXIgZXh0ZW5kcyBIZWFkZXJQYWdle1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLmJhY2tCdXR0b24gPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLm9iamVjdCA9IHtcclxuICAgICAgICAgICAgY291bnRlcjowLFxyXG4gICAgICAgICAgICBsZXZlbDI6e1xyXG4gICAgICAgICAgICAgICAgY291bnRlcjowXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxldmVsMzp7XHJcbiAgICAgICAgICAgICAgICBjb3VudGVyOjBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubG9nID0gXCJcIlxyXG5cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBtdXRhdGUoKXtcclxuICAgICAgICB0aGlzLmxvZyArPWBNdXRhdGUgU3RhdGUgY291bnRlcnMgdG8gJHt0aGlzLm9iamVjdC5jb3VudGVyKzF9XFxuYFxyXG4gICAgICAgIHRoaXMub2JqZWN0LmNvdW50ZXIgKys7XHJcbiAgICAgICAgdGhpcy5vYmplY3QubGV2ZWwyLmNvdW50ZXIgKys7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LmxldmVsMy5jb3VudGVyICsrO1xyXG4gICAgICAgIH0sIDEwKTtcclxuICAgIH1cclxuXHJcbiAgICBob29rV2F0Y2hlcnMoKXtcclxuICAgICAgICB0aGlzLmxvZyArPWBXYXRjaGVycyBDb25uZWN0ZWQhXFxuYFxyXG4gICAgICAgIFdhdGNoZXIub24odGhpcy5vYmplY3QsXHJcbiAgICAgICAgICAgICh0YXJnZXQsIHByb3AsIHZhbHVlKT0+e1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2cgKz1gV2F0Y2hlciAxOiBQcm9wICR7cHJvcH0gY2hhbmdlZCB0byAke3ZhbHVlfVxcbmBcclxuICAgICAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgICAgICAgLy90aHJvdyBuZXcgRXJyb3IoXCJXYXRjaGVyMSBvbkNoYW5nZSBmYWlsIVwiKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2cgKz1gV2F0Y2hlciAxOiBPYmplY3QgdXBkYXRlZFxcbmBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIClcclxuXHJcbiAgICAgICAgV2F0Y2hlci5vbih0aGlzLm9iamVjdCxcclxuICAgICAgICAgICAgKHRhcmdldCwgcHJvcCwgdmFsdWUpPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZyArPWBXYXRjaGVyIDI6IFByb3AgJHtwcm9wfSBjaGFuZ2VkIHRvICR7dmFsdWV9XFxuYFxyXG4gICAgICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZyArPWBXYXRjaGVyIDI6IE9iamVjdCB1cGRhdGVkXFxuYFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG4gICAgdW5Ib29rV2F0Y2hlcnMoKXtcclxuICAgICAgICBXYXRjaGVyLm9mZih0aGlzLm9iamVjdCk7XHJcbiAgICB9XHJcbiAgICBtZW1UZXN0KCl7XHJcbiAgICAgICAgdGhpcy5sb2cgPSBcIlJ1bm5pbmcgMTAwMDAwIG1vdW50c1xcblwiXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8PSAxMDAwMDA7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuSG9va1dhdGNoZXJzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvb2tXYXRjaGVycygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nID0gYE5ldyBDb3VudGVyOiAke3RoaXMub2JqZWN0LmNvdW50ZXJ9XFxuYFxyXG4gICAgICAgICAgICB9LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy90aGlzLmxvZyArPSBgTmV3IENvdW50ZXI6ICR7dGhpcy5vYmplY3QuY291bnRlcn1cXG5gXHJcblxyXG4gICAgICAgIC8vdGhpcy5tdXRhdGUoKTtcclxuICAgICAgICAvL3RoaXMudW5Ib29rV2F0Y2hlcnMoKTtcclxuICAgIH1cclxuICAgIG9uTmV3V2luZG93KCl7XHJcbiAgICAgICAgdmFyIHAgPSB0aGlzLk5hdi5wdXNoKFRlc3RDaGFuZ2VXYXRjaGVyKTtcclxuICAgICAgICBwLm9iamVjdCA9IHRoaXMub2JqZWN0O1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRlbXBsYXRlICgpe1xyXG4gICAgICAgIHJldHVybiBzdXBlci5leHRlbmRUZW1wbGF0ZShzdXBlci50ZW1wbGF0ZSwgdGVtcGxhdGUpO1xyXG4gICAgfVxyXG59XHJcbnZhciB0ZW1wbGF0ZSA9IGBcclxuPGRpdiBjbGFzcz1cImZpbGwgc2Nyb2xsXCI+XHJcbjxkaXY+PGJ1dHRvbiBvbmNsaWNrPVwidGhpcy5ob29rV2F0Y2hlcnMoKVwiPkhvb2sgV2F0Y2hlcnM8L2J1dHRvbj4gPGJ1dHRvbiBvbmNsaWNrPVwidGhpcy51bkhvb2tXYXRjaGVycygpXCI+VW4tSG9vayBXYXRjaGVyczwvYnV0dG9uPiA8YnV0dG9uIG9uY2xpY2s9XCJ0aGlzLm1lbVRlc3QoKVwiPlRlc3QgZm9yIE1lbW9yeSBMZWFrczwvYnV0dG9uPjwvZGl2PlxyXG48ZGl2PjxidXR0b24gb25jbGljaz1cInRoaXMubXV0YXRlKClcIj5NdXRhdGUgU3RhdGU8L2J1dHRvbj48L2Rpdj5cclxuPGRpdj48YnV0dG9uIG9uY2xpY2s9XCJ0aGlzLm9uTmV3V2luZG93KClcIj5OZXcgV2luZG93PC9idXR0b24+PC9kaXY+XHJcbjxwcmU+e3sgdGhpcy5sb2cgfX08L3ByZT5cclxuPC9kaXY+XHJcbmAiLCJpbXBvcnQgeyBIZWFkZXJQYWdlIH0gZnJvbSBcIi4uLy4uL3BhZ2VzL0hlYWRlclBhZ2UvSGVhZGVyUGFnZVwiO1xyXG5pbXBvcnQgeyBCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CYXNlQ29tcG9uZW50JztcclxuaW1wb3J0IHsgRE9NIH0gZnJvbSBcIi4uLy4uL2NvcmUvRE9NXCI7XHJcbmltcG9ydCB7IEJpbmRlciB9IGZyb20gJy4vLi4vLi4vY29yZS9CaW5kZXInO1xyXG5pbXBvcnQgeyBXYXRjaGVyIH0gZnJvbSBcIi4uLy4uL2NvcmUvV2F0Y2hlclwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUZXN0Q29tcG9uZW50UGFnZSBleHRlbmRzIEhlYWRlclBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yKCl7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5jb3VudGVyID0gMFxyXG5cclxuICAgIHRoaXMuY29tcCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBvbkNyZWF0ZUNvbXBDbGlja2VkKCl7XHJcblxyXG4gICAgdmFyIGVsID0gRE9NKHRoaXMucGFnZSkuZmluZChcIiNwbGFjZWhvbGRlclwiKS5maXJzdCgpO1xyXG5cclxuXHJcbiAgICB2YXIgYyA9IG5ldyBUZXN0Q29tcG9uZW5ldCgpO1xyXG5cclxuICAgIFxyXG4gICAgLy9tb3VudCBjb21wb25lbmV0IG9uIHRvIGRvbVxyXG4gICAgYy5iaW5kZXIgPSBuZXcgQmluZGVyKGMpLmJpbmRFbGVtZW50cyh7fSwgYy50ZW1wbGF0ZSk7XHJcbiAgICBjLl9vbkluaXQoZWwpO1xyXG5cclxuICAgIGVsLmFwcGVuZChjLmJpbmRlci52ZG9tLmVsZW0pO1xyXG5cclxuXHJcbiAgICBXYXRjaGVyLm9uKHRoaXMsICh0YXJnZXQsIHByb3AsIHZhbCk9PntcclxuICAgICAgaWYgKHByb3A9PVwiY291bnRlclwiKXtcclxuICAgICAgICBjLmNvdW50ZXIgPSB2YWw7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgLy9jLnVwZGF0ZSgpO1xyXG5cclxuXHJcbiAgICB0aGlzLmNvbXAgPSBjO1xyXG5cclxuICB9XHJcblxyXG4gIG9uSW5jcmVtZW50Q2xpY2tlZCgpe1xyXG4gICAgdGhpcy5jb3VudGVyICsrO1xyXG4gIH1cclxuXHJcblxyXG4gIGdldCB0ZW1wbGF0ZSgpe1xyXG4gICAgcmV0dXJuIHN1cGVyLmV4dGVuZFRlbXBsYXRlKHN1cGVyLnRlbXBsYXRlLCBgXHJcbiAgICA8ZGl2PjxidXR0b24gb25jbGljaz1cInRoaXMub25DcmVhdGVDb21wQ2xpY2tlZCgpO1wiPkNyZWF0ZTwvYnV0dG9uPiA8YnV0dG9uIG9uY2xpY2s9XCJ0aGlzLm9uSW5jcmVtZW50Q2xpY2tlZCgpO1wiPkluY3JlbWVudDwvYnV0dG9uPjwvZGl2PlxyXG4gICAgICA8ZGl2IGlkPVwicGxhY2Vob2xkZXJcIj5PbGQgY29udGVudDwvZGl2PlxyXG4gICAgYCk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBUZXN0Q29tcG9uZW5ldCBleHRlbmRzIEJhc2VDb21wb25lbnR7XHJcbiAgY29uc3RydWN0b3IoKXtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xyXG5cclxuICAgIHRoaXMudGVtcGxhdGUgPSArIGA8ZGl2PjxidXR0b24gb25jbGljaz1cInRoaXMuY291bnRlcisrXCI+SSBhbSBBbGl2ZSEge3sgdGhpcy5jb3VudGVyIH19PC9idXR0b24+PC9kaXY+YFxyXG5cclxuICAgIGNvbnNvbGUubG9nKC8qaHRtbCovYDxicj5gLCBgXHJcbiAgICAgPGRpdj52dnY8L2Rpdj5cclxuICAgIGApO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKC8qaHRtbCovYFxyXG4gICAgICAgICA8YnI+XHJcbiAgICBgLCBgPGJyPmApICsgYDxicj5gICsgW2A8YnI+YF1cclxuXHJcbiAgICB2YXIgcyA9IFsvKmh0bWwqL2A8YnI+YF1cclxuXHJcbiAgICB2YXIgYWEgPSBgc3Nzc3NzYFxyXG5cclxuICB9XHJcblxyXG59IiwiaW1wb3J0IHsgSGVhZGVyUGFnZSB9IGZyb20gXCIuLi8uLi9wYWdlcy9IZWFkZXJQYWdlL0hlYWRlclBhZ2VcIjtcclxuaW1wb3J0IHsgRmlsZUFjY2VzcyB9IGZyb20gXCIuLi8uLi9jb3JlL0ZpbGVBY2Nlc3NcIjtcclxuaW1wb3J0IHsgQWxlcnQgfSBmcm9tIFwiLi4vLi4vY29yZS9zaW1wbGVfY29uZmlybVwiO1xyXG5pbXBvcnQgeyBET00gfSBmcm9tIFwiLi4vLi4vY29yZS9ET01cIjtcclxuaW1wb3J0IHsgRm9ybXMgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Gb3Jtc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRlc3RGaWxlVXBsb2FkUGFnZSBleHRlbmRzIEhlYWRlclBhZ2Uge1xyXG5cdGNvbnN0cnVjdG9yKCl7XHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuZmlsZUZpZWxkID0gXCJcIjtcclxuXHJcblx0XHR0aGlzLmZpbGVGaWVsZEZpbGVEYXRhID0gbnVsbDtcclxuXHRcdHRoaXMuZm9ybURhdGEgPSB7fTtcclxuXHRcdHRoaXMuZm9ybSA9IG5ldyBGb3JtcyhbXHJcblx0XHRcdHsgdHlwZTpcImZpbGVcIiwgbmFtZTogXCJmaWxlMVwiLCB0aXRsZTogXCJTZWxlY3QgRmlsZVwiLCB2YWxpZGF0ZVJ1bGU6XCJyZXF1aXJlZHxtYXg6NTAwfG1pbjo1MHxtaW1lczpqcGcsanBlZyxwbmcscGRmLGRvYyxkb2N4XCIgfSxcclxuXHRcdF0sIHRoaXMuZm9ybURhdGEpXHJcblx0fVxyXG5cclxuXHRnZXQgdGVtcGxhdGUoKXtcclxuXHRcdHJldHVybiB0aGlzLmV4dGVuZFRlbXBsYXRlKHN1cGVyLnRlbXBsYXRlLCB0ZW1wbGF0ZSk7XHJcblx0fVxyXG5cclxuXHRmaWxlRmllbGRDaGFuZ2VkKGV2dCl7XHJcblx0XHQvL2NvbnNvbGUubG9nKHRoaXMuZmlsZUZpZWxkKTtcclxuXHJcblx0XHRpZiAoIUZpbGVBY2Nlc3MuaXNTdXBwb3J0ZWQpe1xyXG5cdFx0XHRBbGVydChcIkZpbGUgdXBsb2FkIGlzIG5vdCBzdXBwb3J0ZWQhXCIpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50fSAqL1xyXG5cdFx0dmFyIGZpbGVGaWxlZCA9IGV2dC50YXJnZXRcclxuXHRcdHZhciBmaWxlID0gZmlsZUZpbGVkLmZpbGVzWzBdO1xyXG5cdFx0RmlsZUFjY2Vzcy5SZWFkRmlsZShmaWxlRmlsZWQuZmlsZXNbMF0pLkRhdGFVUkwoKS50aGVuKCByZXQgPT57XHJcblx0XHRcdC8vY29uc29sZS5sb2cocmV0KTtcclxuXHRcdFx0aWYgKGZpbGUudHlwZS5pbmRleE9mKFwiaW1hZ2UvXCIpPT0wKSB7XHJcblx0XHRcdFx0dGhpcy5maWxlRmllbGRJbWFnZSA9IHJldDtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLmZpbGVGaWVsZEZpbGVEYXRhID0gcmV0O1xyXG5cdFx0fSkuY2F0Y2goZXJyPT57XHJcblx0XHRcdGNvbnNvbGUubG9nKGVycik7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0ZmlsZUZpZWxkVXBsb2FkQ2xpY2tlZCgpe1xyXG5cdFx0dmFyIGRhdGEgPSB7XHJcblx0XHRcdGZpZWxkMTpcInZhbHVlMVwiLFxyXG5cdFx0XHRmaWVsZDI6XCJ2YWx1ZTJcIixcclxuXHRcdFx0ZmllbGQzOlwidmFsdWUzXCIsXHJcblx0XHRcdGZpZWxkNDpcInZhbHVlNFwiLFxyXG5cclxuXHJcblx0XHR9Ly8gbmV3IEZvcm1EYXRhKCk7XHJcblxyXG5cdFx0dmFyIGZvcm1EYXRhID0gIG5ldyBGb3JtRGF0YSgpO1xyXG5cdFx0Zm9ybURhdGEuYXBwZW5kKFwiZGF0YVwiLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcblx0XHRmb3JtRGF0YS5hcHBlbmQoXCJmaWxlRmllbGRGaWxlRGF0YVwiLCB0aGlzLmZpbGVGaWVsZEZpbGVEYXRhKTtcclxuXHRcdC8vZm9ybURhdGEuYXBwZW5kKCdmaWxlRmllbGRGaWxlRGF0YScsIHRoaXMuZmlsZUZpZWxkRmlsZURhdGEpO1xyXG5cclxuXHRcdCQuYWpheChcclxuXHRcdFx0XCJodHRwOi8vbWcuemVyby1kaXZpZGUubmV0L2FwaS9kdW1wL1wiLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcclxuXHRcdFx0XHRkYXRhOiBmb3JtRGF0YSxcclxuXHRcdFx0XHQvL2NvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuXHRcdFx0XHRkYXRhVHlwZTpcImpzb25cIixcclxuXHRcdFx0XHRwcm9jZXNzRGF0YTogZmFsc2VcclxuXHRcdFx0fSlcclxuXHRcdC5kb25lKGRhdGE9PntcclxuXHRcdFx0aWYgKGRhdGEuc3VjY2Vzcykge1xyXG5cdFx0XHRcdGFsZXJ0KCdZb3VyIGZpbGUgd2FzIHN1Y2Nlc3NmdWxseSB1cGxvYWRlZCEnKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRhbGVydCgnVGhlcmUgd2FzIGFuIGVycm9yIHVwbG9hZGluZyB5b3VyIGZpbGUhJyk7XHJcblx0XHRcdH1cclxuXHRcdH0pLmZhaWwoZXJyPT57XHJcblx0XHRcdGNvbnNvbGUubG9nKGVycilcclxuXHRcdH0pXHJcblx0fVxyXG5cdGZvcm1VcGxvYWRDbGlja2VkKCl7XHJcblx0XHR2YXIgZGF0YSA9IHRoaXMuZm9ybURhdGE7XHJcblxyXG5cclxuXHJcblx0XHR2YXIgZm9ybURhdGEgPSAgbmV3IEZvcm1EYXRhKCk7XHJcblx0XHRmb3JtRGF0YS5hcHBlbmQoXCJkYXRhXCIsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuXHRcdGZvcm1EYXRhLmFwcGVuZChcImZpbGVGaWVsZEZpbGVEYXRhXCIsIHRoaXMuZmlsZUZpZWxkRmlsZURhdGEpO1xyXG5cdFx0Ly9mb3JtRGF0YS5hcHBlbmQoJ2ZpbGVGaWVsZEZpbGVEYXRhJywgdGhpcy5maWxlRmllbGRGaWxlRGF0YSk7XHJcblxyXG5cdFx0d2luZG93LmZldGNoKFwiaHR0cDovL21nLnplcm8tZGl2aWRlLm5ldC9hcGkvZHVtcC9cIixcclxuXHRcdHtcclxuXHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcclxuXHRcdFx0bW9kZTogJ2NvcnMnLCAvLyBuby1jb3JzLCAqY29ycywgc2FtZS1vcmlnaW5cclxuXHRcdFx0Y2FjaGU6ICduby1jYWNoZScsIC8vICpkZWZhdWx0LCBuby1jYWNoZSwgcmVsb2FkLCBmb3JjZS1jYWNoZSwgb25seS1pZi1jYWNoZWRcclxuXHRcdFx0cmVkaXJlY3Q6ICdmb2xsb3cnLFxyXG4gICAgXHRcdGhlYWRlcnM6bmV3IEhlYWRlcnMoW1xyXG5cdFx0XHRcdFsnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nXVxyXG5cdFx0XHRdKSxcclxuXHRcdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcclxuXHRcdH0pLnRoZW4ocmV0PT57XHJcblx0XHRcdGNvbnNvbGUubG9nKHJldClcclxuXHRcdFx0aWYgKHJldC5zdGF0dXMgPT0gMjAwKSB7XHJcblx0XHRcdFx0YWxlcnQoJ1lvdXIgZmlsZSB3YXMgc3VjY2Vzc2Z1bGx5IHVwbG9hZGVkIScpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFsZXJ0KCdUaGVyZSB3YXMgYW4gZXJyb3IgdXBsb2FkaW5nIHlvdXIgZmlsZSEnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHQvLyAkLmFqYXgoXHJcblx0XHQvLyBcdFwiaHR0cDovL21nLnplcm8tZGl2aWRlLm5ldC9hcGkvZHVtcC9cIixcclxuXHRcdC8vIFx0e1xyXG5cdFx0Ly8gXHRcdG1ldGhvZDogXCJQT1NUXCIsXHJcblx0XHQvLyBcdFx0ZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcblx0XHQvLyBcdFx0Ly9jb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcblx0XHQvLyBcdFx0ZGF0YVR5cGU6XCJqc29uXCIsXHJcblx0XHQvLyBcdFx0cHJvY2Vzc0RhdGE6IGZhbHNlXHJcblx0XHQvLyBcdH0pXHJcblx0XHQvLyAuZG9uZShkYXRhPT57XHJcblx0XHQvLyBcdGlmIChkYXRhLnN1Y2Nlc3MpIHtcclxuXHRcdC8vIFx0XHRhbGVydCgnWW91ciBmaWxlIHdhcyBzdWNjZXNzZnVsbHkgdXBsb2FkZWQhJyk7XHJcblx0XHQvLyBcdH0gZWxzZSB7XHJcblx0XHQvLyBcdFx0YWxlcnQoJ1RoZXJlIHdhcyBhbiBlcnJvciB1cGxvYWRpbmcgeW91ciBmaWxlIScpO1xyXG5cdFx0Ly8gXHR9XHJcblx0XHQvLyB9KS5mYWlsKGVycj0+e1xyXG5cdFx0Ly8gXHRjb25zb2xlLmxvZyhlcnIpXHJcblx0XHQvLyB9KVxyXG5cdH1cclxufVxyXG5cclxudmFyIHRlbXBsYXRlID0gYFxyXG48ZGl2IGNsYXNzPVwiZmlsbCBzY3JvbGxcIj5cclxuXHQ8aDM+UGxhaW4gRmlsZSBGaWVsZDwvaDM+XHJcblx0PGRpdiBjbGFzcyA9IFwiZmllbGRncm91cFwiPlxyXG5cdFx0PGltZyBbc3JjXSA9IFwidGhpcy5maWxlRmllbGRJbWFnZVwiIHdpZHRoID1cIjEwMHB4XCIvPlxyXG5cdFx0PGlucHV0IHR5cGU9XCJmaWxlXCIgbmFtZSA9IFwiZmlsZUZpZWxkXCIgYmluZD1cInRoaXMuZmlsZUZpZWxkXCIgb25jaGFuZ2U9XCJ0aGlzLmZpbGVGaWVsZENoYW5nZWQoJGV2ZW50KVwiLz5cclxuXHQ8L2Rpdj5cclxuXHQ8ZGl2IGNsYXNzID0gXCJmaWVsZGdyb3VwXCI+XHJcblx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbmNsaWNrID0gXCJ0aGlzLmZpbGVGaWVsZFVwbG9hZENsaWNrZWQoKVwiPlVwbG9hZCE8L2J1dHRvbj5cclxuXHQ8L2Rpdj5cclxuXHJcblx0PGgzPkZvcm1zIEZpbGUgRmllbGQ8L2gzPlxyXG5cdDxkaXYgW2NvbXBvbmVudF09XCJ0aGlzLmZvcm1cIj48L2Rpdj5cclxuXHQ8ZGl2IGNsYXNzID0gXCJmaWVsZGdyb3VwXCI+XHJcblx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbmNsaWNrID0gXCJ0aGlzLmZvcm1VcGxvYWRDbGlja2VkKClcIj5VcGxvYWQhPC9idXR0b24+XHJcblx0PC9kaXY+XHJcblx0PGJ1dHRvbiBvbmNsaWNrPVwidGhpcy5mb3JtLnZhbGlkYXRvci52YWxpZGF0ZSgpXCI+VmFsaWRhdGU8L2J1dHRvblxyXG48L2Rpdj5cdFxyXG5gOyIsImltcG9ydCB7IEJhc2VQYWdlIH0gZnJvbSBcIi4uLy4uL3BhZ2VzL0Jhc2VQYWdlXCI7XHJcbmltcG9ydCB7IEZvcm1zIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvRm9ybXNcIjtcclxuaW1wb3J0IHsgQWxlcnQgfSBmcm9tIFwiLi4vLi4vY29yZS9zaW1wbGVfY29uZmlybVwiO1xyXG5pbXBvcnQgeyBIZWFkZXJQYWdlIH0gZnJvbSBcIi4uLy4uL3BhZ2VzL0hlYWRlclBhZ2UvSGVhZGVyUGFnZVwiO1xyXG5pbXBvcnQgeyBOdW1lcmljS2V5Ym9hcmQgfSBmcm9tIFwiLi4vLi4vcGFnZXMvTnVtZXJpY0tleWJvYXJkL051bWVyaWNLZXlib2FyZFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRlc3RGb3Jtc1BhZ2UgZXh0ZW5kcyBIZWFkZXJQYWdlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmZvcm0xZGF0YSA9IHt9O1xyXG4gICAgdGhpcy5mb3JtMWVycm9ycyA9IHt9O1xyXG4gICAgdGhpcy5mb3JtMWF0dHJpYnV0ZXMgPSB7fTtcclxuXHJcbiAgICB0aGlzLmZvcm0xdGVtcGxhdGUgPSBbXHJcbiAgICAgIHsgdHlwZTogXCJudW1iZXJcIiwgbmFtZTogXCJudW1iZXIxXCIsIHRpdGxlOiBcIkVudGVyIE51bWJlciAxXCIgfSxcclxuICAgICAgeyB0eXBlOiBcIm51bWJlclwiLCBuYW1lOiBcIm51bWJlcjJcIiwgdGl0bGU6IFwiRW50ZXIgTnVtYmVyIDJcIiwgdmFsaWRhdGVSdWxlOiBcInJlcXVpcmVkXCIgfSxcclxuXHJcbiAgICAgIHsgdHlwZTogXCJjaGVja2JveFwiLCBuYW1lOiBcImNoZWNrYm94MVwiLCB0aXRsZTogXCJTaG93IHRleHQxXCIgfSxcclxuICAgICAgeyB0eXBlOiBcInRleHRcIiwgbmFtZTogXCJ0ZXh0MVwiLCB0aXRsZTogXCJ0ZXh0MVwiLCB2YWxpZGF0ZVJ1bGU6IFwicmVxdWlyZWRcIiwgZGlzcGxheVJ1bGU6IFwidHJ1ZV9pZjpjaGVja2JveDEsdHJ1ZVwiLCBhdHRyaWJ1dGVzOiB7IG9uY2xpY2s6IFwidGhpcy5vbkNsaWNrZWQoKVwiIH0gfSxcclxuXHJcbiAgICAgIHsgdHlwZTogXCJjaGVja2JveFwiLCBuYW1lOiBcImNoZWNrYm94MlwiLCB0aXRsZTogXCJTaG93IGZvcm0xXCIsIHZhbGlkYXRlUnVsZTogXCJyZXF1aXJlZFwiLCB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdHlwZTogXCJmb3JtXCIsIC8qbmFtZTpcImZvcm0xXCIqLyB0aXRsZTogXCJmb3JtMVwiLCBkaXNwbGF5UnVsZTogXCJ0cnVlX2lmOmNoZWNrYm94Mix0cnVlXCIsIGl0ZW1zOiBbXHJcbiAgICAgICAgICB7IHR5cGU6IFwidGV4dFwiLCBuYW1lOiBcInRleHQyXCIsIHRpdGxlOiBcInRleHQyXCIsIHZhbGlkYXRlUnVsZTogXCJyZXF1aXJlZFwiIH0sXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdHlwZTogXCJmb3JtXCIsIG5hbWU6IFwic29tZUZvcm0xMVwiLCB0aXRsZTogXCJmb3JtMlwiLCBpdGVtczogW1xyXG4gICAgICAgICAgeyB0eXBlOiBcInRleHRcIiwgbmFtZTogXCJ0ZXh0M1wiLCB0aXRsZTogXCJzb21lRm9ybTExLnRleHQzXCIsIHZhbGlkYXRlUnVsZTogXCJyZXF1aXJlZFwiIH0sXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICB7IHR5cGU6IFwibnVtYmVyXCIsIG5hbWU6IFwibnVtYmVyM1wiLCB0aXRsZTogXCJFbnRlciBOdW1iZXIgM1wiIH0sXHJcbiAgICBdO1xyXG5cclxuICAgIHRoaXMuZm9ybTEgPSBuZXcgRm9ybXModGhpcy5mb3JtMXRlbXBsYXRlLCB0aGlzLmZvcm0xZGF0YSwgdGhpcy5mb3JtMWVycm9ycywgeyBuZXN0ZWREYXRhOiB0cnVlIH0pO1xyXG5cclxuICAgIHRoaXMuZm9ybTEub25DbGlja2VkID0gdGhpcy5vbkNsaWNrZWQ7XHJcblxyXG4gICAgdGhpcy52aXNpYmxlRm9ybTFkYXRhID0gbnVsbDtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhCYXNlUGFnZSBpbnN0YW5jZW9mIE9iamVjdCk7XHJcbiAgICBjb25zb2xlLmxvZygobmV3IEJhc2VQYWdlKCkpIGluc3RhbmNlb2YgT2JqZWN0KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyh0eXBlb2YgQmFzZVBhZ2UpO1xyXG4gICAgY29uc29sZS5sb2codHlwZW9mIChuZXcgQmFzZVBhZ2UoKSkpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKHR5cGVvZiAoQmFzZVBhZ2UucHJvdG90eXBlKSk7XHJcbiAgICBjb25zb2xlLmxvZyh0eXBlb2YgKChuZXcgQmFzZVBhZ2UoKS5wcm90b3R5cGUpKSk7XHJcblxyXG4gICAgTnVtZXJpY0tleWJvYXJkLmVuYWJsZSgpO1xyXG4gICAgTnVtZXJpY0tleWJvYXJkLm9wdGlvbnMubGF5b3V0ID0gMTtcclxuICB9XHJcblxyXG4gIG9uQ2xpY2tlZCgpIHtcclxuICAgIEFsZXJ0KFwiQ0xJQ0tFRCFcIik7XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZSgpIHtcclxuICAgIHRoaXMuaXNWYWxpZCA9IHRoaXMuZm9ybTEudmFsaWRhdG9yLnZhbGlkYXRlKCk7XHJcbiAgICB0aGlzLnZpc2libGVGb3JtMWRhdGEgPSB0aGlzLmZvcm0xLmdldFZpc2libGVEYXRhKCk7XHJcbiAgfVxyXG5cclxuICBnZXQgdGVtcGxhdGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5leHRlbmRUZW1wbGF0ZShzdXBlci50ZW1wbGF0ZSwgdGVtcGxhdGUpO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgdGVtcGxhdGUgPSBgXHJcbjxkaXYgY2xhc3M9XCJzY3JvbGwgZmlsbFwiPlxyXG5cdDxkaXYgW2NvbXBvbmVudF0gPSBcInRoaXMuZm9ybTFcIj48L2Rpdj5cclxuXHQ8YnV0dG9uIG9uY2xpY2s9XCJ0aGlzLnZhbGlkYXRlKClcIj5WYWxpZGF0ZSB7eyB0aGlzLmlzVmFsaWQgPyAnVkFMSUQnIDogJ0lOVkFMSUQnfX08L2J1dHRvbj5cclxuXHQ8IS0tIDxocj5cclxuXHRmb3JtMXRlbXBsYXRlXHJcblx0PHByZT57eyBKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm0xdGVtcGxhdGUsbnVsbCwnICAnKSB9fTwvcHJlPiAtLT5cclxuXHQ8aHI+XHJcblx0Zm9ybTFkYXRhXHJcblx0PHByZT57eyBKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm0xZGF0YSxudWxsLCcgICcpIH19PC9wcmU+XHJcblx0PGhyPlxyXG5cdHZpc2libGVGb3JtMWRhdGEgXHJcblx0PHByZT57eyBKU09OLnN0cmluZ2lmeSh0aGlzLnZpc2libGVGb3JtMWRhdGEsbnVsbCwnICAnKSB9fTwvcHJlPlxyXG5cdDxocj5cclxuXHRmb3JtMWVycm9yc1xyXG5cdDxwcmU+e3sgSlNPTi5zdHJpbmdpZnkodGhpcy5mb3JtMWVycm9ycyxudWxsLCcgICcpIH19PC9wcmU+XHJcblx0PGhyPlxyXG5cdGZvcm0uZmllbGRzXHJcblx0PHByZT57eyBKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm0xLmZpZWxkcyxudWxsLCcgICcpIH19PC9wcmU+XHJcbjwvZGl2PlxyXG5gOyIsImltcG9ydCB7IEJhc2VQYWdlIH0gZnJvbSBcIi4uLy4uL3BhZ2VzL0Jhc2VQYWdlXCI7XHJcbmltcG9ydCB7IEZvcm1zIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvRm9ybXNcIjtcclxuaW1wb3J0IHsgQWxlcnQgfSBmcm9tIFwiLi4vLi4vY29yZS9zaW1wbGVfY29uZmlybVwiO1xyXG5pbXBvcnQgeyBIZWFkZXJQYWdlIH0gZnJvbSBcIi4uLy4uL3BhZ2VzL0hlYWRlclBhZ2UvSGVhZGVyUGFnZVwiO1xyXG5pbXBvcnQgeyBOdW1lcmljS2V5Ym9hcmQgfSBmcm9tIFwiLi4vLi4vcGFnZXMvTnVtZXJpY0tleWJvYXJkL051bWVyaWNLZXlib2FyZFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRlc3RGb3Jtc1NlbGVjdEl0ZW1zUGFnZSBleHRlbmRzIEhlYWRlclBhZ2Uge1xyXG5cdGNvbnN0cnVjdG9yKCl7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5mb3JtMWRhdGEgPSB7fVxyXG5cdFx0dGhpcy5mb3JtMWVycm9ycyA9e31cclxuXHRcdHRoaXMuZm9ybTFhdHRyaWJ1dGVzID0ge307XHJcblxyXG5cdFx0dmFyIGZvcm0xdGVtcGxhdGUgPSBbe1widmFsaWRhdGVSdWxlXCI6XCJyZXF1aXJlZFwiLFwibmFtZVwiOlwiY29tbWVudE1ldGhvZFwiLFwicGxhY2Vob2xkZXJcIjpcIi0tIFBsZWFzZSBTZWxlY3QgLS1cIixcInRpdGxlXCI6XCJDb21tZW50c1wiLFwidHlwZVwiOlwic2VsZWN0XCIsXCJpdGVtc1wiOlt7XCJ0aXRsZVwiOlwiQXBwcmFpc2VyIHJlcXVpcmVzIHRoaXMgYXBwcmFpc2FsIHRvIGJlIGNhbmNlbGxlZC9yZS1hc3NpZ25lZFwiLFwidmFsdWVcIjpcImNhbmNlbGxlZFJlYXNzaWduZWRBcHByYWlzZXJcIixcIml0ZW1zXCI6W3tcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWRcIixcIm5hbWVcIjpcImNvbW1lbnRcIixcInRpdGxlXCI6XCJNZXNzYWdlXCIsXCJ0eXBlXCI6XCJ0ZXh0XCJ9XX0se1widGl0bGVcIjpcIkFwcHJhaXNlciByZXF1aXJlcyBzdXBwb3J0aW5nIGRvY3VtZW50YXRpb24gaW4gb3JkZXIgdG8gY29tcGxldGUgc3VjaCBhcyBmbG9vciBwbGFucywgYmx1ZXByaW50cywgZXRjLlwiLFwidmFsdWVcIjpcInJlcXVpcmVBZ3JlZW1lbnRTdXBwb3J0aW5nRG9jXCIsXCJpdGVtc1wiOlt7XCJ2YWxpZGF0ZVJ1bGVcIjpcInJlcXVpcmVkXCIsXCJuYW1lXCI6XCJjb21tZW50XCIsXCJ0aXRsZVwiOlwiTWVzc2FnZVwiLFwidHlwZVwiOlwidGV4dFwifV19LHtcInRpdGxlXCI6XCJBcHByYWlzZXIgYXNzaWduZWQgdG8gdGhpcyByZXF1ZXN0XCIsXCJ2YWx1ZVwiOlwiYXNzaWduZWRBcHByYWlzZXJcIixcIml0ZW1zXCI6W3tcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWRcIixcIm5hbWVcIjpcImFwcHJhaXNlclVzZXJuYW1lXCIsXCJwbGFjZWhvbGRlclwiOlwiU2VsZWN0IEFwcHJhaXNlclwiLFwidGl0bGVcIjpcIkFwcHJhaXNlciBOYW1lXCIsXCJ0eXBlXCI6XCJzZWxlY3RcIixcIml0ZW1zXCI6W3tcInRpdGxlXCI6XCJBcHByYWlzZXIgbm90IGZvdW5kXCIsXCJ2YWx1ZVwiOlwiXCIsXCJpdGVtc1wiOlt7XCJuYW1lXCI6XCJub3RlMVwiLFwidGl0bGVcIjpcIk5vdGVcIixcInR5cGVcIjpcImxhYmVsXCIsXCJ2YWx1ZVwiOlwiRW50ZXIgdGhlIGFwcHJhaXNlciBpbmZvcm1hdGlvbiBiZWxvdy4gQW5kIGNvbnRhY3QgTkFTIGF0IGFwcHJhaXNlcnNAbmF0aW9ud2lkZWFwcHJhaXNhbHMuY29tIHRvIHNldCB1cCBhbiBhY2NvdW50LlwifSx7XCJ2YWxpZGF0ZVJ1bGVcIjpcIlwiLFwibmFtZVwiOlwiYXBwcmFpc2VyRGVzaWduYXRpb25cIixcInRpdGxlXCI6XCJEZXNpZ25hdGlvblwiLFwidHlwZVwiOlwic2VsZWN0XCIsXCJpdGVtc1wiOlt7XCJ0aXRsZVwiOlwiQ2FuZGlkYXRlXCIsXCJ2YWx1ZVwiOlwiQ2FuZGlkYXRlXCJ9LHtcInRpdGxlXCI6XCJDUkFcIixcInZhbHVlXCI6XCJDUkFcIn0se1widGl0bGVcIjpcIkRBUlwiLFwidmFsdWVcIjpcIkRBUlwifSx7XCJ0aXRsZVwiOlwiRS5BLlwiLFwidmFsdWVcIjpcIkUuQS5cIn0se1widGl0bGVcIjpcIkRBQ1wiLFwidmFsdWVcIjpcIkRBQ1wifSx7XCJ0aXRsZVwiOlwiQUFDSVwiLFwidmFsdWVcIjpcIkFBQ0lcIn0se1widGl0bGVcIjpcIk1WQVwiLFwidmFsdWVcIjpcIk1WQVwifV19LHtcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWR8bWF4OjUwXCIsXCJuYW1lXCI6XCJhcHByYWlzZXJGaXJzdG5hbWVcIixcInRpdGxlXCI6XCJGaXJzdCBOYW1lXCIsXCJ0eXBlXCI6XCJ0ZXh0XCJ9LHtcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWR8bWF4OjUwXCIsXCJuYW1lXCI6XCJhcHByYWlzZXJMYXN0bmFtZVwiLFwidGl0bGVcIjpcIkxhc3QgTmFtZVwiLFwidHlwZVwiOlwidGV4dFwifSx7XCJ2YWxpZGF0ZVJ1bGVcIjpcInJlcXVpcmVkfG1heDoyMFwiLFwibmFtZVwiOlwiYXBwcmFpc2VyUGhvbmVcIixcInRpdGxlXCI6XCJQaG9uZSBOdW1iZXJcIixcInR5cGVcIjpcInBob25lXCJ9LHtcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWR8bWF4OjIwXCIsXCJuYW1lXCI6XCJhcHByYWlzZXJNb2JpbGVQaG9uZVwiLFwidGl0bGVcIjpcIk1vYmlsZSBOdW1iZXJcIixcInR5cGVcIjpcInBob25lXCJ9LHtcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWR8bWF4OjEwMFwiLFwibmFtZVwiOlwiYXBwcmFpc2VyRW1haWxcIixcInRpdGxlXCI6XCJFbWFpbCBBZGRyZXNzXCIsXCJ0eXBlXCI6XCJlbWFpbFwifV19LHtcInRpdGxlXCI6XCJKb2huIEZseW5uXCIsXCJ2YWx1ZVwiOlwiSm9obiBGbHlublwifSx7XCJ0aXRsZVwiOlwiam9zZXBoLWFzc29jXCIsXCJ2YWx1ZVwiOlwiam9zZXBoLWFzc29jXCJ9LHtcInRpdGxlXCI6XCJ0bWRhclwiLFwidmFsdWVcIjpcInRtZGFyXCJ9XX1dfSx7XCJ0aXRsZVwiOlwiUmVxdWVzdCBpcyBhIHRlbmFudGVkIHByb3BlcnR5LCBhcHByYWlzZXIgd2lsbCB1cGRhdGUgTkFTIHNpdGUgd2l0aCBhcHBvaW50bWVudCBhcyBzb29uIGFzIHRlbmFudCBjb25maXJtc1wiLFwidmFsdWVcIjpcInRlbmFudGVkUHJvcGVydHlcIixcIml0ZW1zXCI6W3tcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWRcIixcIm5hbWVcIjpcImNvbW1lbnRcIixcInRpdGxlXCI6XCJNZXNzYWdlXCIsXCJ0eXBlXCI6XCJ0ZXh0XCJ9XX0se1widGl0bGVcIjpcIkFwcHJhaXNlciByZXF1aXJlcyBwdXJjaGFzZS9zYWxlIGFncmVlbWVudCBpbiBvcmRlciB0byBjb21wbGV0ZS5cIixcInZhbHVlXCI6XCJyZXF1aXJlQWdyZWVtZW50XCIsXCJpdGVtc1wiOlt7XCJ2YWxpZGF0ZVJ1bGVcIjpcInJlcXVpcmVkXCIsXCJuYW1lXCI6XCJjb21tZW50XCIsXCJ0aXRsZVwiOlwiTWVzc2FnZVwiLFwidHlwZVwiOlwidGV4dFwifV19LHtcInRpdGxlXCI6XCJGZWUgaW5jcmVhc2Ugc3RhdHVzIHVwZGF0ZVwiLFwidmFsdWVcIjpcImZlZUluY3JlYXNlU3RhdHVzVXBkYXRlXCIsXCJpdGVtc1wiOlt7XCJ2YWxpZGF0ZVJ1bGVcIjpcInJlcXVpcmVkXCIsXCJuYW1lXCI6XCJjb21tZW50XCIsXCJ0aXRsZVwiOlwiTWVzc2FnZVwiLFwidHlwZVwiOlwidGV4dFwifV19LHtcInRpdGxlXCI6XCJBcHByYWlzZXIgcmVxdWlyZXMgYWRkaXRpb25hbCBjb250YWN0IGluZm9ybWF0aW9uIGFuZC9vciBjb25maXJtYXRpb24gb2YgYWRkcmVzcyBpbmZvcm1hdGlvblwiLFwidmFsdWVcIjpcInJlcXVpcmVWZXJpZmljYXRpb25cIixcIml0ZW1zXCI6W3tcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWRcIixcIm5hbWVcIjpcImNvbW1lbnRcIixcInRpdGxlXCI6XCJNZXNzYWdlXCIsXCJ0eXBlXCI6XCJ0ZXh0XCJ9XX0se1widGl0bGVcIjpcIlJlcXVpcmUgdGVjaG5pY2FsIHN1cHBvcnQvYXNzaXN0YW5jZVwiLFwidmFsdWVcIjpcInRlY2huaWNhbFN1cHBvcnRcIixcIml0ZW1zXCI6W3tcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWRcIixcIm5hbWVcIjpcImNvbW1lbnRcIixcInRpdGxlXCI6XCJNZXNzYWdlXCIsXCJ0eXBlXCI6XCJ0ZXh0XCJ9XX0se1widGl0bGVcIjpcIkZpbGUgYXNzaWduZWQgYXMgYSBEZXNrdG9wLCBob3dldmVyIGEgRGVza3RvcCBpcyBub3QgcG9zc2libGUgZm9yIHRoaXMgYXBwcmFpc2FsXCIsXCJ2YWx1ZVwiOlwiZmlsZUFzc2lnbmVkQXNEZXNrdG9wXCIsXCJpdGVtc1wiOlt7XCJ2YWxpZGF0ZVJ1bGVcIjpcInJlcXVpcmVkXCIsXCJuYW1lXCI6XCJjb21tZW50XCIsXCJ0aXRsZVwiOlwiTWVzc2FnZVwiLFwidHlwZVwiOlwidGV4dFwifV19LHtcInRpdGxlXCI6XCJBcHBsaWNhbnQgZGVsYXlcIixcInZhbHVlXCI6XCJhcHBsaWNhbnROb3RSZWFkeVRvUHJvY2VlZFwiLFwiaXRlbXNcIjpbe1widmFsaWRhdGVSdWxlXCI6XCJyZXF1aXJlZFwiLFwibmFtZVwiOlwiY29tbWVudFwiLFwidGl0bGVcIjpcIk1lc3NhZ2VcIixcInR5cGVcIjpcInRleHRcIn1dfSx7XCJ0aXRsZVwiOlwiUG9saWN5L3JlcXVpcmVtZW50cyB2ZXJpZmljYXRpb25cIixcInZhbHVlXCI6XCJwb2xpY3lSZXF1aXJlbWVudHNWZXJpZmljYXRpb25cIixcIml0ZW1zXCI6W3tcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWRcIixcIm5hbWVcIjpcImNoZWNrMVwiLFwidGl0bGVcIjpcIkkgaGF2ZSByZXZpZXdlZCB0aGUgbGVuZGVyIHJlcXVpcmVtZW50cyBhdHRhY2hlZCB0byB0aGlzIHJlcXVlc3RcIixcInR5cGVcIjpcImNoZWNrYm94XCJ9LHtcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWRcIixcIm5hbWVcIjpcImNvbW1lbnRcIixcInRpdGxlXCI6XCJNZXNzYWdlXCIsXCJ0eXBlXCI6XCJ0ZXh0YXJlYVwiLFwidmFsdWVcIjpcIlBvbGljeS9yZXF1aXJlbWVudHMgdmVyaWZpY2F0aW9uXCJ9XX0se1widGl0bGVcIjpcIkVzdGltYXRlZCBUaW1lIG9mIFJlcG9ydCBEZWxpdmVyeVwiLFwidmFsdWVcIjpcImFwcHJhaXNhbFJlcG9ydFdpbGxCZVVwbG9hZGVkU2hvcnRseVwiLFwiaXRlbXNcIjpbe1widmFsaWRhdGVSdWxlXCI6XCJyZXF1aXJlZFwiLFwibmFtZVwiOlwicmVwb3J0X2RhdGVfZnJvbVwiLFwidGl0bGVcIjpcIlJlcG9ydCBDb21wbGV0aW9uIERhdGVcIixcInR5cGVcIjpcImRhdGVUaW1lXCJ9LHtcInZhbGlkYXRlUnVsZVwiOlwicmVxdWlyZWRcIixcIm5hbWVcIjpcInJlcG9ydF9kYXRlX3RvXCIsXCJ0aXRsZVwiOlwiUmVwb3J0IENvbXBsZXRpb24gVGltZVwiLFwidHlwZVwiOlwidGltZVwifSx7XCJ2YWxpZGF0ZVJ1bGVcIjpcInJlcXVpcmVkXCIsXCJuYW1lXCI6XCJjb21tZW50XCIsXCJ0aXRsZVwiOlwiTWVzc2FnZVwiLFwidHlwZVwiOlwidGV4dFwifV19LHtcInRpdGxlXCI6XCJMZWZ0IG1lc3NhZ2UgZm9yIHRoZSBjb250YWN0KHMpIFwiLFwidmFsdWVcIjpcIm1lc3NhZ2VMZWZ0XCIsXCJpdGVtc1wiOlt7XCJ2YWxpZGF0ZVJ1bGVcIjpcInJlcXVpcmVkXCIsXCJuYW1lXCI6XCJjb21tZW50XCIsXCJ0aXRsZVwiOlwiTWVzc2FnZVwiLFwidHlwZVwiOlwidGV4dFwifV19XX1dXHJcblxyXG5cdFx0dGhpcy5mb3JtMSA9IG5ldyBGb3Jtcyhmb3JtMXRlbXBsYXRlLCB0aGlzLmZvcm0xZGF0YSwgdGhpcy5mb3JtMWVycm9ycywge25lc3RlZERhdGE6dHJ1ZX0pO1xyXG4gICAgdGhpcy5mb3JtMXRlbXBsYXRlID0gZm9ybTF0ZW1wbGF0ZTtcclxuXHRcdHRoaXMuZm9ybTEub25DbGlja2VkID0gdGhpcy5vbkNsaWNrZWQ7XHJcblxyXG5cdFx0dGhpcy52aXNpYmxlRm9ybTFkYXRhID0gbnVsbFxyXG5cclxuXHRcdGNvbnNvbGUubG9nKEJhc2VQYWdlIGluc3RhbmNlb2YgT2JqZWN0KTtcclxuXHRcdGNvbnNvbGUubG9nKChuZXcgQmFzZVBhZ2UoKSkgaW5zdGFuY2VvZiBPYmplY3QpO1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKHR5cGVvZiBCYXNlUGFnZSk7XHJcblx0XHRjb25zb2xlLmxvZyh0eXBlb2YgKG5ldyBCYXNlUGFnZSgpKSkgO1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKHR5cGVvZiAoQmFzZVBhZ2UucHJvdG90eXBlKSk7XHJcblx0XHRjb25zb2xlLmxvZyh0eXBlb2YgKChuZXcgQmFzZVBhZ2UoKS5wcm90b3R5cGUpKSkgO1xyXG5cdFx0XHJcblx0XHROdW1lcmljS2V5Ym9hcmQuZW5hYmxlKCk7XHJcblx0XHROdW1lcmljS2V5Ym9hcmQub3B0aW9ucy5sYXlvdXQgPSAxO1xyXG5cdH1cclxuXHJcblx0b25DbGlja2VkKCl7XHJcblx0XHRBbGVydChcIkNMSUNLRUQhXCIpO1xyXG5cdH1cclxuXHJcblx0dmFsaWRhdGUoKXtcclxuXHRcdHRoaXMuaXNWYWxpZCA9IHRoaXMuZm9ybTEudmFsaWRhdG9yLnZhbGlkYXRlKCk7XHJcblx0XHR0aGlzLnZpc2libGVGb3JtMWRhdGEgPSB0aGlzLmZvcm0xLmdldFZpc2libGVEYXRhKCk7XHJcblx0fVxyXG5cclxuXHRnZXQgdGVtcGxhdGUoKXtcclxuXHRcdHJldHVybiB0aGlzLmV4dGVuZFRlbXBsYXRlKHN1cGVyLnRlbXBsYXRlLCB0ZW1wbGF0ZSlcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IHRlbXBsYXRlID0gYFxyXG48ZGl2IGNsYXNzPVwic2Nyb2xsIGZpbGxcIj5cclxuXHQ8ZGl2IFtjb21wb25lbnRdID0gXCJ0aGlzLmZvcm0xXCI+PC9kaXY+XHJcblx0PGJ1dHRvbiBvbmNsaWNrPVwidGhpcy52YWxpZGF0ZSgpXCI+VmFsaWRhdGUge3sgdGhpcy5pc1ZhbGlkID8gJ1ZBTElEJyA6ICdJTlZBTElEJ319PC9idXR0b24+XHJcblx0XHJcblx0PGhyPlxyXG5cdGZvcm0xZGF0YVxyXG5cdDxwcmU+e3sgSlNPTi5zdHJpbmdpZnkodGhpcy5mb3JtMWRhdGEsbnVsbCwnICAnKSB9fTwvcHJlPlxyXG5cdDxocj5cclxuXHR2aXNpYmxlRm9ybTFkYXRhIFxyXG5cdDxwcmU+e3sgSlNPTi5zdHJpbmdpZnkodGhpcy52aXNpYmxlRm9ybTFkYXRhLG51bGwsJyAgJykgfX08L3ByZT5cclxuXHQ8aHI+XHJcblx0Zm9ybTFlcnJvcnNcclxuXHQ8cHJlPnt7IEpTT04uc3RyaW5naWZ5KHRoaXMuZm9ybTFlcnJvcnMsbnVsbCwnICAnKSB9fTwvcHJlPlxyXG5cdDxocj5cclxuXHRmb3JtLmZpZWxkc1xyXG4gIDxwcmU+e3sgSlNPTi5zdHJpbmdpZnkodGhpcy5mb3JtMS5maWVsZHMsbnVsbCwnICAnKSB9fTwvcHJlPlxyXG4gIDxocj5cclxuXHRmb3JtMXRlbXBsYXRlXHJcblx0PHByZT57eyBKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm0xdGVtcGxhdGUsbnVsbCwnICAnKSB9fTwvcHJlPlxyXG48L2Rpdj5cclxuYDsiLCJpbXBvcnQgeyBCYXNlUGFnZSB9IGZyb20gXCIuLi8uLi9wYWdlcy9CYXNlUGFnZVwiO1xyXG5pbXBvcnQgeyBGb3JtcyB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0Zvcm1zXCI7XHJcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSBcIi4uLy4uL2NvcmUvc2ltcGxlX2NvbmZpcm1cIjtcclxuaW1wb3J0IHsgSGVhZGVyUGFnZSB9IGZyb20gXCIuLi8uLi9wYWdlcy9IZWFkZXJQYWdlL0hlYWRlclBhZ2VcIjtcclxuaW1wb3J0IHsgTnVtZXJpY0tleWJvYXJkIH0gZnJvbSBcIi4uLy4uL3BhZ2VzL051bWVyaWNLZXlib2FyZC9OdW1lcmljS2V5Ym9hcmRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUZXN0Rm9ybXNWaXNpYmxlUGFnZSBleHRlbmRzIEhlYWRlclBhZ2Uge1xyXG5cdGNvbnN0cnVjdG9yKCl7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5mb3JtMWRhdGEgPSB7fVxyXG5cdFx0dGhpcy5mb3JtMWVycm9ycyA9e31cclxuXHRcdHRoaXMuZm9ybTFhdHRyaWJ1dGVzID0ge307XHJcblxyXG5cdFx0dGhpcy5mb3JtMXRlbXBsYXRlID0gW1xyXG5cdFx0XHR7dHlwZTpcInNlbGVjdFwiLCBuYW1lOlwic2VsZWN0MVwiLCB2YWx1ZTpcInZhbDFcIiwgdGl0bGU6XCJvcHRpb24xXCIsIGl0ZW1zOltcclxuXHRcdFx0XHR7IHZhbHVlOiBcInZhbDFcIiwgdGl0bGU6IFwiVmFsdWUgMVwiIH0sXHJcblx0XHRcdFx0eyB2YWx1ZTogXCJ2YWwyXCIsIHRpdGxlOiBcIlZhbHVlIDJcIiB9LFxyXG5cdFx0XHRdfSxcclxuXHRcdFx0e3R5cGU6XCJzZWxlY3RcIiwgbmFtZTpcInNlbGVjdDJcIiwgdmFsdWU6XCJ2YWwxMVwiLCB0aXRsZTpcInNlbGVjdDJcIiwgZGlzcGxheVJ1bGU6XCJ0cnVlX2lmOnNlbGVjdDEsdmFsMlwiLCBpdGVtczpbXHJcblx0XHRcdFx0eyB2YWx1ZTogXCJ2YWwxMVwiLCB0aXRsZTogXCJWYWx1ZSAxXCIgfSxcclxuXHRcdFx0XHR7IHZhbHVlOiBcInZhbDIyXCIsIHRpdGxlOiBcIlZhbHVlIDJcIiB9LFxyXG5cclxuXHRcdFx0XSB9LFxyXG5cdFx0XHRcclxuXHRcdFx0e3R5cGU6XCJ0ZXh0XCIsIG5hbWU6XCJ0ZXh0MVwiLHRpdGxlOlwidGV4dDFcIiwgdmFsaWRhdGVSdWxlOlwicmVxdWlyZWRcIiwgZGlzcGxheVJ1bGU6XCJ0cnVlX2lmOnNlbGVjdDIsdmFsMjJcIiB9LFxyXG5cdFx0XTtcclxuXHJcblx0XHR0aGlzLmZvcm0xID0gbmV3IEZvcm1zKHRoaXMuZm9ybTF0ZW1wbGF0ZSwgdGhpcy5mb3JtMWRhdGEsIHRoaXMuZm9ybTFlcnJvcnMsIHtuZXN0ZWREYXRhOnRydWV9KTtcclxuXHJcblx0XHR0aGlzLmZvcm0xLm9uQ2xpY2tlZCA9IHRoaXMub25DbGlja2VkO1xyXG5cclxuXHRcdHRoaXMudmlzaWJsZUZvcm0xZGF0YSA9IG51bGxcclxuXHJcblx0XHRjb25zb2xlLmxvZyhCYXNlUGFnZSBpbnN0YW5jZW9mIE9iamVjdCk7XHJcblx0XHRjb25zb2xlLmxvZygobmV3IEJhc2VQYWdlKCkpIGluc3RhbmNlb2YgT2JqZWN0KTtcclxuXHJcblx0XHRjb25zb2xlLmxvZyh0eXBlb2YgQmFzZVBhZ2UpO1xyXG5cdFx0Y29uc29sZS5sb2codHlwZW9mIChuZXcgQmFzZVBhZ2UoKSkpIDtcclxuXHJcblx0XHRjb25zb2xlLmxvZyh0eXBlb2YgKEJhc2VQYWdlLnByb3RvdHlwZSkpO1xyXG5cdFx0Y29uc29sZS5sb2codHlwZW9mICgobmV3IEJhc2VQYWdlKCkucHJvdG90eXBlKSkpIDtcclxuXHRcdFxyXG5cdFx0TnVtZXJpY0tleWJvYXJkLmVuYWJsZSgpO1xyXG5cdFx0TnVtZXJpY0tleWJvYXJkLm9wdGlvbnMubGF5b3V0ID0gMTtcclxuXHR9XHJcblxyXG5cdG9uQ2xpY2tlZCgpe1xyXG5cdFx0QWxlcnQoXCJDTElDS0VEIVwiKTtcclxuXHR9XHJcblxyXG5cdHZhbGlkYXRlKCl7XHJcblx0XHR0aGlzLmlzVmFsaWQgPSB0aGlzLmZvcm0xLnZhbGlkYXRvci52YWxpZGF0ZSgpO1xyXG5cdFx0dGhpcy52aXNpYmxlRm9ybTFkYXRhID0gdGhpcy5mb3JtMS5nZXRWaXNpYmxlRGF0YSgpO1xyXG5cdH1cclxuXHJcblx0Z2V0IHRlbXBsYXRlKCl7XHJcblx0XHRyZXR1cm4gdGhpcy5leHRlbmRUZW1wbGF0ZShzdXBlci50ZW1wbGF0ZSwgdGVtcGxhdGUpXHJcblx0fVxyXG59XHJcblxyXG5jb25zdCB0ZW1wbGF0ZSA9IGBcclxuPGRpdiBjbGFzcz1cInNjcm9sbCBmaWxsXCI+XHJcblx0PGRpdiBbY29tcG9uZW50XSA9IFwidGhpcy5mb3JtMVwiPjwvZGl2PlxyXG5cdDxidXR0b24gb25jbGljaz1cInRoaXMudmFsaWRhdGUoKVwiPlZhbGlkYXRlIHt7IHRoaXMuaXNWYWxpZCA/ICdWQUxJRCcgOiAnSU5WQUxJRCd9fTwvYnV0dG9uPlxyXG5cdDxocj5cclxuXHRmb3JtMXRlbXBsYXRlXHJcblx0PHByZT57eyBKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm0xdGVtcGxhdGUsbnVsbCwnICAnKSB9fTwvcHJlPlxyXG5cdDxocj5cclxuXHRmb3JtMWRhdGFcclxuXHQ8cHJlPnt7IEpTT04uc3RyaW5naWZ5KHRoaXMuZm9ybTFkYXRhLG51bGwsJyAgJykgfX08L3ByZT5cclxuXHQ8aHI+XHJcblx0dmlzaWJsZUZvcm0xZGF0YSBcclxuXHQ8cHJlPnt7IEpTT04uc3RyaW5naWZ5KHRoaXMudmlzaWJsZUZvcm0xZGF0YSxudWxsLCcgICcpIH19PC9wcmU+XHJcblx0PGhyPlxyXG5cdGZvcm0xZXJyb3JzXHJcblx0PHByZT57eyBKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm0xZXJyb3JzLG51bGwsJyAgJykgfX08L3ByZT5cclxuXHQ8aHI+XHJcblx0Zm9ybS5maWVsZHNcclxuXHQ8cHJlPnt7IEpTT04uc3RyaW5naWZ5KHRoaXMuZm9ybTEuZmllbGRzLG51bGwsJyAgJykgfX08L3ByZT5cclxuPC9kaXY+XHJcbmA7IiwiaW1wb3J0ICcuLi9jb3JlL3BvbHlmaWxsLmpzJztcclxuaW1wb3J0ICcuLy4uL3Njc3MvYXBwLnNjc3MnO1xyXG5pbXBvcnQgJy4vLi4vc2Nzcy9mb3Jtcy5zY3NzJztcclxuaW1wb3J0ICcuLy4uL3Njc3MvYnV0dG9ucy5zY3NzJztcclxuXHJcbmltcG9ydCB7IFRyYW5zbGF0ZSB9IGZyb20gJy4uL2NvcmUvVHJhbnNsYXRlLmpzJztcclxuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICcuLi9jb3JlL0luamVjdG9yLmpzJztcclxuaW1wb3J0IHsgSW5qZWN0VGVtcGxhdGUgfSBmcm9tICcuL0luamVjdFRlbXBsYXRlLmpzJztcclxuaW1wb3J0IHsgTmF2Q29udHJvbGxlciB9IGZyb20gJy4uL2NvcmUvTmF2Q29udHJvbGxlci5qcyc7XHJcbmltcG9ydCB7IFJvb3RQYWdlIH0gZnJvbSAnLi9QYWdlcy9Sb290UGFnZS5qcyc7XHJcbmltcG9ydCB7IERPTSB9IGZyb20gJy4uL2NvcmUvRE9NLmpzJztcclxuaW1wb3J0IHsgRm9ybXMgfSBmcm9tICcuLi9jb21wb25lbnRzL0Zvcm1zJztcclxuXHJcbndpbmRvd1snVHJhbnNsYXRlJ10gPSBUcmFuc2xhdGU7XHJcbndpbmRvd1snRE9NJ10gPSBET007XHJcblxyXG52YXIgSW5qZWN0ID0gSW5qZWN0b3IuaW1wbGVtZW50KEluamVjdFRlbXBsYXRlKTtcclxuSW5qZWN0Lk5hdiA9IG5ldyBOYXZDb250cm9sbGVyKCk7XHJcblxyXG52YXIgdiA9IEluamVjdC5OYXYuc2V0Um9vdChSb290UGFnZSk7XHJcblxyXG4vLyBGb3Jtcy5maWVsZF9kZWZpbml0aW9uc1tcInNlbGVjdFwiXSA9IGZ1bmN0aW9uKGZvcm1zLCBlbCwgcGFyZW50UGF0aCl7XHJcbi8vICAgcmV0dXJuIGZvcm1zLnJlbmRlckZpZWxkR3JvdXBIVE1MKGVsLCBbXHJcbi8vICAgICBgPHNlbGVjdC10cmVlIG5hbWU9XCIke2VsLm5hbWV9XCJcclxuLy8gICAgICAgW2VsXSA9IFwiJHtmb3Jtcy5yZWZhY3RvckF0dHJOYW1lKCd0aGlzLmZpZWxkcy4nICsgZWwuX25hbWUpfVwiXHJcbi8vICAgICAgIChvbkNoYW5nZSk9XCJ0aGlzLmV2ZW50cy5jaGFuZ2UuYXBwbHkobnVsbCxhcmd1bWVudHMpXCJcclxuLy8gICAgICAgWyh2YWx1ZSldPSBcIiR7Zm9ybXMucmVmYWN0b3JBdHRyTmFtZSgndGhpcy5kYXRhLicgKyBlbC5fbmFtZSl9XCJcclxuLy8gICAgICAgcGxhY2Vob2xkZXI9XCIke2VsLnBsYWNlaG9sZGVyfVwiXHJcbi8vICAgICAgIFtpdGVtc10gPSBcIiR7Zm9ybXMucmVmYWN0b3JBdHRyTmFtZSgndGhpcy5maWVsZHMuJyArIGVsLl9uYW1lICsgJy5pdGVtcycpfVwiPlxyXG4vLyAgICAgPC9zZWxlY3QtdHJlZT5gXHJcbi8vICAgXSk7XHJcbi8vIH1cclxuIiwiLyogKGlnbm9yZWQpICovIl0sInNvdXJjZVJvb3QiOiIifQ==